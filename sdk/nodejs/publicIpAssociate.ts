// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Associates an existing public IP to a network interface. This is useful for situations where you have a pre-allocated public IP or unable to use the `stackit.PublicIp` resource to create a new public IP. Must have a `region` specified in the provider configuration.
 *
 * !> The `stackit.PublicIpAssociate` resource should not be used together with the `stackit.PublicIp` resource for the same public IP or for the same network interface.
 * Using both resources together for the same public IP or network interface WILL lead to conflicts, as they both have control of the public IP and network interface association.
 *
 * ## Example Usage
 */
export class PublicIpAssociate extends pulumi.CustomResource {
    /**
     * Get an existing PublicIpAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublicIpAssociateState, opts?: pulumi.CustomResourceOptions): PublicIpAssociate {
        return new PublicIpAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/publicIpAssociate:PublicIpAssociate';

    /**
     * Returns true if the given object is an instance of PublicIpAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PublicIpAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PublicIpAssociate.__pulumiType;
    }

    /**
     * The IP address.
     */
    public /*out*/ readonly ip!: pulumi.Output<string>;
    /**
     * The ID of the network interface (or virtual IP) to which the public IP should be attached to.
     */
    public readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the public IP is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The public IP ID.
     */
    public readonly publicIpId!: pulumi.Output<string>;

    /**
     * Create a PublicIpAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PublicIpAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublicIpAssociateArgs | PublicIpAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublicIpAssociateState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["publicIpId"] = state ? state.publicIpId : undefined;
        } else {
            const args = argsOrState as PublicIpAssociateArgs | undefined;
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.publicIpId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicIpId'");
            }
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["publicIpId"] = args ? args.publicIpId : undefined;
            resourceInputs["ip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PublicIpAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PublicIpAssociate resources.
 */
export interface PublicIpAssociateState {
    /**
     * The IP address.
     */
    ip?: pulumi.Input<string>;
    /**
     * The ID of the network interface (or virtual IP) to which the public IP should be attached to.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the public IP is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The public IP ID.
     */
    publicIpId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PublicIpAssociate resource.
 */
export interface PublicIpAssociateArgs {
    /**
     * The ID of the network interface (or virtual IP) to which the public IP should be attached to.
     */
    networkInterfaceId: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the public IP is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The public IP ID.
     */
    publicIpId: pulumi.Input<string>;
}
