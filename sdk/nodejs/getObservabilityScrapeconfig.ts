// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Observability scrape config data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getObservabilityScrapeconfig(args: GetObservabilityScrapeconfigArgs, opts?: pulumi.InvokeOptions): Promise<GetObservabilityScrapeconfigResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig", {
        "instanceId": args.instanceId,
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getObservabilityScrapeconfig.
 */
export interface GetObservabilityScrapeconfigArgs {
    /**
     * Observability instance ID to which the scraping job is associated.
     */
    instanceId: string;
    /**
     * Specifies the name of the scraping job
     */
    name: string;
    /**
     * STACKIT project ID to which the scraping job is associated.
     */
    projectId: string;
}

/**
 * A collection of values returned by getObservabilityScrapeconfig.
 */
export interface GetObservabilityScrapeconfigResult {
    /**
     * A basic authentication block.
     */
    readonly basicAuth: outputs.GetObservabilityScrapeconfigBasicAuth;
    readonly id: string;
    /**
     * Observability instance ID to which the scraping job is associated.
     */
    readonly instanceId: string;
    /**
     * Specifies the job scraping url path.
     */
    readonly metricsPath: string;
    /**
     * Specifies the name of the scraping job
     */
    readonly name: string;
    /**
     * STACKIT project ID to which the scraping job is associated.
     */
    readonly projectId: string;
    /**
     * A SAML2 configuration block.
     */
    readonly saml2: outputs.GetObservabilityScrapeconfigSaml2;
    /**
     * Specifies the scrape sample limit.
     */
    readonly sampleLimit: number;
    /**
     * Specifies the http scheme.
     */
    readonly scheme: string;
    /**
     * Specifies the scrape interval as duration string.
     */
    readonly scrapeInterval: string;
    /**
     * Specifies the scrape timeout as duration string.
     */
    readonly scrapeTimeout: string;
    /**
     * The targets list (specified by the static config).
     */
    readonly targets: outputs.GetObservabilityScrapeconfigTarget[];
}
/**
 * Observability scrape config data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getObservabilityScrapeconfigOutput(args: GetObservabilityScrapeconfigOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetObservabilityScrapeconfigResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig", {
        "instanceId": args.instanceId,
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getObservabilityScrapeconfig.
 */
export interface GetObservabilityScrapeconfigOutputArgs {
    /**
     * Observability instance ID to which the scraping job is associated.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the name of the scraping job
     */
    name: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the scraping job is associated.
     */
    projectId: pulumi.Input<string>;
}
