// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Security group rule resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class SecurityGroupRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupRuleState, opts?: pulumi.CustomResourceOptions): SecurityGroupRule {
        return new SecurityGroupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/securityGroupRule:SecurityGroupRule';

    /**
     * Returns true if the given object is an instance of SecurityGroupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupRule.__pulumiType;
    }

    /**
     * The rule description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
     */
    declare public readonly direction: pulumi.Output<string>;
    /**
     * The ethertype which the rule should match.
     */
    declare public readonly etherType: pulumi.Output<string>;
    /**
     * ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
     */
    declare public readonly icmpParameters: pulumi.Output<outputs.SecurityGroupRuleIcmpParameters>;
    /**
     * The remote IP range which the rule should match.
     */
    declare public readonly ipRange: pulumi.Output<string | undefined>;
    /**
     * The range of ports. This should only be provided if the protocol is not ICMP.
     */
    declare public readonly portRange: pulumi.Output<outputs.SecurityGroupRulePortRange>;
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The internet protocol which the rule should match.
     */
    declare public readonly protocol: pulumi.Output<outputs.SecurityGroupRuleProtocol>;
    /**
     * The remote security group which the rule should match.
     */
    declare public readonly remoteSecurityGroupId: pulumi.Output<string | undefined>;
    /**
     * The security group ID.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * The security group rule ID.
     */
    declare public /*out*/ readonly securityGroupRuleId: pulumi.Output<string>;

    /**
     * Create a SecurityGroupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupRuleArgs | SecurityGroupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupRuleState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["etherType"] = state?.etherType;
            resourceInputs["icmpParameters"] = state?.icmpParameters;
            resourceInputs["ipRange"] = state?.ipRange;
            resourceInputs["portRange"] = state?.portRange;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["remoteSecurityGroupId"] = state?.remoteSecurityGroupId;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["securityGroupRuleId"] = state?.securityGroupRuleId;
        } else {
            const args = argsOrState as SecurityGroupRuleArgs | undefined;
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["etherType"] = args?.etherType;
            resourceInputs["icmpParameters"] = args?.icmpParameters;
            resourceInputs["ipRange"] = args?.ipRange;
            resourceInputs["portRange"] = args?.portRange;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["remoteSecurityGroupId"] = args?.remoteSecurityGroupId;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["securityGroupRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroupRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroupRule resources.
 */
export interface SecurityGroupRuleState {
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
     */
    direction?: pulumi.Input<string>;
    /**
     * The ethertype which the rule should match.
     */
    etherType?: pulumi.Input<string>;
    /**
     * ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
     */
    icmpParameters?: pulumi.Input<inputs.SecurityGroupRuleIcmpParameters>;
    /**
     * The remote IP range which the rule should match.
     */
    ipRange?: pulumi.Input<string>;
    /**
     * The range of ports. This should only be provided if the protocol is not ICMP.
     */
    portRange?: pulumi.Input<inputs.SecurityGroupRulePortRange>;
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The internet protocol which the rule should match.
     */
    protocol?: pulumi.Input<inputs.SecurityGroupRuleProtocol>;
    /**
     * The remote security group which the rule should match.
     */
    remoteSecurityGroupId?: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The security group rule ID.
     */
    securityGroupRuleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityGroupRule resource.
 */
export interface SecurityGroupRuleArgs {
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
     */
    direction: pulumi.Input<string>;
    /**
     * The ethertype which the rule should match.
     */
    etherType?: pulumi.Input<string>;
    /**
     * ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
     */
    icmpParameters?: pulumi.Input<inputs.SecurityGroupRuleIcmpParameters>;
    /**
     * The remote IP range which the rule should match.
     */
    ipRange?: pulumi.Input<string>;
    /**
     * The range of ports. This should only be provided if the protocol is not ICMP.
     */
    portRange?: pulumi.Input<inputs.SecurityGroupRulePortRange>;
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The internet protocol which the rule should match.
     */
    protocol?: pulumi.Input<inputs.SecurityGroupRuleProtocol>;
    /**
     * The remote security group which the rule should match.
     */
    remoteSecurityGroupId?: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId: pulumi.Input<string>;
}
