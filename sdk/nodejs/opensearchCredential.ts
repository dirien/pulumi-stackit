// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * OpenSearch credential resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class OpensearchCredential extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchCredentialState, opts?: pulumi.CustomResourceOptions): OpensearchCredential {
        return new OpensearchCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/opensearchCredential:OpensearchCredential';

    /**
     * Returns true if the given object is an instance of OpensearchCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchCredential.__pulumiType;
    }

    /**
     * The credential's ID.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    public /*out*/ readonly host!: pulumi.Output<string>;
    public /*out*/ readonly hosts!: pulumi.Output<string[]>;
    /**
     * ID of the OpenSearch instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly scheme!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a OpensearchCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchCredentialArgs | OpensearchCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchCredentialState | undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as OpensearchCredentialArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["scheme"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "uri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OpensearchCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpensearchCredential resources.
 */
export interface OpensearchCredentialState {
    /**
     * The credential's ID.
     */
    credentialId?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the OpenSearch instance.
     */
    instanceId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    scheme?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpensearchCredential resource.
 */
export interface OpensearchCredentialArgs {
    /**
     * ID of the OpenSearch instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
}
