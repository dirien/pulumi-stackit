// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Postgres Flex instance resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class PostgresflexInstance extends pulumi.CustomResource {
    /**
     * Get an existing PostgresflexInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostgresflexInstanceState, opts?: pulumi.CustomResourceOptions): PostgresflexInstance {
        return new PostgresflexInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/postgresflexInstance:PostgresflexInstance';

    /**
     * Returns true if the given object is an instance of PostgresflexInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PostgresflexInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostgresflexInstance.__pulumiType;
    }

    /**
     * The Access Control List (ACL) for the PostgresFlex instance.
     */
    public readonly acls!: pulumi.Output<string[]>;
    public readonly backupSchedule!: pulumi.Output<string>;
    public readonly flavor!: pulumi.Output<outputs.PostgresflexInstanceFlavor>;
    /**
     * ID of the PostgresFlex instance.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Instance name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly replicas!: pulumi.Output<number>;
    public readonly storage!: pulumi.Output<outputs.PostgresflexInstanceStorage>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a PostgresflexInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresflexInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostgresflexInstanceArgs | PostgresflexInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostgresflexInstanceState | undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["backupSchedule"] = state ? state.backupSchedule : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PostgresflexInstanceArgs | undefined;
            if ((!args || args.acls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acls'");
            }
            if ((!args || args.backupSchedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupSchedule'");
            }
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["backupSchedule"] = args ? args.backupSchedule : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["instanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PostgresflexInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PostgresflexInstance resources.
 */
export interface PostgresflexInstanceState {
    /**
     * The Access Control List (ACL) for the PostgresFlex instance.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    backupSchedule?: pulumi.Input<string>;
    flavor?: pulumi.Input<inputs.PostgresflexInstanceFlavor>;
    /**
     * ID of the PostgresFlex instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    storage?: pulumi.Input<inputs.PostgresflexInstanceStorage>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PostgresflexInstance resource.
 */
export interface PostgresflexInstanceArgs {
    /**
     * The Access Control List (ACL) for the PostgresFlex instance.
     */
    acls: pulumi.Input<pulumi.Input<string>[]>;
    backupSchedule: pulumi.Input<string>;
    flavor: pulumi.Input<inputs.PostgresflexInstanceFlavor>;
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    replicas: pulumi.Input<number>;
    storage: pulumi.Input<inputs.PostgresflexInstanceStorage>;
    version: pulumi.Input<string>;
}
