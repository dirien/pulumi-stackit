// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Load Balancer data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getLoadbalancer(args: GetLoadbalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadbalancerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getLoadbalancer:getLoadbalancer", {
        "name": args.name,
        "projectId": args.projectId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerArgs {
    /**
     * Load balancer name.
     */
    name: string;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    projectId: string;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: string;
}

/**
 * A collection of values returned by getLoadbalancer.
 */
export interface GetLoadbalancerResult {
    /**
     * External Load Balancer IP address where this Load Balancer is exposed.
     */
    readonly externalAddress: string;
    readonly id: string;
    /**
     * List of all listeners which will accept traffic. Limited to 20.
     */
    readonly listeners: outputs.GetLoadbalancerListener[];
    /**
     * Load balancer name.
     */
    readonly name: string;
    /**
     * List of networks that listeners and targets reside in.
     */
    readonly networks: outputs.GetLoadbalancerNetwork[];
    /**
     * Defines any optional functionality you want to have enabled on your load balancer.
     */
    readonly options: outputs.GetLoadbalancerOptions;
    /**
     * Transient private Load Balancer IP address. It can change any time.
     */
    readonly privateAddress: string;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    readonly projectId: string;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    readonly region?: string;
    /**
     * List of all target pools which will be used in the Load Balancer. Limited to 20.
     */
    readonly targetPools: outputs.GetLoadbalancerTargetPool[];
}
/**
 * Load Balancer data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getLoadbalancerOutput(args: GetLoadbalancerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLoadbalancerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getLoadbalancer:getLoadbalancer", {
        "name": args.name,
        "projectId": args.projectId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerOutputArgs {
    /**
     * Load balancer name.
     */
    name: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
}
