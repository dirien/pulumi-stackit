// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Redis instance resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class RedisInstance extends pulumi.CustomResource {
    /**
     * Get an existing RedisInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisInstanceState, opts?: pulumi.CustomResourceOptions): RedisInstance {
        return new RedisInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/redisInstance:RedisInstance';

    /**
     * Returns true if the given object is an instance of RedisInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisInstance.__pulumiType;
    }

    declare public /*out*/ readonly cfGuid: pulumi.Output<string>;
    declare public /*out*/ readonly cfOrganizationGuid: pulumi.Output<string>;
    declare public /*out*/ readonly cfSpaceGuid: pulumi.Output<string>;
    declare public /*out*/ readonly dashboardUrl: pulumi.Output<string>;
    declare public /*out*/ readonly imageUrl: pulumi.Output<string>;
    /**
     * ID of the Redis instance.
     */
    declare public /*out*/ readonly instanceId: pulumi.Output<string>;
    /**
     * Instance name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly parameters: pulumi.Output<outputs.RedisInstanceParameters>;
    /**
     * The selected plan ID.
     */
    declare public /*out*/ readonly planId: pulumi.Output<string>;
    /**
     * The selected plan name.
     */
    declare public readonly planName: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The service version.
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a RedisInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisInstanceArgs | RedisInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisInstanceState | undefined;
            resourceInputs["cfGuid"] = state?.cfGuid;
            resourceInputs["cfOrganizationGuid"] = state?.cfOrganizationGuid;
            resourceInputs["cfSpaceGuid"] = state?.cfSpaceGuid;
            resourceInputs["dashboardUrl"] = state?.dashboardUrl;
            resourceInputs["imageUrl"] = state?.imageUrl;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["planId"] = state?.planId;
            resourceInputs["planName"] = state?.planName;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as RedisInstanceArgs | undefined;
            if (args?.planName === undefined && !opts.urn) {
                throw new Error("Missing required property 'planName'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["planName"] = args?.planName;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["version"] = args?.version;
            resourceInputs["cfGuid"] = undefined /*out*/;
            resourceInputs["cfOrganizationGuid"] = undefined /*out*/;
            resourceInputs["cfSpaceGuid"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["imageUrl"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["planId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedisInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RedisInstance resources.
 */
export interface RedisInstanceState {
    cfGuid?: pulumi.Input<string>;
    cfOrganizationGuid?: pulumi.Input<string>;
    cfSpaceGuid?: pulumi.Input<string>;
    dashboardUrl?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    /**
     * ID of the Redis instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.RedisInstanceParameters>;
    /**
     * The selected plan ID.
     */
    planId?: pulumi.Input<string>;
    /**
     * The selected plan name.
     */
    planName?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The service version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisInstance resource.
 */
export interface RedisInstanceArgs {
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.RedisInstanceParameters>;
    /**
     * The selected plan name.
     */
    planName: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The service version.
     */
    version: pulumi.Input<string>;
}
