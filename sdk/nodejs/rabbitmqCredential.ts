// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * RabbitMQ credential resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class RabbitmqCredential extends pulumi.CustomResource {
    /**
     * Get an existing RabbitmqCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RabbitmqCredentialState, opts?: pulumi.CustomResourceOptions): RabbitmqCredential {
        return new RabbitmqCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/rabbitmqCredential:RabbitmqCredential';

    /**
     * Returns true if the given object is an instance of RabbitmqCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RabbitmqCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RabbitmqCredential.__pulumiType;
    }

    /**
     * The credential's ID.
     */
    declare public /*out*/ readonly credentialId: pulumi.Output<string>;
    declare public /*out*/ readonly host: pulumi.Output<string>;
    declare public /*out*/ readonly hosts: pulumi.Output<string[]>;
    declare public /*out*/ readonly httpApiUri: pulumi.Output<string>;
    declare public /*out*/ readonly httpApiUris: pulumi.Output<string[]>;
    /**
     * ID of the RabbitMQ instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    declare public /*out*/ readonly management: pulumi.Output<string>;
    declare public /*out*/ readonly password: pulumi.Output<string>;
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    declare public /*out*/ readonly uri: pulumi.Output<string>;
    declare public /*out*/ readonly uris: pulumi.Output<string[]>;
    declare public /*out*/ readonly username: pulumi.Output<string>;

    /**
     * Create a RabbitmqCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RabbitmqCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RabbitmqCredentialArgs | RabbitmqCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RabbitmqCredentialState | undefined;
            resourceInputs["credentialId"] = state?.credentialId;
            resourceInputs["host"] = state?.host;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["httpApiUri"] = state?.httpApiUri;
            resourceInputs["httpApiUris"] = state?.httpApiUris;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["management"] = state?.management;
            resourceInputs["password"] = state?.password;
            resourceInputs["port"] = state?.port;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["uri"] = state?.uri;
            resourceInputs["uris"] = state?.uris;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as RabbitmqCredentialArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["httpApiUri"] = undefined /*out*/;
            resourceInputs["httpApiUris"] = undefined /*out*/;
            resourceInputs["management"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["uris"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "uri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RabbitmqCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RabbitmqCredential resources.
 */
export interface RabbitmqCredentialState {
    /**
     * The credential's ID.
     */
    credentialId?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    httpApiUri?: pulumi.Input<string>;
    httpApiUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the RabbitMQ instance.
     */
    instanceId?: pulumi.Input<string>;
    management?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    uris?: pulumi.Input<pulumi.Input<string>[]>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RabbitmqCredential resource.
 */
export interface RabbitmqCredentialArgs {
    /**
     * ID of the RabbitMQ instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
}
