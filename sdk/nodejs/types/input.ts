// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CdnDistributionConfig {
    /**
     * The configured backend for the distribution
     */
    backend: pulumi.Input<inputs.CdnDistributionConfigBackend>;
    /**
     * The configured countries where distribution of content is blocked
     */
    blockedCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
     */
    optimizer?: pulumi.Input<inputs.CdnDistributionConfigOptimizer>;
    /**
     * The configured regions where content will be hosted
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnDistributionConfigBackend {
    /**
     * The configured origin request headers for the backend
     */
    originRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The configured backend type for the distribution
     */
    originUrl: pulumi.Input<string>;
    /**
     * The configured backend type. Supported values are: `http`.
     */
    type: pulumi.Input<string>;
}

export interface CdnDistributionConfigOptimizer {
    enabled?: pulumi.Input<boolean>;
}

export interface CdnDistributionDomain {
    /**
     * List of domain errors
     */
    errors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the domain
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the domain
     */
    status?: pulumi.Input<string>;
    /**
     * The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
     */
    type?: pulumi.Input<string>;
}

export interface ImageChecksum {
    /**
     * Algorithm for the checksum of the image data.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Hexdigest of the checksum of the image data.
     */
    digest?: pulumi.Input<string>;
}

export interface ImageConfig {
    /**
     * Enables the BIOS bootmenu.
     */
    bootMenu?: pulumi.Input<boolean>;
    /**
     * Sets CDROM bus controller type.
     */
    cdromBus?: pulumi.Input<string>;
    /**
     * Sets Disk bus controller type.
     */
    diskBus?: pulumi.Input<string>;
    /**
     * Sets virtual network interface model.
     */
    nicModel?: pulumi.Input<string>;
    /**
     * Enables operating system specific optimizations.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * Operating system distribution.
     */
    operatingSystemDistro?: pulumi.Input<string>;
    /**
     * Version of the operating system.
     */
    operatingSystemVersion?: pulumi.Input<string>;
    /**
     * Sets the device bus when the image is used as a rescue image.
     */
    rescueBus?: pulumi.Input<string>;
    /**
     * Sets the device when the image is used as a rescue image.
     */
    rescueDevice?: pulumi.Input<string>;
    /**
     * Enables Secure Boot.
     */
    secureBoot?: pulumi.Input<boolean>;
    /**
     * Enables UEFI boot.
     */
    uefi?: pulumi.Input<boolean>;
    /**
     * Sets Graphic device model.
     */
    videoModel?: pulumi.Input<string>;
    /**
     * Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
     */
    virtioScsi?: pulumi.Input<boolean>;
}

export interface LoadbalancerListener {
    displayName?: pulumi.Input<string>;
    /**
     * Port number where we listen for traffic.
     */
    port: pulumi.Input<number>;
    /**
     * Protocol is the highest network protocol we understand to load balance. Supported values are: `PROTOCOL_UNSPECIFIED`, `PROTOCOL_TCP`, `PROTOCOL_UDP`, `PROTOCOL_TCP_PROXY`, `PROTOCOL_TLS_PASSTHROUGH`.
     */
    protocol: pulumi.Input<string>;
    /**
     * A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
     */
    serverNameIndicators?: pulumi.Input<pulumi.Input<inputs.LoadbalancerListenerServerNameIndicator>[]>;
    /**
     * Reference target pool by target pool name.
     */
    targetPool: pulumi.Input<string>;
}

export interface LoadbalancerListenerServerNameIndicator {
    /**
     * A domain name to match in order to pass TLS traffic to the target pool in the current listener
     */
    name?: pulumi.Input<string>;
}

export interface LoadbalancerNetwork {
    /**
     * Openstack network ID.
     */
    networkId: pulumi.Input<string>;
    /**
     * The role defines how the load balancer is using the network. Supported values are: `ROLE_UNSPECIFIED`, `ROLE_LISTENERS_AND_TARGETS`, `ROLE_LISTENERS`, `ROLE_TARGETS`.
     */
    role: pulumi.Input<string>;
}

export interface LoadbalancerOptions {
    /**
     * Load Balancer is accessible only from an IP address in this range.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.
     */
    observability?: pulumi.Input<inputs.LoadbalancerOptionsObservability>;
    /**
     * If true, Load Balancer is accessible only via a private network IP address.
     */
    privateNetworkOnly?: pulumi.Input<boolean>;
}

export interface LoadbalancerOptionsObservability {
    /**
     * Observability logs configuration. Not changeable after creation.
     */
    logs?: pulumi.Input<inputs.LoadbalancerOptionsObservabilityLogs>;
    /**
     * Observability metrics configuration. Not changeable after creation.
     */
    metrics?: pulumi.Input<inputs.LoadbalancerOptionsObservabilityMetrics>;
}

export interface LoadbalancerOptionsObservabilityLogs {
    /**
     * Credentials reference for logs. Not changeable after creation.
     */
    credentialsRef?: pulumi.Input<string>;
    /**
     * Credentials reference for logs. Not changeable after creation.
     */
    pushUrl?: pulumi.Input<string>;
}

export interface LoadbalancerOptionsObservabilityMetrics {
    /**
     * Credentials reference for metrics. Not changeable after creation.
     */
    credentialsRef?: pulumi.Input<string>;
    /**
     * Credentials reference for metrics. Not changeable after creation.
     */
    pushUrl?: pulumi.Input<string>;
}

export interface LoadbalancerTargetPool {
    activeHealthCheck?: pulumi.Input<inputs.LoadbalancerTargetPoolActiveHealthCheck>;
    /**
     * Target pool name.
     */
    name: pulumi.Input<string>;
    /**
     * Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
     */
    sessionPersistence?: pulumi.Input<inputs.LoadbalancerTargetPoolSessionPersistence>;
    /**
     * Identical port number where each target listens for traffic.
     */
    targetPort: pulumi.Input<number>;
    /**
     * List of all targets which will be used in the pool. Limited to 1000.
     */
    targets: pulumi.Input<pulumi.Input<inputs.LoadbalancerTargetPoolTarget>[]>;
}

export interface LoadbalancerTargetPoolActiveHealthCheck {
    /**
     * Healthy threshold of the health checking.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * Interval duration of health checking in seconds.
     */
    interval?: pulumi.Input<string>;
    /**
     * Interval duration threshold of the health checking in seconds.
     */
    intervalJitter?: pulumi.Input<string>;
    /**
     * Active health checking timeout duration in seconds.
     */
    timeout?: pulumi.Input<string>;
    /**
     * Unhealthy threshold of the health checking.
     */
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface LoadbalancerTargetPoolSessionPersistence {
    /**
     * If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
     */
    useSourceIpAddress?: pulumi.Input<boolean>;
}

export interface LoadbalancerTargetPoolTarget {
    /**
     * Target display name
     */
    displayName: pulumi.Input<string>;
    /**
     * Target IP
     */
    ip: pulumi.Input<string>;
}

export interface LogmeInstanceParameters {
    /**
     * Enable monitoring.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    fluentdTcp?: pulumi.Input<number>;
    fluentdTls?: pulumi.Input<number>;
    fluentdTlsCiphers?: pulumi.Input<string>;
    fluentdTlsMaxVersion?: pulumi.Input<string>;
    fluentdTlsMinVersion?: pulumi.Input<string>;
    fluentdTlsVersion?: pulumi.Input<string>;
    fluentdUdp?: pulumi.Input<number>;
    /**
     * If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
     */
    graphite?: pulumi.Input<string>;
    /**
     * Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
     */
    ismDeletionAfter?: pulumi.Input<string>;
    ismJitter?: pulumi.Input<number>;
    /**
     * Jitter of the execution time.
     */
    ismJobInterval?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
     */
    javaHeapspace?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
     */
    javaMaxmetaspace?: pulumi.Input<number>;
    /**
     * The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
     */
    maxDiskThreshold?: pulumi.Input<number>;
    /**
     * The frequency in seconds at which metrics are emitted (in seconds).
     */
    metricsFrequency?: pulumi.Input<number>;
    /**
     * The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
     */
    metricsPrefix?: pulumi.Input<string>;
    /**
     * The ID of the STACKIT monitoring instance.
     */
    monitoringInstanceId?: pulumi.Input<string>;
    opensearchTlsCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    opensearchTlsProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
     */
    sgwAcl?: pulumi.Input<string>;
    /**
     * List of syslog servers to send logs to.
     */
    syslogs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MariadbInstanceParameters {
    /**
     * Enable monitoring.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
     */
    graphite?: pulumi.Input<string>;
    /**
     * The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
     */
    maxDiskThreshold?: pulumi.Input<number>;
    /**
     * The frequency in seconds at which metrics are emitted.
     */
    metricsFrequency?: pulumi.Input<number>;
    /**
     * The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
     */
    metricsPrefix?: pulumi.Input<string>;
    /**
     * The ID of the STACKIT monitoring instance. Monitoring instances with the plan "Observability-Monitoring-Starter" are not supported.
     */
    monitoringInstanceId?: pulumi.Input<string>;
    /**
     * Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
     */
    sgwAcl?: pulumi.Input<string>;
    /**
     * List of syslog servers to send logs to.
     */
    syslogs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MongodbflexInstanceFlavor {
    cpu: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ram: pulumi.Input<number>;
}

export interface MongodbflexInstanceOptions {
    /**
     * The number of days that daily backups will be retained.
     */
    dailySnapshotRetentionDays?: pulumi.Input<number>;
    /**
     * The number of months that monthly backups will be retained.
     */
    monthlySnapshotRetentionMonths?: pulumi.Input<number>;
    /**
     * The number of hours back in time the point-in-time recovery feature will be able to recover.
     */
    pointInTimeWindowHours: pulumi.Input<number>;
    /**
     * The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
     */
    snapshotRetentionDays?: pulumi.Input<number>;
    /**
     * Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.
     */
    type: pulumi.Input<string>;
    /**
     * The number of weeks that weekly backups will be retained.
     */
    weeklySnapshotRetentionWeeks?: pulumi.Input<number>;
}

export interface MongodbflexInstanceStorage {
    class: pulumi.Input<string>;
    size: pulumi.Input<number>;
}

export interface NetworkAreaNetworkRange {
    networkRangeId?: pulumi.Input<string>;
    /**
     * Classless Inter-Domain Routing (CIDR).
     */
    prefix: pulumi.Input<string>;
}

export interface ObservabilityAlertgroupRule {
    /**
     * The name of the alert rule. Is the identifier and must be unique in the group.
     */
    alert: pulumi.Input<string>;
    /**
     * A map of key:value. Annotations to add or overwrite for each alert
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
     */
    expression: pulumi.Input<string>;
    /**
     * Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
     */
    for?: pulumi.Input<string>;
    /**
     * A map of key:value. Labels to add or overwrite for each alert
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ObservabilityInstanceAlertConfig {
    /**
     * Global configuration for the alerts.
     */
    global?: pulumi.Input<inputs.ObservabilityInstanceAlertConfigGlobal>;
    /**
     * List of alert receivers.
     */
    receivers: pulumi.Input<pulumi.Input<inputs.ObservabilityInstanceAlertConfigReceiver>[]>;
    /**
     * Route configuration for the alerts.
     */
    route: pulumi.Input<inputs.ObservabilityInstanceAlertConfigRoute>;
}

export interface ObservabilityInstanceAlertConfigGlobal {
    /**
     * The API key for OpsGenie.
     */
    opsgenieApiKey?: pulumi.Input<string>;
    /**
     * The host to send OpsGenie API requests to. Must be a valid URL
     */
    opsgenieApiUrl?: pulumi.Input<string>;
    /**
     * The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
     */
    resolveTimeout?: pulumi.Input<string>;
    /**
     * SMTP authentication information. Must be a valid email address
     */
    smtpAuthIdentity?: pulumi.Input<string>;
    /**
     * SMTP Auth using LOGIN and PLAIN.
     */
    smtpAuthPassword?: pulumi.Input<string>;
    /**
     * SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
     */
    smtpAuthUsername?: pulumi.Input<string>;
    /**
     * The default SMTP From header field. Must be a valid email address
     */
    smtpFrom?: pulumi.Input<string>;
    /**
     * The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
     */
    smtpSmartHost?: pulumi.Input<string>;
}

export interface ObservabilityInstanceAlertConfigReceiver {
    /**
     * List of email configurations.
     */
    emailConfigs?: pulumi.Input<pulumi.Input<inputs.ObservabilityInstanceAlertConfigReceiverEmailConfig>[]>;
    /**
     * Name of the receiver.
     */
    name: pulumi.Input<string>;
    /**
     * List of OpsGenie configurations.
     */
    opsgenieConfigs?: pulumi.Input<pulumi.Input<inputs.ObservabilityInstanceAlertConfigReceiverOpsgenieConfig>[]>;
    /**
     * List of Webhooks configurations.
     */
    webhooksConfigs?: pulumi.Input<pulumi.Input<inputs.ObservabilityInstanceAlertConfigReceiverWebhooksConfig>[]>;
}

export interface ObservabilityInstanceAlertConfigReceiverEmailConfig {
    /**
     * SMTP authentication information. Must be a valid email address
     */
    authIdentity?: pulumi.Input<string>;
    /**
     * SMTP authentication password.
     */
    authPassword?: pulumi.Input<string>;
    /**
     * SMTP authentication username.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * The sender email address. Must be a valid email address
     */
    from?: pulumi.Input<string>;
    /**
     * The SMTP host through which emails are sent.
     */
    smartHost?: pulumi.Input<string>;
    /**
     * The email address to send notifications to. Must be a valid email address
     */
    to?: pulumi.Input<string>;
}

export interface ObservabilityInstanceAlertConfigReceiverOpsgenieConfig {
    /**
     * The API key for OpsGenie.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The host to send OpsGenie API requests to. Must be a valid URL
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Priority of the alert. Possible values are: `P1`, `P2`, `P3`, `P4`, `P5`.
     */
    priority?: pulumi.Input<string>;
    /**
     * Comma separated list of tags attached to the notifications.
     */
    tags?: pulumi.Input<string>;
}

export interface ObservabilityInstanceAlertConfigReceiverWebhooksConfig {
    /**
     * Google Chat webhooks require special handling, set this to true if the webhook is for Google Chat.
     */
    googleChat?: pulumi.Input<boolean>;
    /**
     * Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
     */
    msTeams?: pulumi.Input<boolean>;
    /**
     * The endpoint to send HTTP POST requests to. Must be a valid URL
     */
    url?: pulumi.Input<string>;
}

export interface ObservabilityInstanceAlertConfigRoute {
    /**
     * The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
     */
    groupWait?: pulumi.Input<string>;
    /**
     * A set of equality matchers an alert has to fulfill to match the node.
     */
    match?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of regex-matchers an alert has to fulfill to match the node.
     */
    matchRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the receiver to route the alerts to.
     */
    receiver: pulumi.Input<string>;
    /**
     * How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
     */
    repeatInterval?: pulumi.Input<string>;
    /**
     * List of child routes.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.ObservabilityInstanceAlertConfigRouteRoute>[]>;
}

export interface ObservabilityInstanceAlertConfigRouteRoute {
    /**
     * The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
     */
    groupInterval?: pulumi.Input<string>;
    /**
     * How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
     */
    groupWait?: pulumi.Input<string>;
    /**
     * A set of equality matchers an alert has to fulfill to match the node.
     */
    match?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of regex-matchers an alert has to fulfill to match the node.
     */
    matchRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the receiver to route the alerts to.
     */
    receiver: pulumi.Input<string>;
    /**
     * How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
     */
    repeatInterval?: pulumi.Input<string>;
}

export interface ObservabilityLogalertgroupRule {
    /**
     * The name of the alert rule. Is the identifier and must be unique in the group.
     */
    alert: pulumi.Input<string>;
    /**
     * A map of key:value. Annotations to add or overwrite for each alert
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
     */
    expression: pulumi.Input<string>;
    /**
     * Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
     */
    for?: pulumi.Input<string>;
    /**
     * A map of key:value. Labels to add or overwrite for each alert
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ObservabilityScrapeconfigBasicAuth {
    /**
     * Specifies basic auth password.
     */
    password: pulumi.Input<string>;
    /**
     * Specifies basic auth username.
     */
    username: pulumi.Input<string>;
}

export interface ObservabilityScrapeconfigSaml2 {
    /**
     * Specifies if URL parameters are enabled. Defaults to `true`
     */
    enableUrlParameters?: pulumi.Input<boolean>;
}

export interface ObservabilityScrapeconfigTarget {
    /**
     * Specifies labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies target URLs.
     */
    urls: pulumi.Input<pulumi.Input<string>[]>;
}

export interface OpensearchInstanceParameters {
    /**
     * Enable monitoring.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
     */
    graphite?: pulumi.Input<string>;
    /**
     * The garbage collector to use for OpenSearch.
     */
    javaGarbageCollector?: pulumi.Input<string>;
    /**
     * The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
     */
    javaHeapspace?: pulumi.Input<number>;
    /**
     * The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
     */
    javaMaxmetaspace?: pulumi.Input<number>;
    /**
     * The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
     */
    maxDiskThreshold?: pulumi.Input<number>;
    /**
     * The frequency in seconds at which metrics are emitted (in seconds).
     */
    metricsFrequency?: pulumi.Input<number>;
    /**
     * The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
     */
    metricsPrefix?: pulumi.Input<string>;
    /**
     * The ID of the STACKIT monitoring instance.
     */
    monitoringInstanceId?: pulumi.Input<string>;
    /**
     * List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
     */
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
     */
    sgwAcl?: pulumi.Input<string>;
    /**
     * List of syslog servers to send logs to.
     */
    syslogs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of TLS ciphers to use.
     */
    tlsCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TLS protocol to use.
     */
    tlsProtocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PostgresflexInstanceFlavor {
    cpu: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ram: pulumi.Input<number>;
}

export interface PostgresflexInstanceStorage {
    class: pulumi.Input<string>;
    size: pulumi.Input<number>;
}

export interface RabbitmqInstanceParameters {
    /**
     * The timeout in milliseconds for the consumer.
     */
    consumerTimeout?: pulumi.Input<number>;
    /**
     * Enable monitoring.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
     */
    graphite?: pulumi.Input<string>;
    /**
     * The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
     */
    maxDiskThreshold?: pulumi.Input<number>;
    /**
     * The frequency in seconds at which metrics are emitted.
     */
    metricsFrequency?: pulumi.Input<number>;
    /**
     * The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
     */
    metricsPrefix?: pulumi.Input<string>;
    /**
     * The ID of the STACKIT monitoring instance.
     */
    monitoringInstanceId?: pulumi.Input<string>;
    /**
     * List of plugins to install. Must be a supported plugin name.
     */
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of roles to assign to the instance.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
     */
    sgwAcl?: pulumi.Input<string>;
    /**
     * List of syslog servers to send logs to.
     */
    syslogs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of TLS ciphers to use.
     */
    tlsCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TLS protocol to use.
     */
    tlsProtocols?: pulumi.Input<string>;
}

export interface RedisInstanceParameters {
    /**
     * The number of milliseconds after which the instance is considered down.
     */
    downAfterMilliseconds?: pulumi.Input<number>;
    /**
     * Enable monitoring.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * The failover timeout in milliseconds.
     */
    failoverTimeout?: pulumi.Input<number>;
    /**
     * Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
     */
    graphite?: pulumi.Input<string>;
    /**
     * The lazy eviction enablement (yes or no).
     */
    lazyfreeLazyEviction?: pulumi.Input<string>;
    /**
     * The lazy expire enablement (yes or no).
     */
    lazyfreeLazyExpire?: pulumi.Input<string>;
    /**
     * The Lua time limit.
     */
    luaTimeLimit?: pulumi.Input<number>;
    /**
     * The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
     */
    maxDiskThreshold?: pulumi.Input<number>;
    /**
     * The maximum number of clients.
     */
    maxclients?: pulumi.Input<number>;
    /**
     * The policy to handle the maximum memory (volatile-lru, noeviction, etc).
     */
    maxmemoryPolicy?: pulumi.Input<string>;
    /**
     * The maximum memory samples.
     */
    maxmemorySamples?: pulumi.Input<number>;
    /**
     * The frequency in seconds at which metrics are emitted.
     */
    metricsFrequency?: pulumi.Input<number>;
    /**
     * The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
     */
    metricsPrefix?: pulumi.Input<string>;
    /**
     * The minimum replicas maximum lag.
     */
    minReplicasMaxLag?: pulumi.Input<number>;
    /**
     * The ID of the STACKIT monitoring instance.
     */
    monitoringInstanceId?: pulumi.Input<string>;
    /**
     * The notify keyspace events.
     */
    notifyKeyspaceEvents?: pulumi.Input<string>;
    /**
     * Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
     */
    sgwAcl?: pulumi.Input<string>;
    /**
     * The snapshot configuration.
     */
    snapshot?: pulumi.Input<string>;
    /**
     * List of syslog servers to send logs to.
     */
    syslogs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of TLS ciphers to use.
     */
    tlsCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TLS cipher suites to use.
     */
    tlsCiphersuites?: pulumi.Input<string>;
    /**
     * TLS protocol to use.
     */
    tlsProtocols?: pulumi.Input<string>;
}

export interface RoutingTableRouteDestination {
    /**
     * CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
     */
    type: pulumi.Input<string>;
    /**
     * An CIDR string.
     */
    value: pulumi.Input<string>;
}

export interface RoutingTableRouteNextHop {
    /**
     * Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
     */
    type: pulumi.Input<string>;
    /**
     * Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
     */
    value?: pulumi.Input<string>;
}

export interface SecurityGroupRuleIcmpParameters {
    /**
     * ICMP code. Can be set if the protocol is ICMP.
     */
    code: pulumi.Input<number>;
    /**
     * ICMP type. Can be set if the protocol is ICMP.
     */
    type: pulumi.Input<number>;
}

export interface SecurityGroupRulePortRange {
    /**
     * The maximum port number. Should be greater or equal to the minimum.
     */
    max: pulumi.Input<number>;
    /**
     * The minimum port number. Should be less or equal to the maximum.
     */
    min: pulumi.Input<number>;
}

export interface SecurityGroupRuleProtocol {
    /**
     * The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol number which the rule should match. Either `name` or `number` must be provided.
     */
    number?: pulumi.Input<number>;
}

export interface ServerBackupScheduleBackupProperties {
    name: pulumi.Input<string>;
    retentionPeriod: pulumi.Input<number>;
    volumeIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServerBootVolume {
    /**
     * Delete the volume during the termination of the server. Only allowed when `sourceType` is `image`.
     */
    deleteOnTermination?: pulumi.Input<boolean>;
    /**
     * The ID of the boot volume
     */
    id?: pulumi.Input<string>;
    /**
     * The performance class of the server.
     */
    performanceClass?: pulumi.Input<string>;
    /**
     * The size of the boot volume in GB. Must be provided when `sourceType` is `image`.
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the source, either image ID or volume ID
     */
    sourceId: pulumi.Input<string>;
    /**
     * The type of the source. Supported values are: `volume`, `image`.
     */
    sourceType: pulumi.Input<string>;
}

export interface SkeClusterExtensions {
    /**
     * Cluster access control configuration.
     */
    acl?: pulumi.Input<inputs.SkeClusterExtensionsAcl>;
    /**
     * A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
     *
     * @deprecated Use observability instead.
     */
    argus?: pulumi.Input<inputs.SkeClusterExtensionsArgus>;
    /**
     * DNS extension configuration
     */
    dns?: pulumi.Input<inputs.SkeClusterExtensionsDns>;
    /**
     * A single observability block as defined below.
     */
    observability?: pulumi.Input<inputs.SkeClusterExtensionsObservability>;
}

export interface SkeClusterExtensionsAcl {
    /**
     * Specify a list of CIDRs to whitelist.
     */
    allowedCidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is ACL enabled?
     */
    enabled: pulumi.Input<boolean>;
}

export interface SkeClusterExtensionsArgus {
    /**
     * Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.
     */
    argusInstanceId?: pulumi.Input<string>;
    /**
     * Flag to enable/disable Argus extensions.
     */
    enabled: pulumi.Input<boolean>;
}

export interface SkeClusterExtensionsDns {
    /**
     * Flag to enable/disable DNS extensions
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SkeClusterExtensionsObservability {
    /**
     * Flag to enable/disable Observability extensions.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
     */
    instanceId?: pulumi.Input<string>;
}

export interface SkeClusterHibernation {
    /**
     * End time of hibernation in crontab syntax. E.g. `0 8 * * *` for waking up the cluster at 8am.
     */
    end: pulumi.Input<string>;
    /**
     * Start time of cluster hibernation in crontab syntax. E.g. `0 18 * * *` for starting everyday at 6pm.
     */
    start: pulumi.Input<string>;
    /**
     * Timezone name corresponding to a file in the IANA Time Zone database. i.e. `Europe/Berlin`.
     */
    timezone?: pulumi.Input<string>;
}

export interface SkeClusterMaintenance {
    /**
     * Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
     */
    enableKubernetesVersionUpdates?: pulumi.Input<boolean>;
    /**
     * Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
     */
    enableMachineImageVersionUpdates?: pulumi.Input<boolean>;
    /**
     * Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.
     */
    end: pulumi.Input<string>;
    /**
     * Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.
     */
    start: pulumi.Input<string>;
}

export interface SkeClusterNetwork {
    /**
     * ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
     */
    id?: pulumi.Input<string>;
}

export interface SkeClusterNodePool {
    /**
     * Allow system components to run on this node pool.
     */
    allowSystemComponents?: pulumi.Input<boolean>;
    /**
     * Specify a list of availability zones. E.g. `eu01-m`
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the container runtime. Defaults to `containerd`
     */
    cri?: pulumi.Input<string>;
    /**
     * Labels to add to each node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The machine type.
     */
    machineType: pulumi.Input<string>;
    /**
     * Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
     */
    maxSurge?: pulumi.Input<number>;
    /**
     * Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
     */
    maxUnavailable?: pulumi.Input<number>;
    /**
     * Maximum number of nodes in the pool.
     */
    maximum: pulumi.Input<number>;
    /**
     * Minimum number of nodes in the pool.
     */
    minimum: pulumi.Input<number>;
    /**
     * Specifies the name of the node pool.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the OS image. Defaults to `flatcar`.
     */
    osName?: pulumi.Input<string>;
    /**
     * This field is deprecated, use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead.
     *
     * @deprecated Use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead. Setting a specific OS image version will cause errors during minor OS upgrades due to forced updates.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
     */
    osVersionMin?: pulumi.Input<string>;
    /**
     * Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
     */
    osVersionUsed?: pulumi.Input<string>;
    /**
     * Specifies a taint list as defined below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.SkeClusterNodePoolTaint>[]>;
    /**
     * The volume size in GB. Defaults to `20`
     */
    volumeSize?: pulumi.Input<number>;
    /**
     * Specifies the volume type. Defaults to `storagePremiumPerf1`.
     */
    volumeType?: pulumi.Input<string>;
}

export interface SkeClusterNodePoolTaint {
    /**
     * The taint effect. E.g `PreferNoSchedule`.
     */
    effect: pulumi.Input<string>;
    /**
     * Taint key to be applied to a node.
     */
    key: pulumi.Input<string>;
    /**
     * Taint value corresponding to the taint key.
     */
    value?: pulumi.Input<string>;
}

export interface SqlserverflexInstanceFlavor {
    cpu: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ram: pulumi.Input<number>;
}

export interface SqlserverflexInstanceOptions {
    edition?: pulumi.Input<string>;
    retentionDays?: pulumi.Input<number>;
}

export interface SqlserverflexInstanceStorage {
    class?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
}

export interface VolumeSource {
    /**
     * The ID of the source, e.g. image ID
     */
    id: pulumi.Input<string>;
    /**
     * The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
     */
    type: pulumi.Input<string>;
}
