// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ObjectStorage bucket resource schema. Must have a `region` specified in the provider configuration. If you are creating `credentialsgroup` and `bucket` resources simultaneously, please include the `dependsOn` field so that they are created sequentially. This prevents errors from concurrent calls to the service enablement that is done in the background.
 *
 * ## Example Usage
 */
export class ObjectstorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageBucketState, opts?: pulumi.CustomResourceOptions): ObjectstorageBucket {
        return new ObjectstorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/objectstorageBucket:ObjectstorageBucket';

    /**
     * Returns true if the given object is an instance of ObjectstorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageBucket.__pulumiType;
    }

    /**
     * The bucket name. It must be DNS conform.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT Project ID to which the bucket is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly urlPathStyle!: pulumi.Output<string>;
    public /*out*/ readonly urlVirtualHostedStyle!: pulumi.Output<string>;

    /**
     * Create a ObjectstorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageBucketArgs | ObjectstorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageBucketState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["urlPathStyle"] = state ? state.urlPathStyle : undefined;
            resourceInputs["urlVirtualHostedStyle"] = state ? state.urlVirtualHostedStyle : undefined;
        } else {
            const args = argsOrState as ObjectstorageBucketArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["urlPathStyle"] = undefined /*out*/;
            resourceInputs["urlVirtualHostedStyle"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstorageBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageBucket resources.
 */
export interface ObjectstorageBucketState {
    /**
     * The bucket name. It must be DNS conform.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the bucket is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    urlPathStyle?: pulumi.Input<string>;
    urlVirtualHostedStyle?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectstorageBucket resource.
 */
export interface ObjectstorageBucketArgs {
    /**
     * The bucket name. It must be DNS conform.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the bucket is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
}
