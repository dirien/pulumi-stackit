// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS Zone resource schema.
 *
 * ## Example Usage
 */
export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    /**
     * The access control list. E.g. `0.0.0.0/0,::/0`
     */
    public readonly acl!: pulumi.Output<string>;
    public readonly active!: pulumi.Output<boolean>;
    /**
     * A contact e-mail for the zone.
     */
    public readonly contactEmail!: pulumi.Output<string>;
    /**
     * Default time to live. E.g. 3600.
     */
    public readonly defaultTtl!: pulumi.Output<number>;
    /**
     * Description of the zone.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The zone name. E.g. `example.com`
     */
    public readonly dnsName!: pulumi.Output<string>;
    /**
     * Expire time. E.g. 1209600.
     */
    public readonly expireTime!: pulumi.Output<number>;
    /**
     * Specifies, if the zone is a reverse zone or not. Defaults to `false`
     */
    public readonly isReverseZone!: pulumi.Output<boolean>;
    /**
     * The user given name of the zone.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Negative caching. E.g. 60
     */
    public readonly negativeCache!: pulumi.Output<number>;
    /**
     * Primary name server for secondary zone. E.g. ["1.2.3.4"]
     */
    public readonly primaries!: pulumi.Output<string[]>;
    /**
     * Primary name server. FQDN.
     */
    public /*out*/ readonly primaryNameServer!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the dns zone is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Record count how many records are in the zone.
     */
    public /*out*/ readonly recordCount!: pulumi.Output<number>;
    /**
     * Refresh time. E.g. 3600
     */
    public readonly refreshTime!: pulumi.Output<number>;
    /**
     * Retry time. E.g. 600
     */
    public readonly retryTime!: pulumi.Output<number>;
    /**
     * Serial number. E.g. `2022111400`.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<number>;
    /**
     * Zone state. E.g. `CREATE_SUCCEEDED`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Visibility of the zone. E.g. `public`.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;
    /**
     * The zone ID.
     */
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["contactEmail"] = state ? state.contactEmail : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["isReverseZone"] = state ? state.isReverseZone : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeCache"] = state ? state.negativeCache : undefined;
            resourceInputs["primaries"] = state ? state.primaries : undefined;
            resourceInputs["primaryNameServer"] = state ? state.primaryNameServer : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["recordCount"] = state ? state.recordCount : undefined;
            resourceInputs["refreshTime"] = state ? state.refreshTime : undefined;
            resourceInputs["retryTime"] = state ? state.retryTime : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if ((!args || args.dnsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["contactEmail"] = args ? args.contactEmail : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["expireTime"] = args ? args.expireTime : undefined;
            resourceInputs["isReverseZone"] = args ? args.isReverseZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeCache"] = args ? args.negativeCache : undefined;
            resourceInputs["primaries"] = args ? args.primaries : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["refreshTime"] = args ? args.refreshTime : undefined;
            resourceInputs["retryTime"] = args ? args.retryTime : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["primaryNameServer"] = undefined /*out*/;
            resourceInputs["recordCount"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    /**
     * The access control list. E.g. `0.0.0.0/0,::/0`
     */
    acl?: pulumi.Input<string>;
    active?: pulumi.Input<boolean>;
    /**
     * A contact e-mail for the zone.
     */
    contactEmail?: pulumi.Input<string>;
    /**
     * Default time to live. E.g. 3600.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * The zone name. E.g. `example.com`
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Expire time. E.g. 1209600.
     */
    expireTime?: pulumi.Input<number>;
    /**
     * Specifies, if the zone is a reverse zone or not. Defaults to `false`
     */
    isReverseZone?: pulumi.Input<boolean>;
    /**
     * The user given name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * Negative caching. E.g. 60
     */
    negativeCache?: pulumi.Input<number>;
    /**
     * Primary name server for secondary zone. E.g. ["1.2.3.4"]
     */
    primaries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary name server. FQDN.
     */
    primaryNameServer?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the dns zone is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Record count how many records are in the zone.
     */
    recordCount?: pulumi.Input<number>;
    /**
     * Refresh time. E.g. 3600
     */
    refreshTime?: pulumi.Input<number>;
    /**
     * Retry time. E.g. 600
     */
    retryTime?: pulumi.Input<number>;
    /**
     * Serial number. E.g. `2022111400`.
     */
    serialNumber?: pulumi.Input<number>;
    /**
     * Zone state. E.g. `CREATE_SUCCEEDED`.
     */
    state?: pulumi.Input<string>;
    /**
     * Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
     */
    type?: pulumi.Input<string>;
    /**
     * Visibility of the zone. E.g. `public`.
     */
    visibility?: pulumi.Input<string>;
    /**
     * The zone ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    /**
     * The access control list. E.g. `0.0.0.0/0,::/0`
     */
    acl?: pulumi.Input<string>;
    active?: pulumi.Input<boolean>;
    /**
     * A contact e-mail for the zone.
     */
    contactEmail?: pulumi.Input<string>;
    /**
     * Default time to live. E.g. 3600.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * The zone name. E.g. `example.com`
     */
    dnsName: pulumi.Input<string>;
    /**
     * Expire time. E.g. 1209600.
     */
    expireTime?: pulumi.Input<number>;
    /**
     * Specifies, if the zone is a reverse zone or not. Defaults to `false`
     */
    isReverseZone?: pulumi.Input<boolean>;
    /**
     * The user given name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * Negative caching. E.g. 60
     */
    negativeCache?: pulumi.Input<number>;
    /**
     * Primary name server for secondary zone. E.g. ["1.2.3.4"]
     */
    primaries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * STACKIT project ID to which the dns zone is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * Refresh time. E.g. 3600
     */
    refreshTime?: pulumi.Input<number>;
    /**
     * Retry time. E.g. 600
     */
    retryTime?: pulumi.Input<number>;
    /**
     * Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
     */
    type?: pulumi.Input<string>;
}
