// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Affinity Group schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class AffinityGroup extends pulumi.CustomResource {
    /**
     * Get an existing AffinityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AffinityGroupState, opts?: pulumi.CustomResourceOptions): AffinityGroup {
        return new AffinityGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/affinityGroup:AffinityGroup';

    /**
     * Returns true if the given object is an instance of AffinityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AffinityGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AffinityGroup.__pulumiType;
    }

    /**
     * The affinity group ID.
     */
    declare public /*out*/ readonly affinityGroupId: pulumi.Output<string>;
    /**
     * The servers that are part of the affinity group.
     */
    declare public /*out*/ readonly members: pulumi.Output<string[]>;
    /**
     * The name of the affinity group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The policy of the affinity group.
     */
    declare public readonly policy: pulumi.Output<string>;
    /**
     * STACKIT Project ID to which the affinity group is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;

    /**
     * Create a AffinityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AffinityGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AffinityGroupArgs | AffinityGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AffinityGroupState | undefined;
            resourceInputs["affinityGroupId"] = state?.affinityGroupId;
            resourceInputs["members"] = state?.members;
            resourceInputs["name"] = state?.name;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["projectId"] = state?.projectId;
        } else {
            const args = argsOrState as AffinityGroupArgs | undefined;
            if (args?.policy === undefined && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["affinityGroupId"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AffinityGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AffinityGroup resources.
 */
export interface AffinityGroupState {
    /**
     * The affinity group ID.
     */
    affinityGroupId?: pulumi.Input<string>;
    /**
     * The servers that are part of the affinity group.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the affinity group.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy of the affinity group.
     */
    policy?: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the affinity group is associated.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AffinityGroup resource.
 */
export interface AffinityGroupArgs {
    /**
     * The name of the affinity group.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy of the affinity group.
     */
    policy: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the affinity group is associated.
     */
    projectId: pulumi.Input<string>;
}
