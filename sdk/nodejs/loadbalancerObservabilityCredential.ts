// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Load balancer observability credential resource schema. Must have a `region` specified in the provider configuration. These contain the username and password for the observability service (e.g. Argus) where the load balancer logs/metrics will be pushed into
 *
 * ## Example Usage
 */
export class LoadbalancerObservabilityCredential extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerObservabilityCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerObservabilityCredentialState, opts?: pulumi.CustomResourceOptions): LoadbalancerObservabilityCredential {
        return new LoadbalancerObservabilityCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential';

    /**
     * Returns true if the given object is an instance of LoadbalancerObservabilityCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerObservabilityCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerObservabilityCredential.__pulumiType;
    }

    /**
     * The credentials reference is used by the Load Balancer to define which credentials it will use.
     */
    declare public /*out*/ readonly credentialsRef: pulumi.Output<string>;
    /**
     * Observability credential name.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the load balancer observability credential is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a LoadbalancerObservabilityCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerObservabilityCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerObservabilityCredentialArgs | LoadbalancerObservabilityCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerObservabilityCredentialState | undefined;
            resourceInputs["credentialsRef"] = state?.credentialsRef;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as LoadbalancerObservabilityCredentialArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["password"] = args?.password;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["username"] = args?.username;
            resourceInputs["credentialsRef"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerObservabilityCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerObservabilityCredential resources.
 */
export interface LoadbalancerObservabilityCredentialState {
    /**
     * The credentials reference is used by the Load Balancer to define which credentials it will use.
     */
    credentialsRef?: pulumi.Input<string>;
    /**
     * Observability credential name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    password?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the load balancer observability credential is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadbalancerObservabilityCredential resource.
 */
export interface LoadbalancerObservabilityCredentialArgs {
    /**
     * Observability credential name.
     */
    displayName: pulumi.Input<string>;
    /**
     * The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    password: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the load balancer observability credential is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
     */
    username: pulumi.Input<string>;
}
