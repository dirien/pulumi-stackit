// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Security group datasource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getSecurityGroupRule(args: GetSecurityGroupRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGroupRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getSecurityGroupRule:getSecurityGroupRule", {
        "projectId": args.projectId,
        "securityGroupId": args.securityGroupId,
        "securityGroupRuleId": args.securityGroupRuleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroupRule.
 */
export interface GetSecurityGroupRuleArgs {
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    projectId: string;
    /**
     * The security group ID.
     */
    securityGroupId: string;
    /**
     * The security group rule ID.
     */
    securityGroupRuleId: string;
}

/**
 * A collection of values returned by getSecurityGroupRule.
 */
export interface GetSecurityGroupRuleResult {
    /**
     * The description of the security group rule.
     */
    readonly description: string;
    /**
     * The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
     */
    readonly direction: string;
    /**
     * The ethertype which the rule should match.
     */
    readonly etherType: string;
    /**
     * ICMP Parameters.
     */
    readonly icmpParameters: outputs.GetSecurityGroupRuleIcmpParameters;
    readonly id: string;
    /**
     * The remote IP range which the rule should match.
     */
    readonly ipRange: string;
    /**
     * The range of ports.
     */
    readonly portRange: outputs.GetSecurityGroupRulePortRange;
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    readonly projectId: string;
    /**
     * The internet protocol which the rule should match.
     */
    readonly protocol: outputs.GetSecurityGroupRuleProtocol;
    /**
     * The remote security group which the rule should match.
     */
    readonly remoteSecurityGroupId: string;
    /**
     * The security group ID.
     */
    readonly securityGroupId: string;
    /**
     * The security group rule ID.
     */
    readonly securityGroupRuleId: string;
}
/**
 * Security group datasource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getSecurityGroupRuleOutput(args: GetSecurityGroupRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecurityGroupRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getSecurityGroupRule:getSecurityGroupRule", {
        "projectId": args.projectId,
        "securityGroupId": args.securityGroupId,
        "securityGroupRuleId": args.securityGroupRuleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroupRule.
 */
export interface GetSecurityGroupRuleOutputArgs {
    /**
     * STACKIT project ID to which the security group rule is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * The security group rule ID.
     */
    securityGroupRuleId: pulumi.Input<string>;
}
