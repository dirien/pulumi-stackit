// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * SKE Cluster Resource schema. Must have a `region` specified in the provider configuration.
 *
 * > When updating `nodePools` of a `stackit.SkeCluster`, the pulumi preview might appear incorrect as it matches the node pools by index rather than by name. However, the SKE API correctly identifies node pools by name and applies the intended changes. Please review your changes carefully to ensure the correct configuration will be applied.
 *
 * ## Example Usage
 */
export class SkeCluster extends pulumi.CustomResource {
    /**
     * Get an existing SkeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SkeClusterState, opts?: pulumi.CustomResourceOptions): SkeCluster {
        return new SkeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/skeCluster:SkeCluster';

    /**
     * Returns true if the given object is an instance of SkeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SkeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SkeCluster.__pulumiType;
    }

    /**
     * Flag to specify if privileged mode for containers is enabled or not.
     * This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
     * Deprecated as of Kubernetes 1.25 and later
     */
    public readonly allowPrivilegedContainers!: pulumi.Output<boolean | undefined>;
    /**
     * The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
     */
    public /*out*/ readonly egressAddressRanges!: pulumi.Output<string[]>;
    /**
     * A single extensions block as defined below.
     */
    public readonly extensions!: pulumi.Output<outputs.SkeClusterExtensions | undefined>;
    /**
     * One or more hibernation block as defined below.
     */
    public readonly hibernations!: pulumi.Output<outputs.SkeClusterHibernation[] | undefined>;
    /**
     * Kubernetes version. Must only contain major and minor version (e.g. 1.22). This field is deprecated, use `kubernetesVersionMin instead`
     *
     * @deprecated Use `kubernetesVersionMin instead`. Setting a specific kubernetes version would cause errors during minor version upgrades due to forced updates. In those cases, this field might not represent the actual kubernetes version used in the cluster.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
     */
    public readonly kubernetesVersionMin!: pulumi.Output<string | undefined>;
    /**
     * Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
     */
    public /*out*/ readonly kubernetesVersionUsed!: pulumi.Output<string>;
    /**
     * A single maintenance block as defined below.
     */
    public readonly maintenance!: pulumi.Output<outputs.SkeClusterMaintenance>;
    /**
     * The cluster name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network block as defined below.
     */
    public readonly network!: pulumi.Output<outputs.SkeClusterNetwork | undefined>;
    /**
     * One or more `nodePool` block as defined below.
     */
    public readonly nodePools!: pulumi.Output<outputs.SkeClusterNodePool[]>;
    /**
     * STACKIT project ID to which the cluster is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a SkeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SkeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SkeClusterArgs | SkeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SkeClusterState | undefined;
            resourceInputs["allowPrivilegedContainers"] = state ? state.allowPrivilegedContainers : undefined;
            resourceInputs["egressAddressRanges"] = state ? state.egressAddressRanges : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["hibernations"] = state ? state.hibernations : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["kubernetesVersionMin"] = state ? state.kubernetesVersionMin : undefined;
            resourceInputs["kubernetesVersionUsed"] = state ? state.kubernetesVersionUsed : undefined;
            resourceInputs["maintenance"] = state ? state.maintenance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["nodePools"] = state ? state.nodePools : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as SkeClusterArgs | undefined;
            if ((!args || args.nodePools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodePools'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["allowPrivilegedContainers"] = args ? args.allowPrivilegedContainers : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["hibernations"] = args ? args.hibernations : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["kubernetesVersionMin"] = args ? args.kubernetesVersionMin : undefined;
            resourceInputs["maintenance"] = args ? args.maintenance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["nodePools"] = args ? args.nodePools : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["egressAddressRanges"] = undefined /*out*/;
            resourceInputs["kubernetesVersionUsed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SkeCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SkeCluster resources.
 */
export interface SkeClusterState {
    /**
     * Flag to specify if privileged mode for containers is enabled or not.
     * This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
     * Deprecated as of Kubernetes 1.25 and later
     */
    allowPrivilegedContainers?: pulumi.Input<boolean>;
    /**
     * The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
     */
    egressAddressRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A single extensions block as defined below.
     */
    extensions?: pulumi.Input<inputs.SkeClusterExtensions>;
    /**
     * One or more hibernation block as defined below.
     */
    hibernations?: pulumi.Input<pulumi.Input<inputs.SkeClusterHibernation>[]>;
    /**
     * Kubernetes version. Must only contain major and minor version (e.g. 1.22). This field is deprecated, use `kubernetesVersionMin instead`
     *
     * @deprecated Use `kubernetesVersionMin instead`. Setting a specific kubernetes version would cause errors during minor version upgrades due to forced updates. In those cases, this field might not represent the actual kubernetes version used in the cluster.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
     */
    kubernetesVersionMin?: pulumi.Input<string>;
    /**
     * Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
     */
    kubernetesVersionUsed?: pulumi.Input<string>;
    /**
     * A single maintenance block as defined below.
     */
    maintenance?: pulumi.Input<inputs.SkeClusterMaintenance>;
    /**
     * The cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network block as defined below.
     */
    network?: pulumi.Input<inputs.SkeClusterNetwork>;
    /**
     * One or more `nodePool` block as defined below.
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.SkeClusterNodePool>[]>;
    /**
     * STACKIT project ID to which the cluster is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SkeCluster resource.
 */
export interface SkeClusterArgs {
    /**
     * Flag to specify if privileged mode for containers is enabled or not.
     * This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
     * Deprecated as of Kubernetes 1.25 and later
     */
    allowPrivilegedContainers?: pulumi.Input<boolean>;
    /**
     * A single extensions block as defined below.
     */
    extensions?: pulumi.Input<inputs.SkeClusterExtensions>;
    /**
     * One or more hibernation block as defined below.
     */
    hibernations?: pulumi.Input<pulumi.Input<inputs.SkeClusterHibernation>[]>;
    /**
     * Kubernetes version. Must only contain major and minor version (e.g. 1.22). This field is deprecated, use `kubernetesVersionMin instead`
     *
     * @deprecated Use `kubernetesVersionMin instead`. Setting a specific kubernetes version would cause errors during minor version upgrades due to forced updates. In those cases, this field might not represent the actual kubernetes version used in the cluster.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
     */
    kubernetesVersionMin?: pulumi.Input<string>;
    /**
     * A single maintenance block as defined below.
     */
    maintenance?: pulumi.Input<inputs.SkeClusterMaintenance>;
    /**
     * The cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network block as defined below.
     */
    network?: pulumi.Input<inputs.SkeClusterNetwork>;
    /**
     * One or more `nodePool` block as defined below.
     */
    nodePools: pulumi.Input<pulumi.Input<inputs.SkeClusterNodePool>[]>;
    /**
     * STACKIT project ID to which the cluster is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
}
