// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AffinityGroupArgs, AffinityGroupState } from "./affinityGroup";
export type AffinityGroup = import("./affinityGroup").AffinityGroup;
export const AffinityGroup: typeof import("./affinityGroup").AffinityGroup = null as any;
utilities.lazyLoad(exports, ["AffinityGroup"], () => require("./affinityGroup"));

export { AuthorizationOrganizationRoleAssignmentArgs, AuthorizationOrganizationRoleAssignmentState } from "./authorizationOrganizationRoleAssignment";
export type AuthorizationOrganizationRoleAssignment = import("./authorizationOrganizationRoleAssignment").AuthorizationOrganizationRoleAssignment;
export const AuthorizationOrganizationRoleAssignment: typeof import("./authorizationOrganizationRoleAssignment").AuthorizationOrganizationRoleAssignment = null as any;
utilities.lazyLoad(exports, ["AuthorizationOrganizationRoleAssignment"], () => require("./authorizationOrganizationRoleAssignment"));

export { AuthorizationProjectRoleAssignmentArgs, AuthorizationProjectRoleAssignmentState } from "./authorizationProjectRoleAssignment";
export type AuthorizationProjectRoleAssignment = import("./authorizationProjectRoleAssignment").AuthorizationProjectRoleAssignment;
export const AuthorizationProjectRoleAssignment: typeof import("./authorizationProjectRoleAssignment").AuthorizationProjectRoleAssignment = null as any;
utilities.lazyLoad(exports, ["AuthorizationProjectRoleAssignment"], () => require("./authorizationProjectRoleAssignment"));

export { CdnCustomDomainArgs, CdnCustomDomainState } from "./cdnCustomDomain";
export type CdnCustomDomain = import("./cdnCustomDomain").CdnCustomDomain;
export const CdnCustomDomain: typeof import("./cdnCustomDomain").CdnCustomDomain = null as any;
utilities.lazyLoad(exports, ["CdnCustomDomain"], () => require("./cdnCustomDomain"));

export { CdnDistributionArgs, CdnDistributionState } from "./cdnDistribution";
export type CdnDistribution = import("./cdnDistribution").CdnDistribution;
export const CdnDistribution: typeof import("./cdnDistribution").CdnDistribution = null as any;
utilities.lazyLoad(exports, ["CdnDistribution"], () => require("./cdnDistribution"));

export { DnsRecordSetArgs, DnsRecordSetState } from "./dnsRecordSet";
export type DnsRecordSet = import("./dnsRecordSet").DnsRecordSet;
export const DnsRecordSet: typeof import("./dnsRecordSet").DnsRecordSet = null as any;
utilities.lazyLoad(exports, ["DnsRecordSet"], () => require("./dnsRecordSet"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { GetAffinityGroupArgs, GetAffinityGroupResult, GetAffinityGroupOutputArgs } from "./getAffinityGroup";
export const getAffinityGroup: typeof import("./getAffinityGroup").getAffinityGroup = null as any;
export const getAffinityGroupOutput: typeof import("./getAffinityGroup").getAffinityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAffinityGroup","getAffinityGroupOutput"], () => require("./getAffinityGroup"));

export { GetCdnCustomDomainArgs, GetCdnCustomDomainResult, GetCdnCustomDomainOutputArgs } from "./getCdnCustomDomain";
export const getCdnCustomDomain: typeof import("./getCdnCustomDomain").getCdnCustomDomain = null as any;
export const getCdnCustomDomainOutput: typeof import("./getCdnCustomDomain").getCdnCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getCdnCustomDomain","getCdnCustomDomainOutput"], () => require("./getCdnCustomDomain"));

export { GetCdnDistributionArgs, GetCdnDistributionResult, GetCdnDistributionOutputArgs } from "./getCdnDistribution";
export const getCdnDistribution: typeof import("./getCdnDistribution").getCdnDistribution = null as any;
export const getCdnDistributionOutput: typeof import("./getCdnDistribution").getCdnDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getCdnDistribution","getCdnDistributionOutput"], () => require("./getCdnDistribution"));

export { GetDnsRecordSetArgs, GetDnsRecordSetResult, GetDnsRecordSetOutputArgs } from "./getDnsRecordSet";
export const getDnsRecordSet: typeof import("./getDnsRecordSet").getDnsRecordSet = null as any;
export const getDnsRecordSetOutput: typeof import("./getDnsRecordSet").getDnsRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecordSet","getDnsRecordSetOutput"], () => require("./getDnsRecordSet"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetGitArgs, GetGitResult, GetGitOutputArgs } from "./getGit";
export const getGit: typeof import("./getGit").getGit = null as any;
export const getGitOutput: typeof import("./getGit").getGitOutput = null as any;
utilities.lazyLoad(exports, ["getGit","getGitOutput"], () => require("./getGit"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetKeyPairArgs, GetKeyPairResult, GetKeyPairOutputArgs } from "./getKeyPair";
export const getKeyPair: typeof import("./getKeyPair").getKeyPair = null as any;
export const getKeyPairOutput: typeof import("./getKeyPair").getKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPair","getKeyPairOutput"], () => require("./getKeyPair"));

export { GetLoadbalancerArgs, GetLoadbalancerResult, GetLoadbalancerOutputArgs } from "./getLoadbalancer";
export const getLoadbalancer: typeof import("./getLoadbalancer").getLoadbalancer = null as any;
export const getLoadbalancerOutput: typeof import("./getLoadbalancer").getLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancer","getLoadbalancerOutput"], () => require("./getLoadbalancer"));

export { GetLogmeCredentialArgs, GetLogmeCredentialResult, GetLogmeCredentialOutputArgs } from "./getLogmeCredential";
export const getLogmeCredential: typeof import("./getLogmeCredential").getLogmeCredential = null as any;
export const getLogmeCredentialOutput: typeof import("./getLogmeCredential").getLogmeCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getLogmeCredential","getLogmeCredentialOutput"], () => require("./getLogmeCredential"));

export { GetLogmeInstanceArgs, GetLogmeInstanceResult, GetLogmeInstanceOutputArgs } from "./getLogmeInstance";
export const getLogmeInstance: typeof import("./getLogmeInstance").getLogmeInstance = null as any;
export const getLogmeInstanceOutput: typeof import("./getLogmeInstance").getLogmeInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getLogmeInstance","getLogmeInstanceOutput"], () => require("./getLogmeInstance"));

export { GetMariadbCredentialArgs, GetMariadbCredentialResult, GetMariadbCredentialOutputArgs } from "./getMariadbCredential";
export const getMariadbCredential: typeof import("./getMariadbCredential").getMariadbCredential = null as any;
export const getMariadbCredentialOutput: typeof import("./getMariadbCredential").getMariadbCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbCredential","getMariadbCredentialOutput"], () => require("./getMariadbCredential"));

export { GetMariadbInstanceArgs, GetMariadbInstanceResult, GetMariadbInstanceOutputArgs } from "./getMariadbInstance";
export const getMariadbInstance: typeof import("./getMariadbInstance").getMariadbInstance = null as any;
export const getMariadbInstanceOutput: typeof import("./getMariadbInstance").getMariadbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbInstance","getMariadbInstanceOutput"], () => require("./getMariadbInstance"));

export { GetMongodbflexInstanceArgs, GetMongodbflexInstanceResult, GetMongodbflexInstanceOutputArgs } from "./getMongodbflexInstance";
export const getMongodbflexInstance: typeof import("./getMongodbflexInstance").getMongodbflexInstance = null as any;
export const getMongodbflexInstanceOutput: typeof import("./getMongodbflexInstance").getMongodbflexInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbflexInstance","getMongodbflexInstanceOutput"], () => require("./getMongodbflexInstance"));

export { GetMongodbflexUserArgs, GetMongodbflexUserResult, GetMongodbflexUserOutputArgs } from "./getMongodbflexUser";
export const getMongodbflexUser: typeof import("./getMongodbflexUser").getMongodbflexUser = null as any;
export const getMongodbflexUserOutput: typeof import("./getMongodbflexUser").getMongodbflexUserOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbflexUser","getMongodbflexUserOutput"], () => require("./getMongodbflexUser"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkAreaArgs, GetNetworkAreaResult, GetNetworkAreaOutputArgs } from "./getNetworkArea";
export const getNetworkArea: typeof import("./getNetworkArea").getNetworkArea = null as any;
export const getNetworkAreaOutput: typeof import("./getNetworkArea").getNetworkAreaOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkArea","getNetworkAreaOutput"], () => require("./getNetworkArea"));

export { GetNetworkAreaRouteArgs, GetNetworkAreaRouteResult, GetNetworkAreaRouteOutputArgs } from "./getNetworkAreaRoute";
export const getNetworkAreaRoute: typeof import("./getNetworkAreaRoute").getNetworkAreaRoute = null as any;
export const getNetworkAreaRouteOutput: typeof import("./getNetworkAreaRoute").getNetworkAreaRouteOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAreaRoute","getNetworkAreaRouteOutput"], () => require("./getNetworkAreaRoute"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetObjectstorageBucketArgs, GetObjectstorageBucketResult, GetObjectstorageBucketOutputArgs } from "./getObjectstorageBucket";
export const getObjectstorageBucket: typeof import("./getObjectstorageBucket").getObjectstorageBucket = null as any;
export const getObjectstorageBucketOutput: typeof import("./getObjectstorageBucket").getObjectstorageBucketOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageBucket","getObjectstorageBucketOutput"], () => require("./getObjectstorageBucket"));

export { GetObjectstorageCredentialArgs, GetObjectstorageCredentialResult, GetObjectstorageCredentialOutputArgs } from "./getObjectstorageCredential";
export const getObjectstorageCredential: typeof import("./getObjectstorageCredential").getObjectstorageCredential = null as any;
export const getObjectstorageCredentialOutput: typeof import("./getObjectstorageCredential").getObjectstorageCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageCredential","getObjectstorageCredentialOutput"], () => require("./getObjectstorageCredential"));

export { GetObjectstorageCredentialsGroupArgs, GetObjectstorageCredentialsGroupResult, GetObjectstorageCredentialsGroupOutputArgs } from "./getObjectstorageCredentialsGroup";
export const getObjectstorageCredentialsGroup: typeof import("./getObjectstorageCredentialsGroup").getObjectstorageCredentialsGroup = null as any;
export const getObjectstorageCredentialsGroupOutput: typeof import("./getObjectstorageCredentialsGroup").getObjectstorageCredentialsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageCredentialsGroup","getObjectstorageCredentialsGroupOutput"], () => require("./getObjectstorageCredentialsGroup"));

export { GetObservabilityAlertgroupArgs, GetObservabilityAlertgroupResult, GetObservabilityAlertgroupOutputArgs } from "./getObservabilityAlertgroup";
export const getObservabilityAlertgroup: typeof import("./getObservabilityAlertgroup").getObservabilityAlertgroup = null as any;
export const getObservabilityAlertgroupOutput: typeof import("./getObservabilityAlertgroup").getObservabilityAlertgroupOutput = null as any;
utilities.lazyLoad(exports, ["getObservabilityAlertgroup","getObservabilityAlertgroupOutput"], () => require("./getObservabilityAlertgroup"));

export { GetObservabilityInstanceArgs, GetObservabilityInstanceResult, GetObservabilityInstanceOutputArgs } from "./getObservabilityInstance";
export const getObservabilityInstance: typeof import("./getObservabilityInstance").getObservabilityInstance = null as any;
export const getObservabilityInstanceOutput: typeof import("./getObservabilityInstance").getObservabilityInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getObservabilityInstance","getObservabilityInstanceOutput"], () => require("./getObservabilityInstance"));

export { GetObservabilityLogalertgroupArgs, GetObservabilityLogalertgroupResult, GetObservabilityLogalertgroupOutputArgs } from "./getObservabilityLogalertgroup";
export const getObservabilityLogalertgroup: typeof import("./getObservabilityLogalertgroup").getObservabilityLogalertgroup = null as any;
export const getObservabilityLogalertgroupOutput: typeof import("./getObservabilityLogalertgroup").getObservabilityLogalertgroupOutput = null as any;
utilities.lazyLoad(exports, ["getObservabilityLogalertgroup","getObservabilityLogalertgroupOutput"], () => require("./getObservabilityLogalertgroup"));

export { GetObservabilityScrapeconfigArgs, GetObservabilityScrapeconfigResult, GetObservabilityScrapeconfigOutputArgs } from "./getObservabilityScrapeconfig";
export const getObservabilityScrapeconfig: typeof import("./getObservabilityScrapeconfig").getObservabilityScrapeconfig = null as any;
export const getObservabilityScrapeconfigOutput: typeof import("./getObservabilityScrapeconfig").getObservabilityScrapeconfigOutput = null as any;
utilities.lazyLoad(exports, ["getObservabilityScrapeconfig","getObservabilityScrapeconfigOutput"], () => require("./getObservabilityScrapeconfig"));

export { GetOpensearchCredentialArgs, GetOpensearchCredentialResult, GetOpensearchCredentialOutputArgs } from "./getOpensearchCredential";
export const getOpensearchCredential: typeof import("./getOpensearchCredential").getOpensearchCredential = null as any;
export const getOpensearchCredentialOutput: typeof import("./getOpensearchCredential").getOpensearchCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchCredential","getOpensearchCredentialOutput"], () => require("./getOpensearchCredential"));

export { GetOpensearchInstanceArgs, GetOpensearchInstanceResult, GetOpensearchInstanceOutputArgs } from "./getOpensearchInstance";
export const getOpensearchInstance: typeof import("./getOpensearchInstance").getOpensearchInstance = null as any;
export const getOpensearchInstanceOutput: typeof import("./getOpensearchInstance").getOpensearchInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchInstance","getOpensearchInstanceOutput"], () => require("./getOpensearchInstance"));

export { GetPostgresflexDatabaseArgs, GetPostgresflexDatabaseResult, GetPostgresflexDatabaseOutputArgs } from "./getPostgresflexDatabase";
export const getPostgresflexDatabase: typeof import("./getPostgresflexDatabase").getPostgresflexDatabase = null as any;
export const getPostgresflexDatabaseOutput: typeof import("./getPostgresflexDatabase").getPostgresflexDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresflexDatabase","getPostgresflexDatabaseOutput"], () => require("./getPostgresflexDatabase"));

export { GetPostgresflexInstanceArgs, GetPostgresflexInstanceResult, GetPostgresflexInstanceOutputArgs } from "./getPostgresflexInstance";
export const getPostgresflexInstance: typeof import("./getPostgresflexInstance").getPostgresflexInstance = null as any;
export const getPostgresflexInstanceOutput: typeof import("./getPostgresflexInstance").getPostgresflexInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresflexInstance","getPostgresflexInstanceOutput"], () => require("./getPostgresflexInstance"));

export { GetPostgresflexUserArgs, GetPostgresflexUserResult, GetPostgresflexUserOutputArgs } from "./getPostgresflexUser";
export const getPostgresflexUser: typeof import("./getPostgresflexUser").getPostgresflexUser = null as any;
export const getPostgresflexUserOutput: typeof import("./getPostgresflexUser").getPostgresflexUserOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresflexUser","getPostgresflexUserOutput"], () => require("./getPostgresflexUser"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetPublicIpRangesResult } from "./getPublicIpRanges";
export const getPublicIpRanges: typeof import("./getPublicIpRanges").getPublicIpRanges = null as any;
export const getPublicIpRangesOutput: typeof import("./getPublicIpRanges").getPublicIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIpRanges","getPublicIpRangesOutput"], () => require("./getPublicIpRanges"));

export { GetRabbitmqCredentialArgs, GetRabbitmqCredentialResult, GetRabbitmqCredentialOutputArgs } from "./getRabbitmqCredential";
export const getRabbitmqCredential: typeof import("./getRabbitmqCredential").getRabbitmqCredential = null as any;
export const getRabbitmqCredentialOutput: typeof import("./getRabbitmqCredential").getRabbitmqCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getRabbitmqCredential","getRabbitmqCredentialOutput"], () => require("./getRabbitmqCredential"));

export { GetRabbitmqInstanceArgs, GetRabbitmqInstanceResult, GetRabbitmqInstanceOutputArgs } from "./getRabbitmqInstance";
export const getRabbitmqInstance: typeof import("./getRabbitmqInstance").getRabbitmqInstance = null as any;
export const getRabbitmqInstanceOutput: typeof import("./getRabbitmqInstance").getRabbitmqInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRabbitmqInstance","getRabbitmqInstanceOutput"], () => require("./getRabbitmqInstance"));

export { GetRedisCredentialArgs, GetRedisCredentialResult, GetRedisCredentialOutputArgs } from "./getRedisCredential";
export const getRedisCredential: typeof import("./getRedisCredential").getRedisCredential = null as any;
export const getRedisCredentialOutput: typeof import("./getRedisCredential").getRedisCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getRedisCredential","getRedisCredentialOutput"], () => require("./getRedisCredential"));

export { GetRedisInstanceArgs, GetRedisInstanceResult, GetRedisInstanceOutputArgs } from "./getRedisInstance";
export const getRedisInstance: typeof import("./getRedisInstance").getRedisInstance = null as any;
export const getRedisInstanceOutput: typeof import("./getRedisInstance").getRedisInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstance","getRedisInstanceOutput"], () => require("./getRedisInstance"));

export { GetResourcemanagerProjectArgs, GetResourcemanagerProjectResult, GetResourcemanagerProjectOutputArgs } from "./getResourcemanagerProject";
export const getResourcemanagerProject: typeof import("./getResourcemanagerProject").getResourcemanagerProject = null as any;
export const getResourcemanagerProjectOutput: typeof import("./getResourcemanagerProject").getResourcemanagerProjectOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerProject","getResourcemanagerProjectOutput"], () => require("./getResourcemanagerProject"));

export { GetRoutingTableArgs, GetRoutingTableResult, GetRoutingTableOutputArgs } from "./getRoutingTable";
export const getRoutingTable: typeof import("./getRoutingTable").getRoutingTable = null as any;
export const getRoutingTableOutput: typeof import("./getRoutingTable").getRoutingTableOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingTable","getRoutingTableOutput"], () => require("./getRoutingTable"));

export { GetRoutingTableRouteArgs, GetRoutingTableRouteResult, GetRoutingTableRouteOutputArgs } from "./getRoutingTableRoute";
export const getRoutingTableRoute: typeof import("./getRoutingTableRoute").getRoutingTableRoute = null as any;
export const getRoutingTableRouteOutput: typeof import("./getRoutingTableRoute").getRoutingTableRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingTableRoute","getRoutingTableRouteOutput"], () => require("./getRoutingTableRoute"));

export { GetRoutingTableRoutesArgs, GetRoutingTableRoutesResult, GetRoutingTableRoutesOutputArgs } from "./getRoutingTableRoutes";
export const getRoutingTableRoutes: typeof import("./getRoutingTableRoutes").getRoutingTableRoutes = null as any;
export const getRoutingTableRoutesOutput: typeof import("./getRoutingTableRoutes").getRoutingTableRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingTableRoutes","getRoutingTableRoutesOutput"], () => require("./getRoutingTableRoutes"));

export { GetRoutingTablesArgs, GetRoutingTablesResult, GetRoutingTablesOutputArgs } from "./getRoutingTables";
export const getRoutingTables: typeof import("./getRoutingTables").getRoutingTables = null as any;
export const getRoutingTablesOutput: typeof import("./getRoutingTables").getRoutingTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingTables","getRoutingTablesOutput"], () => require("./getRoutingTables"));

export { GetSecretsmanagerInstanceArgs, GetSecretsmanagerInstanceResult, GetSecretsmanagerInstanceOutputArgs } from "./getSecretsmanagerInstance";
export const getSecretsmanagerInstance: typeof import("./getSecretsmanagerInstance").getSecretsmanagerInstance = null as any;
export const getSecretsmanagerInstanceOutput: typeof import("./getSecretsmanagerInstance").getSecretsmanagerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerInstance","getSecretsmanagerInstanceOutput"], () => require("./getSecretsmanagerInstance"));

export { GetSecretsmanagerUserArgs, GetSecretsmanagerUserResult, GetSecretsmanagerUserOutputArgs } from "./getSecretsmanagerUser";
export const getSecretsmanagerUser: typeof import("./getSecretsmanagerUser").getSecretsmanagerUser = null as any;
export const getSecretsmanagerUserOutput: typeof import("./getSecretsmanagerUser").getSecretsmanagerUserOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerUser","getSecretsmanagerUserOutput"], () => require("./getSecretsmanagerUser"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupRuleArgs, GetSecurityGroupRuleResult, GetSecurityGroupRuleOutputArgs } from "./getSecurityGroupRule";
export const getSecurityGroupRule: typeof import("./getSecurityGroupRule").getSecurityGroupRule = null as any;
export const getSecurityGroupRuleOutput: typeof import("./getSecurityGroupRule").getSecurityGroupRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupRule","getSecurityGroupRuleOutput"], () => require("./getSecurityGroupRule"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerBackupScheduleArgs, GetServerBackupScheduleResult, GetServerBackupScheduleOutputArgs } from "./getServerBackupSchedule";
export const getServerBackupSchedule: typeof import("./getServerBackupSchedule").getServerBackupSchedule = null as any;
export const getServerBackupScheduleOutput: typeof import("./getServerBackupSchedule").getServerBackupScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getServerBackupSchedule","getServerBackupScheduleOutput"], () => require("./getServerBackupSchedule"));

export { GetServerBackupSchedulesArgs, GetServerBackupSchedulesResult, GetServerBackupSchedulesOutputArgs } from "./getServerBackupSchedules";
export const getServerBackupSchedules: typeof import("./getServerBackupSchedules").getServerBackupSchedules = null as any;
export const getServerBackupSchedulesOutput: typeof import("./getServerBackupSchedules").getServerBackupSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getServerBackupSchedules","getServerBackupSchedulesOutput"], () => require("./getServerBackupSchedules"));

export { GetServerUpdateScheduleArgs, GetServerUpdateScheduleResult, GetServerUpdateScheduleOutputArgs } from "./getServerUpdateSchedule";
export const getServerUpdateSchedule: typeof import("./getServerUpdateSchedule").getServerUpdateSchedule = null as any;
export const getServerUpdateScheduleOutput: typeof import("./getServerUpdateSchedule").getServerUpdateScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getServerUpdateSchedule","getServerUpdateScheduleOutput"], () => require("./getServerUpdateSchedule"));

export { GetServerUpdateSchedulesArgs, GetServerUpdateSchedulesResult, GetServerUpdateSchedulesOutputArgs } from "./getServerUpdateSchedules";
export const getServerUpdateSchedules: typeof import("./getServerUpdateSchedules").getServerUpdateSchedules = null as any;
export const getServerUpdateSchedulesOutput: typeof import("./getServerUpdateSchedules").getServerUpdateSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getServerUpdateSchedules","getServerUpdateSchedulesOutput"], () => require("./getServerUpdateSchedules"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetSkeClusterArgs, GetSkeClusterResult, GetSkeClusterOutputArgs } from "./getSkeCluster";
export const getSkeCluster: typeof import("./getSkeCluster").getSkeCluster = null as any;
export const getSkeClusterOutput: typeof import("./getSkeCluster").getSkeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getSkeCluster","getSkeClusterOutput"], () => require("./getSkeCluster"));

export { GetSqlserverflexInstanceArgs, GetSqlserverflexInstanceResult, GetSqlserverflexInstanceOutputArgs } from "./getSqlserverflexInstance";
export const getSqlserverflexInstance: typeof import("./getSqlserverflexInstance").getSqlserverflexInstance = null as any;
export const getSqlserverflexInstanceOutput: typeof import("./getSqlserverflexInstance").getSqlserverflexInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverflexInstance","getSqlserverflexInstanceOutput"], () => require("./getSqlserverflexInstance"));

export { GetSqlserverflexUserArgs, GetSqlserverflexUserResult, GetSqlserverflexUserOutputArgs } from "./getSqlserverflexUser";
export const getSqlserverflexUser: typeof import("./getSqlserverflexUser").getSqlserverflexUser = null as any;
export const getSqlserverflexUserOutput: typeof import("./getSqlserverflexUser").getSqlserverflexUserOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverflexUser","getSqlserverflexUserOutput"], () => require("./getSqlserverflexUser"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GitArgs, GitState } from "./git";
export type Git = import("./git").Git;
export const Git: typeof import("./git").Git = null as any;
utilities.lazyLoad(exports, ["Git"], () => require("./git"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { LoadbalancerObservabilityCredentialArgs, LoadbalancerObservabilityCredentialState } from "./loadbalancerObservabilityCredential";
export type LoadbalancerObservabilityCredential = import("./loadbalancerObservabilityCredential").LoadbalancerObservabilityCredential;
export const LoadbalancerObservabilityCredential: typeof import("./loadbalancerObservabilityCredential").LoadbalancerObservabilityCredential = null as any;
utilities.lazyLoad(exports, ["LoadbalancerObservabilityCredential"], () => require("./loadbalancerObservabilityCredential"));

export { LogmeCredentialArgs, LogmeCredentialState } from "./logmeCredential";
export type LogmeCredential = import("./logmeCredential").LogmeCredential;
export const LogmeCredential: typeof import("./logmeCredential").LogmeCredential = null as any;
utilities.lazyLoad(exports, ["LogmeCredential"], () => require("./logmeCredential"));

export { LogmeInstanceArgs, LogmeInstanceState } from "./logmeInstance";
export type LogmeInstance = import("./logmeInstance").LogmeInstance;
export const LogmeInstance: typeof import("./logmeInstance").LogmeInstance = null as any;
utilities.lazyLoad(exports, ["LogmeInstance"], () => require("./logmeInstance"));

export { MariadbCredentialArgs, MariadbCredentialState } from "./mariadbCredential";
export type MariadbCredential = import("./mariadbCredential").MariadbCredential;
export const MariadbCredential: typeof import("./mariadbCredential").MariadbCredential = null as any;
utilities.lazyLoad(exports, ["MariadbCredential"], () => require("./mariadbCredential"));

export { MariadbInstanceArgs, MariadbInstanceState } from "./mariadbInstance";
export type MariadbInstance = import("./mariadbInstance").MariadbInstance;
export const MariadbInstance: typeof import("./mariadbInstance").MariadbInstance = null as any;
utilities.lazyLoad(exports, ["MariadbInstance"], () => require("./mariadbInstance"));

export { ModelservingTokenArgs, ModelservingTokenState } from "./modelservingToken";
export type ModelservingToken = import("./modelservingToken").ModelservingToken;
export const ModelservingToken: typeof import("./modelservingToken").ModelservingToken = null as any;
utilities.lazyLoad(exports, ["ModelservingToken"], () => require("./modelservingToken"));

export { MongodbflexInstanceArgs, MongodbflexInstanceState } from "./mongodbflexInstance";
export type MongodbflexInstance = import("./mongodbflexInstance").MongodbflexInstance;
export const MongodbflexInstance: typeof import("./mongodbflexInstance").MongodbflexInstance = null as any;
utilities.lazyLoad(exports, ["MongodbflexInstance"], () => require("./mongodbflexInstance"));

export { MongodbflexUserArgs, MongodbflexUserState } from "./mongodbflexUser";
export type MongodbflexUser = import("./mongodbflexUser").MongodbflexUser;
export const MongodbflexUser: typeof import("./mongodbflexUser").MongodbflexUser = null as any;
utilities.lazyLoad(exports, ["MongodbflexUser"], () => require("./mongodbflexUser"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkAreaArgs, NetworkAreaState } from "./networkArea";
export type NetworkArea = import("./networkArea").NetworkArea;
export const NetworkArea: typeof import("./networkArea").NetworkArea = null as any;
utilities.lazyLoad(exports, ["NetworkArea"], () => require("./networkArea"));

export { NetworkAreaRouteArgs, NetworkAreaRouteState } from "./networkAreaRoute";
export type NetworkAreaRoute = import("./networkAreaRoute").NetworkAreaRoute;
export const NetworkAreaRoute: typeof import("./networkAreaRoute").NetworkAreaRoute = null as any;
utilities.lazyLoad(exports, ["NetworkAreaRoute"], () => require("./networkAreaRoute"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { ObjectstorageBucketArgs, ObjectstorageBucketState } from "./objectstorageBucket";
export type ObjectstorageBucket = import("./objectstorageBucket").ObjectstorageBucket;
export const ObjectstorageBucket: typeof import("./objectstorageBucket").ObjectstorageBucket = null as any;
utilities.lazyLoad(exports, ["ObjectstorageBucket"], () => require("./objectstorageBucket"));

export { ObjectstorageCredentialArgs, ObjectstorageCredentialState } from "./objectstorageCredential";
export type ObjectstorageCredential = import("./objectstorageCredential").ObjectstorageCredential;
export const ObjectstorageCredential: typeof import("./objectstorageCredential").ObjectstorageCredential = null as any;
utilities.lazyLoad(exports, ["ObjectstorageCredential"], () => require("./objectstorageCredential"));

export { ObjectstorageCredentialsGroupArgs, ObjectstorageCredentialsGroupState } from "./objectstorageCredentialsGroup";
export type ObjectstorageCredentialsGroup = import("./objectstorageCredentialsGroup").ObjectstorageCredentialsGroup;
export const ObjectstorageCredentialsGroup: typeof import("./objectstorageCredentialsGroup").ObjectstorageCredentialsGroup = null as any;
utilities.lazyLoad(exports, ["ObjectstorageCredentialsGroup"], () => require("./objectstorageCredentialsGroup"));

export { ObservabilityAlertgroupArgs, ObservabilityAlertgroupState } from "./observabilityAlertgroup";
export type ObservabilityAlertgroup = import("./observabilityAlertgroup").ObservabilityAlertgroup;
export const ObservabilityAlertgroup: typeof import("./observabilityAlertgroup").ObservabilityAlertgroup = null as any;
utilities.lazyLoad(exports, ["ObservabilityAlertgroup"], () => require("./observabilityAlertgroup"));

export { ObservabilityCredentialArgs, ObservabilityCredentialState } from "./observabilityCredential";
export type ObservabilityCredential = import("./observabilityCredential").ObservabilityCredential;
export const ObservabilityCredential: typeof import("./observabilityCredential").ObservabilityCredential = null as any;
utilities.lazyLoad(exports, ["ObservabilityCredential"], () => require("./observabilityCredential"));

export { ObservabilityInstanceArgs, ObservabilityInstanceState } from "./observabilityInstance";
export type ObservabilityInstance = import("./observabilityInstance").ObservabilityInstance;
export const ObservabilityInstance: typeof import("./observabilityInstance").ObservabilityInstance = null as any;
utilities.lazyLoad(exports, ["ObservabilityInstance"], () => require("./observabilityInstance"));

export { ObservabilityLogalertgroupArgs, ObservabilityLogalertgroupState } from "./observabilityLogalertgroup";
export type ObservabilityLogalertgroup = import("./observabilityLogalertgroup").ObservabilityLogalertgroup;
export const ObservabilityLogalertgroup: typeof import("./observabilityLogalertgroup").ObservabilityLogalertgroup = null as any;
utilities.lazyLoad(exports, ["ObservabilityLogalertgroup"], () => require("./observabilityLogalertgroup"));

export { ObservabilityScrapeconfigArgs, ObservabilityScrapeconfigState } from "./observabilityScrapeconfig";
export type ObservabilityScrapeconfig = import("./observabilityScrapeconfig").ObservabilityScrapeconfig;
export const ObservabilityScrapeconfig: typeof import("./observabilityScrapeconfig").ObservabilityScrapeconfig = null as any;
utilities.lazyLoad(exports, ["ObservabilityScrapeconfig"], () => require("./observabilityScrapeconfig"));

export { OpensearchCredentialArgs, OpensearchCredentialState } from "./opensearchCredential";
export type OpensearchCredential = import("./opensearchCredential").OpensearchCredential;
export const OpensearchCredential: typeof import("./opensearchCredential").OpensearchCredential = null as any;
utilities.lazyLoad(exports, ["OpensearchCredential"], () => require("./opensearchCredential"));

export { OpensearchInstanceArgs, OpensearchInstanceState } from "./opensearchInstance";
export type OpensearchInstance = import("./opensearchInstance").OpensearchInstance;
export const OpensearchInstance: typeof import("./opensearchInstance").OpensearchInstance = null as any;
utilities.lazyLoad(exports, ["OpensearchInstance"], () => require("./opensearchInstance"));

export { PostgresflexDatabaseArgs, PostgresflexDatabaseState } from "./postgresflexDatabase";
export type PostgresflexDatabase = import("./postgresflexDatabase").PostgresflexDatabase;
export const PostgresflexDatabase: typeof import("./postgresflexDatabase").PostgresflexDatabase = null as any;
utilities.lazyLoad(exports, ["PostgresflexDatabase"], () => require("./postgresflexDatabase"));

export { PostgresflexInstanceArgs, PostgresflexInstanceState } from "./postgresflexInstance";
export type PostgresflexInstance = import("./postgresflexInstance").PostgresflexInstance;
export const PostgresflexInstance: typeof import("./postgresflexInstance").PostgresflexInstance = null as any;
utilities.lazyLoad(exports, ["PostgresflexInstance"], () => require("./postgresflexInstance"));

export { PostgresflexUserArgs, PostgresflexUserState } from "./postgresflexUser";
export type PostgresflexUser = import("./postgresflexUser").PostgresflexUser;
export const PostgresflexUser: typeof import("./postgresflexUser").PostgresflexUser = null as any;
utilities.lazyLoad(exports, ["PostgresflexUser"], () => require("./postgresflexUser"));

export * from "./provider";
import { Provider } from "./provider";

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { PublicIpAssociateArgs, PublicIpAssociateState } from "./publicIpAssociate";
export type PublicIpAssociate = import("./publicIpAssociate").PublicIpAssociate;
export const PublicIpAssociate: typeof import("./publicIpAssociate").PublicIpAssociate = null as any;
utilities.lazyLoad(exports, ["PublicIpAssociate"], () => require("./publicIpAssociate"));

export { RabbitmqCredentialArgs, RabbitmqCredentialState } from "./rabbitmqCredential";
export type RabbitmqCredential = import("./rabbitmqCredential").RabbitmqCredential;
export const RabbitmqCredential: typeof import("./rabbitmqCredential").RabbitmqCredential = null as any;
utilities.lazyLoad(exports, ["RabbitmqCredential"], () => require("./rabbitmqCredential"));

export { RabbitmqInstanceArgs, RabbitmqInstanceState } from "./rabbitmqInstance";
export type RabbitmqInstance = import("./rabbitmqInstance").RabbitmqInstance;
export const RabbitmqInstance: typeof import("./rabbitmqInstance").RabbitmqInstance = null as any;
utilities.lazyLoad(exports, ["RabbitmqInstance"], () => require("./rabbitmqInstance"));

export { RedisCredentialArgs, RedisCredentialState } from "./redisCredential";
export type RedisCredential = import("./redisCredential").RedisCredential;
export const RedisCredential: typeof import("./redisCredential").RedisCredential = null as any;
utilities.lazyLoad(exports, ["RedisCredential"], () => require("./redisCredential"));

export { RedisInstanceArgs, RedisInstanceState } from "./redisInstance";
export type RedisInstance = import("./redisInstance").RedisInstance;
export const RedisInstance: typeof import("./redisInstance").RedisInstance = null as any;
utilities.lazyLoad(exports, ["RedisInstance"], () => require("./redisInstance"));

export { ResourcemanagerProjectArgs, ResourcemanagerProjectState } from "./resourcemanagerProject";
export type ResourcemanagerProject = import("./resourcemanagerProject").ResourcemanagerProject;
export const ResourcemanagerProject: typeof import("./resourcemanagerProject").ResourcemanagerProject = null as any;
utilities.lazyLoad(exports, ["ResourcemanagerProject"], () => require("./resourcemanagerProject"));

export { RoutingTableArgs, RoutingTableState } from "./routingTable";
export type RoutingTable = import("./routingTable").RoutingTable;
export const RoutingTable: typeof import("./routingTable").RoutingTable = null as any;
utilities.lazyLoad(exports, ["RoutingTable"], () => require("./routingTable"));

export { RoutingTableRouteArgs, RoutingTableRouteState } from "./routingTableRoute";
export type RoutingTableRoute = import("./routingTableRoute").RoutingTableRoute;
export const RoutingTableRoute: typeof import("./routingTableRoute").RoutingTableRoute = null as any;
utilities.lazyLoad(exports, ["RoutingTableRoute"], () => require("./routingTableRoute"));

export { SecretsmanagerInstanceArgs, SecretsmanagerInstanceState } from "./secretsmanagerInstance";
export type SecretsmanagerInstance = import("./secretsmanagerInstance").SecretsmanagerInstance;
export const SecretsmanagerInstance: typeof import("./secretsmanagerInstance").SecretsmanagerInstance = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerInstance"], () => require("./secretsmanagerInstance"));

export { SecretsmanagerUserArgs, SecretsmanagerUserState } from "./secretsmanagerUser";
export type SecretsmanagerUser = import("./secretsmanagerUser").SecretsmanagerUser;
export const SecretsmanagerUser: typeof import("./secretsmanagerUser").SecretsmanagerUser = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerUser"], () => require("./secretsmanagerUser"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerBackupScheduleArgs, ServerBackupScheduleState } from "./serverBackupSchedule";
export type ServerBackupSchedule = import("./serverBackupSchedule").ServerBackupSchedule;
export const ServerBackupSchedule: typeof import("./serverBackupSchedule").ServerBackupSchedule = null as any;
utilities.lazyLoad(exports, ["ServerBackupSchedule"], () => require("./serverBackupSchedule"));

export { ServerNetworkInterfaceAttachArgs, ServerNetworkInterfaceAttachState } from "./serverNetworkInterfaceAttach";
export type ServerNetworkInterfaceAttach = import("./serverNetworkInterfaceAttach").ServerNetworkInterfaceAttach;
export const ServerNetworkInterfaceAttach: typeof import("./serverNetworkInterfaceAttach").ServerNetworkInterfaceAttach = null as any;
utilities.lazyLoad(exports, ["ServerNetworkInterfaceAttach"], () => require("./serverNetworkInterfaceAttach"));

export { ServerServiceAccountAttachArgs, ServerServiceAccountAttachState } from "./serverServiceAccountAttach";
export type ServerServiceAccountAttach = import("./serverServiceAccountAttach").ServerServiceAccountAttach;
export const ServerServiceAccountAttach: typeof import("./serverServiceAccountAttach").ServerServiceAccountAttach = null as any;
utilities.lazyLoad(exports, ["ServerServiceAccountAttach"], () => require("./serverServiceAccountAttach"));

export { ServerUpdateScheduleArgs, ServerUpdateScheduleState } from "./serverUpdateSchedule";
export type ServerUpdateSchedule = import("./serverUpdateSchedule").ServerUpdateSchedule;
export const ServerUpdateSchedule: typeof import("./serverUpdateSchedule").ServerUpdateSchedule = null as any;
utilities.lazyLoad(exports, ["ServerUpdateSchedule"], () => require("./serverUpdateSchedule"));

export { ServerVolumeAttachArgs, ServerVolumeAttachState } from "./serverVolumeAttach";
export type ServerVolumeAttach = import("./serverVolumeAttach").ServerVolumeAttach;
export const ServerVolumeAttach: typeof import("./serverVolumeAttach").ServerVolumeAttach = null as any;
utilities.lazyLoad(exports, ["ServerVolumeAttach"], () => require("./serverVolumeAttach"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountAccessTokenArgs, ServiceAccountAccessTokenState } from "./serviceAccountAccessToken";
export type ServiceAccountAccessToken = import("./serviceAccountAccessToken").ServiceAccountAccessToken;
export const ServiceAccountAccessToken: typeof import("./serviceAccountAccessToken").ServiceAccountAccessToken = null as any;
utilities.lazyLoad(exports, ["ServiceAccountAccessToken"], () => require("./serviceAccountAccessToken"));

export { ServiceAccountKeyArgs, ServiceAccountKeyState } from "./serviceAccountKey";
export type ServiceAccountKey = import("./serviceAccountKey").ServiceAccountKey;
export const ServiceAccountKey: typeof import("./serviceAccountKey").ServiceAccountKey = null as any;
utilities.lazyLoad(exports, ["ServiceAccountKey"], () => require("./serviceAccountKey"));

export { SkeClusterArgs, SkeClusterState } from "./skeCluster";
export type SkeCluster = import("./skeCluster").SkeCluster;
export const SkeCluster: typeof import("./skeCluster").SkeCluster = null as any;
utilities.lazyLoad(exports, ["SkeCluster"], () => require("./skeCluster"));

export { SkeKubeconfigArgs, SkeKubeconfigState } from "./skeKubeconfig";
export type SkeKubeconfig = import("./skeKubeconfig").SkeKubeconfig;
export const SkeKubeconfig: typeof import("./skeKubeconfig").SkeKubeconfig = null as any;
utilities.lazyLoad(exports, ["SkeKubeconfig"], () => require("./skeKubeconfig"));

export { SqlserverflexInstanceArgs, SqlserverflexInstanceState } from "./sqlserverflexInstance";
export type SqlserverflexInstance = import("./sqlserverflexInstance").SqlserverflexInstance;
export const SqlserverflexInstance: typeof import("./sqlserverflexInstance").SqlserverflexInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverflexInstance"], () => require("./sqlserverflexInstance"));

export { SqlserverflexUserArgs, SqlserverflexUserState } from "./sqlserverflexUser";
export type SqlserverflexUser = import("./sqlserverflexUser").SqlserverflexUser;
export const SqlserverflexUser: typeof import("./sqlserverflexUser").SqlserverflexUser = null as any;
utilities.lazyLoad(exports, ["SqlserverflexUser"], () => require("./sqlserverflexUser"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "stackit:index/affinityGroup:AffinityGroup":
                return new AffinityGroup(name, <any>undefined, { urn })
            case "stackit:index/authorizationOrganizationRoleAssignment:AuthorizationOrganizationRoleAssignment":
                return new AuthorizationOrganizationRoleAssignment(name, <any>undefined, { urn })
            case "stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment":
                return new AuthorizationProjectRoleAssignment(name, <any>undefined, { urn })
            case "stackit:index/cdnCustomDomain:CdnCustomDomain":
                return new CdnCustomDomain(name, <any>undefined, { urn })
            case "stackit:index/cdnDistribution:CdnDistribution":
                return new CdnDistribution(name, <any>undefined, { urn })
            case "stackit:index/dnsRecordSet:DnsRecordSet":
                return new DnsRecordSet(name, <any>undefined, { urn })
            case "stackit:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "stackit:index/git:Git":
                return new Git(name, <any>undefined, { urn })
            case "stackit:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "stackit:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "stackit:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential":
                return new LoadbalancerObservabilityCredential(name, <any>undefined, { urn })
            case "stackit:index/logmeCredential:LogmeCredential":
                return new LogmeCredential(name, <any>undefined, { urn })
            case "stackit:index/logmeInstance:LogmeInstance":
                return new LogmeInstance(name, <any>undefined, { urn })
            case "stackit:index/mariadbCredential:MariadbCredential":
                return new MariadbCredential(name, <any>undefined, { urn })
            case "stackit:index/mariadbInstance:MariadbInstance":
                return new MariadbInstance(name, <any>undefined, { urn })
            case "stackit:index/modelservingToken:ModelservingToken":
                return new ModelservingToken(name, <any>undefined, { urn })
            case "stackit:index/mongodbflexInstance:MongodbflexInstance":
                return new MongodbflexInstance(name, <any>undefined, { urn })
            case "stackit:index/mongodbflexUser:MongodbflexUser":
                return new MongodbflexUser(name, <any>undefined, { urn })
            case "stackit:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "stackit:index/networkArea:NetworkArea":
                return new NetworkArea(name, <any>undefined, { urn })
            case "stackit:index/networkAreaRoute:NetworkAreaRoute":
                return new NetworkAreaRoute(name, <any>undefined, { urn })
            case "stackit:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "stackit:index/objectstorageBucket:ObjectstorageBucket":
                return new ObjectstorageBucket(name, <any>undefined, { urn })
            case "stackit:index/objectstorageCredential:ObjectstorageCredential":
                return new ObjectstorageCredential(name, <any>undefined, { urn })
            case "stackit:index/objectstorageCredentialsGroup:ObjectstorageCredentialsGroup":
                return new ObjectstorageCredentialsGroup(name, <any>undefined, { urn })
            case "stackit:index/observabilityAlertgroup:ObservabilityAlertgroup":
                return new ObservabilityAlertgroup(name, <any>undefined, { urn })
            case "stackit:index/observabilityCredential:ObservabilityCredential":
                return new ObservabilityCredential(name, <any>undefined, { urn })
            case "stackit:index/observabilityInstance:ObservabilityInstance":
                return new ObservabilityInstance(name, <any>undefined, { urn })
            case "stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup":
                return new ObservabilityLogalertgroup(name, <any>undefined, { urn })
            case "stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig":
                return new ObservabilityScrapeconfig(name, <any>undefined, { urn })
            case "stackit:index/opensearchCredential:OpensearchCredential":
                return new OpensearchCredential(name, <any>undefined, { urn })
            case "stackit:index/opensearchInstance:OpensearchInstance":
                return new OpensearchInstance(name, <any>undefined, { urn })
            case "stackit:index/postgresflexDatabase:PostgresflexDatabase":
                return new PostgresflexDatabase(name, <any>undefined, { urn })
            case "stackit:index/postgresflexInstance:PostgresflexInstance":
                return new PostgresflexInstance(name, <any>undefined, { urn })
            case "stackit:index/postgresflexUser:PostgresflexUser":
                return new PostgresflexUser(name, <any>undefined, { urn })
            case "stackit:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "stackit:index/publicIpAssociate:PublicIpAssociate":
                return new PublicIpAssociate(name, <any>undefined, { urn })
            case "stackit:index/rabbitmqCredential:RabbitmqCredential":
                return new RabbitmqCredential(name, <any>undefined, { urn })
            case "stackit:index/rabbitmqInstance:RabbitmqInstance":
                return new RabbitmqInstance(name, <any>undefined, { urn })
            case "stackit:index/redisCredential:RedisCredential":
                return new RedisCredential(name, <any>undefined, { urn })
            case "stackit:index/redisInstance:RedisInstance":
                return new RedisInstance(name, <any>undefined, { urn })
            case "stackit:index/resourcemanagerProject:ResourcemanagerProject":
                return new ResourcemanagerProject(name, <any>undefined, { urn })
            case "stackit:index/routingTable:RoutingTable":
                return new RoutingTable(name, <any>undefined, { urn })
            case "stackit:index/routingTableRoute:RoutingTableRoute":
                return new RoutingTableRoute(name, <any>undefined, { urn })
            case "stackit:index/secretsmanagerInstance:SecretsmanagerInstance":
                return new SecretsmanagerInstance(name, <any>undefined, { urn })
            case "stackit:index/secretsmanagerUser:SecretsmanagerUser":
                return new SecretsmanagerUser(name, <any>undefined, { urn })
            case "stackit:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "stackit:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "stackit:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "stackit:index/serverBackupSchedule:ServerBackupSchedule":
                return new ServerBackupSchedule(name, <any>undefined, { urn })
            case "stackit:index/serverNetworkInterfaceAttach:ServerNetworkInterfaceAttach":
                return new ServerNetworkInterfaceAttach(name, <any>undefined, { urn })
            case "stackit:index/serverServiceAccountAttach:ServerServiceAccountAttach":
                return new ServerServiceAccountAttach(name, <any>undefined, { urn })
            case "stackit:index/serverUpdateSchedule:ServerUpdateSchedule":
                return new ServerUpdateSchedule(name, <any>undefined, { urn })
            case "stackit:index/serverVolumeAttach:ServerVolumeAttach":
                return new ServerVolumeAttach(name, <any>undefined, { urn })
            case "stackit:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken":
                return new ServiceAccountAccessToken(name, <any>undefined, { urn })
            case "stackit:index/serviceAccountKey:ServiceAccountKey":
                return new ServiceAccountKey(name, <any>undefined, { urn })
            case "stackit:index/skeCluster:SkeCluster":
                return new SkeCluster(name, <any>undefined, { urn })
            case "stackit:index/skeKubeconfig:SkeKubeconfig":
                return new SkeKubeconfig(name, <any>undefined, { urn })
            case "stackit:index/sqlserverflexInstance:SqlserverflexInstance":
                return new SqlserverflexInstance(name, <any>undefined, { urn })
            case "stackit:index/sqlserverflexUser:SqlserverflexUser":
                return new SqlserverflexUser(name, <any>undefined, { urn })
            case "stackit:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("stackit", "index/affinityGroup", _module)
pulumi.runtime.registerResourceModule("stackit", "index/authorizationOrganizationRoleAssignment", _module)
pulumi.runtime.registerResourceModule("stackit", "index/authorizationProjectRoleAssignment", _module)
pulumi.runtime.registerResourceModule("stackit", "index/cdnCustomDomain", _module)
pulumi.runtime.registerResourceModule("stackit", "index/cdnDistribution", _module)
pulumi.runtime.registerResourceModule("stackit", "index/dnsRecordSet", _module)
pulumi.runtime.registerResourceModule("stackit", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("stackit", "index/git", _module)
pulumi.runtime.registerResourceModule("stackit", "index/image", _module)
pulumi.runtime.registerResourceModule("stackit", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("stackit", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("stackit", "index/loadbalancerObservabilityCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/logmeCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/logmeInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/mariadbCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/mariadbInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/modelservingToken", _module)
pulumi.runtime.registerResourceModule("stackit", "index/mongodbflexInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/mongodbflexUser", _module)
pulumi.runtime.registerResourceModule("stackit", "index/network", _module)
pulumi.runtime.registerResourceModule("stackit", "index/networkArea", _module)
pulumi.runtime.registerResourceModule("stackit", "index/networkAreaRoute", _module)
pulumi.runtime.registerResourceModule("stackit", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("stackit", "index/objectstorageBucket", _module)
pulumi.runtime.registerResourceModule("stackit", "index/objectstorageCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/objectstorageCredentialsGroup", _module)
pulumi.runtime.registerResourceModule("stackit", "index/observabilityAlertgroup", _module)
pulumi.runtime.registerResourceModule("stackit", "index/observabilityCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/observabilityInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/observabilityLogalertgroup", _module)
pulumi.runtime.registerResourceModule("stackit", "index/observabilityScrapeconfig", _module)
pulumi.runtime.registerResourceModule("stackit", "index/opensearchCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/opensearchInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/postgresflexDatabase", _module)
pulumi.runtime.registerResourceModule("stackit", "index/postgresflexInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/postgresflexUser", _module)
pulumi.runtime.registerResourceModule("stackit", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("stackit", "index/publicIpAssociate", _module)
pulumi.runtime.registerResourceModule("stackit", "index/rabbitmqCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/rabbitmqInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/redisCredential", _module)
pulumi.runtime.registerResourceModule("stackit", "index/redisInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/resourcemanagerProject", _module)
pulumi.runtime.registerResourceModule("stackit", "index/routingTable", _module)
pulumi.runtime.registerResourceModule("stackit", "index/routingTableRoute", _module)
pulumi.runtime.registerResourceModule("stackit", "index/secretsmanagerInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/secretsmanagerUser", _module)
pulumi.runtime.registerResourceModule("stackit", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("stackit", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("stackit", "index/server", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serverBackupSchedule", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serverNetworkInterfaceAttach", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serverServiceAccountAttach", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serverUpdateSchedule", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serverVolumeAttach", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serviceAccountAccessToken", _module)
pulumi.runtime.registerResourceModule("stackit", "index/serviceAccountKey", _module)
pulumi.runtime.registerResourceModule("stackit", "index/skeCluster", _module)
pulumi.runtime.registerResourceModule("stackit", "index/skeKubeconfig", _module)
pulumi.runtime.registerResourceModule("stackit", "index/sqlserverflexInstance", _module)
pulumi.runtime.registerResourceModule("stackit", "index/sqlserverflexUser", _module)
pulumi.runtime.registerResourceModule("stackit", "index/volume", _module)
pulumi.runtime.registerResourcePackage("stackit", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:stackit") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
