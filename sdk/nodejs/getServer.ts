// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Server datasource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getServer(args: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getServer:getServer", {
        "projectId": args.projectId,
        "serverId": args.serverId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    /**
     * STACKIT project ID to which the server is associated.
     */
    projectId: string;
    /**
     * The server ID.
     */
    serverId: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    /**
     * The affinity group the server is assigned to.
     */
    readonly affinityGroup: string;
    /**
     * The availability zone of the server.
     */
    readonly availabilityZone: string;
    /**
     * The boot volume for the server
     */
    readonly bootVolume: outputs.GetServerBootVolume;
    /**
     * Date-time when the server was created
     */
    readonly createdAt: string;
    readonly id: string;
    /**
     * The image ID to be used for an ephemeral disk on the server.
     */
    readonly imageId: string;
    /**
     * The name of the keypair used during server creation.
     */
    readonly keypairName: string;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    readonly labels: {[key: string]: string};
    /**
     * Date-time when the server was launched
     */
    readonly launchedAt: string;
    /**
     * Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
     */
    readonly machineType: string;
    /**
     * The name of the server.
     */
    readonly name: string;
    /**
     * The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
     */
    readonly networkInterfaces: string[];
    /**
     * STACKIT project ID to which the server is associated.
     */
    readonly projectId: string;
    /**
     * The server ID.
     */
    readonly serverId: string;
    /**
     * Date-time when the server was updated
     */
    readonly updatedAt: string;
    /**
     * User data that is passed via cloud-init to the server.
     */
    readonly userData: string;
}
/**
 * Server datasource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getServerOutput(args: GetServerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getServer:getServer", {
        "projectId": args.projectId,
        "serverId": args.serverId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    /**
     * STACKIT project ID to which the server is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The server ID.
     */
    serverId: pulumi.Input<string>;
}
