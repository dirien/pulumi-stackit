// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export function getImageV2(args: GetImageV2Args, opts?: pulumi.InvokeOptions): Promise<GetImageV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getImageV2:getImageV2", {
        "filter": args.filter,
        "imageId": args.imageId,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "projectId": args.projectId,
        "sortAscending": args.sortAscending,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageV2.
 */
export interface GetImageV2Args {
    /**
     * Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
     */
    filter?: inputs.GetImageV2Filter;
    /**
     * Image ID to fetch directly
     */
    imageId?: string;
    /**
     * Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
     */
    name?: string;
    /**
     * Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
     */
    nameRegex?: string;
    /**
     * STACKIT project ID to which the image is associated.
     */
    projectId: string;
    /**
     * If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
     */
    sortAscending?: boolean;
}

/**
 * A collection of values returned by getImageV2.
 */
export interface GetImageV2Result {
    /**
     * Representation of an image checksum.
     */
    readonly checksum: outputs.GetImageV2Checksum;
    /**
     * Properties to set hardware and scheduling settings for an image.
     */
    readonly config: outputs.GetImageV2Config;
    /**
     * The disk format of the image.
     */
    readonly diskFormat: string;
    /**
     * Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
     */
    readonly filter?: outputs.GetImageV2Filter;
    readonly id: string;
    /**
     * Image ID to fetch directly
     */
    readonly imageId?: string;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    readonly labels: {[key: string]: string};
    /**
     * The minimum disk size of the image in GB.
     */
    readonly minDiskSize: number;
    /**
     * The minimum RAM of the image in MB.
     */
    readonly minRam: number;
    /**
     * Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
     */
    readonly name?: string;
    /**
     * Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
     */
    readonly nameRegex?: string;
    /**
     * STACKIT project ID to which the image is associated.
     */
    readonly projectId: string;
    /**
     * Whether the image is protected.
     */
    readonly protected: boolean;
    /**
     * The scope of the image.
     */
    readonly scope: string;
    /**
     * If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
     */
    readonly sortAscending?: boolean;
}
/**
 * ## Example Usage
 */
export function getImageV2Output(args: GetImageV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getImageV2:getImageV2", {
        "filter": args.filter,
        "imageId": args.imageId,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "projectId": args.projectId,
        "sortAscending": args.sortAscending,
    }, opts);
}

/**
 * A collection of arguments for invoking getImageV2.
 */
export interface GetImageV2OutputArgs {
    /**
     * Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
     */
    filter?: pulumi.Input<inputs.GetImageV2FilterArgs>;
    /**
     * Image ID to fetch directly
     */
    imageId?: pulumi.Input<string>;
    /**
     * Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
     */
    name?: pulumi.Input<string>;
    /**
     * Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the image is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
     */
    sortAscending?: pulumi.Input<boolean>;
}
