// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * External Load Balancer IP address where this Load Balancer is exposed.
     */
    public readonly externalAddress!: pulumi.Output<string | undefined>;
    /**
     * List of all listeners which will accept traffic. Limited to 20.
     */
    public readonly listeners!: pulumi.Output<outputs.LoadbalancerListener[]>;
    /**
     * Load balancer name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of networks that listeners and targets reside in.
     */
    public readonly networks!: pulumi.Output<outputs.LoadbalancerNetwork[]>;
    /**
     * Defines any optional functionality you want to have enabled on your load balancer.
     */
    public readonly options!: pulumi.Output<outputs.LoadbalancerOptions>;
    /**
     * The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
     */
    public readonly planId!: pulumi.Output<string>;
    /**
     * Transient private Load Balancer IP address. It can change any time.
     */
    public /*out*/ readonly privateAddress!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * List of all target pools which will be used in the Load Balancer. Limited to 20.
     */
    public readonly targetPools!: pulumi.Output<outputs.LoadbalancerTargetPool[]>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["externalAddress"] = state ? state.externalAddress : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["privateAddress"] = state ? state.privateAddress : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["targetPools"] = state ? state.targetPools : undefined;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            if ((!args || args.listeners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listeners'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.targetPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetPools'");
            }
            resourceInputs["externalAddress"] = args ? args.externalAddress : undefined;
            resourceInputs["listeners"] = args ? args.listeners : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["targetPools"] = args ? args.targetPools : undefined;
            resourceInputs["privateAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * External Load Balancer IP address where this Load Balancer is exposed.
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * List of all listeners which will accept traffic. Limited to 20.
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.LoadbalancerListener>[]>;
    /**
     * Load balancer name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of networks that listeners and targets reside in.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.LoadbalancerNetwork>[]>;
    /**
     * Defines any optional functionality you want to have enabled on your load balancer.
     */
    options?: pulumi.Input<inputs.LoadbalancerOptions>;
    /**
     * The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
     */
    planId?: pulumi.Input<string>;
    /**
     * Transient private Load Balancer IP address. It can change any time.
     */
    privateAddress?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * List of all target pools which will be used in the Load Balancer. Limited to 20.
     */
    targetPools?: pulumi.Input<pulumi.Input<inputs.LoadbalancerTargetPool>[]>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * External Load Balancer IP address where this Load Balancer is exposed.
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * List of all listeners which will accept traffic. Limited to 20.
     */
    listeners: pulumi.Input<pulumi.Input<inputs.LoadbalancerListener>[]>;
    /**
     * Load balancer name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of networks that listeners and targets reside in.
     */
    networks: pulumi.Input<pulumi.Input<inputs.LoadbalancerNetwork>[]>;
    /**
     * Defines any optional functionality you want to have enabled on your load balancer.
     */
    options?: pulumi.Input<inputs.LoadbalancerOptions>;
    /**
     * The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
     */
    planId?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the Load Balancer is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * List of all target pools which will be used in the Load Balancer. Limited to 20.
     */
    targetPools: pulumi.Input<pulumi.Input<inputs.LoadbalancerTargetPool>[]>;
}
