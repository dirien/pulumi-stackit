// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Network interface resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkInterfaceState, opts?: pulumi.CustomResourceOptions): NetworkInterface {
        return new NetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/networkInterface:NetworkInterface';

    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }

    /**
     * The list of CIDR (Classless Inter-Domain Routing) notations.
     */
    public readonly allowedAddresses!: pulumi.Output<string[]>;
    /**
     * The device UUID of the network interface.
     */
    public /*out*/ readonly device!: pulumi.Output<string>;
    /**
     * The IPv4 address.
     */
    public readonly ipv4!: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a network interface.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The MAC address of network interface.
     */
    public /*out*/ readonly mac!: pulumi.Output<string>;
    /**
     * The name of the network interface.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network ID to which the network interface is associated.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The network interface ID.
     */
    public /*out*/ readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the network is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The Network Interface Security. If set to false, then no security groups will apply to this network interface.
     */
    public readonly security!: pulumi.Output<boolean>;
    /**
     * The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkInterfaceArgs | NetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkInterfaceState | undefined;
            resourceInputs["allowedAddresses"] = state ? state.allowedAddresses : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkInterfaceArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["allowedAddresses"] = args ? args.allowedAddresses : undefined;
            resourceInputs["ipv4"] = args ? args.ipv4 : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["device"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkInterface resources.
 */
export interface NetworkInterfaceState {
    /**
     * The list of CIDR (Classless Inter-Domain Routing) notations.
     */
    allowedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The device UUID of the network interface.
     */
    device?: pulumi.Input<string>;
    /**
     * The IPv4 address.
     */
    ipv4?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a network interface.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The MAC address of network interface.
     */
    mac?: pulumi.Input<string>;
    /**
     * The name of the network interface.
     */
    name?: pulumi.Input<string>;
    /**
     * The network ID to which the network interface is associated.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The network interface ID.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the network is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Network Interface Security. If set to false, then no security groups will apply to this network interface.
     */
    security?: pulumi.Input<boolean>;
    /**
     * The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkInterface resource.
 */
export interface NetworkInterfaceArgs {
    /**
     * The list of CIDR (Classless Inter-Domain Routing) notations.
     */
    allowedAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IPv4 address.
     */
    ipv4?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a network interface.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the network interface.
     */
    name?: pulumi.Input<string>;
    /**
     * The network ID to which the network interface is associated.
     */
    networkId: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the network is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The Network Interface Security. If set to false, then no security groups will apply to this network interface.
     */
    security?: pulumi.Input<boolean>;
    /**
     * The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
