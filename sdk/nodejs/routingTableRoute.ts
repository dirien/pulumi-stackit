// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Routing table route resource schema. Must have a `region` specified in the provider configuration.
 *
 * > This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
 *
 * ## Example Usage
 */
export class RoutingTableRoute extends pulumi.CustomResource {
    /**
     * Get an existing RoutingTableRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutingTableRouteState, opts?: pulumi.CustomResourceOptions): RoutingTableRoute {
        return new RoutingTableRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/routingTableRoute:RoutingTableRoute';

    /**
     * Returns true if the given object is an instance of RoutingTableRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingTableRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingTableRoute.__pulumiType;
    }

    /**
     * Date-time when the route was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Destination of the route.
     */
    public readonly destination!: pulumi.Output<outputs.RoutingTableRouteDestination>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The network area ID to which the routing table is associated.
     */
    public readonly networkAreaId!: pulumi.Output<string>;
    /**
     * Next hop destination.
     */
    public readonly nextHop!: pulumi.Output<outputs.RoutingTableRouteNextHop>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The ID of the route.
     */
    public /*out*/ readonly routeId!: pulumi.Output<string>;
    /**
     * The routing tables ID.
     */
    public readonly routingTableId!: pulumi.Output<string>;
    /**
     * Date-time when the route was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a RoutingTableRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingTableRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutingTableRouteArgs | RoutingTableRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutingTableRouteState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["networkAreaId"] = state ? state.networkAreaId : undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["routingTableId"] = state ? state.routingTableId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as RoutingTableRouteArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.networkAreaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkAreaId'");
            }
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.routingTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingTableId'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["networkAreaId"] = args ? args.networkAreaId : undefined;
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingTableId"] = args ? args.routingTableId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["routeId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingTableRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoutingTableRoute resources.
 */
export interface RoutingTableRouteState {
    /**
     * Date-time when the route was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Destination of the route.
     */
    destination?: pulumi.Input<inputs.RoutingTableRouteDestination>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The network area ID to which the routing table is associated.
     */
    networkAreaId?: pulumi.Input<string>;
    /**
     * Next hop destination.
     */
    nextHop?: pulumi.Input<inputs.RoutingTableRouteNextHop>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the route.
     */
    routeId?: pulumi.Input<string>;
    /**
     * The routing tables ID.
     */
    routingTableId?: pulumi.Input<string>;
    /**
     * Date-time when the route was updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutingTableRoute resource.
 */
export interface RoutingTableRouteArgs {
    /**
     * Destination of the route.
     */
    destination: pulumi.Input<inputs.RoutingTableRouteDestination>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The network area ID to which the routing table is associated.
     */
    networkAreaId: pulumi.Input<string>;
    /**
     * Next hop destination.
     */
    nextHop: pulumi.Input<inputs.RoutingTableRouteNextHop>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The routing tables ID.
     */
    routingTableId: pulumi.Input<string>;
}
