// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * CDN distribution data source schema.
 *
 * > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
 *
 * ## Example Usage
 */
export class CdnCustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing CdnCustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnCustomDomainState, opts?: pulumi.CustomResourceOptions): CdnCustomDomain {
        return new CdnCustomDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/cdnCustomDomain:CdnCustomDomain';

    /**
     * Returns true if the given object is an instance of CdnCustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnCustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnCustomDomain.__pulumiType;
    }

    /**
     * CDN distribution ID
     */
    public readonly distributionId!: pulumi.Output<string>;
    /**
     * List of distribution errors
     */
    public /*out*/ readonly errors!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID associated with the distribution
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Status of the distribution
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a CdnCustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnCustomDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnCustomDomainArgs | CdnCustomDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnCustomDomainState | undefined;
            resourceInputs["distributionId"] = state ? state.distributionId : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as CdnCustomDomainArgs | undefined;
            if ((!args || args.distributionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'distributionId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["distributionId"] = args ? args.distributionId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnCustomDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CdnCustomDomain resources.
 */
export interface CdnCustomDomainState {
    /**
     * CDN distribution ID
     */
    distributionId?: pulumi.Input<string>;
    /**
     * List of distribution errors
     */
    errors?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID associated with the distribution
     */
    projectId?: pulumi.Input<string>;
    /**
     * Status of the distribution
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdnCustomDomain resource.
 */
export interface CdnCustomDomainArgs {
    /**
     * CDN distribution ID
     */
    distributionId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID associated with the distribution
     */
    projectId: pulumi.Input<string>;
}
