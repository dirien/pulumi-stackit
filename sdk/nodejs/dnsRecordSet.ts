// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS Record Set Resource schema.
 *
 * ## Example Usage
 */
export class DnsRecordSet extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordSetState, opts?: pulumi.CustomResourceOptions): DnsRecordSet {
        return new DnsRecordSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/dnsRecordSet:DnsRecordSet';

    /**
     * Returns true if the given object is an instance of DnsRecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecordSet.__pulumiType;
    }

    /**
     * Specifies if the record set is active or not. Defaults to `true`
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * Comment.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Error shows error in case create/update/delete failed.
     */
    public /*out*/ readonly error!: pulumi.Output<string>;
    /**
     * Fully qualified domain name (FQDN) of the record set.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the dns record set is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The rr set id.
     */
    public /*out*/ readonly recordSetId!: pulumi.Output<string>;
    /**
     * Records.
     */
    public readonly records!: pulumi.Output<string[]>;
    /**
     * Record set state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Time to live. E.g. 3600
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The record set type. E.g. `A` or `CNAME`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The zone ID to which is dns record set is associated.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsRecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordSetArgs | DnsRecordSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordSetState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["error"] = state ? state.error : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["recordSetId"] = state ? state.recordSetId : undefined;
            resourceInputs["records"] = state ? state.records : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsRecordSetArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.records === undefined) && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["records"] = args ? args.records : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["recordSetId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecordSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecordSet resources.
 */
export interface DnsRecordSetState {
    /**
     * Specifies if the record set is active or not. Defaults to `true`
     */
    active?: pulumi.Input<boolean>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Error shows error in case create/update/delete failed.
     */
    error?: pulumi.Input<string>;
    /**
     * Fully qualified domain name (FQDN) of the record set.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the dns record set is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The rr set id.
     */
    recordSetId?: pulumi.Input<string>;
    /**
     * Records.
     */
    records?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Record set state.
     */
    state?: pulumi.Input<string>;
    /**
     * Time to live. E.g. 3600
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record set type. E.g. `A` or `CNAME`
     */
    type?: pulumi.Input<string>;
    /**
     * The zone ID to which is dns record set is associated.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecordSet resource.
 */
export interface DnsRecordSetArgs {
    /**
     * Specifies if the record set is active or not. Defaults to `true`
     */
    active?: pulumi.Input<boolean>;
    /**
     * Comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the dns record set is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * Records.
     */
    records: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time to live. E.g. 3600
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record set type. E.g. `A` or `CNAME`
     */
    type: pulumi.Input<string>;
    /**
     * The zone ID to which is dns record set is associated.
     */
    zoneId: pulumi.Input<string>;
}
