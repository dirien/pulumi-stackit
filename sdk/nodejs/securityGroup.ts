// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Security group resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class SecurityGroup extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupState, opts?: pulumi.CustomResourceOptions): SecurityGroup {
        return new SecurityGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/securityGroup:SecurityGroup';

    /**
     * Returns true if the given object is an instance of SecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroup.__pulumiType;
    }

    /**
     * The description of the security group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the security group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the security group is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The security group ID.
     */
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.
     */
    public readonly stateful!: pulumi.Output<boolean>;

    /**
     * Create a SecurityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupArgs | SecurityGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["stateful"] = state ? state.stateful : undefined;
        } else {
            const args = argsOrState as SecurityGroupArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["stateful"] = args ? args.stateful : undefined;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroup resources.
 */
export interface SecurityGroupState {
    /**
     * The description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the security group is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.
     */
    stateful?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecurityGroup resource.
 */
export interface SecurityGroupArgs {
    /**
     * The description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the security group is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.
     */
    stateful?: pulumi.Input<boolean>;
}
