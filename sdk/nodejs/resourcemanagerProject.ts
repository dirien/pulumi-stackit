// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class ResourcemanagerProject extends pulumi.CustomResource {
    /**
     * Get an existing ResourcemanagerProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcemanagerProjectState, opts?: pulumi.CustomResourceOptions): ResourcemanagerProject {
        return new ResourcemanagerProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/resourcemanagerProject:ResourcemanagerProject';

    /**
     * Returns true if the given object is an instance of ResourcemanagerProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcemanagerProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcemanagerProject.__pulumiType;
    }

    /**
     * Project container ID. Globally unique, user-friendly identifier.
     */
    public /*out*/ readonly containerId!: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Project name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
     */
    public readonly ownerEmail!: pulumi.Output<string>;
    /**
     * Parent resource identifier. Both container ID (user-friendly) and UUID are supported
     */
    public readonly parentContainerId!: pulumi.Output<string>;
    /**
     * Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;

    /**
     * Create a ResourcemanagerProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourcemanagerProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcemanagerProjectArgs | ResourcemanagerProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourcemanagerProjectState | undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerEmail"] = state ? state.ownerEmail : undefined;
            resourceInputs["parentContainerId"] = state ? state.parentContainerId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ResourcemanagerProjectArgs | undefined;
            if ((!args || args.ownerEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerEmail'");
            }
            if ((!args || args.parentContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentContainerId'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerEmail"] = args ? args.ownerEmail : undefined;
            resourceInputs["parentContainerId"] = args ? args.parentContainerId : undefined;
            resourceInputs["containerId"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcemanagerProject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourcemanagerProject resources.
 */
export interface ResourcemanagerProjectState {
    /**
     * Project container ID. Globally unique, user-friendly identifier.
     */
    containerId?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Project name.
     */
    name?: pulumi.Input<string>;
    /**
     * Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
     */
    ownerEmail?: pulumi.Input<string>;
    /**
     * Parent resource identifier. Both container ID (user-friendly) and UUID are supported
     */
    parentContainerId?: pulumi.Input<string>;
    /**
     * Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourcemanagerProject resource.
 */
export interface ResourcemanagerProjectArgs {
    /**
     * Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Project name.
     */
    name?: pulumi.Input<string>;
    /**
     * Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
     */
    ownerEmail: pulumi.Input<string>;
    /**
     * Parent resource identifier. Both container ID (user-friendly) and UUID are supported
     */
    parentContainerId: pulumi.Input<string>;
}
