// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Server resource schema. Must have a region specified in the provider configuration.
 *
 * ## Example Usage
 *
 * ### With key pair
 *
 * ### Boot from volume
 *
 * ### Boot from existing volume
 *
 * ### Network setup
 *
 * ### Server with attached volume
 *
 * ### Server with user data (cloud-init)
 *
 * ### Additional Examples
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The affinity group the server is assigned to.
     */
    declare public readonly affinityGroup: pulumi.Output<string | undefined>;
    /**
     * The availability zone of the server.
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * The boot volume for the server
     */
    declare public readonly bootVolume: pulumi.Output<outputs.ServerBootVolume | undefined>;
    /**
     * Date-time when the server was created
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
     */
    declare public readonly desiredStatus: pulumi.Output<string | undefined>;
    /**
     * The image ID to be used for an ephemeral disk on the server.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * The name of the keypair used during server creation.
     */
    declare public readonly keypairName: pulumi.Output<string | undefined>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Date-time when the server was launched
     */
    declare public /*out*/ readonly launchedAt: pulumi.Output<string>;
    /**
     * Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
     */
    declare public readonly machineType: pulumi.Output<string>;
    /**
     * The name of the server.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
     */
    declare public readonly networkInterfaces: pulumi.Output<string[] | undefined>;
    /**
     * STACKIT project ID to which the server is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The server ID.
     */
    declare public /*out*/ readonly serverId: pulumi.Output<string>;
    /**
     * Date-time when the server was updated
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * User data that is passed via cloud-init to the server.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["affinityGroup"] = state?.affinityGroup;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["bootVolume"] = state?.bootVolume;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["desiredStatus"] = state?.desiredStatus;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["keypairName"] = state?.keypairName;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["launchedAt"] = state?.launchedAt;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkInterfaces"] = state?.networkInterfaces;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["userData"] = state?.userData;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (args?.machineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["affinityGroup"] = args?.affinityGroup;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["bootVolume"] = args?.bootVolume;
            resourceInputs["desiredStatus"] = args?.desiredStatus;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["keypairName"] = args?.keypairName;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["machineType"] = args?.machineType;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkInterfaces"] = args?.networkInterfaces;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["launchedAt"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The affinity group the server is assigned to.
     */
    affinityGroup?: pulumi.Input<string>;
    /**
     * The availability zone of the server.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The boot volume for the server
     */
    bootVolume?: pulumi.Input<inputs.ServerBootVolume>;
    /**
     * Date-time when the server was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
     */
    desiredStatus?: pulumi.Input<string>;
    /**
     * The image ID to be used for an ephemeral disk on the server.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The name of the keypair used during server creation.
     */
    keypairName?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Date-time when the server was launched
     */
    launchedAt?: pulumi.Input<string>;
    /**
     * Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
     */
    machineType?: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * STACKIT project ID to which the server is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The server ID.
     */
    serverId?: pulumi.Input<string>;
    /**
     * Date-time when the server was updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User data that is passed via cloud-init to the server.
     */
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The affinity group the server is assigned to.
     */
    affinityGroup?: pulumi.Input<string>;
    /**
     * The availability zone of the server.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The boot volume for the server
     */
    bootVolume?: pulumi.Input<inputs.ServerBootVolume>;
    /**
     * The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
     */
    desiredStatus?: pulumi.Input<string>;
    /**
     * The image ID to be used for an ephemeral disk on the server.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The name of the keypair used during server creation.
     */
    keypairName?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
     */
    machineType: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * STACKIT project ID to which the server is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * User data that is passed via cloud-init to the server.
     */
    userData?: pulumi.Input<string>;
}
