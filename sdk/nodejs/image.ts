// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Image resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * Representation of an image checksum.
     */
    public /*out*/ readonly checksum!: pulumi.Output<outputs.ImageChecksum>;
    /**
     * Properties to set hardware and scheduling settings for an image.
     */
    public readonly config!: pulumi.Output<outputs.ImageConfig>;
    /**
     * The disk format of the image.
     */
    public readonly diskFormat!: pulumi.Output<string>;
    /**
     * The image ID.
     */
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The filepath of the raw image file to be uploaded.
     */
    public readonly localFilePath!: pulumi.Output<string>;
    /**
     * The minimum disk size of the image in GB.
     */
    public readonly minDiskSize!: pulumi.Output<number>;
    /**
     * The minimum RAM of the image in MB.
     */
    public readonly minRam!: pulumi.Output<number>;
    /**
     * The name of the image.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the image is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Whether the image is protected.
     */
    public /*out*/ readonly protected!: pulumi.Output<boolean>;
    /**
     * The scope of the image.
     */
    public /*out*/ readonly scope!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["localFilePath"] = state ? state.localFilePath : undefined;
            resourceInputs["minDiskSize"] = state ? state.minDiskSize : undefined;
            resourceInputs["minRam"] = state ? state.minRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["protected"] = state ? state.protected : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.diskFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskFormat'");
            }
            if ((!args || args.localFilePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localFilePath'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["diskFormat"] = args ? args.diskFormat : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["localFilePath"] = args ? args.localFilePath : undefined;
            resourceInputs["minDiskSize"] = args ? args.minDiskSize : undefined;
            resourceInputs["minRam"] = args ? args.minRam : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["protected"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * Representation of an image checksum.
     */
    checksum?: pulumi.Input<inputs.ImageChecksum>;
    /**
     * Properties to set hardware and scheduling settings for an image.
     */
    config?: pulumi.Input<inputs.ImageConfig>;
    /**
     * The disk format of the image.
     */
    diskFormat?: pulumi.Input<string>;
    /**
     * The image ID.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The filepath of the raw image file to be uploaded.
     */
    localFilePath?: pulumi.Input<string>;
    /**
     * The minimum disk size of the image in GB.
     */
    minDiskSize?: pulumi.Input<number>;
    /**
     * The minimum RAM of the image in MB.
     */
    minRam?: pulumi.Input<number>;
    /**
     * The name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the image is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Whether the image is protected.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * The scope of the image.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Properties to set hardware and scheduling settings for an image.
     */
    config?: pulumi.Input<inputs.ImageConfig>;
    /**
     * The disk format of the image.
     */
    diskFormat: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The filepath of the raw image file to be uploaded.
     */
    localFilePath: pulumi.Input<string>;
    /**
     * The minimum disk size of the image in GB.
     */
    minDiskSize?: pulumi.Input<number>;
    /**
     * The minimum RAM of the image in MB.
     */
    minRam?: pulumi.Input<number>;
    /**
     * The name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the image is associated.
     */
    projectId: pulumi.Input<string>;
}
