// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Git Instance resource schema.
 *
 * > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources. This resource currently does not support updates. Changing the ACLs, flavor, or name will trigger resource recreation. Update functionality will be added soon. In the meantime, please proceed with caution. To update these attributes, please open a support ticket.
 *
 * ## Example Usage
 */
export class Git extends pulumi.CustomResource {
    /**
     * Get an existing Git resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitState, opts?: pulumi.CustomResourceOptions): Git {
        return new Git(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/git:Git';

    /**
     * Returns true if the given object is an instance of Git.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Git {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Git.__pulumiType;
    }

    /**
     * Restricted ACL for instance access.
     */
    public readonly acls!: pulumi.Output<string[]>;
    /**
     * How many bytes of disk space is consumed.
     */
    public /*out*/ readonly consumedDisk!: pulumi.Output<string>;
    /**
     * How many bytes of Object Storage is consumed.
     */
    public /*out*/ readonly consumedObjectStorage!: pulumi.Output<string>;
    /**
     * Instance creation timestamp in RFC3339 format.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * ID linked to the git instance.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Unique name linked to the git instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the git instance is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Url linked to the git instance.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Version linked to the git instance.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a Git resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitArgs | GitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitState | undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["consumedDisk"] = state ? state.consumedDisk : undefined;
            resourceInputs["consumedObjectStorage"] = state ? state.consumedObjectStorage : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as GitArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["consumedDisk"] = undefined /*out*/;
            resourceInputs["consumedObjectStorage"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Git.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Git resources.
 */
export interface GitState {
    /**
     * Restricted ACL for instance access.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How many bytes of disk space is consumed.
     */
    consumedDisk?: pulumi.Input<string>;
    /**
     * How many bytes of Object Storage is consumed.
     */
    consumedObjectStorage?: pulumi.Input<string>;
    /**
     * Instance creation timestamp in RFC3339 format.
     */
    created?: pulumi.Input<string>;
    /**
     * Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`
     */
    flavor?: pulumi.Input<string>;
    /**
     * ID linked to the git instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Unique name linked to the git instance.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the git instance is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Url linked to the git instance.
     */
    url?: pulumi.Input<string>;
    /**
     * Version linked to the git instance.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Git resource.
 */
export interface GitArgs {
    /**
     * Restricted ACL for instance access.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`
     */
    flavor?: pulumi.Input<string>;
    /**
     * Unique name linked to the git instance.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the git instance is associated.
     */
    projectId: pulumi.Input<string>;
}
