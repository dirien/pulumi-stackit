// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Secrets Manager user resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class SecretsmanagerUser extends pulumi.CustomResource {
    /**
     * Get an existing SecretsmanagerUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsmanagerUserState, opts?: pulumi.CustomResourceOptions): SecretsmanagerUser {
        return new SecretsmanagerUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/secretsmanagerUser:SecretsmanagerUser';

    /**
     * Returns true if the given object is an instance of SecretsmanagerUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsmanagerUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsmanagerUser.__pulumiType;
    }

    /**
     * A user chosen description to differentiate between multiple users. Can't be changed after creation.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * ID of the Secrets Manager instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * An auto-generated password.
     */
    declare public /*out*/ readonly password: pulumi.Output<string>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The user's ID.
     */
    declare public /*out*/ readonly userId: pulumi.Output<string>;
    /**
     * An auto-generated user name.
     */
    declare public /*out*/ readonly username: pulumi.Output<string>;
    /**
     * If true, the user has writeaccess to the secrets engine.
     */
    declare public readonly writeEnabled: pulumi.Output<boolean>;

    /**
     * Create a SecretsmanagerUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretsmanagerUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsmanagerUserArgs | SecretsmanagerUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsmanagerUserState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["userId"] = state?.userId;
            resourceInputs["username"] = state?.username;
            resourceInputs["writeEnabled"] = state?.writeEnabled;
        } else {
            const args = argsOrState as SecretsmanagerUserArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.writeEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'writeEnabled'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["writeEnabled"] = args?.writeEnabled;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretsmanagerUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretsmanagerUser resources.
 */
export interface SecretsmanagerUserState {
    /**
     * A user chosen description to differentiate between multiple users. Can't be changed after creation.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the Secrets Manager instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * An auto-generated password.
     */
    password?: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The user's ID.
     */
    userId?: pulumi.Input<string>;
    /**
     * An auto-generated user name.
     */
    username?: pulumi.Input<string>;
    /**
     * If true, the user has writeaccess to the secrets engine.
     */
    writeEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecretsmanagerUser resource.
 */
export interface SecretsmanagerUserArgs {
    /**
     * A user chosen description to differentiate between multiple users. Can't be changed after creation.
     */
    description: pulumi.Input<string>;
    /**
     * ID of the Secrets Manager instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * STACKIT Project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * If true, the user has writeaccess to the secrets engine.
     */
    writeEnabled: pulumi.Input<boolean>;
}
