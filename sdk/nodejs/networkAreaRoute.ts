// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Network area route resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class NetworkAreaRoute extends pulumi.CustomResource {
    /**
     * Get an existing NetworkAreaRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkAreaRouteState, opts?: pulumi.CustomResourceOptions): NetworkAreaRoute {
        return new NetworkAreaRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/networkAreaRoute:NetworkAreaRoute';

    /**
     * Returns true if the given object is an instance of NetworkAreaRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkAreaRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAreaRoute.__pulumiType;
    }

    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The network area ID to which the network area route is associated.
     */
    public readonly networkAreaId!: pulumi.Output<string>;
    /**
     * The network area route ID.
     */
    public /*out*/ readonly networkAreaRouteId!: pulumi.Output<string>;
    /**
     * The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
     */
    public readonly nextHop!: pulumi.Output<string>;
    /**
     * STACKIT organization ID to which the network area is associated.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The network, that is reachable though the Next Hop. Should use CIDR notation.
     */
    public readonly prefix!: pulumi.Output<string>;

    /**
     * Create a NetworkAreaRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkAreaRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkAreaRouteArgs | NetworkAreaRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkAreaRouteState | undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["networkAreaId"] = state ? state.networkAreaId : undefined;
            resourceInputs["networkAreaRouteId"] = state ? state.networkAreaRouteId : undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
        } else {
            const args = argsOrState as NetworkAreaRouteArgs | undefined;
            if ((!args || args.networkAreaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkAreaId'");
            }
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["networkAreaId"] = args ? args.networkAreaId : undefined;
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["networkAreaRouteId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkAreaRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkAreaRoute resources.
 */
export interface NetworkAreaRouteState {
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The network area ID to which the network area route is associated.
     */
    networkAreaId?: pulumi.Input<string>;
    /**
     * The network area route ID.
     */
    networkAreaRouteId?: pulumi.Input<string>;
    /**
     * The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
     */
    nextHop?: pulumi.Input<string>;
    /**
     * STACKIT organization ID to which the network area is associated.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The network, that is reachable though the Next Hop. Should use CIDR notation.
     */
    prefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkAreaRoute resource.
 */
export interface NetworkAreaRouteArgs {
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The network area ID to which the network area route is associated.
     */
    networkAreaId: pulumi.Input<string>;
    /**
     * The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
     */
    nextHop: pulumi.Input<string>;
    /**
     * STACKIT organization ID to which the network area is associated.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The network, that is reachable though the Next Hop. Should use CIDR notation.
     */
    prefix: pulumi.Input<string>;
}
