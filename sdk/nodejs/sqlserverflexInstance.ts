// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * SQLServer Flex instance resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class SqlserverflexInstance extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverflexInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverflexInstanceState, opts?: pulumi.CustomResourceOptions): SqlserverflexInstance {
        return new SqlserverflexInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/sqlserverflexInstance:SqlserverflexInstance';

    /**
     * Returns true if the given object is an instance of SqlserverflexInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverflexInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverflexInstance.__pulumiType;
    }

    /**
     * The Access Control List (ACL) for the SQLServer Flex instance.
     */
    declare public readonly acls: pulumi.Output<string[]>;
    /**
     * The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
     */
    declare public readonly backupSchedule: pulumi.Output<string>;
    declare public readonly flavor: pulumi.Output<outputs.SqlserverflexInstanceFlavor>;
    /**
     * ID of the SQLServer Flex instance.
     */
    declare public /*out*/ readonly instanceId: pulumi.Output<string>;
    /**
     * Instance name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly options: pulumi.Output<outputs.SqlserverflexInstanceOptions>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly replicas: pulumi.Output<number>;
    declare public readonly storage: pulumi.Output<outputs.SqlserverflexInstanceStorage>;
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a SqlserverflexInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverflexInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverflexInstanceArgs | SqlserverflexInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverflexInstanceState | undefined;
            resourceInputs["acls"] = state?.acls;
            resourceInputs["backupSchedule"] = state?.backupSchedule;
            resourceInputs["flavor"] = state?.flavor;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["options"] = state?.options;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as SqlserverflexInstanceArgs | undefined;
            if (args?.flavor === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["acls"] = args?.acls;
            resourceInputs["backupSchedule"] = args?.backupSchedule;
            resourceInputs["flavor"] = args?.flavor;
            resourceInputs["name"] = args?.name;
            resourceInputs["options"] = args?.options;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["version"] = args?.version;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["replicas"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverflexInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SqlserverflexInstance resources.
 */
export interface SqlserverflexInstanceState {
    /**
     * The Access Control List (ACL) for the SQLServer Flex instance.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
     */
    backupSchedule?: pulumi.Input<string>;
    flavor?: pulumi.Input<inputs.SqlserverflexInstanceFlavor>;
    /**
     * ID of the SQLServer Flex instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.SqlserverflexInstanceOptions>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    storage?: pulumi.Input<inputs.SqlserverflexInstanceStorage>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlserverflexInstance resource.
 */
export interface SqlserverflexInstanceArgs {
    /**
     * The Access Control List (ACL) for the SQLServer Flex instance.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
     */
    backupSchedule?: pulumi.Input<string>;
    flavor: pulumi.Input<inputs.SqlserverflexInstanceFlavor>;
    /**
     * Instance name.
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.SqlserverflexInstanceOptions>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.SqlserverflexInstanceStorage>;
    version?: pulumi.Input<string>;
}
