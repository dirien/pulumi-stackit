// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * AI Model Serving Auth Token Resource schema.
 *
 * ## Example Usage
 *
 * ### Automatically rotate AI model serving token
 */
export class ModelservingToken extends pulumi.CustomResource {
    /**
     * Get an existing ModelservingToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModelservingTokenState, opts?: pulumi.CustomResourceOptions): ModelservingToken {
        return new ModelservingToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/modelservingToken:ModelservingToken';

    /**
     * Returns true if the given object is an instance of ModelservingToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModelservingToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModelservingToken.__pulumiType;
    }

    /**
     * The description of the AI model serving auth token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the AI model serving auth token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the AI model serving auth token is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Region to which the AI model serving auth token is associated. If not defined, the provider region is used
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    public readonly rotateWhenChanged!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * State of the AI model serving auth token.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Content of the AI model serving auth token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The AI model serving auth token ID.
     */
    public /*out*/ readonly tokenId!: pulumi.Output<string>;
    /**
     * The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
     */
    public readonly ttlDuration!: pulumi.Output<string | undefined>;
    /**
     * The time until the AI model serving auth token is valid.
     */
    public /*out*/ readonly validUntil!: pulumi.Output<string>;

    /**
     * Create a ModelservingToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelservingTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModelservingTokenArgs | ModelservingTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModelservingTokenState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rotateWhenChanged"] = state ? state.rotateWhenChanged : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["tokenId"] = state ? state.tokenId : undefined;
            resourceInputs["ttlDuration"] = state ? state.ttlDuration : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as ModelservingTokenArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rotateWhenChanged"] = args ? args.rotateWhenChanged : undefined;
            resourceInputs["ttlDuration"] = args ? args.ttlDuration : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["tokenId"] = undefined /*out*/;
            resourceInputs["validUntil"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ModelservingToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ModelservingToken resources.
 */
export interface ModelservingTokenState {
    /**
     * The description of the AI model serving auth token.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the AI model serving auth token.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the AI model serving auth token is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Region to which the AI model serving auth token is associated. If not defined, the provider region is used
     */
    region?: pulumi.Input<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateWhenChanged?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * State of the AI model serving auth token.
     */
    state?: pulumi.Input<string>;
    /**
     * Content of the AI model serving auth token.
     */
    token?: pulumi.Input<string>;
    /**
     * The AI model serving auth token ID.
     */
    tokenId?: pulumi.Input<string>;
    /**
     * The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
     */
    ttlDuration?: pulumi.Input<string>;
    /**
     * The time until the AI model serving auth token is valid.
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ModelservingToken resource.
 */
export interface ModelservingTokenArgs {
    /**
     * The description of the AI model serving auth token.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the AI model serving auth token.
     */
    name?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the AI model serving auth token is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * Region to which the AI model serving auth token is associated. If not defined, the provider region is used
     */
    region?: pulumi.Input<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateWhenChanged?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
     */
    ttlDuration?: pulumi.Input<string>;
}
