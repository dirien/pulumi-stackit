// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Routing table resource schema. Must have a `region` specified in the provider configuration.
 *
 * > This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
 *
 * ## Example Usage
 */
export class RoutingTable extends pulumi.CustomResource {
    /**
     * Get an existing RoutingTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutingTableState, opts?: pulumi.CustomResourceOptions): RoutingTable {
        return new RoutingTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/routingTable:RoutingTable';

    /**
     * Returns true if the given object is an instance of RoutingTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingTable.__pulumiType;
    }

    /**
     * Date-time when the routing table was created
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the routing table.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the routing table.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The network area ID to which the routing table is associated.
     */
    declare public readonly networkAreaId: pulumi.Output<string>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The routing tables ID.
     */
    declare public /*out*/ readonly routingTableId: pulumi.Output<string>;
    /**
     * This controls whether the routes for project-to-project communication are created automatically or not.
     */
    declare public readonly systemRoutes: pulumi.Output<boolean>;
    /**
     * Date-time when the routing table was updated
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a RoutingTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutingTableArgs | RoutingTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutingTableState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkAreaId"] = state?.networkAreaId;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["region"] = state?.region;
            resourceInputs["routingTableId"] = state?.routingTableId;
            resourceInputs["systemRoutes"] = state?.systemRoutes;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as RoutingTableArgs | undefined;
            if (args?.networkAreaId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkAreaId'");
            }
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkAreaId"] = args?.networkAreaId;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["region"] = args?.region;
            resourceInputs["systemRoutes"] = args?.systemRoutes;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["routingTableId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoutingTable resources.
 */
export interface RoutingTableState {
    /**
     * Date-time when the routing table was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the routing table.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the routing table.
     */
    name?: pulumi.Input<string>;
    /**
     * The network area ID to which the routing table is associated.
     */
    networkAreaId?: pulumi.Input<string>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The routing tables ID.
     */
    routingTableId?: pulumi.Input<string>;
    /**
     * This controls whether the routes for project-to-project communication are created automatically or not.
     */
    systemRoutes?: pulumi.Input<boolean>;
    /**
     * Date-time when the routing table was updated
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutingTable resource.
 */
export interface RoutingTableArgs {
    /**
     * Description of the routing table.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the routing table.
     */
    name?: pulumi.Input<string>;
    /**
     * The network area ID to which the routing table is associated.
     */
    networkAreaId: pulumi.Input<string>;
    /**
     * STACKIT organization ID to which the routing table is associated.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The resource region. If not defined, the provider region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * This controls whether the routes for project-to-project communication are created automatically or not.
     */
    systemRoutes?: pulumi.Input<boolean>;
}
