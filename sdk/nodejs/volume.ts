// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Volume resource schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The availability zone of the volume.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The description of the volume.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
     */
    public readonly performanceClass!: pulumi.Output<string>;
    /**
     * STACKIT project ID to which the volume is associated.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The server ID of the server to which the volume is attached to.
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
     */
    public readonly source!: pulumi.Output<outputs.VolumeSource | undefined>;
    /**
     * The volume ID.
     */
    public /*out*/ readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["performanceClass"] = state ? state.performanceClass : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performanceClass"] = args ? args.performanceClass : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The availability zone of the volume.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The description of the volume.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
     */
    performanceClass?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the volume is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The server ID of the server to which the volume is attached to.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
     */
    size?: pulumi.Input<number>;
    /**
     * The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
     */
    source?: pulumi.Input<inputs.VolumeSource>;
    /**
     * The volume ID.
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The availability zone of the volume.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * The description of the volume.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels are key-value string pairs which can be attached to a resource container
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
     */
    performanceClass?: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the volume is associated.
     */
    projectId: pulumi.Input<string>;
    /**
     * The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
     */
    size?: pulumi.Input<number>;
    /**
     * The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
     */
    source?: pulumi.Input<inputs.VolumeSource>;
}
