// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * project Role Assignment resource schema.
 *
 * > This resource is part of the iam experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
 *
 * ## Example Usage
 */
export class AuthorizationProjectRoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing AuthorizationProjectRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizationProjectRoleAssignmentState, opts?: pulumi.CustomResourceOptions): AuthorizationProjectRoleAssignment {
        return new AuthorizationProjectRoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment';

    /**
     * Returns true if the given object is an instance of AuthorizationProjectRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthorizationProjectRoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthorizationProjectRoleAssignment.__pulumiType;
    }

    /**
     * project Resource to assign the role to.
     */
    declare public readonly resourceId: pulumi.Output<string>;
    /**
     * Role to be assigned
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * Identifier of user, service account or client. Usually email address or name in case of clients
     */
    declare public readonly subject: pulumi.Output<string>;

    /**
     * Create a AuthorizationProjectRoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizationProjectRoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizationProjectRoleAssignmentArgs | AuthorizationProjectRoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizationProjectRoleAssignmentState | undefined;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["role"] = state?.role;
            resourceInputs["subject"] = state?.subject;
        } else {
            const args = argsOrState as AuthorizationProjectRoleAssignmentArgs | undefined;
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.subject === undefined && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["role"] = args?.role;
            resourceInputs["subject"] = args?.subject;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthorizationProjectRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthorizationProjectRoleAssignment resources.
 */
export interface AuthorizationProjectRoleAssignmentState {
    /**
     * project Resource to assign the role to.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Role to be assigned
     */
    role?: pulumi.Input<string>;
    /**
     * Identifier of user, service account or client. Usually email address or name in case of clients
     */
    subject?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthorizationProjectRoleAssignment resource.
 */
export interface AuthorizationProjectRoleAssignmentArgs {
    /**
     * project Resource to assign the role to.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Role to be assigned
     */
    role: pulumi.Input<string>;
    /**
     * Identifier of user, service account or client. Usually email address or name in case of clients
     */
    subject: pulumi.Input<string>;
}
