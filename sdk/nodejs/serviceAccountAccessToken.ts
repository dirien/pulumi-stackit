// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Service account access token schema.
 * ## Example Usage
 *
 * ### Automatically rotate access tokens
 */
export class ServiceAccountAccessToken extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccountAccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountAccessTokenState, opts?: pulumi.CustomResourceOptions): ServiceAccountAccessToken {
        return new ServiceAccountAccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken';

    /**
     * Returns true if the given object is an instance of ServiceAccountAccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccountAccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccountAccessToken.__pulumiType;
    }

    /**
     * Identifier for the access token linked to the service account.
     */
    public /*out*/ readonly accessTokenId!: pulumi.Output<string>;
    /**
     * Indicate whether the token is currently active or inactive
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * Timestamp indicating when the access token was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * STACKIT project ID associated with the service account token.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    public readonly rotateWhenChanged!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Email address linked to the service account.
     */
    public readonly serviceAccountEmail!: pulumi.Output<string>;
    /**
     * JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
     */
    public readonly ttlDays!: pulumi.Output<number>;
    /**
     * Estimated expiration timestamp of the access token. For precise validity, check the JWT details.
     */
    public /*out*/ readonly validUntil!: pulumi.Output<string>;

    /**
     * Create a ServiceAccountAccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountAccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountAccessTokenArgs | ServiceAccountAccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountAccessTokenState | undefined;
            resourceInputs["accessTokenId"] = state ? state.accessTokenId : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["rotateWhenChanged"] = state ? state.rotateWhenChanged : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["ttlDays"] = state ? state.ttlDays : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as ServiceAccountAccessTokenArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceAccountEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountEmail'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["rotateWhenChanged"] = args ? args.rotateWhenChanged : undefined;
            resourceInputs["serviceAccountEmail"] = args ? args.serviceAccountEmail : undefined;
            resourceInputs["ttlDays"] = args ? args.ttlDays : undefined;
            resourceInputs["accessTokenId"] = undefined /*out*/;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["validUntil"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceAccountAccessToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccountAccessToken resources.
 */
export interface ServiceAccountAccessTokenState {
    /**
     * Identifier for the access token linked to the service account.
     */
    accessTokenId?: pulumi.Input<string>;
    /**
     * Indicate whether the token is currently active or inactive
     */
    active?: pulumi.Input<boolean>;
    /**
     * Timestamp indicating when the access token was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * STACKIT project ID associated with the service account token.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateWhenChanged?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Email address linked to the service account.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    /**
     * JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.
     */
    token?: pulumi.Input<string>;
    /**
     * Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
     */
    ttlDays?: pulumi.Input<number>;
    /**
     * Estimated expiration timestamp of the access token. For precise validity, check the JWT details.
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAccountAccessToken resource.
 */
export interface ServiceAccountAccessTokenArgs {
    /**
     * STACKIT project ID associated with the service account token.
     */
    projectId: pulumi.Input<string>;
    /**
     * A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateWhenChanged?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Email address linked to the service account.
     */
    serviceAccountEmail: pulumi.Input<string>;
    /**
     * Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
     */
    ttlDays?: pulumi.Input<number>;
}
