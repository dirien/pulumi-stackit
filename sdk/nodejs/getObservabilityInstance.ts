// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Observability instance data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getObservabilityInstance(args: GetObservabilityInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetObservabilityInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("stackit:index/getObservabilityInstance:getObservabilityInstance", {
        "instanceId": args.instanceId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getObservabilityInstance.
 */
export interface GetObservabilityInstanceArgs {
    /**
     * The Observability instance ID.
     */
    instanceId: string;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId: string;
}

/**
 * A collection of values returned by getObservabilityInstance.
 */
export interface GetObservabilityInstanceResult {
    /**
     * The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.
     */
    readonly acls: string[];
    /**
     * Alert configuration for the instance.
     */
    readonly alertConfig: outputs.GetObservabilityInstanceAlertConfig;
    /**
     * Specifies Alerting URL.
     */
    readonly alertingUrl: string;
    /**
     * Specifies Observability instance dashboard URL.
     */
    readonly dashboardUrl: string;
    /**
     * Specifies an initial Grafana admin password.
     */
    readonly grafanaInitialAdminPassword: string;
    /**
     * Specifies an initial Grafana admin username.
     */
    readonly grafanaInitialAdminUser: string;
    /**
     * If true, anyone can access Grafana dashboards without logging in.
     */
    readonly grafanaPublicReadAccess: boolean;
    /**
     * Specifies Grafana URL.
     */
    readonly grafanaUrl: string;
    readonly id: string;
    /**
     * The Observability instance ID.
     */
    readonly instanceId: string;
    /**
     * Specifies if the instance can be updated.
     */
    readonly isUpdatable: boolean;
    readonly jaegerTracesUrl: string;
    readonly jaegerUiUrl: string;
    /**
     * Specifies URL for pushing logs.
     */
    readonly logsPushUrl: string;
    /**
     * Specifies Logs URL.
     */
    readonly logsUrl: string;
    /**
     * Specifies URL for pushing metrics.
     */
    readonly metricsPushUrl: string;
    /**
     * Specifies for how many days the raw metrics are kept. Default is set to `90`.
     */
    readonly metricsRetentionDays: number;
    /**
     * Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.
     */
    readonly metricsRetentionDays1hDownsampling: number;
    /**
     * Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.
     */
    readonly metricsRetentionDays5mDownsampling: number;
    /**
     * Specifies metrics URL.
     */
    readonly metricsUrl: string;
    /**
     * The name of the Observability instance.
     */
    readonly name: string;
    readonly otlpTracesUrl: string;
    /**
     * Additional parameters.
     */
    readonly parameters: {[key: string]: string};
    /**
     * The Observability plan ID.
     */
    readonly planId: string;
    /**
     * Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.
     */
    readonly planName: string;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    readonly projectId: string;
    /**
     * Specifies Targets URL.
     */
    readonly targetsUrl: string;
    readonly zipkinSpansUrl: string;
}
/**
 * Observability instance data source schema. Must have a `region` specified in the provider configuration.
 *
 * ## Example Usage
 */
export function getObservabilityInstanceOutput(args: GetObservabilityInstanceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetObservabilityInstanceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("stackit:index/getObservabilityInstance:getObservabilityInstance", {
        "instanceId": args.instanceId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getObservabilityInstance.
 */
export interface GetObservabilityInstanceOutputArgs {
    /**
     * The Observability instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * STACKIT project ID to which the instance is associated.
     */
    projectId: pulumi.Input<string>;
}
