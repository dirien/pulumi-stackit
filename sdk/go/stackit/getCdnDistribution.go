// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CDN distribution data source schema.
//
// > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
func LookupCdnDistribution(ctx *pulumi.Context, args *LookupCdnDistributionArgs, opts ...pulumi.InvokeOption) (*LookupCdnDistributionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCdnDistributionResult
	err := ctx.Invoke("stackit:index/getCdnDistribution:getCdnDistribution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdnDistribution.
type LookupCdnDistributionArgs struct {
	// STACKIT project ID associated with the distribution
	DistributionId string `pulumi:"distributionId"`
	// STACKIT project ID associated with the distribution
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getCdnDistribution.
type LookupCdnDistributionResult struct {
	// The distribution configuration
	Config GetCdnDistributionConfig `pulumi:"config"`
	// Time when the distribution was created
	CreatedAt string `pulumi:"createdAt"`
	// STACKIT project ID associated with the distribution
	DistributionId string `pulumi:"distributionId"`
	// List of configured domains for the distribution
	Domains []GetCdnDistributionDomain `pulumi:"domains"`
	// List of distribution errors
	Errors []string `pulumi:"errors"`
	Id     string   `pulumi:"id"`
	// STACKIT project ID associated with the distribution
	ProjectId string `pulumi:"projectId"`
	// Status of the distribution
	Status string `pulumi:"status"`
	// Time when the distribution was last updated
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupCdnDistributionOutput(ctx *pulumi.Context, args LookupCdnDistributionOutputArgs, opts ...pulumi.InvokeOption) LookupCdnDistributionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCdnDistributionResultOutput, error) {
			args := v.(LookupCdnDistributionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getCdnDistribution:getCdnDistribution", args, LookupCdnDistributionResultOutput{}, options).(LookupCdnDistributionResultOutput), nil
		}).(LookupCdnDistributionResultOutput)
}

// A collection of arguments for invoking getCdnDistribution.
type LookupCdnDistributionOutputArgs struct {
	// STACKIT project ID associated with the distribution
	DistributionId pulumi.StringInput `pulumi:"distributionId"`
	// STACKIT project ID associated with the distribution
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupCdnDistributionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdnDistributionArgs)(nil)).Elem()
}

// A collection of values returned by getCdnDistribution.
type LookupCdnDistributionResultOutput struct{ *pulumi.OutputState }

func (LookupCdnDistributionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdnDistributionResult)(nil)).Elem()
}

func (o LookupCdnDistributionResultOutput) ToLookupCdnDistributionResultOutput() LookupCdnDistributionResultOutput {
	return o
}

func (o LookupCdnDistributionResultOutput) ToLookupCdnDistributionResultOutputWithContext(ctx context.Context) LookupCdnDistributionResultOutput {
	return o
}

// The distribution configuration
func (o LookupCdnDistributionResultOutput) Config() GetCdnDistributionConfigOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) GetCdnDistributionConfig { return v.Config }).(GetCdnDistributionConfigOutput)
}

// Time when the distribution was created
func (o LookupCdnDistributionResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// STACKIT project ID associated with the distribution
func (o LookupCdnDistributionResultOutput) DistributionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.DistributionId }).(pulumi.StringOutput)
}

// List of configured domains for the distribution
func (o LookupCdnDistributionResultOutput) Domains() GetCdnDistributionDomainArrayOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) []GetCdnDistributionDomain { return v.Domains }).(GetCdnDistributionDomainArrayOutput)
}

// List of distribution errors
func (o LookupCdnDistributionResultOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

func (o LookupCdnDistributionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.Id }).(pulumi.StringOutput)
}

// STACKIT project ID associated with the distribution
func (o LookupCdnDistributionResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Status of the distribution
func (o LookupCdnDistributionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.Status }).(pulumi.StringOutput)
}

// Time when the distribution was last updated
func (o LookupCdnDistributionResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnDistributionResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCdnDistributionResultOutput{})
}
