// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MongoDB Flex user data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupMongodbflexUser(ctx *pulumi.Context, args *LookupMongodbflexUserArgs, opts ...pulumi.InvokeOption) (*LookupMongodbflexUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMongodbflexUserResult
	err := ctx.Invoke("stackit:index/getMongodbflexUser:getMongodbflexUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMongodbflexUser.
type LookupMongodbflexUserArgs struct {
	// ID of the MongoDB Flex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// User ID.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getMongodbflexUser.
type LookupMongodbflexUserResult struct {
	Database string `pulumi:"database"`
	Host     string `pulumi:"host"`
	Id       string `pulumi:"id"`
	// ID of the MongoDB Flex instance.
	InstanceId string `pulumi:"instanceId"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region string   `pulumi:"region"`
	Roles  []string `pulumi:"roles"`
	// User ID.
	UserId   string `pulumi:"userId"`
	Username string `pulumi:"username"`
}

func LookupMongodbflexUserOutput(ctx *pulumi.Context, args LookupMongodbflexUserOutputArgs, opts ...pulumi.InvokeOption) LookupMongodbflexUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMongodbflexUserResultOutput, error) {
			args := v.(LookupMongodbflexUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getMongodbflexUser:getMongodbflexUser", args, LookupMongodbflexUserResultOutput{}, options).(LookupMongodbflexUserResultOutput), nil
		}).(LookupMongodbflexUserResultOutput)
}

// A collection of arguments for invoking getMongodbflexUser.
type LookupMongodbflexUserOutputArgs struct {
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// User ID.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupMongodbflexUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongodbflexUserArgs)(nil)).Elem()
}

// A collection of values returned by getMongodbflexUser.
type LookupMongodbflexUserResultOutput struct{ *pulumi.OutputState }

func (LookupMongodbflexUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongodbflexUserResult)(nil)).Elem()
}

func (o LookupMongodbflexUserResultOutput) ToLookupMongodbflexUserResultOutput() LookupMongodbflexUserResultOutput {
	return o
}

func (o LookupMongodbflexUserResultOutput) ToLookupMongodbflexUserResultOutputWithContext(ctx context.Context) LookupMongodbflexUserResultOutput {
	return o
}

func (o LookupMongodbflexUserResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.Database }).(pulumi.StringOutput)
}

func (o LookupMongodbflexUserResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupMongodbflexUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the MongoDB Flex instance.
func (o LookupMongodbflexUserResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupMongodbflexUserResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupMongodbflexUserResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupMongodbflexUserResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupMongodbflexUserResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// User ID.
func (o LookupMongodbflexUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

func (o LookupMongodbflexUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbflexUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMongodbflexUserResultOutput{})
}
