// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Public IP resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type PublicIp struct {
	pulumi.CustomResourceState

	// The IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels             pulumi.StringMapOutput `pulumi:"labels"`
	NetworkInterfaceId pulumi.StringOutput    `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public IP ID.
	PublicIpId pulumi.StringOutput `pulumi:"publicIpId"`
}

// NewPublicIp registers a new resource with the given unique name, arguments, and options.
func NewPublicIp(ctx *pulumi.Context,
	name string, args *PublicIpArgs, opts ...pulumi.ResourceOption) (*PublicIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicIp
	err := ctx.RegisterResource("stackit:index/publicIp:PublicIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicIp gets an existing PublicIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicIpState, opts ...pulumi.ResourceOption) (*PublicIp, error) {
	var resource PublicIp
	err := ctx.ReadResource("stackit:index/publicIp:PublicIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicIp resources.
type publicIpState struct {
	// The IP address.
	Ip *string `pulumi:"ip"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels             map[string]string `pulumi:"labels"`
	NetworkInterfaceId *string           `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId *string `pulumi:"projectId"`
	// The public IP ID.
	PublicIpId *string `pulumi:"publicIpId"`
}

type PublicIpState struct {
	// The IP address.
	Ip pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels             pulumi.StringMapInput
	NetworkInterfaceId pulumi.StringPtrInput
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringPtrInput
	// The public IP ID.
	PublicIpId pulumi.StringPtrInput
}

func (PublicIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpState)(nil)).Elem()
}

type publicIpArgs struct {
	// Labels are key-value string pairs which can be attached to a resource container
	Labels             map[string]string `pulumi:"labels"`
	NetworkInterfaceId *string           `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a PublicIp resource.
type PublicIpArgs struct {
	// Labels are key-value string pairs which can be attached to a resource container
	Labels             pulumi.StringMapInput
	NetworkInterfaceId pulumi.StringPtrInput
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringInput
}

func (PublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpArgs)(nil)).Elem()
}

type PublicIpInput interface {
	pulumi.Input

	ToPublicIpOutput() PublicIpOutput
	ToPublicIpOutputWithContext(ctx context.Context) PublicIpOutput
}

func (*PublicIp) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIp)(nil)).Elem()
}

func (i *PublicIp) ToPublicIpOutput() PublicIpOutput {
	return i.ToPublicIpOutputWithContext(context.Background())
}

func (i *PublicIp) ToPublicIpOutputWithContext(ctx context.Context) PublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpOutput)
}

// PublicIpArrayInput is an input type that accepts PublicIpArray and PublicIpArrayOutput values.
// You can construct a concrete instance of `PublicIpArrayInput` via:
//
//	PublicIpArray{ PublicIpArgs{...} }
type PublicIpArrayInput interface {
	pulumi.Input

	ToPublicIpArrayOutput() PublicIpArrayOutput
	ToPublicIpArrayOutputWithContext(context.Context) PublicIpArrayOutput
}

type PublicIpArray []PublicIpInput

func (PublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIp)(nil)).Elem()
}

func (i PublicIpArray) ToPublicIpArrayOutput() PublicIpArrayOutput {
	return i.ToPublicIpArrayOutputWithContext(context.Background())
}

func (i PublicIpArray) ToPublicIpArrayOutputWithContext(ctx context.Context) PublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpArrayOutput)
}

// PublicIpMapInput is an input type that accepts PublicIpMap and PublicIpMapOutput values.
// You can construct a concrete instance of `PublicIpMapInput` via:
//
//	PublicIpMap{ "key": PublicIpArgs{...} }
type PublicIpMapInput interface {
	pulumi.Input

	ToPublicIpMapOutput() PublicIpMapOutput
	ToPublicIpMapOutputWithContext(context.Context) PublicIpMapOutput
}

type PublicIpMap map[string]PublicIpInput

func (PublicIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIp)(nil)).Elem()
}

func (i PublicIpMap) ToPublicIpMapOutput() PublicIpMapOutput {
	return i.ToPublicIpMapOutputWithContext(context.Background())
}

func (i PublicIpMap) ToPublicIpMapOutputWithContext(ctx context.Context) PublicIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpMapOutput)
}

type PublicIpOutput struct{ *pulumi.OutputState }

func (PublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIp)(nil)).Elem()
}

func (o PublicIpOutput) ToPublicIpOutput() PublicIpOutput {
	return o
}

func (o PublicIpOutput) ToPublicIpOutputWithContext(ctx context.Context) PublicIpOutput {
	return o
}

// The IP address.
func (o PublicIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o PublicIpOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PublicIp) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o PublicIpOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIp) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the public IP is associated.
func (o PublicIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP ID.
func (o PublicIpOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIp) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

type PublicIpArrayOutput struct{ *pulumi.OutputState }

func (PublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIp)(nil)).Elem()
}

func (o PublicIpArrayOutput) ToPublicIpArrayOutput() PublicIpArrayOutput {
	return o
}

func (o PublicIpArrayOutput) ToPublicIpArrayOutputWithContext(ctx context.Context) PublicIpArrayOutput {
	return o
}

func (o PublicIpArrayOutput) Index(i pulumi.IntInput) PublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicIp {
		return vs[0].([]*PublicIp)[vs[1].(int)]
	}).(PublicIpOutput)
}

type PublicIpMapOutput struct{ *pulumi.OutputState }

func (PublicIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIp)(nil)).Elem()
}

func (o PublicIpMapOutput) ToPublicIpMapOutput() PublicIpMapOutput {
	return o
}

func (o PublicIpMapOutput) ToPublicIpMapOutputWithContext(ctx context.Context) PublicIpMapOutput {
	return o
}

func (o PublicIpMapOutput) MapIndex(k pulumi.StringInput) PublicIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicIp {
		return vs[0].(map[string]*PublicIp)[vs[1].(string)]
	}).(PublicIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpInput)(nil)).Elem(), &PublicIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpArrayInput)(nil)).Elem(), PublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpMapInput)(nil)).Elem(), PublicIpMap{})
	pulumi.RegisterOutputType(PublicIpOutput{})
	pulumi.RegisterOutputType(PublicIpArrayOutput{})
	pulumi.RegisterOutputType(PublicIpMapOutput{})
}
