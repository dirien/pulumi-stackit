// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Routing table route resource schema. Must have a `region` specified in the provider configuration.
//
// > This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
//
// ## Example Usage
type RoutingTableRoute struct {
	pulumi.CustomResourceState

	// Date-time when the route was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Destination of the route.
	Destination RoutingTableRouteDestinationOutput `pulumi:"destination"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringOutput `pulumi:"networkAreaId"`
	// Next hop destination.
	NextHop RoutingTableRouteNextHopOutput `pulumi:"nextHop"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the route.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// The routing tables ID.
	RoutingTableId pulumi.StringOutput `pulumi:"routingTableId"`
	// Date-time when the route was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewRoutingTableRoute registers a new resource with the given unique name, arguments, and options.
func NewRoutingTableRoute(ctx *pulumi.Context,
	name string, args *RoutingTableRouteArgs, opts ...pulumi.ResourceOption) (*RoutingTableRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.NetworkAreaId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAreaId'")
	}
	if args.NextHop == nil {
		return nil, errors.New("invalid value for required argument 'NextHop'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.RoutingTableId == nil {
		return nil, errors.New("invalid value for required argument 'RoutingTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingTableRoute
	err := ctx.RegisterResource("stackit:index/routingTableRoute:RoutingTableRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingTableRoute gets an existing RoutingTableRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingTableRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingTableRouteState, opts ...pulumi.ResourceOption) (*RoutingTableRoute, error) {
	var resource RoutingTableRoute
	err := ctx.ReadResource("stackit:index/routingTableRoute:RoutingTableRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingTableRoute resources.
type routingTableRouteState struct {
	// Date-time when the route was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Destination of the route.
	Destination *RoutingTableRouteDestination `pulumi:"destination"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId *string `pulumi:"networkAreaId"`
	// Next hop destination.
	NextHop *RoutingTableRouteNextHop `pulumi:"nextHop"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId *string `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// The ID of the route.
	RouteId *string `pulumi:"routeId"`
	// The routing tables ID.
	RoutingTableId *string `pulumi:"routingTableId"`
	// Date-time when the route was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RoutingTableRouteState struct {
	// Date-time when the route was created.
	CreatedAt pulumi.StringPtrInput
	// Destination of the route.
	Destination RoutingTableRouteDestinationPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringPtrInput
	// Next hop destination.
	NextHop RoutingTableRouteNextHopPtrInput
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// The ID of the route.
	RouteId pulumi.StringPtrInput
	// The routing tables ID.
	RoutingTableId pulumi.StringPtrInput
	// Date-time when the route was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (RoutingTableRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingTableRouteState)(nil)).Elem()
}

type routingTableRouteArgs struct {
	// Destination of the route.
	Destination RoutingTableRouteDestination `pulumi:"destination"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId string `pulumi:"networkAreaId"`
	// Next hop destination.
	NextHop RoutingTableRouteNextHop `pulumi:"nextHop"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId string `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// The routing tables ID.
	RoutingTableId string `pulumi:"routingTableId"`
}

// The set of arguments for constructing a RoutingTableRoute resource.
type RoutingTableRouteArgs struct {
	// Destination of the route.
	Destination RoutingTableRouteDestinationInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringInput
	// Next hop destination.
	NextHop RoutingTableRouteNextHopInput
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// The routing tables ID.
	RoutingTableId pulumi.StringInput
}

func (RoutingTableRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingTableRouteArgs)(nil)).Elem()
}

type RoutingTableRouteInput interface {
	pulumi.Input

	ToRoutingTableRouteOutput() RoutingTableRouteOutput
	ToRoutingTableRouteOutputWithContext(ctx context.Context) RoutingTableRouteOutput
}

func (*RoutingTableRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRoute)(nil)).Elem()
}

func (i *RoutingTableRoute) ToRoutingTableRouteOutput() RoutingTableRouteOutput {
	return i.ToRoutingTableRouteOutputWithContext(context.Background())
}

func (i *RoutingTableRoute) ToRoutingTableRouteOutputWithContext(ctx context.Context) RoutingTableRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteOutput)
}

// RoutingTableRouteArrayInput is an input type that accepts RoutingTableRouteArray and RoutingTableRouteArrayOutput values.
// You can construct a concrete instance of `RoutingTableRouteArrayInput` via:
//
//	RoutingTableRouteArray{ RoutingTableRouteArgs{...} }
type RoutingTableRouteArrayInput interface {
	pulumi.Input

	ToRoutingTableRouteArrayOutput() RoutingTableRouteArrayOutput
	ToRoutingTableRouteArrayOutputWithContext(context.Context) RoutingTableRouteArrayOutput
}

type RoutingTableRouteArray []RoutingTableRouteInput

func (RoutingTableRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingTableRoute)(nil)).Elem()
}

func (i RoutingTableRouteArray) ToRoutingTableRouteArrayOutput() RoutingTableRouteArrayOutput {
	return i.ToRoutingTableRouteArrayOutputWithContext(context.Background())
}

func (i RoutingTableRouteArray) ToRoutingTableRouteArrayOutputWithContext(ctx context.Context) RoutingTableRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteArrayOutput)
}

// RoutingTableRouteMapInput is an input type that accepts RoutingTableRouteMap and RoutingTableRouteMapOutput values.
// You can construct a concrete instance of `RoutingTableRouteMapInput` via:
//
//	RoutingTableRouteMap{ "key": RoutingTableRouteArgs{...} }
type RoutingTableRouteMapInput interface {
	pulumi.Input

	ToRoutingTableRouteMapOutput() RoutingTableRouteMapOutput
	ToRoutingTableRouteMapOutputWithContext(context.Context) RoutingTableRouteMapOutput
}

type RoutingTableRouteMap map[string]RoutingTableRouteInput

func (RoutingTableRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingTableRoute)(nil)).Elem()
}

func (i RoutingTableRouteMap) ToRoutingTableRouteMapOutput() RoutingTableRouteMapOutput {
	return i.ToRoutingTableRouteMapOutputWithContext(context.Background())
}

func (i RoutingTableRouteMap) ToRoutingTableRouteMapOutputWithContext(ctx context.Context) RoutingTableRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteMapOutput)
}

type RoutingTableRouteOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRoute)(nil)).Elem()
}

func (o RoutingTableRouteOutput) ToRoutingTableRouteOutput() RoutingTableRouteOutput {
	return o
}

func (o RoutingTableRouteOutput) ToRoutingTableRouteOutputWithContext(ctx context.Context) RoutingTableRouteOutput {
	return o
}

// Date-time when the route was created.
func (o RoutingTableRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Destination of the route.
func (o RoutingTableRouteOutput) Destination() RoutingTableRouteDestinationOutput {
	return o.ApplyT(func(v *RoutingTableRoute) RoutingTableRouteDestinationOutput { return v.Destination }).(RoutingTableRouteDestinationOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o RoutingTableRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The network area ID to which the routing table is associated.
func (o RoutingTableRouteOutput) NetworkAreaId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.NetworkAreaId }).(pulumi.StringOutput)
}

// Next hop destination.
func (o RoutingTableRouteOutput) NextHop() RoutingTableRouteNextHopOutput {
	return o.ApplyT(func(v *RoutingTableRoute) RoutingTableRouteNextHopOutput { return v.NextHop }).(RoutingTableRouteNextHopOutput)
}

// STACKIT organization ID to which the routing table is associated.
func (o RoutingTableRouteOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o RoutingTableRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the route.
func (o RoutingTableRouteOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// The routing tables ID.
func (o RoutingTableRouteOutput) RoutingTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.RoutingTableId }).(pulumi.StringOutput)
}

// Date-time when the route was updated.
func (o RoutingTableRouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTableRoute) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RoutingTableRouteArrayOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingTableRoute)(nil)).Elem()
}

func (o RoutingTableRouteArrayOutput) ToRoutingTableRouteArrayOutput() RoutingTableRouteArrayOutput {
	return o
}

func (o RoutingTableRouteArrayOutput) ToRoutingTableRouteArrayOutputWithContext(ctx context.Context) RoutingTableRouteArrayOutput {
	return o
}

func (o RoutingTableRouteArrayOutput) Index(i pulumi.IntInput) RoutingTableRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutingTableRoute {
		return vs[0].([]*RoutingTableRoute)[vs[1].(int)]
	}).(RoutingTableRouteOutput)
}

type RoutingTableRouteMapOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingTableRoute)(nil)).Elem()
}

func (o RoutingTableRouteMapOutput) ToRoutingTableRouteMapOutput() RoutingTableRouteMapOutput {
	return o
}

func (o RoutingTableRouteMapOutput) ToRoutingTableRouteMapOutputWithContext(ctx context.Context) RoutingTableRouteMapOutput {
	return o
}

func (o RoutingTableRouteMapOutput) MapIndex(k pulumi.StringInput) RoutingTableRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutingTableRoute {
		return vs[0].(map[string]*RoutingTableRoute)[vs[1].(string)]
	}).(RoutingTableRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteInput)(nil)).Elem(), &RoutingTableRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteArrayInput)(nil)).Elem(), RoutingTableRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteMapInput)(nil)).Elem(), RoutingTableRouteMap{})
	pulumi.RegisterOutputType(RoutingTableRouteOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteArrayOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteMapOutput{})
}
