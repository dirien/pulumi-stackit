// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Image resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type Image struct {
	pulumi.CustomResourceState

	// Representation of an image checksum.
	Checksum ImageChecksumOutput `pulumi:"checksum"`
	// Properties to set hardware and scheduling settings for an image.
	Config ImageConfigOutput `pulumi:"config"`
	// The disk format of the image.
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// The image ID.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The filepath of the raw image file to be uploaded.
	LocalFilePath pulumi.StringOutput `pulumi:"localFilePath"`
	// The minimum disk size of the image in GB.
	MinDiskSize pulumi.IntOutput `pulumi:"minDiskSize"`
	// The minimum RAM of the image in MB.
	MinRam pulumi.IntOutput `pulumi:"minRam"`
	// The name of the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the image is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Whether the image is protected.
	Protected pulumi.BoolOutput `pulumi:"protected"`
	// The scope of the image.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskFormat == nil {
		return nil, errors.New("invalid value for required argument 'DiskFormat'")
	}
	if args.LocalFilePath == nil {
		return nil, errors.New("invalid value for required argument 'LocalFilePath'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("stackit:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("stackit:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// Representation of an image checksum.
	Checksum *ImageChecksum `pulumi:"checksum"`
	// Properties to set hardware and scheduling settings for an image.
	Config *ImageConfig `pulumi:"config"`
	// The disk format of the image.
	DiskFormat *string `pulumi:"diskFormat"`
	// The image ID.
	ImageId *string `pulumi:"imageId"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The filepath of the raw image file to be uploaded.
	LocalFilePath *string `pulumi:"localFilePath"`
	// The minimum disk size of the image in GB.
	MinDiskSize *int `pulumi:"minDiskSize"`
	// The minimum RAM of the image in MB.
	MinRam *int `pulumi:"minRam"`
	// The name of the image.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the image is associated.
	ProjectId *string `pulumi:"projectId"`
	// Whether the image is protected.
	Protected *bool `pulumi:"protected"`
	// The scope of the image.
	Scope *string `pulumi:"scope"`
}

type ImageState struct {
	// Representation of an image checksum.
	Checksum ImageChecksumPtrInput
	// Properties to set hardware and scheduling settings for an image.
	Config ImageConfigPtrInput
	// The disk format of the image.
	DiskFormat pulumi.StringPtrInput
	// The image ID.
	ImageId pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The filepath of the raw image file to be uploaded.
	LocalFilePath pulumi.StringPtrInput
	// The minimum disk size of the image in GB.
	MinDiskSize pulumi.IntPtrInput
	// The minimum RAM of the image in MB.
	MinRam pulumi.IntPtrInput
	// The name of the image.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the image is associated.
	ProjectId pulumi.StringPtrInput
	// Whether the image is protected.
	Protected pulumi.BoolPtrInput
	// The scope of the image.
	Scope pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Properties to set hardware and scheduling settings for an image.
	Config *ImageConfig `pulumi:"config"`
	// The disk format of the image.
	DiskFormat string `pulumi:"diskFormat"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The filepath of the raw image file to be uploaded.
	LocalFilePath string `pulumi:"localFilePath"`
	// The minimum disk size of the image in GB.
	MinDiskSize *int `pulumi:"minDiskSize"`
	// The minimum RAM of the image in MB.
	MinRam *int `pulumi:"minRam"`
	// The name of the image.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the image is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Properties to set hardware and scheduling settings for an image.
	Config ImageConfigPtrInput
	// The disk format of the image.
	DiskFormat pulumi.StringInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The filepath of the raw image file to be uploaded.
	LocalFilePath pulumi.StringInput
	// The minimum disk size of the image in GB.
	MinDiskSize pulumi.IntPtrInput
	// The minimum RAM of the image in MB.
	MinRam pulumi.IntPtrInput
	// The name of the image.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the image is associated.
	ProjectId pulumi.StringInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// Representation of an image checksum.
func (o ImageOutput) Checksum() ImageChecksumOutput {
	return o.ApplyT(func(v *Image) ImageChecksumOutput { return v.Checksum }).(ImageChecksumOutput)
}

// Properties to set hardware and scheduling settings for an image.
func (o ImageOutput) Config() ImageConfigOutput {
	return o.ApplyT(func(v *Image) ImageConfigOutput { return v.Config }).(ImageConfigOutput)
}

// The disk format of the image.
func (o ImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

// The image ID.
func (o ImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o ImageOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The filepath of the raw image file to be uploaded.
func (o ImageOutput) LocalFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.LocalFilePath }).(pulumi.StringOutput)
}

// The minimum disk size of the image in GB.
func (o ImageOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MinDiskSize }).(pulumi.IntOutput)
}

// The minimum RAM of the image in MB.
func (o ImageOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MinRam }).(pulumi.IntOutput)
}

// The name of the image.
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the image is associated.
func (o ImageOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the image is protected.
func (o ImageOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.Protected }).(pulumi.BoolOutput)
}

// The scope of the image.
func (o ImageOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
