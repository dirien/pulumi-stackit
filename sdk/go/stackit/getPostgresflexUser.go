// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Postgres Flex user data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupPostgresflexUser(ctx *pulumi.Context, args *LookupPostgresflexUserArgs, opts ...pulumi.InvokeOption) (*LookupPostgresflexUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPostgresflexUserResult
	err := ctx.Invoke("stackit:index/getPostgresflexUser:getPostgresflexUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPostgresflexUser.
type LookupPostgresflexUserArgs struct {
	// ID of the PostgresFlex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// User ID.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getPostgresflexUser.
type LookupPostgresflexUserResult struct {
	Host string `pulumi:"host"`
	Id   string `pulumi:"id"`
	// ID of the PostgresFlex instance.
	InstanceId string `pulumi:"instanceId"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string  `pulumi:"region"`
	Roles  []string `pulumi:"roles"`
	// User ID.
	UserId   string `pulumi:"userId"`
	Username string `pulumi:"username"`
}

func LookupPostgresflexUserOutput(ctx *pulumi.Context, args LookupPostgresflexUserOutputArgs, opts ...pulumi.InvokeOption) LookupPostgresflexUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPostgresflexUserResultOutput, error) {
			args := v.(LookupPostgresflexUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getPostgresflexUser:getPostgresflexUser", args, LookupPostgresflexUserResultOutput{}, options).(LookupPostgresflexUserResultOutput), nil
		}).(LookupPostgresflexUserResultOutput)
}

// A collection of arguments for invoking getPostgresflexUser.
type LookupPostgresflexUserOutputArgs struct {
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// User ID.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupPostgresflexUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPostgresflexUserArgs)(nil)).Elem()
}

// A collection of values returned by getPostgresflexUser.
type LookupPostgresflexUserResultOutput struct{ *pulumi.OutputState }

func (LookupPostgresflexUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPostgresflexUserResult)(nil)).Elem()
}

func (o LookupPostgresflexUserResultOutput) ToLookupPostgresflexUserResultOutput() LookupPostgresflexUserResultOutput {
	return o
}

func (o LookupPostgresflexUserResultOutput) ToLookupPostgresflexUserResultOutputWithContext(ctx context.Context) LookupPostgresflexUserResultOutput {
	return o
}

func (o LookupPostgresflexUserResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupPostgresflexUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the PostgresFlex instance.
func (o LookupPostgresflexUserResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupPostgresflexUserResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupPostgresflexUserResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupPostgresflexUserResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupPostgresflexUserResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// User ID.
func (o LookupPostgresflexUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

func (o LookupPostgresflexUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPostgresflexUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPostgresflexUserResultOutput{})
}
