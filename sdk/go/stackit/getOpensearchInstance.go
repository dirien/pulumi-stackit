// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OpenSearch instance data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupOpensearchInstance(ctx *pulumi.Context, args *LookupOpensearchInstanceArgs, opts ...pulumi.InvokeOption) (*LookupOpensearchInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpensearchInstanceResult
	err := ctx.Invoke("stackit:index/getOpensearchInstance:getOpensearchInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchInstance.
type LookupOpensearchInstanceArgs struct {
	// ID of the OpenSearch instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getOpensearchInstance.
type LookupOpensearchInstanceResult struct {
	CfGuid             string `pulumi:"cfGuid"`
	CfOrganizationGuid string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        string `pulumi:"cfSpaceGuid"`
	DashboardUrl       string `pulumi:"dashboardUrl"`
	Id                 string `pulumi:"id"`
	ImageUrl           string `pulumi:"imageUrl"`
	// ID of the OpenSearch instance.
	InstanceId string `pulumi:"instanceId"`
	// Instance name.
	Name       string                          `pulumi:"name"`
	Parameters GetOpensearchInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId string `pulumi:"planId"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

func LookupOpensearchInstanceOutput(ctx *pulumi.Context, args LookupOpensearchInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupOpensearchInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOpensearchInstanceResultOutput, error) {
			args := v.(LookupOpensearchInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getOpensearchInstance:getOpensearchInstance", args, LookupOpensearchInstanceResultOutput{}, options).(LookupOpensearchInstanceResultOutput), nil
		}).(LookupOpensearchInstanceResultOutput)
}

// A collection of arguments for invoking getOpensearchInstance.
type LookupOpensearchInstanceOutputArgs struct {
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupOpensearchInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchInstance.
type LookupOpensearchInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupOpensearchInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchInstanceResult)(nil)).Elem()
}

func (o LookupOpensearchInstanceResultOutput) ToLookupOpensearchInstanceResultOutput() LookupOpensearchInstanceResultOutput {
	return o
}

func (o LookupOpensearchInstanceResultOutput) ToLookupOpensearchInstanceResultOutputWithContext(ctx context.Context) LookupOpensearchInstanceResultOutput {
	return o
}

func (o LookupOpensearchInstanceResultOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.CfGuid }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the OpenSearch instance.
func (o LookupOpensearchInstanceResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o LookupOpensearchInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupOpensearchInstanceResultOutput) Parameters() GetOpensearchInstanceParametersOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) GetOpensearchInstanceParameters { return v.Parameters }).(GetOpensearchInstanceParametersOutput)
}

// The selected plan ID.
func (o LookupOpensearchInstanceResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o LookupOpensearchInstanceResultOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o LookupOpensearchInstanceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o LookupOpensearchInstanceResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchInstanceResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpensearchInstanceResultOutput{})
}
