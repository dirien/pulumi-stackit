// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OpenSearch credential data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupOpensearchCredential(ctx *pulumi.Context, args *LookupOpensearchCredentialArgs, opts ...pulumi.InvokeOption) (*LookupOpensearchCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpensearchCredentialResult
	err := ctx.Invoke("stackit:index/getOpensearchCredential:getOpensearchCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchCredential.
type LookupOpensearchCredentialArgs struct {
	// The credential's ID.
	CredentialId string `pulumi:"credentialId"`
	// ID of the OpenSearch instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getOpensearchCredential.
type LookupOpensearchCredentialResult struct {
	// The credential's ID.
	CredentialId string   `pulumi:"credentialId"`
	Host         string   `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	Id           string   `pulumi:"id"`
	// ID of the OpenSearch instance.
	InstanceId string `pulumi:"instanceId"`
	Password   string `pulumi:"password"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	Scheme    string `pulumi:"scheme"`
	Uri       string `pulumi:"uri"`
	Username  string `pulumi:"username"`
}

func LookupOpensearchCredentialOutput(ctx *pulumi.Context, args LookupOpensearchCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupOpensearchCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOpensearchCredentialResultOutput, error) {
			args := v.(LookupOpensearchCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getOpensearchCredential:getOpensearchCredential", args, LookupOpensearchCredentialResultOutput{}, options).(LookupOpensearchCredentialResultOutput), nil
		}).(LookupOpensearchCredentialResultOutput)
}

// A collection of arguments for invoking getOpensearchCredential.
type LookupOpensearchCredentialOutputArgs struct {
	// The credential's ID.
	CredentialId pulumi.StringInput `pulumi:"credentialId"`
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupOpensearchCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchCredential.
type LookupOpensearchCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupOpensearchCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchCredentialResult)(nil)).Elem()
}

func (o LookupOpensearchCredentialResultOutput) ToLookupOpensearchCredentialResultOutput() LookupOpensearchCredentialResultOutput {
	return o
}

func (o LookupOpensearchCredentialResultOutput) ToLookupOpensearchCredentialResultOutputWithContext(ctx context.Context) LookupOpensearchCredentialResultOutput {
	return o
}

// The credential's ID.
func (o LookupOpensearchCredentialResultOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.CredentialId }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o LookupOpensearchCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the OpenSearch instance.
func (o LookupOpensearchCredentialResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupOpensearchCredentialResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Scheme }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Uri }).(pulumi.StringOutput)
}

func (o LookupOpensearchCredentialResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchCredentialResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpensearchCredentialResultOutput{})
}
