// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability scrape config resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ObservabilityScrapeconfig struct {
	pulumi.CustomResourceState

	// A basic authentication block.
	BasicAuth ObservabilityScrapeconfigBasicAuthOutput `pulumi:"basicAuth"`
	// Observability instance ID to which the scraping job is associated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the job scraping url path. E.g. `/metrics`.
	MetricsPath pulumi.StringOutput `pulumi:"metricsPath"`
	// Specifies the name of the scraping job.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// A SAML2 configuration block.
	Saml2 ObservabilityScrapeconfigSaml2Output `pulumi:"saml2"`
	// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
	SampleLimit pulumi.IntOutput `pulumi:"sampleLimit"`
	// Specifies the http scheme. Defaults to `https`.
	Scheme pulumi.StringOutput `pulumi:"scheme"`
	// Specifies the scrape interval as duration string. Defaults to `5m`.
	ScrapeInterval pulumi.StringOutput `pulumi:"scrapeInterval"`
	// Specifies the scrape timeout as duration string. Defaults to `2m`.
	ScrapeTimeout pulumi.StringOutput `pulumi:"scrapeTimeout"`
	// The targets list (specified by the static config).
	Targets ObservabilityScrapeconfigTargetArrayOutput `pulumi:"targets"`
}

// NewObservabilityScrapeconfig registers a new resource with the given unique name, arguments, and options.
func NewObservabilityScrapeconfig(ctx *pulumi.Context,
	name string, args *ObservabilityScrapeconfigArgs, opts ...pulumi.ResourceOption) (*ObservabilityScrapeconfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MetricsPath == nil {
		return nil, errors.New("invalid value for required argument 'MetricsPath'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityScrapeconfig
	err := ctx.RegisterResource("stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityScrapeconfig gets an existing ObservabilityScrapeconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityScrapeconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityScrapeconfigState, opts ...pulumi.ResourceOption) (*ObservabilityScrapeconfig, error) {
	var resource ObservabilityScrapeconfig
	err := ctx.ReadResource("stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityScrapeconfig resources.
type observabilityScrapeconfigState struct {
	// A basic authentication block.
	BasicAuth *ObservabilityScrapeconfigBasicAuth `pulumi:"basicAuth"`
	// Observability instance ID to which the scraping job is associated.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the job scraping url path. E.g. `/metrics`.
	MetricsPath *string `pulumi:"metricsPath"`
	// Specifies the name of the scraping job.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId *string `pulumi:"projectId"`
	// A SAML2 configuration block.
	Saml2 *ObservabilityScrapeconfigSaml2 `pulumi:"saml2"`
	// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
	SampleLimit *int `pulumi:"sampleLimit"`
	// Specifies the http scheme. Defaults to `https`.
	Scheme *string `pulumi:"scheme"`
	// Specifies the scrape interval as duration string. Defaults to `5m`.
	ScrapeInterval *string `pulumi:"scrapeInterval"`
	// Specifies the scrape timeout as duration string. Defaults to `2m`.
	ScrapeTimeout *string `pulumi:"scrapeTimeout"`
	// The targets list (specified by the static config).
	Targets []ObservabilityScrapeconfigTarget `pulumi:"targets"`
}

type ObservabilityScrapeconfigState struct {
	// A basic authentication block.
	BasicAuth ObservabilityScrapeconfigBasicAuthPtrInput
	// Observability instance ID to which the scraping job is associated.
	InstanceId pulumi.StringPtrInput
	// Specifies the job scraping url path. E.g. `/metrics`.
	MetricsPath pulumi.StringPtrInput
	// Specifies the name of the scraping job.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the scraping job is associated.
	ProjectId pulumi.StringPtrInput
	// A SAML2 configuration block.
	Saml2 ObservabilityScrapeconfigSaml2PtrInput
	// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
	SampleLimit pulumi.IntPtrInput
	// Specifies the http scheme. Defaults to `https`.
	Scheme pulumi.StringPtrInput
	// Specifies the scrape interval as duration string. Defaults to `5m`.
	ScrapeInterval pulumi.StringPtrInput
	// Specifies the scrape timeout as duration string. Defaults to `2m`.
	ScrapeTimeout pulumi.StringPtrInput
	// The targets list (specified by the static config).
	Targets ObservabilityScrapeconfigTargetArrayInput
}

func (ObservabilityScrapeconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityScrapeconfigState)(nil)).Elem()
}

type observabilityScrapeconfigArgs struct {
	// A basic authentication block.
	BasicAuth *ObservabilityScrapeconfigBasicAuth `pulumi:"basicAuth"`
	// Observability instance ID to which the scraping job is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the job scraping url path. E.g. `/metrics`.
	MetricsPath string `pulumi:"metricsPath"`
	// Specifies the name of the scraping job.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId string `pulumi:"projectId"`
	// A SAML2 configuration block.
	Saml2 *ObservabilityScrapeconfigSaml2 `pulumi:"saml2"`
	// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
	SampleLimit *int `pulumi:"sampleLimit"`
	// Specifies the http scheme. Defaults to `https`.
	Scheme *string `pulumi:"scheme"`
	// Specifies the scrape interval as duration string. Defaults to `5m`.
	ScrapeInterval *string `pulumi:"scrapeInterval"`
	// Specifies the scrape timeout as duration string. Defaults to `2m`.
	ScrapeTimeout *string `pulumi:"scrapeTimeout"`
	// The targets list (specified by the static config).
	Targets []ObservabilityScrapeconfigTarget `pulumi:"targets"`
}

// The set of arguments for constructing a ObservabilityScrapeconfig resource.
type ObservabilityScrapeconfigArgs struct {
	// A basic authentication block.
	BasicAuth ObservabilityScrapeconfigBasicAuthPtrInput
	// Observability instance ID to which the scraping job is associated.
	InstanceId pulumi.StringInput
	// Specifies the job scraping url path. E.g. `/metrics`.
	MetricsPath pulumi.StringInput
	// Specifies the name of the scraping job.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the scraping job is associated.
	ProjectId pulumi.StringInput
	// A SAML2 configuration block.
	Saml2 ObservabilityScrapeconfigSaml2PtrInput
	// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
	SampleLimit pulumi.IntPtrInput
	// Specifies the http scheme. Defaults to `https`.
	Scheme pulumi.StringPtrInput
	// Specifies the scrape interval as duration string. Defaults to `5m`.
	ScrapeInterval pulumi.StringPtrInput
	// Specifies the scrape timeout as duration string. Defaults to `2m`.
	ScrapeTimeout pulumi.StringPtrInput
	// The targets list (specified by the static config).
	Targets ObservabilityScrapeconfigTargetArrayInput
}

func (ObservabilityScrapeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityScrapeconfigArgs)(nil)).Elem()
}

type ObservabilityScrapeconfigInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigOutput() ObservabilityScrapeconfigOutput
	ToObservabilityScrapeconfigOutputWithContext(ctx context.Context) ObservabilityScrapeconfigOutput
}

func (*ObservabilityScrapeconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfig)(nil)).Elem()
}

func (i *ObservabilityScrapeconfig) ToObservabilityScrapeconfigOutput() ObservabilityScrapeconfigOutput {
	return i.ToObservabilityScrapeconfigOutputWithContext(context.Background())
}

func (i *ObservabilityScrapeconfig) ToObservabilityScrapeconfigOutputWithContext(ctx context.Context) ObservabilityScrapeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigOutput)
}

// ObservabilityScrapeconfigArrayInput is an input type that accepts ObservabilityScrapeconfigArray and ObservabilityScrapeconfigArrayOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigArrayInput` via:
//
//	ObservabilityScrapeconfigArray{ ObservabilityScrapeconfigArgs{...} }
type ObservabilityScrapeconfigArrayInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigArrayOutput() ObservabilityScrapeconfigArrayOutput
	ToObservabilityScrapeconfigArrayOutputWithContext(context.Context) ObservabilityScrapeconfigArrayOutput
}

type ObservabilityScrapeconfigArray []ObservabilityScrapeconfigInput

func (ObservabilityScrapeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityScrapeconfig)(nil)).Elem()
}

func (i ObservabilityScrapeconfigArray) ToObservabilityScrapeconfigArrayOutput() ObservabilityScrapeconfigArrayOutput {
	return i.ToObservabilityScrapeconfigArrayOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigArray) ToObservabilityScrapeconfigArrayOutputWithContext(ctx context.Context) ObservabilityScrapeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigArrayOutput)
}

// ObservabilityScrapeconfigMapInput is an input type that accepts ObservabilityScrapeconfigMap and ObservabilityScrapeconfigMapOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigMapInput` via:
//
//	ObservabilityScrapeconfigMap{ "key": ObservabilityScrapeconfigArgs{...} }
type ObservabilityScrapeconfigMapInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigMapOutput() ObservabilityScrapeconfigMapOutput
	ToObservabilityScrapeconfigMapOutputWithContext(context.Context) ObservabilityScrapeconfigMapOutput
}

type ObservabilityScrapeconfigMap map[string]ObservabilityScrapeconfigInput

func (ObservabilityScrapeconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityScrapeconfig)(nil)).Elem()
}

func (i ObservabilityScrapeconfigMap) ToObservabilityScrapeconfigMapOutput() ObservabilityScrapeconfigMapOutput {
	return i.ToObservabilityScrapeconfigMapOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigMap) ToObservabilityScrapeconfigMapOutputWithContext(ctx context.Context) ObservabilityScrapeconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigMapOutput)
}

type ObservabilityScrapeconfigOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfig)(nil)).Elem()
}

func (o ObservabilityScrapeconfigOutput) ToObservabilityScrapeconfigOutput() ObservabilityScrapeconfigOutput {
	return o
}

func (o ObservabilityScrapeconfigOutput) ToObservabilityScrapeconfigOutputWithContext(ctx context.Context) ObservabilityScrapeconfigOutput {
	return o
}

// A basic authentication block.
func (o ObservabilityScrapeconfigOutput) BasicAuth() ObservabilityScrapeconfigBasicAuthOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) ObservabilityScrapeconfigBasicAuthOutput { return v.BasicAuth }).(ObservabilityScrapeconfigBasicAuthOutput)
}

// Observability instance ID to which the scraping job is associated.
func (o ObservabilityScrapeconfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the job scraping url path. E.g. `/metrics`.
func (o ObservabilityScrapeconfigOutput) MetricsPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.MetricsPath }).(pulumi.StringOutput)
}

// Specifies the name of the scraping job.
func (o ObservabilityScrapeconfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the scraping job is associated.
func (o ObservabilityScrapeconfigOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// A SAML2 configuration block.
func (o ObservabilityScrapeconfigOutput) Saml2() ObservabilityScrapeconfigSaml2Output {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) ObservabilityScrapeconfigSaml2Output { return v.Saml2 }).(ObservabilityScrapeconfigSaml2Output)
}

// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
func (o ObservabilityScrapeconfigOutput) SampleLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.IntOutput { return v.SampleLimit }).(pulumi.IntOutput)
}

// Specifies the http scheme. Defaults to `https`.
func (o ObservabilityScrapeconfigOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.Scheme }).(pulumi.StringOutput)
}

// Specifies the scrape interval as duration string. Defaults to `5m`.
func (o ObservabilityScrapeconfigOutput) ScrapeInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.ScrapeInterval }).(pulumi.StringOutput)
}

// Specifies the scrape timeout as duration string. Defaults to `2m`.
func (o ObservabilityScrapeconfigOutput) ScrapeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) pulumi.StringOutput { return v.ScrapeTimeout }).(pulumi.StringOutput)
}

// The targets list (specified by the static config).
func (o ObservabilityScrapeconfigOutput) Targets() ObservabilityScrapeconfigTargetArrayOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfig) ObservabilityScrapeconfigTargetArrayOutput { return v.Targets }).(ObservabilityScrapeconfigTargetArrayOutput)
}

type ObservabilityScrapeconfigArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityScrapeconfig)(nil)).Elem()
}

func (o ObservabilityScrapeconfigArrayOutput) ToObservabilityScrapeconfigArrayOutput() ObservabilityScrapeconfigArrayOutput {
	return o
}

func (o ObservabilityScrapeconfigArrayOutput) ToObservabilityScrapeconfigArrayOutputWithContext(ctx context.Context) ObservabilityScrapeconfigArrayOutput {
	return o
}

func (o ObservabilityScrapeconfigArrayOutput) Index(i pulumi.IntInput) ObservabilityScrapeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityScrapeconfig {
		return vs[0].([]*ObservabilityScrapeconfig)[vs[1].(int)]
	}).(ObservabilityScrapeconfigOutput)
}

type ObservabilityScrapeconfigMapOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityScrapeconfig)(nil)).Elem()
}

func (o ObservabilityScrapeconfigMapOutput) ToObservabilityScrapeconfigMapOutput() ObservabilityScrapeconfigMapOutput {
	return o
}

func (o ObservabilityScrapeconfigMapOutput) ToObservabilityScrapeconfigMapOutputWithContext(ctx context.Context) ObservabilityScrapeconfigMapOutput {
	return o
}

func (o ObservabilityScrapeconfigMapOutput) MapIndex(k pulumi.StringInput) ObservabilityScrapeconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityScrapeconfig {
		return vs[0].(map[string]*ObservabilityScrapeconfig)[vs[1].(string)]
	}).(ObservabilityScrapeconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigInput)(nil)).Elem(), &ObservabilityScrapeconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigArrayInput)(nil)).Elem(), ObservabilityScrapeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigMapInput)(nil)).Elem(), ObservabilityScrapeconfigMap{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigMapOutput{})
}
