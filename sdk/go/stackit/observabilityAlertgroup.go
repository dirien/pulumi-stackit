// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability alert group resource schema. Used to create alerts based on metrics (Thanos). Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ObservabilityAlertgroup struct {
	pulumi.CustomResourceState

	// Observability instance ID to which the alert group is associated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// The name of the alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the alert group is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Rules for the alert group
	Rules ObservabilityAlertgroupRuleArrayOutput `pulumi:"rules"`
}

// NewObservabilityAlertgroup registers a new resource with the given unique name, arguments, and options.
func NewObservabilityAlertgroup(ctx *pulumi.Context,
	name string, args *ObservabilityAlertgroupArgs, opts ...pulumi.ResourceOption) (*ObservabilityAlertgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityAlertgroup
	err := ctx.RegisterResource("stackit:index/observabilityAlertgroup:ObservabilityAlertgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityAlertgroup gets an existing ObservabilityAlertgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityAlertgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityAlertgroupState, opts ...pulumi.ResourceOption) (*ObservabilityAlertgroup, error) {
	var resource ObservabilityAlertgroup
	err := ctx.ReadResource("stackit:index/observabilityAlertgroup:ObservabilityAlertgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityAlertgroup resources.
type observabilityAlertgroupState struct {
	// Observability instance ID to which the alert group is associated.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval *string `pulumi:"interval"`
	// The name of the alert group. Is the identifier and must be unique in the group.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the alert group is associated.
	ProjectId *string `pulumi:"projectId"`
	// Rules for the alert group
	Rules []ObservabilityAlertgroupRule `pulumi:"rules"`
}

type ObservabilityAlertgroupState struct {
	// Observability instance ID to which the alert group is associated.
	InstanceId pulumi.StringPtrInput
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringPtrInput
	// The name of the alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the alert group is associated.
	ProjectId pulumi.StringPtrInput
	// Rules for the alert group
	Rules ObservabilityAlertgroupRuleArrayInput
}

func (ObservabilityAlertgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityAlertgroupState)(nil)).Elem()
}

type observabilityAlertgroupArgs struct {
	// Observability instance ID to which the alert group is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval *string `pulumi:"interval"`
	// The name of the alert group. Is the identifier and must be unique in the group.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the alert group is associated.
	ProjectId string `pulumi:"projectId"`
	// Rules for the alert group
	Rules []ObservabilityAlertgroupRule `pulumi:"rules"`
}

// The set of arguments for constructing a ObservabilityAlertgroup resource.
type ObservabilityAlertgroupArgs struct {
	// Observability instance ID to which the alert group is associated.
	InstanceId pulumi.StringInput
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringPtrInput
	// The name of the alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the alert group is associated.
	ProjectId pulumi.StringInput
	// Rules for the alert group
	Rules ObservabilityAlertgroupRuleArrayInput
}

func (ObservabilityAlertgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityAlertgroupArgs)(nil)).Elem()
}

type ObservabilityAlertgroupInput interface {
	pulumi.Input

	ToObservabilityAlertgroupOutput() ObservabilityAlertgroupOutput
	ToObservabilityAlertgroupOutputWithContext(ctx context.Context) ObservabilityAlertgroupOutput
}

func (*ObservabilityAlertgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityAlertgroup)(nil)).Elem()
}

func (i *ObservabilityAlertgroup) ToObservabilityAlertgroupOutput() ObservabilityAlertgroupOutput {
	return i.ToObservabilityAlertgroupOutputWithContext(context.Background())
}

func (i *ObservabilityAlertgroup) ToObservabilityAlertgroupOutputWithContext(ctx context.Context) ObservabilityAlertgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityAlertgroupOutput)
}

// ObservabilityAlertgroupArrayInput is an input type that accepts ObservabilityAlertgroupArray and ObservabilityAlertgroupArrayOutput values.
// You can construct a concrete instance of `ObservabilityAlertgroupArrayInput` via:
//
//	ObservabilityAlertgroupArray{ ObservabilityAlertgroupArgs{...} }
type ObservabilityAlertgroupArrayInput interface {
	pulumi.Input

	ToObservabilityAlertgroupArrayOutput() ObservabilityAlertgroupArrayOutput
	ToObservabilityAlertgroupArrayOutputWithContext(context.Context) ObservabilityAlertgroupArrayOutput
}

type ObservabilityAlertgroupArray []ObservabilityAlertgroupInput

func (ObservabilityAlertgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityAlertgroup)(nil)).Elem()
}

func (i ObservabilityAlertgroupArray) ToObservabilityAlertgroupArrayOutput() ObservabilityAlertgroupArrayOutput {
	return i.ToObservabilityAlertgroupArrayOutputWithContext(context.Background())
}

func (i ObservabilityAlertgroupArray) ToObservabilityAlertgroupArrayOutputWithContext(ctx context.Context) ObservabilityAlertgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityAlertgroupArrayOutput)
}

// ObservabilityAlertgroupMapInput is an input type that accepts ObservabilityAlertgroupMap and ObservabilityAlertgroupMapOutput values.
// You can construct a concrete instance of `ObservabilityAlertgroupMapInput` via:
//
//	ObservabilityAlertgroupMap{ "key": ObservabilityAlertgroupArgs{...} }
type ObservabilityAlertgroupMapInput interface {
	pulumi.Input

	ToObservabilityAlertgroupMapOutput() ObservabilityAlertgroupMapOutput
	ToObservabilityAlertgroupMapOutputWithContext(context.Context) ObservabilityAlertgroupMapOutput
}

type ObservabilityAlertgroupMap map[string]ObservabilityAlertgroupInput

func (ObservabilityAlertgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityAlertgroup)(nil)).Elem()
}

func (i ObservabilityAlertgroupMap) ToObservabilityAlertgroupMapOutput() ObservabilityAlertgroupMapOutput {
	return i.ToObservabilityAlertgroupMapOutputWithContext(context.Background())
}

func (i ObservabilityAlertgroupMap) ToObservabilityAlertgroupMapOutputWithContext(ctx context.Context) ObservabilityAlertgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityAlertgroupMapOutput)
}

type ObservabilityAlertgroupOutput struct{ *pulumi.OutputState }

func (ObservabilityAlertgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityAlertgroup)(nil)).Elem()
}

func (o ObservabilityAlertgroupOutput) ToObservabilityAlertgroupOutput() ObservabilityAlertgroupOutput {
	return o
}

func (o ObservabilityAlertgroupOutput) ToObservabilityAlertgroupOutputWithContext(ctx context.Context) ObservabilityAlertgroupOutput {
	return o
}

// Observability instance ID to which the alert group is associated.
func (o ObservabilityAlertgroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityAlertgroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
func (o ObservabilityAlertgroupOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityAlertgroup) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// The name of the alert group. Is the identifier and must be unique in the group.
func (o ObservabilityAlertgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityAlertgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the alert group is associated.
func (o ObservabilityAlertgroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityAlertgroup) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Rules for the alert group
func (o ObservabilityAlertgroupOutput) Rules() ObservabilityAlertgroupRuleArrayOutput {
	return o.ApplyT(func(v *ObservabilityAlertgroup) ObservabilityAlertgroupRuleArrayOutput { return v.Rules }).(ObservabilityAlertgroupRuleArrayOutput)
}

type ObservabilityAlertgroupArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityAlertgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityAlertgroup)(nil)).Elem()
}

func (o ObservabilityAlertgroupArrayOutput) ToObservabilityAlertgroupArrayOutput() ObservabilityAlertgroupArrayOutput {
	return o
}

func (o ObservabilityAlertgroupArrayOutput) ToObservabilityAlertgroupArrayOutputWithContext(ctx context.Context) ObservabilityAlertgroupArrayOutput {
	return o
}

func (o ObservabilityAlertgroupArrayOutput) Index(i pulumi.IntInput) ObservabilityAlertgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityAlertgroup {
		return vs[0].([]*ObservabilityAlertgroup)[vs[1].(int)]
	}).(ObservabilityAlertgroupOutput)
}

type ObservabilityAlertgroupMapOutput struct{ *pulumi.OutputState }

func (ObservabilityAlertgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityAlertgroup)(nil)).Elem()
}

func (o ObservabilityAlertgroupMapOutput) ToObservabilityAlertgroupMapOutput() ObservabilityAlertgroupMapOutput {
	return o
}

func (o ObservabilityAlertgroupMapOutput) ToObservabilityAlertgroupMapOutputWithContext(ctx context.Context) ObservabilityAlertgroupMapOutput {
	return o
}

func (o ObservabilityAlertgroupMapOutput) MapIndex(k pulumi.StringInput) ObservabilityAlertgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityAlertgroup {
		return vs[0].(map[string]*ObservabilityAlertgroup)[vs[1].(string)]
	}).(ObservabilityAlertgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityAlertgroupInput)(nil)).Elem(), &ObservabilityAlertgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityAlertgroupArrayInput)(nil)).Elem(), ObservabilityAlertgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityAlertgroupMapInput)(nil)).Elem(), ObservabilityAlertgroupMap{})
	pulumi.RegisterOutputType(ObservabilityAlertgroupOutput{})
	pulumi.RegisterOutputType(ObservabilityAlertgroupArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityAlertgroupMapOutput{})
}
