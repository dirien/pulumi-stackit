// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS Record Set Resource schema.
//
// ## Example Usage
func LookupDnsRecordSet(ctx *pulumi.Context, args *LookupDnsRecordSetArgs, opts ...pulumi.InvokeOption) (*LookupDnsRecordSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsRecordSetResult
	err := ctx.Invoke("stackit:index/getDnsRecordSet:getDnsRecordSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsRecordSet.
type LookupDnsRecordSetArgs struct {
	// STACKIT project ID to which the dns record set is associated.
	ProjectId string `pulumi:"projectId"`
	// The rr set id.
	RecordSetId string `pulumi:"recordSetId"`
	// The zone ID to which is dns record set is associated.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getDnsRecordSet.
type LookupDnsRecordSetResult struct {
	// Specifies if the record set is active or not.
	Active bool `pulumi:"active"`
	// Comment.
	Comment string `pulumi:"comment"`
	// Error shows error in case create/update/delete failed.
	Error string `pulumi:"error"`
	// Fully qualified domain name (FQDN) of the record set.
	Fqdn string `pulumi:"fqdn"`
	Id   string `pulumi:"id"`
	// Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`
	Name string `pulumi:"name"`
	// STACKIT project ID to which the dns record set is associated.
	ProjectId string `pulumi:"projectId"`
	// The rr set id.
	RecordSetId string `pulumi:"recordSetId"`
	// Records.
	Records []string `pulumi:"records"`
	// Record set state.
	State string `pulumi:"state"`
	// Time to live. E.g. 3600
	Ttl int `pulumi:"ttl"`
	// The record set type. E.g. `A` or `CNAME`
	Type string `pulumi:"type"`
	// The zone ID to which is dns record set is associated.
	ZoneId string `pulumi:"zoneId"`
}

func LookupDnsRecordSetOutput(ctx *pulumi.Context, args LookupDnsRecordSetOutputArgs, opts ...pulumi.InvokeOption) LookupDnsRecordSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsRecordSetResultOutput, error) {
			args := v.(LookupDnsRecordSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getDnsRecordSet:getDnsRecordSet", args, LookupDnsRecordSetResultOutput{}, options).(LookupDnsRecordSetResultOutput), nil
		}).(LookupDnsRecordSetResultOutput)
}

// A collection of arguments for invoking getDnsRecordSet.
type LookupDnsRecordSetOutputArgs struct {
	// STACKIT project ID to which the dns record set is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The rr set id.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The zone ID to which is dns record set is associated.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupDnsRecordSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordSetArgs)(nil)).Elem()
}

// A collection of values returned by getDnsRecordSet.
type LookupDnsRecordSetResultOutput struct{ *pulumi.OutputState }

func (LookupDnsRecordSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordSetResult)(nil)).Elem()
}

func (o LookupDnsRecordSetResultOutput) ToLookupDnsRecordSetResultOutput() LookupDnsRecordSetResultOutput {
	return o
}

func (o LookupDnsRecordSetResultOutput) ToLookupDnsRecordSetResultOutputWithContext(ctx context.Context) LookupDnsRecordSetResultOutput {
	return o
}

// Specifies if the record set is active or not.
func (o LookupDnsRecordSetResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// Comment.
func (o LookupDnsRecordSetResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Comment }).(pulumi.StringOutput)
}

// Error shows error in case create/update/delete failed.
func (o LookupDnsRecordSetResultOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Error }).(pulumi.StringOutput)
}

// Fully qualified domain name (FQDN) of the record set.
func (o LookupDnsRecordSetResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

func (o LookupDnsRecordSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`
func (o LookupDnsRecordSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the dns record set is associated.
func (o LookupDnsRecordSetResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The rr set id.
func (o LookupDnsRecordSetResultOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// Records.
func (o LookupDnsRecordSetResultOutput) Records() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) []string { return v.Records }).(pulumi.StringArrayOutput)
}

// Record set state.
func (o LookupDnsRecordSetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.State }).(pulumi.StringOutput)
}

// Time to live. E.g. 3600
func (o LookupDnsRecordSetResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) int { return v.Ttl }).(pulumi.IntOutput)
}

// The record set type. E.g. `A` or `CNAME`
func (o LookupDnsRecordSetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.Type }).(pulumi.StringOutput)
}

// The zone ID to which is dns record set is associated.
func (o LookupDnsRecordSetResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordSetResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsRecordSetResultOutput{})
}
