// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitMQ instance data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupRabbitmqInstance(ctx *pulumi.Context, args *LookupRabbitmqInstanceArgs, opts ...pulumi.InvokeOption) (*LookupRabbitmqInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRabbitmqInstanceResult
	err := ctx.Invoke("stackit:index/getRabbitmqInstance:getRabbitmqInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRabbitmqInstance.
type LookupRabbitmqInstanceArgs struct {
	// ID of the RabbitMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getRabbitmqInstance.
type LookupRabbitmqInstanceResult struct {
	CfGuid             string `pulumi:"cfGuid"`
	CfOrganizationGuid string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        string `pulumi:"cfSpaceGuid"`
	DashboardUrl       string `pulumi:"dashboardUrl"`
	Id                 string `pulumi:"id"`
	ImageUrl           string `pulumi:"imageUrl"`
	// ID of the RabbitMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// Instance name.
	Name       string                        `pulumi:"name"`
	Parameters GetRabbitmqInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId string `pulumi:"planId"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

func LookupRabbitmqInstanceOutput(ctx *pulumi.Context, args LookupRabbitmqInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupRabbitmqInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRabbitmqInstanceResultOutput, error) {
			args := v.(LookupRabbitmqInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getRabbitmqInstance:getRabbitmqInstance", args, LookupRabbitmqInstanceResultOutput{}, options).(LookupRabbitmqInstanceResultOutput), nil
		}).(LookupRabbitmqInstanceResultOutput)
}

// A collection of arguments for invoking getRabbitmqInstance.
type LookupRabbitmqInstanceOutputArgs struct {
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupRabbitmqInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRabbitmqInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getRabbitmqInstance.
type LookupRabbitmqInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupRabbitmqInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRabbitmqInstanceResult)(nil)).Elem()
}

func (o LookupRabbitmqInstanceResultOutput) ToLookupRabbitmqInstanceResultOutput() LookupRabbitmqInstanceResultOutput {
	return o
}

func (o LookupRabbitmqInstanceResultOutput) ToLookupRabbitmqInstanceResultOutputWithContext(ctx context.Context) LookupRabbitmqInstanceResultOutput {
	return o
}

func (o LookupRabbitmqInstanceResultOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.CfGuid }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the RabbitMQ instance.
func (o LookupRabbitmqInstanceResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o LookupRabbitmqInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRabbitmqInstanceResultOutput) Parameters() GetRabbitmqInstanceParametersOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) GetRabbitmqInstanceParameters { return v.Parameters }).(GetRabbitmqInstanceParametersOutput)
}

// The selected plan ID.
func (o LookupRabbitmqInstanceResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o LookupRabbitmqInstanceResultOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o LookupRabbitmqInstanceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o LookupRabbitmqInstanceResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqInstanceResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRabbitmqInstanceResultOutput{})
}
