// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Redis instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type RedisInstance struct {
	pulumi.CustomResourceState

	CfGuid             pulumi.StringOutput `pulumi:"cfGuid"`
	CfOrganizationGuid pulumi.StringOutput `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        pulumi.StringOutput `pulumi:"cfSpaceGuid"`
	DashboardUrl       pulumi.StringOutput `pulumi:"dashboardUrl"`
	ImageUrl           pulumi.StringOutput `pulumi:"imageUrl"`
	// ID of the Redis instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name       pulumi.StringOutput           `pulumi:"name"`
	Parameters RedisInstanceParametersOutput `pulumi:"parameters"`
	// The selected plan ID.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The selected plan name.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The service version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRedisInstance registers a new resource with the given unique name, arguments, and options.
func NewRedisInstance(ctx *pulumi.Context,
	name string, args *RedisInstanceArgs, opts ...pulumi.ResourceOption) (*RedisInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisInstance
	err := ctx.RegisterResource("stackit:index/redisInstance:RedisInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisInstance gets an existing RedisInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisInstanceState, opts ...pulumi.ResourceOption) (*RedisInstance, error) {
	var resource RedisInstance
	err := ctx.ReadResource("stackit:index/redisInstance:RedisInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisInstance resources.
type redisInstanceState struct {
	CfGuid             *string `pulumi:"cfGuid"`
	CfOrganizationGuid *string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        *string `pulumi:"cfSpaceGuid"`
	DashboardUrl       *string `pulumi:"dashboardUrl"`
	ImageUrl           *string `pulumi:"imageUrl"`
	// ID of the Redis instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name       *string                  `pulumi:"name"`
	Parameters *RedisInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId *string `pulumi:"planId"`
	// The selected plan name.
	PlanName *string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The service version.
	Version *string `pulumi:"version"`
}

type RedisInstanceState struct {
	CfGuid             pulumi.StringPtrInput
	CfOrganizationGuid pulumi.StringPtrInput
	CfSpaceGuid        pulumi.StringPtrInput
	DashboardUrl       pulumi.StringPtrInput
	ImageUrl           pulumi.StringPtrInput
	// ID of the Redis instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters RedisInstanceParametersPtrInput
	// The selected plan ID.
	PlanId pulumi.StringPtrInput
	// The selected plan name.
	PlanName pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The service version.
	Version pulumi.StringPtrInput
}

func (RedisInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisInstanceState)(nil)).Elem()
}

type redisInstanceArgs struct {
	// Instance name.
	Name       *string                  `pulumi:"name"`
	Parameters *RedisInstanceParameters `pulumi:"parameters"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a RedisInstance resource.
type RedisInstanceArgs struct {
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters RedisInstanceParametersPtrInput
	// The selected plan name.
	PlanName pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The service version.
	Version pulumi.StringInput
}

func (RedisInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisInstanceArgs)(nil)).Elem()
}

type RedisInstanceInput interface {
	pulumi.Input

	ToRedisInstanceOutput() RedisInstanceOutput
	ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput
}

func (*RedisInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstance)(nil)).Elem()
}

func (i *RedisInstance) ToRedisInstanceOutput() RedisInstanceOutput {
	return i.ToRedisInstanceOutputWithContext(context.Background())
}

func (i *RedisInstance) ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceOutput)
}

// RedisInstanceArrayInput is an input type that accepts RedisInstanceArray and RedisInstanceArrayOutput values.
// You can construct a concrete instance of `RedisInstanceArrayInput` via:
//
//	RedisInstanceArray{ RedisInstanceArgs{...} }
type RedisInstanceArrayInput interface {
	pulumi.Input

	ToRedisInstanceArrayOutput() RedisInstanceArrayOutput
	ToRedisInstanceArrayOutputWithContext(context.Context) RedisInstanceArrayOutput
}

type RedisInstanceArray []RedisInstanceInput

func (RedisInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisInstance)(nil)).Elem()
}

func (i RedisInstanceArray) ToRedisInstanceArrayOutput() RedisInstanceArrayOutput {
	return i.ToRedisInstanceArrayOutputWithContext(context.Background())
}

func (i RedisInstanceArray) ToRedisInstanceArrayOutputWithContext(ctx context.Context) RedisInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceArrayOutput)
}

// RedisInstanceMapInput is an input type that accepts RedisInstanceMap and RedisInstanceMapOutput values.
// You can construct a concrete instance of `RedisInstanceMapInput` via:
//
//	RedisInstanceMap{ "key": RedisInstanceArgs{...} }
type RedisInstanceMapInput interface {
	pulumi.Input

	ToRedisInstanceMapOutput() RedisInstanceMapOutput
	ToRedisInstanceMapOutputWithContext(context.Context) RedisInstanceMapOutput
}

type RedisInstanceMap map[string]RedisInstanceInput

func (RedisInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisInstance)(nil)).Elem()
}

func (i RedisInstanceMap) ToRedisInstanceMapOutput() RedisInstanceMapOutput {
	return i.ToRedisInstanceMapOutputWithContext(context.Background())
}

func (i RedisInstanceMap) ToRedisInstanceMapOutputWithContext(ctx context.Context) RedisInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceMapOutput)
}

type RedisInstanceOutput struct{ *pulumi.OutputState }

func (RedisInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstance)(nil)).Elem()
}

func (o RedisInstanceOutput) ToRedisInstanceOutput() RedisInstanceOutput {
	return o
}

func (o RedisInstanceOutput) ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput {
	return o
}

func (o RedisInstanceOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.CfGuid }).(pulumi.StringOutput)
}

func (o RedisInstanceOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o RedisInstanceOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o RedisInstanceOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o RedisInstanceOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the Redis instance.
func (o RedisInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o RedisInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RedisInstanceOutput) Parameters() RedisInstanceParametersOutput {
	return o.ApplyT(func(v *RedisInstance) RedisInstanceParametersOutput { return v.Parameters }).(RedisInstanceParametersOutput)
}

// The selected plan ID.
func (o RedisInstanceOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o RedisInstanceOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o RedisInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o RedisInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type RedisInstanceArrayOutput struct{ *pulumi.OutputState }

func (RedisInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisInstance)(nil)).Elem()
}

func (o RedisInstanceArrayOutput) ToRedisInstanceArrayOutput() RedisInstanceArrayOutput {
	return o
}

func (o RedisInstanceArrayOutput) ToRedisInstanceArrayOutputWithContext(ctx context.Context) RedisInstanceArrayOutput {
	return o
}

func (o RedisInstanceArrayOutput) Index(i pulumi.IntInput) RedisInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisInstance {
		return vs[0].([]*RedisInstance)[vs[1].(int)]
	}).(RedisInstanceOutput)
}

type RedisInstanceMapOutput struct{ *pulumi.OutputState }

func (RedisInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisInstance)(nil)).Elem()
}

func (o RedisInstanceMapOutput) ToRedisInstanceMapOutput() RedisInstanceMapOutput {
	return o
}

func (o RedisInstanceMapOutput) ToRedisInstanceMapOutputWithContext(ctx context.Context) RedisInstanceMapOutput {
	return o
}

func (o RedisInstanceMapOutput) MapIndex(k pulumi.StringInput) RedisInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisInstance {
		return vs[0].(map[string]*RedisInstance)[vs[1].(string)]
	}).(RedisInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInstanceInput)(nil)).Elem(), &RedisInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInstanceArrayInput)(nil)).Elem(), RedisInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInstanceMapInput)(nil)).Elem(), RedisInstanceMap{})
	pulumi.RegisterOutputType(RedisInstanceOutput{})
	pulumi.RegisterOutputType(RedisInstanceArrayOutput{})
	pulumi.RegisterOutputType(RedisInstanceMapOutput{})
}
