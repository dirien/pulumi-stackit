// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SKE Cluster data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupSkeCluster(ctx *pulumi.Context, args *LookupSkeClusterArgs, opts ...pulumi.InvokeOption) (*LookupSkeClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSkeClusterResult
	err := ctx.Invoke("stackit:index/getSkeCluster:getSkeCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSkeCluster.
type LookupSkeClusterArgs struct {
	// The cluster name.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getSkeCluster.
type LookupSkeClusterResult struct {
	// DEPRECATED as of Kubernetes 1.25+
	// Flag to specify if privileged mode for containers is enabled or not.
	// This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
	//
	// Deprecated: Please remove this flag from your configuration when using Kubernetes version 1.25+.
	AllowPrivilegedContainers bool `pulumi:"allowPrivilegedContainers"`
	// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
	EgressAddressRanges []string `pulumi:"egressAddressRanges"`
	// A single extensions block as defined below
	Extensions GetSkeClusterExtensions `pulumi:"extensions"`
	// One or more hibernation block as defined below.
	Hibernations []GetSkeClusterHibernation `pulumi:"hibernations"`
	Id           string                     `pulumi:"id"`
	// Kubernetes version. This field is deprecated, use `kubernetesVersionUsed` instead
	//
	// Deprecated: This field is always nil, use `kubernetesVersionUsed` to get the cluster kubernetes version. This field would cause errors when the cluster got a kubernetes version minor upgrade, either triggered by automatic or forceful updates.
	KubernetesVersion string `pulumi:"kubernetesVersion"`
	// The minimum Kubernetes version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the `kubernetesVersionUsed` field.
	KubernetesVersionMin string `pulumi:"kubernetesVersionMin"`
	// Full Kubernetes version used. For example, if `1.22` was selected, this value may result to `1.22.15`
	KubernetesVersionUsed string `pulumi:"kubernetesVersionUsed"`
	// A single maintenance block as defined below
	Maintenance GetSkeClusterMaintenance `pulumi:"maintenance"`
	// The cluster name.
	Name string `pulumi:"name"`
	// Network block as defined below.
	Network GetSkeClusterNetwork `pulumi:"network"`
	// One or more `nodePool` block as defined below.
	NodePools []GetSkeClusterNodePool `pulumi:"nodePools"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

func LookupSkeClusterOutput(ctx *pulumi.Context, args LookupSkeClusterOutputArgs, opts ...pulumi.InvokeOption) LookupSkeClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSkeClusterResultOutput, error) {
			args := v.(LookupSkeClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getSkeCluster:getSkeCluster", args, LookupSkeClusterResultOutput{}, options).(LookupSkeClusterResultOutput), nil
		}).(LookupSkeClusterResultOutput)
}

// A collection of arguments for invoking getSkeCluster.
type LookupSkeClusterOutputArgs struct {
	// The cluster name.
	Name pulumi.StringInput `pulumi:"name"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupSkeClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSkeClusterArgs)(nil)).Elem()
}

// A collection of values returned by getSkeCluster.
type LookupSkeClusterResultOutput struct{ *pulumi.OutputState }

func (LookupSkeClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSkeClusterResult)(nil)).Elem()
}

func (o LookupSkeClusterResultOutput) ToLookupSkeClusterResultOutput() LookupSkeClusterResultOutput {
	return o
}

func (o LookupSkeClusterResultOutput) ToLookupSkeClusterResultOutputWithContext(ctx context.Context) LookupSkeClusterResultOutput {
	return o
}

// DEPRECATED as of Kubernetes 1.25+
// Flag to specify if privileged mode for containers is enabled or not.
// This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
//
// Deprecated: Please remove this flag from your configuration when using Kubernetes version 1.25+.
func (o LookupSkeClusterResultOutput) AllowPrivilegedContainers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) bool { return v.AllowPrivilegedContainers }).(pulumi.BoolOutput)
}

// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
func (o LookupSkeClusterResultOutput) EgressAddressRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) []string { return v.EgressAddressRanges }).(pulumi.StringArrayOutput)
}

// A single extensions block as defined below
func (o LookupSkeClusterResultOutput) Extensions() GetSkeClusterExtensionsOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) GetSkeClusterExtensions { return v.Extensions }).(GetSkeClusterExtensionsOutput)
}

// One or more hibernation block as defined below.
func (o LookupSkeClusterResultOutput) Hibernations() GetSkeClusterHibernationArrayOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) []GetSkeClusterHibernation { return v.Hibernations }).(GetSkeClusterHibernationArrayOutput)
}

func (o LookupSkeClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kubernetes version. This field is deprecated, use `kubernetesVersionUsed` instead
//
// Deprecated: This field is always nil, use `kubernetesVersionUsed` to get the cluster kubernetes version. This field would cause errors when the cluster got a kubernetes version minor upgrade, either triggered by automatic or forceful updates.
func (o LookupSkeClusterResultOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// The minimum Kubernetes version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the `kubernetesVersionUsed` field.
func (o LookupSkeClusterResultOutput) KubernetesVersionMin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.KubernetesVersionMin }).(pulumi.StringOutput)
}

// Full Kubernetes version used. For example, if `1.22` was selected, this value may result to `1.22.15`
func (o LookupSkeClusterResultOutput) KubernetesVersionUsed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.KubernetesVersionUsed }).(pulumi.StringOutput)
}

// A single maintenance block as defined below
func (o LookupSkeClusterResultOutput) Maintenance() GetSkeClusterMaintenanceOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) GetSkeClusterMaintenance { return v.Maintenance }).(GetSkeClusterMaintenanceOutput)
}

// The cluster name.
func (o LookupSkeClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network block as defined below.
func (o LookupSkeClusterResultOutput) Network() GetSkeClusterNetworkOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) GetSkeClusterNetwork { return v.Network }).(GetSkeClusterNetworkOutput)
}

// One or more `nodePool` block as defined below.
func (o LookupSkeClusterResultOutput) NodePools() GetSkeClusterNodePoolArrayOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) []GetSkeClusterNodePool { return v.NodePools }).(GetSkeClusterNodePoolArrayOutput)
}

// STACKIT project ID to which the cluster is associated.
func (o LookupSkeClusterResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupSkeClusterResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSkeClusterResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSkeClusterResultOutput{})
}
