// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CDN distribution data source schema.
//
// > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
type CdnDistribution struct {
	pulumi.CustomResourceState

	// The distribution configuration
	Config CdnDistributionConfigOutput `pulumi:"config"`
	// Time when the distribution was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// CDN distribution ID
	DistributionId pulumi.StringOutput `pulumi:"distributionId"`
	// List of configured domains for the distribution
	Domains CdnDistributionDomainArrayOutput `pulumi:"domains"`
	// List of distribution errors
	Errors pulumi.StringArrayOutput `pulumi:"errors"`
	// STACKIT project ID associated with the distribution
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Status of the distribution
	Status pulumi.StringOutput `pulumi:"status"`
	// Time when the distribution was last updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewCdnDistribution registers a new resource with the given unique name, arguments, and options.
func NewCdnDistribution(ctx *pulumi.Context,
	name string, args *CdnDistributionArgs, opts ...pulumi.ResourceOption) (*CdnDistribution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CdnDistribution
	err := ctx.RegisterResource("stackit:index/cdnDistribution:CdnDistribution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdnDistribution gets an existing CdnDistribution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdnDistribution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdnDistributionState, opts ...pulumi.ResourceOption) (*CdnDistribution, error) {
	var resource CdnDistribution
	err := ctx.ReadResource("stackit:index/cdnDistribution:CdnDistribution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CdnDistribution resources.
type cdnDistributionState struct {
	// The distribution configuration
	Config *CdnDistributionConfig `pulumi:"config"`
	// Time when the distribution was created
	CreatedAt *string `pulumi:"createdAt"`
	// CDN distribution ID
	DistributionId *string `pulumi:"distributionId"`
	// List of configured domains for the distribution
	Domains []CdnDistributionDomain `pulumi:"domains"`
	// List of distribution errors
	Errors []string `pulumi:"errors"`
	// STACKIT project ID associated with the distribution
	ProjectId *string `pulumi:"projectId"`
	// Status of the distribution
	Status *string `pulumi:"status"`
	// Time when the distribution was last updated
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CdnDistributionState struct {
	// The distribution configuration
	Config CdnDistributionConfigPtrInput
	// Time when the distribution was created
	CreatedAt pulumi.StringPtrInput
	// CDN distribution ID
	DistributionId pulumi.StringPtrInput
	// List of configured domains for the distribution
	Domains CdnDistributionDomainArrayInput
	// List of distribution errors
	Errors pulumi.StringArrayInput
	// STACKIT project ID associated with the distribution
	ProjectId pulumi.StringPtrInput
	// Status of the distribution
	Status pulumi.StringPtrInput
	// Time when the distribution was last updated
	UpdatedAt pulumi.StringPtrInput
}

func (CdnDistributionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDistributionState)(nil)).Elem()
}

type cdnDistributionArgs struct {
	// The distribution configuration
	Config CdnDistributionConfig `pulumi:"config"`
	// STACKIT project ID associated with the distribution
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a CdnDistribution resource.
type CdnDistributionArgs struct {
	// The distribution configuration
	Config CdnDistributionConfigInput
	// STACKIT project ID associated with the distribution
	ProjectId pulumi.StringInput
}

func (CdnDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDistributionArgs)(nil)).Elem()
}

type CdnDistributionInput interface {
	pulumi.Input

	ToCdnDistributionOutput() CdnDistributionOutput
	ToCdnDistributionOutputWithContext(ctx context.Context) CdnDistributionOutput
}

func (*CdnDistribution) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistribution)(nil)).Elem()
}

func (i *CdnDistribution) ToCdnDistributionOutput() CdnDistributionOutput {
	return i.ToCdnDistributionOutputWithContext(context.Background())
}

func (i *CdnDistribution) ToCdnDistributionOutputWithContext(ctx context.Context) CdnDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionOutput)
}

// CdnDistributionArrayInput is an input type that accepts CdnDistributionArray and CdnDistributionArrayOutput values.
// You can construct a concrete instance of `CdnDistributionArrayInput` via:
//
//	CdnDistributionArray{ CdnDistributionArgs{...} }
type CdnDistributionArrayInput interface {
	pulumi.Input

	ToCdnDistributionArrayOutput() CdnDistributionArrayOutput
	ToCdnDistributionArrayOutputWithContext(context.Context) CdnDistributionArrayOutput
}

type CdnDistributionArray []CdnDistributionInput

func (CdnDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDistribution)(nil)).Elem()
}

func (i CdnDistributionArray) ToCdnDistributionArrayOutput() CdnDistributionArrayOutput {
	return i.ToCdnDistributionArrayOutputWithContext(context.Background())
}

func (i CdnDistributionArray) ToCdnDistributionArrayOutputWithContext(ctx context.Context) CdnDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionArrayOutput)
}

// CdnDistributionMapInput is an input type that accepts CdnDistributionMap and CdnDistributionMapOutput values.
// You can construct a concrete instance of `CdnDistributionMapInput` via:
//
//	CdnDistributionMap{ "key": CdnDistributionArgs{...} }
type CdnDistributionMapInput interface {
	pulumi.Input

	ToCdnDistributionMapOutput() CdnDistributionMapOutput
	ToCdnDistributionMapOutputWithContext(context.Context) CdnDistributionMapOutput
}

type CdnDistributionMap map[string]CdnDistributionInput

func (CdnDistributionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDistribution)(nil)).Elem()
}

func (i CdnDistributionMap) ToCdnDistributionMapOutput() CdnDistributionMapOutput {
	return i.ToCdnDistributionMapOutputWithContext(context.Background())
}

func (i CdnDistributionMap) ToCdnDistributionMapOutputWithContext(ctx context.Context) CdnDistributionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionMapOutput)
}

type CdnDistributionOutput struct{ *pulumi.OutputState }

func (CdnDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistribution)(nil)).Elem()
}

func (o CdnDistributionOutput) ToCdnDistributionOutput() CdnDistributionOutput {
	return o
}

func (o CdnDistributionOutput) ToCdnDistributionOutputWithContext(ctx context.Context) CdnDistributionOutput {
	return o
}

// The distribution configuration
func (o CdnDistributionOutput) Config() CdnDistributionConfigOutput {
	return o.ApplyT(func(v *CdnDistribution) CdnDistributionConfigOutput { return v.Config }).(CdnDistributionConfigOutput)
}

// Time when the distribution was created
func (o CdnDistributionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// CDN distribution ID
func (o CdnDistributionOutput) DistributionId() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringOutput { return v.DistributionId }).(pulumi.StringOutput)
}

// List of configured domains for the distribution
func (o CdnDistributionOutput) Domains() CdnDistributionDomainArrayOutput {
	return o.ApplyT(func(v *CdnDistribution) CdnDistributionDomainArrayOutput { return v.Domains }).(CdnDistributionDomainArrayOutput)
}

// List of distribution errors
func (o CdnDistributionOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringArrayOutput { return v.Errors }).(pulumi.StringArrayOutput)
}

// STACKIT project ID associated with the distribution
func (o CdnDistributionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Status of the distribution
func (o CdnDistributionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Time when the distribution was last updated
func (o CdnDistributionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDistribution) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type CdnDistributionArrayOutput struct{ *pulumi.OutputState }

func (CdnDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDistribution)(nil)).Elem()
}

func (o CdnDistributionArrayOutput) ToCdnDistributionArrayOutput() CdnDistributionArrayOutput {
	return o
}

func (o CdnDistributionArrayOutput) ToCdnDistributionArrayOutputWithContext(ctx context.Context) CdnDistributionArrayOutput {
	return o
}

func (o CdnDistributionArrayOutput) Index(i pulumi.IntInput) CdnDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CdnDistribution {
		return vs[0].([]*CdnDistribution)[vs[1].(int)]
	}).(CdnDistributionOutput)
}

type CdnDistributionMapOutput struct{ *pulumi.OutputState }

func (CdnDistributionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDistribution)(nil)).Elem()
}

func (o CdnDistributionMapOutput) ToCdnDistributionMapOutput() CdnDistributionMapOutput {
	return o
}

func (o CdnDistributionMapOutput) ToCdnDistributionMapOutputWithContext(ctx context.Context) CdnDistributionMapOutput {
	return o
}

func (o CdnDistributionMapOutput) MapIndex(k pulumi.StringInput) CdnDistributionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CdnDistribution {
		return vs[0].(map[string]*CdnDistribution)[vs[1].(string)]
	}).(CdnDistributionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionInput)(nil)).Elem(), &CdnDistribution{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionArrayInput)(nil)).Elem(), CdnDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionMapInput)(nil)).Elem(), CdnDistributionMap{})
	pulumi.RegisterOutputType(CdnDistributionOutput{})
	pulumi.RegisterOutputType(CdnDistributionArrayOutput{})
	pulumi.RegisterOutputType(CdnDistributionMapOutput{})
}
