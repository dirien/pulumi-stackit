// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Postgres Flex user resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type PostgresflexUser struct {
	pulumi.CustomResourceState

	Host pulumi.StringOutput `pulumi:"host"`
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Password   pulumi.StringOutput `pulumi:"password"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	Uri   pulumi.StringOutput      `pulumi:"uri"`
	// User ID.
	UserId   pulumi.StringOutput `pulumi:"userId"`
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewPostgresflexUser registers a new resource with the given unique name, arguments, and options.
func NewPostgresflexUser(ctx *pulumi.Context,
	name string, args *PostgresflexUserArgs, opts ...pulumi.ResourceOption) (*PostgresflexUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresflexUser
	err := ctx.RegisterResource("stackit:index/postgresflexUser:PostgresflexUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresflexUser gets an existing PostgresflexUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresflexUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresflexUserState, opts ...pulumi.ResourceOption) (*PostgresflexUser, error) {
	var resource PostgresflexUser
	err := ctx.ReadResource("stackit:index/postgresflexUser:PostgresflexUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresflexUser resources.
type postgresflexUserState struct {
	Host *string `pulumi:"host"`
	// ID of the PostgresFlex instance.
	InstanceId *string `pulumi:"instanceId"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	Roles []string `pulumi:"roles"`
	Uri   *string  `pulumi:"uri"`
	// User ID.
	UserId   *string `pulumi:"userId"`
	Username *string `pulumi:"username"`
}

type PostgresflexUserState struct {
	Host pulumi.StringPtrInput
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	Roles pulumi.StringArrayInput
	Uri   pulumi.StringPtrInput
	// User ID.
	UserId   pulumi.StringPtrInput
	Username pulumi.StringPtrInput
}

func (PostgresflexUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexUserState)(nil)).Elem()
}

type postgresflexUserArgs struct {
	// ID of the PostgresFlex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	Roles    []string `pulumi:"roles"`
	Username string   `pulumi:"username"`
}

// The set of arguments for constructing a PostgresflexUser resource.
type PostgresflexUserArgs struct {
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Database access levels for the user. Supported values are: `login`, `createdb`.
	Roles    pulumi.StringArrayInput
	Username pulumi.StringInput
}

func (PostgresflexUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexUserArgs)(nil)).Elem()
}

type PostgresflexUserInput interface {
	pulumi.Input

	ToPostgresflexUserOutput() PostgresflexUserOutput
	ToPostgresflexUserOutputWithContext(ctx context.Context) PostgresflexUserOutput
}

func (*PostgresflexUser) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexUser)(nil)).Elem()
}

func (i *PostgresflexUser) ToPostgresflexUserOutput() PostgresflexUserOutput {
	return i.ToPostgresflexUserOutputWithContext(context.Background())
}

func (i *PostgresflexUser) ToPostgresflexUserOutputWithContext(ctx context.Context) PostgresflexUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexUserOutput)
}

// PostgresflexUserArrayInput is an input type that accepts PostgresflexUserArray and PostgresflexUserArrayOutput values.
// You can construct a concrete instance of `PostgresflexUserArrayInput` via:
//
//	PostgresflexUserArray{ PostgresflexUserArgs{...} }
type PostgresflexUserArrayInput interface {
	pulumi.Input

	ToPostgresflexUserArrayOutput() PostgresflexUserArrayOutput
	ToPostgresflexUserArrayOutputWithContext(context.Context) PostgresflexUserArrayOutput
}

type PostgresflexUserArray []PostgresflexUserInput

func (PostgresflexUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexUser)(nil)).Elem()
}

func (i PostgresflexUserArray) ToPostgresflexUserArrayOutput() PostgresflexUserArrayOutput {
	return i.ToPostgresflexUserArrayOutputWithContext(context.Background())
}

func (i PostgresflexUserArray) ToPostgresflexUserArrayOutputWithContext(ctx context.Context) PostgresflexUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexUserArrayOutput)
}

// PostgresflexUserMapInput is an input type that accepts PostgresflexUserMap and PostgresflexUserMapOutput values.
// You can construct a concrete instance of `PostgresflexUserMapInput` via:
//
//	PostgresflexUserMap{ "key": PostgresflexUserArgs{...} }
type PostgresflexUserMapInput interface {
	pulumi.Input

	ToPostgresflexUserMapOutput() PostgresflexUserMapOutput
	ToPostgresflexUserMapOutputWithContext(context.Context) PostgresflexUserMapOutput
}

type PostgresflexUserMap map[string]PostgresflexUserInput

func (PostgresflexUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexUser)(nil)).Elem()
}

func (i PostgresflexUserMap) ToPostgresflexUserMapOutput() PostgresflexUserMapOutput {
	return i.ToPostgresflexUserMapOutputWithContext(context.Background())
}

func (i PostgresflexUserMap) ToPostgresflexUserMapOutputWithContext(ctx context.Context) PostgresflexUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexUserMapOutput)
}

type PostgresflexUserOutput struct{ *pulumi.OutputState }

func (PostgresflexUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexUser)(nil)).Elem()
}

func (o PostgresflexUserOutput) ToPostgresflexUserOutput() PostgresflexUserOutput {
	return o
}

func (o PostgresflexUserOutput) ToPostgresflexUserOutputWithContext(ctx context.Context) PostgresflexUserOutput {
	return o
}

func (o PostgresflexUserOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// ID of the PostgresFlex instance.
func (o PostgresflexUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o PostgresflexUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o PostgresflexUserOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o PostgresflexUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o PostgresflexUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Database access levels for the user. Supported values are: `login`, `createdb`.
func (o PostgresflexUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

func (o PostgresflexUserOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

// User ID.
func (o PostgresflexUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func (o PostgresflexUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type PostgresflexUserArrayOutput struct{ *pulumi.OutputState }

func (PostgresflexUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexUser)(nil)).Elem()
}

func (o PostgresflexUserArrayOutput) ToPostgresflexUserArrayOutput() PostgresflexUserArrayOutput {
	return o
}

func (o PostgresflexUserArrayOutput) ToPostgresflexUserArrayOutputWithContext(ctx context.Context) PostgresflexUserArrayOutput {
	return o
}

func (o PostgresflexUserArrayOutput) Index(i pulumi.IntInput) PostgresflexUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresflexUser {
		return vs[0].([]*PostgresflexUser)[vs[1].(int)]
	}).(PostgresflexUserOutput)
}

type PostgresflexUserMapOutput struct{ *pulumi.OutputState }

func (PostgresflexUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexUser)(nil)).Elem()
}

func (o PostgresflexUserMapOutput) ToPostgresflexUserMapOutput() PostgresflexUserMapOutput {
	return o
}

func (o PostgresflexUserMapOutput) ToPostgresflexUserMapOutputWithContext(ctx context.Context) PostgresflexUserMapOutput {
	return o
}

func (o PostgresflexUserMapOutput) MapIndex(k pulumi.StringInput) PostgresflexUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresflexUser {
		return vs[0].(map[string]*PostgresflexUser)[vs[1].(string)]
	}).(PostgresflexUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexUserInput)(nil)).Elem(), &PostgresflexUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexUserArrayInput)(nil)).Elem(), PostgresflexUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexUserMapInput)(nil)).Elem(), PostgresflexUserMap{})
	pulumi.RegisterOutputType(PostgresflexUserOutput{})
	pulumi.RegisterOutputType(PostgresflexUserArrayOutput{})
	pulumi.RegisterOutputType(PostgresflexUserMapOutput{})
}
