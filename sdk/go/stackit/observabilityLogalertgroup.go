// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability log alert group resource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ObservabilityLogalertgroup struct {
	pulumi.CustomResourceState

	// Observability instance ID to which the log alert group is associated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Rules for the log alert group
	Rules ObservabilityLogalertgroupRuleArrayOutput `pulumi:"rules"`
}

// NewObservabilityLogalertgroup registers a new resource with the given unique name, arguments, and options.
func NewObservabilityLogalertgroup(ctx *pulumi.Context,
	name string, args *ObservabilityLogalertgroupArgs, opts ...pulumi.ResourceOption) (*ObservabilityLogalertgroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityLogalertgroup
	err := ctx.RegisterResource("stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityLogalertgroup gets an existing ObservabilityLogalertgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityLogalertgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityLogalertgroupState, opts ...pulumi.ResourceOption) (*ObservabilityLogalertgroup, error) {
	var resource ObservabilityLogalertgroup
	err := ctx.ReadResource("stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityLogalertgroup resources.
type observabilityLogalertgroupState struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval *string `pulumi:"interval"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId *string `pulumi:"projectId"`
	// Rules for the log alert group
	Rules []ObservabilityLogalertgroupRule `pulumi:"rules"`
}

type ObservabilityLogalertgroupState struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId pulumi.StringPtrInput
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringPtrInput
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the log alert group is associated.
	ProjectId pulumi.StringPtrInput
	// Rules for the log alert group
	Rules ObservabilityLogalertgroupRuleArrayInput
}

func (ObservabilityLogalertgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityLogalertgroupState)(nil)).Elem()
}

type observabilityLogalertgroupArgs struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval *string `pulumi:"interval"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId string `pulumi:"projectId"`
	// Rules for the log alert group
	Rules []ObservabilityLogalertgroupRule `pulumi:"rules"`
}

// The set of arguments for constructing a ObservabilityLogalertgroup resource.
type ObservabilityLogalertgroupArgs struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId pulumi.StringInput
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval pulumi.StringPtrInput
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the log alert group is associated.
	ProjectId pulumi.StringInput
	// Rules for the log alert group
	Rules ObservabilityLogalertgroupRuleArrayInput
}

func (ObservabilityLogalertgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityLogalertgroupArgs)(nil)).Elem()
}

type ObservabilityLogalertgroupInput interface {
	pulumi.Input

	ToObservabilityLogalertgroupOutput() ObservabilityLogalertgroupOutput
	ToObservabilityLogalertgroupOutputWithContext(ctx context.Context) ObservabilityLogalertgroupOutput
}

func (*ObservabilityLogalertgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityLogalertgroup)(nil)).Elem()
}

func (i *ObservabilityLogalertgroup) ToObservabilityLogalertgroupOutput() ObservabilityLogalertgroupOutput {
	return i.ToObservabilityLogalertgroupOutputWithContext(context.Background())
}

func (i *ObservabilityLogalertgroup) ToObservabilityLogalertgroupOutputWithContext(ctx context.Context) ObservabilityLogalertgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityLogalertgroupOutput)
}

// ObservabilityLogalertgroupArrayInput is an input type that accepts ObservabilityLogalertgroupArray and ObservabilityLogalertgroupArrayOutput values.
// You can construct a concrete instance of `ObservabilityLogalertgroupArrayInput` via:
//
//	ObservabilityLogalertgroupArray{ ObservabilityLogalertgroupArgs{...} }
type ObservabilityLogalertgroupArrayInput interface {
	pulumi.Input

	ToObservabilityLogalertgroupArrayOutput() ObservabilityLogalertgroupArrayOutput
	ToObservabilityLogalertgroupArrayOutputWithContext(context.Context) ObservabilityLogalertgroupArrayOutput
}

type ObservabilityLogalertgroupArray []ObservabilityLogalertgroupInput

func (ObservabilityLogalertgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityLogalertgroup)(nil)).Elem()
}

func (i ObservabilityLogalertgroupArray) ToObservabilityLogalertgroupArrayOutput() ObservabilityLogalertgroupArrayOutput {
	return i.ToObservabilityLogalertgroupArrayOutputWithContext(context.Background())
}

func (i ObservabilityLogalertgroupArray) ToObservabilityLogalertgroupArrayOutputWithContext(ctx context.Context) ObservabilityLogalertgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityLogalertgroupArrayOutput)
}

// ObservabilityLogalertgroupMapInput is an input type that accepts ObservabilityLogalertgroupMap and ObservabilityLogalertgroupMapOutput values.
// You can construct a concrete instance of `ObservabilityLogalertgroupMapInput` via:
//
//	ObservabilityLogalertgroupMap{ "key": ObservabilityLogalertgroupArgs{...} }
type ObservabilityLogalertgroupMapInput interface {
	pulumi.Input

	ToObservabilityLogalertgroupMapOutput() ObservabilityLogalertgroupMapOutput
	ToObservabilityLogalertgroupMapOutputWithContext(context.Context) ObservabilityLogalertgroupMapOutput
}

type ObservabilityLogalertgroupMap map[string]ObservabilityLogalertgroupInput

func (ObservabilityLogalertgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityLogalertgroup)(nil)).Elem()
}

func (i ObservabilityLogalertgroupMap) ToObservabilityLogalertgroupMapOutput() ObservabilityLogalertgroupMapOutput {
	return i.ToObservabilityLogalertgroupMapOutputWithContext(context.Background())
}

func (i ObservabilityLogalertgroupMap) ToObservabilityLogalertgroupMapOutputWithContext(ctx context.Context) ObservabilityLogalertgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityLogalertgroupMapOutput)
}

type ObservabilityLogalertgroupOutput struct{ *pulumi.OutputState }

func (ObservabilityLogalertgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityLogalertgroup)(nil)).Elem()
}

func (o ObservabilityLogalertgroupOutput) ToObservabilityLogalertgroupOutput() ObservabilityLogalertgroupOutput {
	return o
}

func (o ObservabilityLogalertgroupOutput) ToObservabilityLogalertgroupOutputWithContext(ctx context.Context) ObservabilityLogalertgroupOutput {
	return o
}

// Observability instance ID to which the log alert group is associated.
func (o ObservabilityLogalertgroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityLogalertgroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
func (o ObservabilityLogalertgroupOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityLogalertgroup) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// The name of the log alert group. Is the identifier and must be unique in the group.
func (o ObservabilityLogalertgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityLogalertgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the log alert group is associated.
func (o ObservabilityLogalertgroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityLogalertgroup) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Rules for the log alert group
func (o ObservabilityLogalertgroupOutput) Rules() ObservabilityLogalertgroupRuleArrayOutput {
	return o.ApplyT(func(v *ObservabilityLogalertgroup) ObservabilityLogalertgroupRuleArrayOutput { return v.Rules }).(ObservabilityLogalertgroupRuleArrayOutput)
}

type ObservabilityLogalertgroupArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityLogalertgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityLogalertgroup)(nil)).Elem()
}

func (o ObservabilityLogalertgroupArrayOutput) ToObservabilityLogalertgroupArrayOutput() ObservabilityLogalertgroupArrayOutput {
	return o
}

func (o ObservabilityLogalertgroupArrayOutput) ToObservabilityLogalertgroupArrayOutputWithContext(ctx context.Context) ObservabilityLogalertgroupArrayOutput {
	return o
}

func (o ObservabilityLogalertgroupArrayOutput) Index(i pulumi.IntInput) ObservabilityLogalertgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityLogalertgroup {
		return vs[0].([]*ObservabilityLogalertgroup)[vs[1].(int)]
	}).(ObservabilityLogalertgroupOutput)
}

type ObservabilityLogalertgroupMapOutput struct{ *pulumi.OutputState }

func (ObservabilityLogalertgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityLogalertgroup)(nil)).Elem()
}

func (o ObservabilityLogalertgroupMapOutput) ToObservabilityLogalertgroupMapOutput() ObservabilityLogalertgroupMapOutput {
	return o
}

func (o ObservabilityLogalertgroupMapOutput) ToObservabilityLogalertgroupMapOutputWithContext(ctx context.Context) ObservabilityLogalertgroupMapOutput {
	return o
}

func (o ObservabilityLogalertgroupMapOutput) MapIndex(k pulumi.StringInput) ObservabilityLogalertgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityLogalertgroup {
		return vs[0].(map[string]*ObservabilityLogalertgroup)[vs[1].(string)]
	}).(ObservabilityLogalertgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityLogalertgroupInput)(nil)).Elem(), &ObservabilityLogalertgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityLogalertgroupArrayInput)(nil)).Elem(), ObservabilityLogalertgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityLogalertgroupMapInput)(nil)).Elem(), ObservabilityLogalertgroupMap{})
	pulumi.RegisterOutputType(ObservabilityLogalertgroupOutput{})
	pulumi.RegisterOutputType(ObservabilityLogalertgroupArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityLogalertgroupMapOutput{})
}
