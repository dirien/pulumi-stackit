// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Redis credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type RedisCredential struct {
	pulumi.CustomResourceState

	// The credential's ID.
	CredentialId pulumi.StringOutput      `pulumi:"credentialId"`
	Host         pulumi.StringOutput      `pulumi:"host"`
	Hosts        pulumi.StringArrayOutput `pulumi:"hosts"`
	// ID of the Redis instance.
	InstanceId       pulumi.StringOutput `pulumi:"instanceId"`
	LoadBalancedHost pulumi.StringOutput `pulumi:"loadBalancedHost"`
	Password         pulumi.StringOutput `pulumi:"password"`
	Port             pulumi.IntOutput    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Connection URI.
	Uri      pulumi.StringOutput `pulumi:"uri"`
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewRedisCredential registers a new resource with the given unique name, arguments, and options.
func NewRedisCredential(ctx *pulumi.Context,
	name string, args *RedisCredentialArgs, opts ...pulumi.ResourceOption) (*RedisCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisCredential
	err := ctx.RegisterResource("stackit:index/redisCredential:RedisCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisCredential gets an existing RedisCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisCredentialState, opts ...pulumi.ResourceOption) (*RedisCredential, error) {
	var resource RedisCredential
	err := ctx.ReadResource("stackit:index/redisCredential:RedisCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisCredential resources.
type redisCredentialState struct {
	// The credential's ID.
	CredentialId *string  `pulumi:"credentialId"`
	Host         *string  `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	// ID of the Redis instance.
	InstanceId       *string `pulumi:"instanceId"`
	LoadBalancedHost *string `pulumi:"loadBalancedHost"`
	Password         *string `pulumi:"password"`
	Port             *int    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// Connection URI.
	Uri      *string `pulumi:"uri"`
	Username *string `pulumi:"username"`
}

type RedisCredentialState struct {
	// The credential's ID.
	CredentialId pulumi.StringPtrInput
	Host         pulumi.StringPtrInput
	Hosts        pulumi.StringArrayInput
	// ID of the Redis instance.
	InstanceId       pulumi.StringPtrInput
	LoadBalancedHost pulumi.StringPtrInput
	Password         pulumi.StringPtrInput
	Port             pulumi.IntPtrInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// Connection URI.
	Uri      pulumi.StringPtrInput
	Username pulumi.StringPtrInput
}

func (RedisCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisCredentialState)(nil)).Elem()
}

type redisCredentialArgs struct {
	// ID of the Redis instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a RedisCredential resource.
type RedisCredentialArgs struct {
	// ID of the Redis instance.
	InstanceId pulumi.StringInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput
}

func (RedisCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisCredentialArgs)(nil)).Elem()
}

type RedisCredentialInput interface {
	pulumi.Input

	ToRedisCredentialOutput() RedisCredentialOutput
	ToRedisCredentialOutputWithContext(ctx context.Context) RedisCredentialOutput
}

func (*RedisCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCredential)(nil)).Elem()
}

func (i *RedisCredential) ToRedisCredentialOutput() RedisCredentialOutput {
	return i.ToRedisCredentialOutputWithContext(context.Background())
}

func (i *RedisCredential) ToRedisCredentialOutputWithContext(ctx context.Context) RedisCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCredentialOutput)
}

// RedisCredentialArrayInput is an input type that accepts RedisCredentialArray and RedisCredentialArrayOutput values.
// You can construct a concrete instance of `RedisCredentialArrayInput` via:
//
//	RedisCredentialArray{ RedisCredentialArgs{...} }
type RedisCredentialArrayInput interface {
	pulumi.Input

	ToRedisCredentialArrayOutput() RedisCredentialArrayOutput
	ToRedisCredentialArrayOutputWithContext(context.Context) RedisCredentialArrayOutput
}

type RedisCredentialArray []RedisCredentialInput

func (RedisCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisCredential)(nil)).Elem()
}

func (i RedisCredentialArray) ToRedisCredentialArrayOutput() RedisCredentialArrayOutput {
	return i.ToRedisCredentialArrayOutputWithContext(context.Background())
}

func (i RedisCredentialArray) ToRedisCredentialArrayOutputWithContext(ctx context.Context) RedisCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCredentialArrayOutput)
}

// RedisCredentialMapInput is an input type that accepts RedisCredentialMap and RedisCredentialMapOutput values.
// You can construct a concrete instance of `RedisCredentialMapInput` via:
//
//	RedisCredentialMap{ "key": RedisCredentialArgs{...} }
type RedisCredentialMapInput interface {
	pulumi.Input

	ToRedisCredentialMapOutput() RedisCredentialMapOutput
	ToRedisCredentialMapOutputWithContext(context.Context) RedisCredentialMapOutput
}

type RedisCredentialMap map[string]RedisCredentialInput

func (RedisCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisCredential)(nil)).Elem()
}

func (i RedisCredentialMap) ToRedisCredentialMapOutput() RedisCredentialMapOutput {
	return i.ToRedisCredentialMapOutputWithContext(context.Background())
}

func (i RedisCredentialMap) ToRedisCredentialMapOutputWithContext(ctx context.Context) RedisCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCredentialMapOutput)
}

type RedisCredentialOutput struct{ *pulumi.OutputState }

func (RedisCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCredential)(nil)).Elem()
}

func (o RedisCredentialOutput) ToRedisCredentialOutput() RedisCredentialOutput {
	return o
}

func (o RedisCredentialOutput) ToRedisCredentialOutputWithContext(ctx context.Context) RedisCredentialOutput {
	return o
}

// The credential's ID.
func (o RedisCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// ID of the Redis instance.
func (o RedisCredentialOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) LoadBalancedHost() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.LoadBalancedHost }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o RedisCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Connection URI.
func (o RedisCredentialOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o RedisCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type RedisCredentialArrayOutput struct{ *pulumi.OutputState }

func (RedisCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisCredential)(nil)).Elem()
}

func (o RedisCredentialArrayOutput) ToRedisCredentialArrayOutput() RedisCredentialArrayOutput {
	return o
}

func (o RedisCredentialArrayOutput) ToRedisCredentialArrayOutputWithContext(ctx context.Context) RedisCredentialArrayOutput {
	return o
}

func (o RedisCredentialArrayOutput) Index(i pulumi.IntInput) RedisCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisCredential {
		return vs[0].([]*RedisCredential)[vs[1].(int)]
	}).(RedisCredentialOutput)
}

type RedisCredentialMapOutput struct{ *pulumi.OutputState }

func (RedisCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisCredential)(nil)).Elem()
}

func (o RedisCredentialMapOutput) ToRedisCredentialMapOutput() RedisCredentialMapOutput {
	return o
}

func (o RedisCredentialMapOutput) ToRedisCredentialMapOutputWithContext(ctx context.Context) RedisCredentialMapOutput {
	return o
}

func (o RedisCredentialMapOutput) MapIndex(k pulumi.StringInput) RedisCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisCredential {
		return vs[0].(map[string]*RedisCredential)[vs[1].(string)]
	}).(RedisCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisCredentialInput)(nil)).Elem(), &RedisCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisCredentialArrayInput)(nil)).Elem(), RedisCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisCredentialMapInput)(nil)).Elem(), RedisCredentialMap{})
	pulumi.RegisterOutputType(RedisCredentialOutput{})
	pulumi.RegisterOutputType(RedisCredentialArrayOutput{})
	pulumi.RegisterOutputType(RedisCredentialMapOutput{})
}
