// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network interface attachment resource schema. Attaches a network interface to a server. Must have a `region` specified in the provider configuration. The attachment only takes full effect after server reboot.
//
// ## Example Usage
type ServerNetworkInterfaceAttach struct {
	pulumi.CustomResourceState

	// The network interface ID.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface attachment is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server ID.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
}

// NewServerNetworkInterfaceAttach registers a new resource with the given unique name, arguments, and options.
func NewServerNetworkInterfaceAttach(ctx *pulumi.Context,
	name string, args *ServerNetworkInterfaceAttachArgs, opts ...pulumi.ResourceOption) (*ServerNetworkInterfaceAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerNetworkInterfaceAttach
	err := ctx.RegisterResource("stackit:index/serverNetworkInterfaceAttach:ServerNetworkInterfaceAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerNetworkInterfaceAttach gets an existing ServerNetworkInterfaceAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerNetworkInterfaceAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerNetworkInterfaceAttachState, opts ...pulumi.ResourceOption) (*ServerNetworkInterfaceAttach, error) {
	var resource ServerNetworkInterfaceAttach
	err := ctx.ReadResource("stackit:index/serverNetworkInterfaceAttach:ServerNetworkInterfaceAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerNetworkInterfaceAttach resources.
type serverNetworkInterfaceAttachState struct {
	// The network interface ID.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface attachment is associated.
	ProjectId *string `pulumi:"projectId"`
	// The server ID.
	ServerId *string `pulumi:"serverId"`
}

type ServerNetworkInterfaceAttachState struct {
	// The network interface ID.
	NetworkInterfaceId pulumi.StringPtrInput
	// STACKIT project ID to which the network interface attachment is associated.
	ProjectId pulumi.StringPtrInput
	// The server ID.
	ServerId pulumi.StringPtrInput
}

func (ServerNetworkInterfaceAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverNetworkInterfaceAttachState)(nil)).Elem()
}

type serverNetworkInterfaceAttachArgs struct {
	// The network interface ID.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface attachment is associated.
	ProjectId string `pulumi:"projectId"`
	// The server ID.
	ServerId string `pulumi:"serverId"`
}

// The set of arguments for constructing a ServerNetworkInterfaceAttach resource.
type ServerNetworkInterfaceAttachArgs struct {
	// The network interface ID.
	NetworkInterfaceId pulumi.StringInput
	// STACKIT project ID to which the network interface attachment is associated.
	ProjectId pulumi.StringInput
	// The server ID.
	ServerId pulumi.StringInput
}

func (ServerNetworkInterfaceAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverNetworkInterfaceAttachArgs)(nil)).Elem()
}

type ServerNetworkInterfaceAttachInput interface {
	pulumi.Input

	ToServerNetworkInterfaceAttachOutput() ServerNetworkInterfaceAttachOutput
	ToServerNetworkInterfaceAttachOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachOutput
}

func (*ServerNetworkInterfaceAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (i *ServerNetworkInterfaceAttach) ToServerNetworkInterfaceAttachOutput() ServerNetworkInterfaceAttachOutput {
	return i.ToServerNetworkInterfaceAttachOutputWithContext(context.Background())
}

func (i *ServerNetworkInterfaceAttach) ToServerNetworkInterfaceAttachOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNetworkInterfaceAttachOutput)
}

// ServerNetworkInterfaceAttachArrayInput is an input type that accepts ServerNetworkInterfaceAttachArray and ServerNetworkInterfaceAttachArrayOutput values.
// You can construct a concrete instance of `ServerNetworkInterfaceAttachArrayInput` via:
//
//	ServerNetworkInterfaceAttachArray{ ServerNetworkInterfaceAttachArgs{...} }
type ServerNetworkInterfaceAttachArrayInput interface {
	pulumi.Input

	ToServerNetworkInterfaceAttachArrayOutput() ServerNetworkInterfaceAttachArrayOutput
	ToServerNetworkInterfaceAttachArrayOutputWithContext(context.Context) ServerNetworkInterfaceAttachArrayOutput
}

type ServerNetworkInterfaceAttachArray []ServerNetworkInterfaceAttachInput

func (ServerNetworkInterfaceAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (i ServerNetworkInterfaceAttachArray) ToServerNetworkInterfaceAttachArrayOutput() ServerNetworkInterfaceAttachArrayOutput {
	return i.ToServerNetworkInterfaceAttachArrayOutputWithContext(context.Background())
}

func (i ServerNetworkInterfaceAttachArray) ToServerNetworkInterfaceAttachArrayOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNetworkInterfaceAttachArrayOutput)
}

// ServerNetworkInterfaceAttachMapInput is an input type that accepts ServerNetworkInterfaceAttachMap and ServerNetworkInterfaceAttachMapOutput values.
// You can construct a concrete instance of `ServerNetworkInterfaceAttachMapInput` via:
//
//	ServerNetworkInterfaceAttachMap{ "key": ServerNetworkInterfaceAttachArgs{...} }
type ServerNetworkInterfaceAttachMapInput interface {
	pulumi.Input

	ToServerNetworkInterfaceAttachMapOutput() ServerNetworkInterfaceAttachMapOutput
	ToServerNetworkInterfaceAttachMapOutputWithContext(context.Context) ServerNetworkInterfaceAttachMapOutput
}

type ServerNetworkInterfaceAttachMap map[string]ServerNetworkInterfaceAttachInput

func (ServerNetworkInterfaceAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (i ServerNetworkInterfaceAttachMap) ToServerNetworkInterfaceAttachMapOutput() ServerNetworkInterfaceAttachMapOutput {
	return i.ToServerNetworkInterfaceAttachMapOutputWithContext(context.Background())
}

func (i ServerNetworkInterfaceAttachMap) ToServerNetworkInterfaceAttachMapOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNetworkInterfaceAttachMapOutput)
}

type ServerNetworkInterfaceAttachOutput struct{ *pulumi.OutputState }

func (ServerNetworkInterfaceAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (o ServerNetworkInterfaceAttachOutput) ToServerNetworkInterfaceAttachOutput() ServerNetworkInterfaceAttachOutput {
	return o
}

func (o ServerNetworkInterfaceAttachOutput) ToServerNetworkInterfaceAttachOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachOutput {
	return o
}

// The network interface ID.
func (o ServerNetworkInterfaceAttachOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerNetworkInterfaceAttach) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the network interface attachment is associated.
func (o ServerNetworkInterfaceAttachOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerNetworkInterfaceAttach) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID.
func (o ServerNetworkInterfaceAttachOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerNetworkInterfaceAttach) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

type ServerNetworkInterfaceAttachArrayOutput struct{ *pulumi.OutputState }

func (ServerNetworkInterfaceAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (o ServerNetworkInterfaceAttachArrayOutput) ToServerNetworkInterfaceAttachArrayOutput() ServerNetworkInterfaceAttachArrayOutput {
	return o
}

func (o ServerNetworkInterfaceAttachArrayOutput) ToServerNetworkInterfaceAttachArrayOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachArrayOutput {
	return o
}

func (o ServerNetworkInterfaceAttachArrayOutput) Index(i pulumi.IntInput) ServerNetworkInterfaceAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerNetworkInterfaceAttach {
		return vs[0].([]*ServerNetworkInterfaceAttach)[vs[1].(int)]
	}).(ServerNetworkInterfaceAttachOutput)
}

type ServerNetworkInterfaceAttachMapOutput struct{ *pulumi.OutputState }

func (ServerNetworkInterfaceAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerNetworkInterfaceAttach)(nil)).Elem()
}

func (o ServerNetworkInterfaceAttachMapOutput) ToServerNetworkInterfaceAttachMapOutput() ServerNetworkInterfaceAttachMapOutput {
	return o
}

func (o ServerNetworkInterfaceAttachMapOutput) ToServerNetworkInterfaceAttachMapOutputWithContext(ctx context.Context) ServerNetworkInterfaceAttachMapOutput {
	return o
}

func (o ServerNetworkInterfaceAttachMapOutput) MapIndex(k pulumi.StringInput) ServerNetworkInterfaceAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerNetworkInterfaceAttach {
		return vs[0].(map[string]*ServerNetworkInterfaceAttach)[vs[1].(string)]
	}).(ServerNetworkInterfaceAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNetworkInterfaceAttachInput)(nil)).Elem(), &ServerNetworkInterfaceAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNetworkInterfaceAttachArrayInput)(nil)).Elem(), ServerNetworkInterfaceAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNetworkInterfaceAttachMapInput)(nil)).Elem(), ServerNetworkInterfaceAttachMap{})
	pulumi.RegisterOutputType(ServerNetworkInterfaceAttachOutput{})
	pulumi.RegisterOutputType(ServerNetworkInterfaceAttachArrayOutput{})
	pulumi.RegisterOutputType(ServerNetworkInterfaceAttachMapOutput{})
}
