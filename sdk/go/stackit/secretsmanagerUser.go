// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Secrets Manager user resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SecretsmanagerUser struct {
	pulumi.CustomResourceState

	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description pulumi.StringOutput `pulumi:"description"`
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// An auto-generated password.
	Password pulumi.StringOutput `pulumi:"password"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The user's ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// An auto-generated user name.
	Username pulumi.StringOutput `pulumi:"username"`
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled pulumi.BoolOutput `pulumi:"writeEnabled"`
}

// NewSecretsmanagerUser registers a new resource with the given unique name, arguments, and options.
func NewSecretsmanagerUser(ctx *pulumi.Context,
	name string, args *SecretsmanagerUserArgs, opts ...pulumi.ResourceOption) (*SecretsmanagerUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.WriteEnabled == nil {
		return nil, errors.New("invalid value for required argument 'WriteEnabled'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretsmanagerUser
	err := ctx.RegisterResource("stackit:index/secretsmanagerUser:SecretsmanagerUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsmanagerUser gets an existing SecretsmanagerUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsmanagerUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsmanagerUserState, opts ...pulumi.ResourceOption) (*SecretsmanagerUser, error) {
	var resource SecretsmanagerUser
	err := ctx.ReadResource("stackit:index/secretsmanagerUser:SecretsmanagerUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsmanagerUser resources.
type secretsmanagerUserState struct {
	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description *string `pulumi:"description"`
	// ID of the Secrets Manager instance.
	InstanceId *string `pulumi:"instanceId"`
	// An auto-generated password.
	Password *string `pulumi:"password"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The user's ID.
	UserId *string `pulumi:"userId"`
	// An auto-generated user name.
	Username *string `pulumi:"username"`
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled *bool `pulumi:"writeEnabled"`
}

type SecretsmanagerUserState struct {
	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description pulumi.StringPtrInput
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringPtrInput
	// An auto-generated password.
	Password pulumi.StringPtrInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The user's ID.
	UserId pulumi.StringPtrInput
	// An auto-generated user name.
	Username pulumi.StringPtrInput
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled pulumi.BoolPtrInput
}

func (SecretsmanagerUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsmanagerUserState)(nil)).Elem()
}

type secretsmanagerUserArgs struct {
	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description string `pulumi:"description"`
	// ID of the Secrets Manager instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled bool `pulumi:"writeEnabled"`
}

// The set of arguments for constructing a SecretsmanagerUser resource.
type SecretsmanagerUserArgs struct {
	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description pulumi.StringInput
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled pulumi.BoolInput
}

func (SecretsmanagerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsmanagerUserArgs)(nil)).Elem()
}

type SecretsmanagerUserInput interface {
	pulumi.Input

	ToSecretsmanagerUserOutput() SecretsmanagerUserOutput
	ToSecretsmanagerUserOutputWithContext(ctx context.Context) SecretsmanagerUserOutput
}

func (*SecretsmanagerUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsmanagerUser)(nil)).Elem()
}

func (i *SecretsmanagerUser) ToSecretsmanagerUserOutput() SecretsmanagerUserOutput {
	return i.ToSecretsmanagerUserOutputWithContext(context.Background())
}

func (i *SecretsmanagerUser) ToSecretsmanagerUserOutputWithContext(ctx context.Context) SecretsmanagerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerUserOutput)
}

// SecretsmanagerUserArrayInput is an input type that accepts SecretsmanagerUserArray and SecretsmanagerUserArrayOutput values.
// You can construct a concrete instance of `SecretsmanagerUserArrayInput` via:
//
//	SecretsmanagerUserArray{ SecretsmanagerUserArgs{...} }
type SecretsmanagerUserArrayInput interface {
	pulumi.Input

	ToSecretsmanagerUserArrayOutput() SecretsmanagerUserArrayOutput
	ToSecretsmanagerUserArrayOutputWithContext(context.Context) SecretsmanagerUserArrayOutput
}

type SecretsmanagerUserArray []SecretsmanagerUserInput

func (SecretsmanagerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsmanagerUser)(nil)).Elem()
}

func (i SecretsmanagerUserArray) ToSecretsmanagerUserArrayOutput() SecretsmanagerUserArrayOutput {
	return i.ToSecretsmanagerUserArrayOutputWithContext(context.Background())
}

func (i SecretsmanagerUserArray) ToSecretsmanagerUserArrayOutputWithContext(ctx context.Context) SecretsmanagerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerUserArrayOutput)
}

// SecretsmanagerUserMapInput is an input type that accepts SecretsmanagerUserMap and SecretsmanagerUserMapOutput values.
// You can construct a concrete instance of `SecretsmanagerUserMapInput` via:
//
//	SecretsmanagerUserMap{ "key": SecretsmanagerUserArgs{...} }
type SecretsmanagerUserMapInput interface {
	pulumi.Input

	ToSecretsmanagerUserMapOutput() SecretsmanagerUserMapOutput
	ToSecretsmanagerUserMapOutputWithContext(context.Context) SecretsmanagerUserMapOutput
}

type SecretsmanagerUserMap map[string]SecretsmanagerUserInput

func (SecretsmanagerUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsmanagerUser)(nil)).Elem()
}

func (i SecretsmanagerUserMap) ToSecretsmanagerUserMapOutput() SecretsmanagerUserMapOutput {
	return i.ToSecretsmanagerUserMapOutputWithContext(context.Background())
}

func (i SecretsmanagerUserMap) ToSecretsmanagerUserMapOutputWithContext(ctx context.Context) SecretsmanagerUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerUserMapOutput)
}

type SecretsmanagerUserOutput struct{ *pulumi.OutputState }

func (SecretsmanagerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsmanagerUser)(nil)).Elem()
}

func (o SecretsmanagerUserOutput) ToSecretsmanagerUserOutput() SecretsmanagerUserOutput {
	return o
}

func (o SecretsmanagerUserOutput) ToSecretsmanagerUserOutputWithContext(ctx context.Context) SecretsmanagerUserOutput {
	return o
}

// A user chosen description to differentiate between multiple users. Can't be changed after creation.
func (o SecretsmanagerUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ID of the Secrets Manager instance.
func (o SecretsmanagerUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// An auto-generated password.
func (o SecretsmanagerUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o SecretsmanagerUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The user's ID.
func (o SecretsmanagerUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// An auto-generated user name.
func (o SecretsmanagerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// If true, the user has writeaccess to the secrets engine.
func (o SecretsmanagerUserOutput) WriteEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretsmanagerUser) pulumi.BoolOutput { return v.WriteEnabled }).(pulumi.BoolOutput)
}

type SecretsmanagerUserArrayOutput struct{ *pulumi.OutputState }

func (SecretsmanagerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsmanagerUser)(nil)).Elem()
}

func (o SecretsmanagerUserArrayOutput) ToSecretsmanagerUserArrayOutput() SecretsmanagerUserArrayOutput {
	return o
}

func (o SecretsmanagerUserArrayOutput) ToSecretsmanagerUserArrayOutputWithContext(ctx context.Context) SecretsmanagerUserArrayOutput {
	return o
}

func (o SecretsmanagerUserArrayOutput) Index(i pulumi.IntInput) SecretsmanagerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretsmanagerUser {
		return vs[0].([]*SecretsmanagerUser)[vs[1].(int)]
	}).(SecretsmanagerUserOutput)
}

type SecretsmanagerUserMapOutput struct{ *pulumi.OutputState }

func (SecretsmanagerUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsmanagerUser)(nil)).Elem()
}

func (o SecretsmanagerUserMapOutput) ToSecretsmanagerUserMapOutput() SecretsmanagerUserMapOutput {
	return o
}

func (o SecretsmanagerUserMapOutput) ToSecretsmanagerUserMapOutputWithContext(ctx context.Context) SecretsmanagerUserMapOutput {
	return o
}

func (o SecretsmanagerUserMapOutput) MapIndex(k pulumi.StringInput) SecretsmanagerUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretsmanagerUser {
		return vs[0].(map[string]*SecretsmanagerUser)[vs[1].(string)]
	}).(SecretsmanagerUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerUserInput)(nil)).Elem(), &SecretsmanagerUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerUserArrayInput)(nil)).Elem(), SecretsmanagerUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerUserMapInput)(nil)).Elem(), SecretsmanagerUserMap{})
	pulumi.RegisterOutputType(SecretsmanagerUserOutput{})
	pulumi.RegisterOutputType(SecretsmanagerUserArrayOutput{})
	pulumi.RegisterOutputType(SecretsmanagerUserMapOutput{})
}
