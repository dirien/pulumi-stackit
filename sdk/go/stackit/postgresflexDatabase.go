// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Postgres Flex database resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type PostgresflexDatabase struct {
	pulumi.CustomResourceState

	// Database ID.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// ID of the Postgres Flex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Database name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Username of the database owner.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewPostgresflexDatabase registers a new resource with the given unique name, arguments, and options.
func NewPostgresflexDatabase(ctx *pulumi.Context,
	name string, args *PostgresflexDatabaseArgs, opts ...pulumi.ResourceOption) (*PostgresflexDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresflexDatabase
	err := ctx.RegisterResource("stackit:index/postgresflexDatabase:PostgresflexDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresflexDatabase gets an existing PostgresflexDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresflexDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresflexDatabaseState, opts ...pulumi.ResourceOption) (*PostgresflexDatabase, error) {
	var resource PostgresflexDatabase
	err := ctx.ReadResource("stackit:index/postgresflexDatabase:PostgresflexDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresflexDatabase resources.
type postgresflexDatabaseState struct {
	// Database ID.
	DatabaseId *string `pulumi:"databaseId"`
	// ID of the Postgres Flex instance.
	InstanceId *string `pulumi:"instanceId"`
	// Database name.
	Name *string `pulumi:"name"`
	// Username of the database owner.
	Owner *string `pulumi:"owner"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

type PostgresflexDatabaseState struct {
	// Database ID.
	DatabaseId pulumi.StringPtrInput
	// ID of the Postgres Flex instance.
	InstanceId pulumi.StringPtrInput
	// Database name.
	Name pulumi.StringPtrInput
	// Username of the database owner.
	Owner pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (PostgresflexDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexDatabaseState)(nil)).Elem()
}

type postgresflexDatabaseArgs struct {
	// ID of the Postgres Flex instance.
	InstanceId string `pulumi:"instanceId"`
	// Database name.
	Name *string `pulumi:"name"`
	// Username of the database owner.
	Owner string `pulumi:"owner"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a PostgresflexDatabase resource.
type PostgresflexDatabaseArgs struct {
	// ID of the Postgres Flex instance.
	InstanceId pulumi.StringInput
	// Database name.
	Name pulumi.StringPtrInput
	// Username of the database owner.
	Owner pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (PostgresflexDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexDatabaseArgs)(nil)).Elem()
}

type PostgresflexDatabaseInput interface {
	pulumi.Input

	ToPostgresflexDatabaseOutput() PostgresflexDatabaseOutput
	ToPostgresflexDatabaseOutputWithContext(ctx context.Context) PostgresflexDatabaseOutput
}

func (*PostgresflexDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexDatabase)(nil)).Elem()
}

func (i *PostgresflexDatabase) ToPostgresflexDatabaseOutput() PostgresflexDatabaseOutput {
	return i.ToPostgresflexDatabaseOutputWithContext(context.Background())
}

func (i *PostgresflexDatabase) ToPostgresflexDatabaseOutputWithContext(ctx context.Context) PostgresflexDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexDatabaseOutput)
}

// PostgresflexDatabaseArrayInput is an input type that accepts PostgresflexDatabaseArray and PostgresflexDatabaseArrayOutput values.
// You can construct a concrete instance of `PostgresflexDatabaseArrayInput` via:
//
//	PostgresflexDatabaseArray{ PostgresflexDatabaseArgs{...} }
type PostgresflexDatabaseArrayInput interface {
	pulumi.Input

	ToPostgresflexDatabaseArrayOutput() PostgresflexDatabaseArrayOutput
	ToPostgresflexDatabaseArrayOutputWithContext(context.Context) PostgresflexDatabaseArrayOutput
}

type PostgresflexDatabaseArray []PostgresflexDatabaseInput

func (PostgresflexDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexDatabase)(nil)).Elem()
}

func (i PostgresflexDatabaseArray) ToPostgresflexDatabaseArrayOutput() PostgresflexDatabaseArrayOutput {
	return i.ToPostgresflexDatabaseArrayOutputWithContext(context.Background())
}

func (i PostgresflexDatabaseArray) ToPostgresflexDatabaseArrayOutputWithContext(ctx context.Context) PostgresflexDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexDatabaseArrayOutput)
}

// PostgresflexDatabaseMapInput is an input type that accepts PostgresflexDatabaseMap and PostgresflexDatabaseMapOutput values.
// You can construct a concrete instance of `PostgresflexDatabaseMapInput` via:
//
//	PostgresflexDatabaseMap{ "key": PostgresflexDatabaseArgs{...} }
type PostgresflexDatabaseMapInput interface {
	pulumi.Input

	ToPostgresflexDatabaseMapOutput() PostgresflexDatabaseMapOutput
	ToPostgresflexDatabaseMapOutputWithContext(context.Context) PostgresflexDatabaseMapOutput
}

type PostgresflexDatabaseMap map[string]PostgresflexDatabaseInput

func (PostgresflexDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexDatabase)(nil)).Elem()
}

func (i PostgresflexDatabaseMap) ToPostgresflexDatabaseMapOutput() PostgresflexDatabaseMapOutput {
	return i.ToPostgresflexDatabaseMapOutputWithContext(context.Background())
}

func (i PostgresflexDatabaseMap) ToPostgresflexDatabaseMapOutputWithContext(ctx context.Context) PostgresflexDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexDatabaseMapOutput)
}

type PostgresflexDatabaseOutput struct{ *pulumi.OutputState }

func (PostgresflexDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexDatabase)(nil)).Elem()
}

func (o PostgresflexDatabaseOutput) ToPostgresflexDatabaseOutput() PostgresflexDatabaseOutput {
	return o
}

func (o PostgresflexDatabaseOutput) ToPostgresflexDatabaseOutputWithContext(ctx context.Context) PostgresflexDatabaseOutput {
	return o
}

// Database ID.
func (o PostgresflexDatabaseOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// ID of the Postgres Flex instance.
func (o PostgresflexDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Database name.
func (o PostgresflexDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Username of the database owner.
func (o PostgresflexDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o PostgresflexDatabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o PostgresflexDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type PostgresflexDatabaseArrayOutput struct{ *pulumi.OutputState }

func (PostgresflexDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexDatabase)(nil)).Elem()
}

func (o PostgresflexDatabaseArrayOutput) ToPostgresflexDatabaseArrayOutput() PostgresflexDatabaseArrayOutput {
	return o
}

func (o PostgresflexDatabaseArrayOutput) ToPostgresflexDatabaseArrayOutputWithContext(ctx context.Context) PostgresflexDatabaseArrayOutput {
	return o
}

func (o PostgresflexDatabaseArrayOutput) Index(i pulumi.IntInput) PostgresflexDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresflexDatabase {
		return vs[0].([]*PostgresflexDatabase)[vs[1].(int)]
	}).(PostgresflexDatabaseOutput)
}

type PostgresflexDatabaseMapOutput struct{ *pulumi.OutputState }

func (PostgresflexDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexDatabase)(nil)).Elem()
}

func (o PostgresflexDatabaseMapOutput) ToPostgresflexDatabaseMapOutput() PostgresflexDatabaseMapOutput {
	return o
}

func (o PostgresflexDatabaseMapOutput) ToPostgresflexDatabaseMapOutputWithContext(ctx context.Context) PostgresflexDatabaseMapOutput {
	return o
}

func (o PostgresflexDatabaseMapOutput) MapIndex(k pulumi.StringInput) PostgresflexDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresflexDatabase {
		return vs[0].(map[string]*PostgresflexDatabase)[vs[1].(string)]
	}).(PostgresflexDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexDatabaseInput)(nil)).Elem(), &PostgresflexDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexDatabaseArrayInput)(nil)).Elem(), PostgresflexDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexDatabaseMapInput)(nil)).Elem(), PostgresflexDatabaseMap{})
	pulumi.RegisterOutputType(PostgresflexDatabaseOutput{})
	pulumi.RegisterOutputType(PostgresflexDatabaseArrayOutput{})
	pulumi.RegisterOutputType(PostgresflexDatabaseMapOutput{})
}
