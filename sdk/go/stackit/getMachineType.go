// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Machine type data source.
//
// > This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
func GetMachineType(ctx *pulumi.Context, args *GetMachineTypeArgs, opts ...pulumi.InvokeOption) (*GetMachineTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMachineTypeResult
	err := ctx.Invoke("stackit:index/getMachineType:getMachineType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMachineType.
type GetMachineTypeArgs struct {
	// Expr-lang filter for filtering machine types.
	Filter        string `pulumi:"filter"`
	ProjectId     string `pulumi:"projectId"`
	SortAscending *bool  `pulumi:"sortAscending"`
}

// A collection of values returned by getMachineType.
type GetMachineTypeResult struct {
	Description string            `pulumi:"description"`
	Disk        int               `pulumi:"disk"`
	ExtraSpecs  map[string]string `pulumi:"extraSpecs"`
	// Expr-lang filter for filtering machine types.
	Filter        string `pulumi:"filter"`
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	ProjectId     string `pulumi:"projectId"`
	Ram           int    `pulumi:"ram"`
	SortAscending *bool  `pulumi:"sortAscending"`
	Vcpus         int    `pulumi:"vcpus"`
}

func GetMachineTypeOutput(ctx *pulumi.Context, args GetMachineTypeOutputArgs, opts ...pulumi.InvokeOption) GetMachineTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMachineTypeResultOutput, error) {
			args := v.(GetMachineTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getMachineType:getMachineType", args, GetMachineTypeResultOutput{}, options).(GetMachineTypeResultOutput), nil
		}).(GetMachineTypeResultOutput)
}

// A collection of arguments for invoking getMachineType.
type GetMachineTypeOutputArgs struct {
	// Expr-lang filter for filtering machine types.
	Filter        pulumi.StringInput  `pulumi:"filter"`
	ProjectId     pulumi.StringInput  `pulumi:"projectId"`
	SortAscending pulumi.BoolPtrInput `pulumi:"sortAscending"`
}

func (GetMachineTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTypeArgs)(nil)).Elem()
}

// A collection of values returned by getMachineType.
type GetMachineTypeResultOutput struct{ *pulumi.OutputState }

func (GetMachineTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTypeResult)(nil)).Elem()
}

func (o GetMachineTypeResultOutput) ToGetMachineTypeResultOutput() GetMachineTypeResultOutput {
	return o
}

func (o GetMachineTypeResultOutput) ToGetMachineTypeResultOutputWithContext(ctx context.Context) GetMachineTypeResultOutput {
	return o
}

func (o GetMachineTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetMachineTypeResultOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetMachineTypeResult) int { return v.Disk }).(pulumi.IntOutput)
}

func (o GetMachineTypeResultOutput) ExtraSpecs() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetMachineTypeResult) map[string]string { return v.ExtraSpecs }).(pulumi.StringMapOutput)
}

// Expr-lang filter for filtering machine types.
func (o GetMachineTypeResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypeResult) string { return v.Filter }).(pulumi.StringOutput)
}

func (o GetMachineTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMachineTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMachineTypeResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTypeResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetMachineTypeResultOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetMachineTypeResult) int { return v.Ram }).(pulumi.IntOutput)
}

func (o GetMachineTypeResultOutput) SortAscending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMachineTypeResult) *bool { return v.SortAscending }).(pulumi.BoolPtrOutput)
}

func (o GetMachineTypeResultOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetMachineTypeResult) int { return v.Vcpus }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMachineTypeResultOutput{})
}
