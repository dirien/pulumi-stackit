// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Load balancer observability credential resource schema. Must have a `region` specified in the provider configuration. These contain the username and password for the observability service (e.g. Argus) where the load balancer logs/metrics will be pushed into
//
// ## Example Usage
type LoadbalancerObservabilityCredential struct {
	pulumi.CustomResourceState

	// The credentials reference is used by the Load Balancer to define which credentials it will use.
	CredentialsRef pulumi.StringOutput `pulumi:"credentialsRef"`
	// Observability credential name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Password pulumi.StringOutput `pulumi:"password"`
	// STACKIT project ID to which the load balancer observability credential is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewLoadbalancerObservabilityCredential registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerObservabilityCredential(ctx *pulumi.Context,
	name string, args *LoadbalancerObservabilityCredentialArgs, opts ...pulumi.ResourceOption) (*LoadbalancerObservabilityCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerObservabilityCredential
	err := ctx.RegisterResource("stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerObservabilityCredential gets an existing LoadbalancerObservabilityCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerObservabilityCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerObservabilityCredentialState, opts ...pulumi.ResourceOption) (*LoadbalancerObservabilityCredential, error) {
	var resource LoadbalancerObservabilityCredential
	err := ctx.ReadResource("stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerObservabilityCredential resources.
type loadbalancerObservabilityCredentialState struct {
	// The credentials reference is used by the Load Balancer to define which credentials it will use.
	CredentialsRef *string `pulumi:"credentialsRef"`
	// Observability credential name.
	DisplayName *string `pulumi:"displayName"`
	// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Password *string `pulumi:"password"`
	// STACKIT project ID to which the load balancer observability credential is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Username *string `pulumi:"username"`
}

type LoadbalancerObservabilityCredentialState struct {
	// The credentials reference is used by the Load Balancer to define which credentials it will use.
	CredentialsRef pulumi.StringPtrInput
	// Observability credential name.
	DisplayName pulumi.StringPtrInput
	// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Password pulumi.StringPtrInput
	// STACKIT project ID to which the load balancer observability credential is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Username pulumi.StringPtrInput
}

func (LoadbalancerObservabilityCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerObservabilityCredentialState)(nil)).Elem()
}

type loadbalancerObservabilityCredentialArgs struct {
	// Observability credential name.
	DisplayName string `pulumi:"displayName"`
	// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Password string `pulumi:"password"`
	// STACKIT project ID to which the load balancer observability credential is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a LoadbalancerObservabilityCredential resource.
type LoadbalancerObservabilityCredentialArgs struct {
	// Observability credential name.
	DisplayName pulumi.StringInput
	// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Password pulumi.StringInput
	// STACKIT project ID to which the load balancer observability credential is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
	Username pulumi.StringInput
}

func (LoadbalancerObservabilityCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerObservabilityCredentialArgs)(nil)).Elem()
}

type LoadbalancerObservabilityCredentialInput interface {
	pulumi.Input

	ToLoadbalancerObservabilityCredentialOutput() LoadbalancerObservabilityCredentialOutput
	ToLoadbalancerObservabilityCredentialOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialOutput
}

func (*LoadbalancerObservabilityCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (i *LoadbalancerObservabilityCredential) ToLoadbalancerObservabilityCredentialOutput() LoadbalancerObservabilityCredentialOutput {
	return i.ToLoadbalancerObservabilityCredentialOutputWithContext(context.Background())
}

func (i *LoadbalancerObservabilityCredential) ToLoadbalancerObservabilityCredentialOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerObservabilityCredentialOutput)
}

// LoadbalancerObservabilityCredentialArrayInput is an input type that accepts LoadbalancerObservabilityCredentialArray and LoadbalancerObservabilityCredentialArrayOutput values.
// You can construct a concrete instance of `LoadbalancerObservabilityCredentialArrayInput` via:
//
//	LoadbalancerObservabilityCredentialArray{ LoadbalancerObservabilityCredentialArgs{...} }
type LoadbalancerObservabilityCredentialArrayInput interface {
	pulumi.Input

	ToLoadbalancerObservabilityCredentialArrayOutput() LoadbalancerObservabilityCredentialArrayOutput
	ToLoadbalancerObservabilityCredentialArrayOutputWithContext(context.Context) LoadbalancerObservabilityCredentialArrayOutput
}

type LoadbalancerObservabilityCredentialArray []LoadbalancerObservabilityCredentialInput

func (LoadbalancerObservabilityCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (i LoadbalancerObservabilityCredentialArray) ToLoadbalancerObservabilityCredentialArrayOutput() LoadbalancerObservabilityCredentialArrayOutput {
	return i.ToLoadbalancerObservabilityCredentialArrayOutputWithContext(context.Background())
}

func (i LoadbalancerObservabilityCredentialArray) ToLoadbalancerObservabilityCredentialArrayOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerObservabilityCredentialArrayOutput)
}

// LoadbalancerObservabilityCredentialMapInput is an input type that accepts LoadbalancerObservabilityCredentialMap and LoadbalancerObservabilityCredentialMapOutput values.
// You can construct a concrete instance of `LoadbalancerObservabilityCredentialMapInput` via:
//
//	LoadbalancerObservabilityCredentialMap{ "key": LoadbalancerObservabilityCredentialArgs{...} }
type LoadbalancerObservabilityCredentialMapInput interface {
	pulumi.Input

	ToLoadbalancerObservabilityCredentialMapOutput() LoadbalancerObservabilityCredentialMapOutput
	ToLoadbalancerObservabilityCredentialMapOutputWithContext(context.Context) LoadbalancerObservabilityCredentialMapOutput
}

type LoadbalancerObservabilityCredentialMap map[string]LoadbalancerObservabilityCredentialInput

func (LoadbalancerObservabilityCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (i LoadbalancerObservabilityCredentialMap) ToLoadbalancerObservabilityCredentialMapOutput() LoadbalancerObservabilityCredentialMapOutput {
	return i.ToLoadbalancerObservabilityCredentialMapOutputWithContext(context.Background())
}

func (i LoadbalancerObservabilityCredentialMap) ToLoadbalancerObservabilityCredentialMapOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerObservabilityCredentialMapOutput)
}

type LoadbalancerObservabilityCredentialOutput struct{ *pulumi.OutputState }

func (LoadbalancerObservabilityCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (o LoadbalancerObservabilityCredentialOutput) ToLoadbalancerObservabilityCredentialOutput() LoadbalancerObservabilityCredentialOutput {
	return o
}

func (o LoadbalancerObservabilityCredentialOutput) ToLoadbalancerObservabilityCredentialOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialOutput {
	return o
}

// The credentials reference is used by the Load Balancer to define which credentials it will use.
func (o LoadbalancerObservabilityCredentialOutput) CredentialsRef() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.CredentialsRef }).(pulumi.StringOutput)
}

// Observability credential name.
func (o LoadbalancerObservabilityCredentialOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
func (o LoadbalancerObservabilityCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// STACKIT project ID to which the load balancer observability credential is associated.
func (o LoadbalancerObservabilityCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LoadbalancerObservabilityCredentialOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.
func (o LoadbalancerObservabilityCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerObservabilityCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type LoadbalancerObservabilityCredentialArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerObservabilityCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (o LoadbalancerObservabilityCredentialArrayOutput) ToLoadbalancerObservabilityCredentialArrayOutput() LoadbalancerObservabilityCredentialArrayOutput {
	return o
}

func (o LoadbalancerObservabilityCredentialArrayOutput) ToLoadbalancerObservabilityCredentialArrayOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialArrayOutput {
	return o
}

func (o LoadbalancerObservabilityCredentialArrayOutput) Index(i pulumi.IntInput) LoadbalancerObservabilityCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerObservabilityCredential {
		return vs[0].([]*LoadbalancerObservabilityCredential)[vs[1].(int)]
	}).(LoadbalancerObservabilityCredentialOutput)
}

type LoadbalancerObservabilityCredentialMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerObservabilityCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerObservabilityCredential)(nil)).Elem()
}

func (o LoadbalancerObservabilityCredentialMapOutput) ToLoadbalancerObservabilityCredentialMapOutput() LoadbalancerObservabilityCredentialMapOutput {
	return o
}

func (o LoadbalancerObservabilityCredentialMapOutput) ToLoadbalancerObservabilityCredentialMapOutputWithContext(ctx context.Context) LoadbalancerObservabilityCredentialMapOutput {
	return o
}

func (o LoadbalancerObservabilityCredentialMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerObservabilityCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerObservabilityCredential {
		return vs[0].(map[string]*LoadbalancerObservabilityCredential)[vs[1].(string)]
	}).(LoadbalancerObservabilityCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerObservabilityCredentialInput)(nil)).Elem(), &LoadbalancerObservabilityCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerObservabilityCredentialArrayInput)(nil)).Elem(), LoadbalancerObservabilityCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerObservabilityCredentialMapInput)(nil)).Elem(), LoadbalancerObservabilityCredentialMap{})
	pulumi.RegisterOutputType(LoadbalancerObservabilityCredentialOutput{})
	pulumi.RegisterOutputType(LoadbalancerObservabilityCredentialArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerObservabilityCredentialMapOutput{})
}
