// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Image datasource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("stackit:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// The image ID.
	ImageId string `pulumi:"imageId"`
	// STACKIT project ID to which the image is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	// Representation of an image checksum.
	Checksum GetImageChecksum `pulumi:"checksum"`
	// Properties to set hardware and scheduling settings for an image.
	Config GetImageConfig `pulumi:"config"`
	// The disk format of the image.
	DiskFormat string `pulumi:"diskFormat"`
	Id         string `pulumi:"id"`
	// The image ID.
	ImageId string `pulumi:"imageId"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The minimum disk size of the image in GB.
	MinDiskSize int `pulumi:"minDiskSize"`
	// The minimum RAM of the image in MB.
	MinRam int `pulumi:"minRam"`
	// The name of the image.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the image is associated.
	ProjectId string `pulumi:"projectId"`
	// Whether the image is protected.
	Protected bool `pulumi:"protected"`
	// The scope of the image.
	Scope string `pulumi:"scope"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupImageResultOutput, error) {
			args := v.(LookupImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getImage:getImage", args, LookupImageResultOutput{}, options).(LookupImageResultOutput), nil
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// The image ID.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// STACKIT project ID to which the image is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

// Representation of an image checksum.
func (o LookupImageResultOutput) Checksum() GetImageChecksumOutput {
	return o.ApplyT(func(v LookupImageResult) GetImageChecksum { return v.Checksum }).(GetImageChecksumOutput)
}

// Properties to set hardware and scheduling settings for an image.
func (o LookupImageResultOutput) Config() GetImageConfigOutput {
	return o.ApplyT(func(v LookupImageResult) GetImageConfig { return v.Config }).(GetImageConfigOutput)
}

// The disk format of the image.
func (o LookupImageResultOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.DiskFormat }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image ID.
func (o LookupImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o LookupImageResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupImageResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The minimum disk size of the image in GB.
func (o LookupImageResultOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.MinDiskSize }).(pulumi.IntOutput)
}

// The minimum RAM of the image in MB.
func (o LookupImageResultOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.MinRam }).(pulumi.IntOutput)
}

// The name of the image.
func (o LookupImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the image is associated.
func (o LookupImageResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the image is protected.
func (o LookupImageResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

// The scope of the image.
func (o LookupImageResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Scope }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}
