// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Load Balancer data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupLoadbalancer(ctx *pulumi.Context, args *LookupLoadbalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadbalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadbalancerResult
	err := ctx.Invoke("stackit:index/getLoadbalancer:getLoadbalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadbalancer.
type LookupLoadbalancerArgs struct {
	// Load balancer name.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getLoadbalancer.
type LookupLoadbalancerResult struct {
	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress string `pulumi:"externalAddress"`
	Id              string `pulumi:"id"`
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners []GetLoadbalancerListener `pulumi:"listeners"`
	// Load balancer name.
	Name string `pulumi:"name"`
	// List of networks that listeners and targets reside in.
	Networks []GetLoadbalancerNetwork `pulumi:"networks"`
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options GetLoadbalancerOptions `pulumi:"options"`
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId string `pulumi:"planId"`
	// Transient private Load Balancer IP address. It can change any time.
	PrivateAddress string `pulumi:"privateAddress"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools []GetLoadbalancerTargetPool `pulumi:"targetPools"`
}

func LookupLoadbalancerOutput(ctx *pulumi.Context, args LookupLoadbalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadbalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadbalancerResultOutput, error) {
			args := v.(LookupLoadbalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getLoadbalancer:getLoadbalancer", args, LookupLoadbalancerResultOutput{}, options).(LookupLoadbalancerResultOutput), nil
		}).(LookupLoadbalancerResultOutput)
}

// A collection of arguments for invoking getLoadbalancer.
type LookupLoadbalancerOutputArgs struct {
	// Load balancer name.
	Name pulumi.StringInput `pulumi:"name"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupLoadbalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadbalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadbalancer.
type LookupLoadbalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadbalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadbalancerResult)(nil)).Elem()
}

func (o LookupLoadbalancerResultOutput) ToLookupLoadbalancerResultOutput() LookupLoadbalancerResultOutput {
	return o
}

func (o LookupLoadbalancerResultOutput) ToLookupLoadbalancerResultOutputWithContext(ctx context.Context) LookupLoadbalancerResultOutput {
	return o
}

// External Load Balancer IP address where this Load Balancer is exposed.
func (o LookupLoadbalancerResultOutput) ExternalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.ExternalAddress }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of all listeners which will accept traffic. Limited to 20.
func (o LookupLoadbalancerResultOutput) Listeners() GetLoadbalancerListenerArrayOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) []GetLoadbalancerListener { return v.Listeners }).(GetLoadbalancerListenerArrayOutput)
}

// Load balancer name.
func (o LookupLoadbalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of networks that listeners and targets reside in.
func (o LookupLoadbalancerResultOutput) Networks() GetLoadbalancerNetworkArrayOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) []GetLoadbalancerNetwork { return v.Networks }).(GetLoadbalancerNetworkArrayOutput)
}

// Defines any optional functionality you want to have enabled on your load balancer.
func (o LookupLoadbalancerResultOutput) Options() GetLoadbalancerOptionsOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) GetLoadbalancerOptions { return v.Options }).(GetLoadbalancerOptionsOutput)
}

// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
func (o LookupLoadbalancerResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.PlanId }).(pulumi.StringOutput)
}

// Transient private Load Balancer IP address. It can change any time.
func (o LookupLoadbalancerResultOutput) PrivateAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.PrivateAddress }).(pulumi.StringOutput)
}

// STACKIT project ID to which the Load Balancer is associated.
func (o LookupLoadbalancerResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupLoadbalancerResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// List of all target pools which will be used in the Load Balancer. Limited to 20.
func (o LookupLoadbalancerResultOutput) TargetPools() GetLoadbalancerTargetPoolArrayOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) []GetLoadbalancerTargetPool { return v.TargetPools }).(GetLoadbalancerTargetPoolArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadbalancerResultOutput{})
}
