// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type ResourcemanagerProject struct {
	pulumi.CustomResourceState

	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Project name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
	OwnerEmail pulumi.StringOutput `pulumi:"ownerEmail"`
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId pulumi.StringOutput `pulumi:"parentContainerId"`
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewResourcemanagerProject registers a new resource with the given unique name, arguments, and options.
func NewResourcemanagerProject(ctx *pulumi.Context,
	name string, args *ResourcemanagerProjectArgs, opts ...pulumi.ResourceOption) (*ResourcemanagerProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnerEmail == nil {
		return nil, errors.New("invalid value for required argument 'OwnerEmail'")
	}
	if args.ParentContainerId == nil {
		return nil, errors.New("invalid value for required argument 'ParentContainerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcemanagerProject
	err := ctx.RegisterResource("stackit:index/resourcemanagerProject:ResourcemanagerProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcemanagerProject gets an existing ResourcemanagerProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcemanagerProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcemanagerProjectState, opts ...pulumi.ResourceOption) (*ResourcemanagerProject, error) {
	var resource ResourcemanagerProject
	err := ctx.ReadResource("stackit:index/resourcemanagerProject:ResourcemanagerProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcemanagerProject resources.
type resourcemanagerProjectState struct {
	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId *string `pulumi:"containerId"`
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
	Labels map[string]string `pulumi:"labels"`
	// Project name.
	Name *string `pulumi:"name"`
	// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
	OwnerEmail *string `pulumi:"ownerEmail"`
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId *string `pulumi:"parentContainerId"`
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId *string `pulumi:"projectId"`
}

type ResourcemanagerProjectState struct {
	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
	Labels pulumi.StringMapInput
	// Project name.
	Name pulumi.StringPtrInput
	// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
	OwnerEmail pulumi.StringPtrInput
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId pulumi.StringPtrInput
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId pulumi.StringPtrInput
}

func (ResourcemanagerProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerProjectState)(nil)).Elem()
}

type resourcemanagerProjectArgs struct {
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
	Labels map[string]string `pulumi:"labels"`
	// Project name.
	Name *string `pulumi:"name"`
	// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
	OwnerEmail string `pulumi:"ownerEmail"`
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId string `pulumi:"parentContainerId"`
}

// The set of arguments for constructing a ResourcemanagerProject resource.
type ResourcemanagerProjectArgs struct {
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
	Labels pulumi.StringMapInput
	// Project name.
	Name pulumi.StringPtrInput
	// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
	OwnerEmail pulumi.StringInput
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId pulumi.StringInput
}

func (ResourcemanagerProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerProjectArgs)(nil)).Elem()
}

type ResourcemanagerProjectInput interface {
	pulumi.Input

	ToResourcemanagerProjectOutput() ResourcemanagerProjectOutput
	ToResourcemanagerProjectOutputWithContext(ctx context.Context) ResourcemanagerProjectOutput
}

func (*ResourcemanagerProject) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerProject)(nil)).Elem()
}

func (i *ResourcemanagerProject) ToResourcemanagerProjectOutput() ResourcemanagerProjectOutput {
	return i.ToResourcemanagerProjectOutputWithContext(context.Background())
}

func (i *ResourcemanagerProject) ToResourcemanagerProjectOutputWithContext(ctx context.Context) ResourcemanagerProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerProjectOutput)
}

// ResourcemanagerProjectArrayInput is an input type that accepts ResourcemanagerProjectArray and ResourcemanagerProjectArrayOutput values.
// You can construct a concrete instance of `ResourcemanagerProjectArrayInput` via:
//
//	ResourcemanagerProjectArray{ ResourcemanagerProjectArgs{...} }
type ResourcemanagerProjectArrayInput interface {
	pulumi.Input

	ToResourcemanagerProjectArrayOutput() ResourcemanagerProjectArrayOutput
	ToResourcemanagerProjectArrayOutputWithContext(context.Context) ResourcemanagerProjectArrayOutput
}

type ResourcemanagerProjectArray []ResourcemanagerProjectInput

func (ResourcemanagerProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerProject)(nil)).Elem()
}

func (i ResourcemanagerProjectArray) ToResourcemanagerProjectArrayOutput() ResourcemanagerProjectArrayOutput {
	return i.ToResourcemanagerProjectArrayOutputWithContext(context.Background())
}

func (i ResourcemanagerProjectArray) ToResourcemanagerProjectArrayOutputWithContext(ctx context.Context) ResourcemanagerProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerProjectArrayOutput)
}

// ResourcemanagerProjectMapInput is an input type that accepts ResourcemanagerProjectMap and ResourcemanagerProjectMapOutput values.
// You can construct a concrete instance of `ResourcemanagerProjectMapInput` via:
//
//	ResourcemanagerProjectMap{ "key": ResourcemanagerProjectArgs{...} }
type ResourcemanagerProjectMapInput interface {
	pulumi.Input

	ToResourcemanagerProjectMapOutput() ResourcemanagerProjectMapOutput
	ToResourcemanagerProjectMapOutputWithContext(context.Context) ResourcemanagerProjectMapOutput
}

type ResourcemanagerProjectMap map[string]ResourcemanagerProjectInput

func (ResourcemanagerProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerProject)(nil)).Elem()
}

func (i ResourcemanagerProjectMap) ToResourcemanagerProjectMapOutput() ResourcemanagerProjectMapOutput {
	return i.ToResourcemanagerProjectMapOutputWithContext(context.Background())
}

func (i ResourcemanagerProjectMap) ToResourcemanagerProjectMapOutputWithContext(ctx context.Context) ResourcemanagerProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerProjectMapOutput)
}

type ResourcemanagerProjectOutput struct{ *pulumi.OutputState }

func (ResourcemanagerProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerProject)(nil)).Elem()
}

func (o ResourcemanagerProjectOutput) ToResourcemanagerProjectOutput() ResourcemanagerProjectOutput {
	return o
}

func (o ResourcemanagerProjectOutput) ToResourcemanagerProjectOutputWithContext(ctx context.Context) ResourcemanagerProjectOutput {
	return o
}

// Project container ID. Globally unique, user-friendly identifier.
func (o ResourcemanagerProjectOutput) ContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringOutput { return v.ContainerId }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}. To add a project to a STACKIT Network Area, setting the label `networkArea=<networkAreaID>` is required.
func (o ResourcemanagerProjectOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Project name.
func (o ResourcemanagerProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect.
func (o ResourcemanagerProjectOutput) OwnerEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringOutput { return v.OwnerEmail }).(pulumi.StringOutput)
}

// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
func (o ResourcemanagerProjectOutput) ParentContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringOutput { return v.ParentContainerId }).(pulumi.StringOutput)
}

// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
func (o ResourcemanagerProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type ResourcemanagerProjectArrayOutput struct{ *pulumi.OutputState }

func (ResourcemanagerProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerProject)(nil)).Elem()
}

func (o ResourcemanagerProjectArrayOutput) ToResourcemanagerProjectArrayOutput() ResourcemanagerProjectArrayOutput {
	return o
}

func (o ResourcemanagerProjectArrayOutput) ToResourcemanagerProjectArrayOutputWithContext(ctx context.Context) ResourcemanagerProjectArrayOutput {
	return o
}

func (o ResourcemanagerProjectArrayOutput) Index(i pulumi.IntInput) ResourcemanagerProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcemanagerProject {
		return vs[0].([]*ResourcemanagerProject)[vs[1].(int)]
	}).(ResourcemanagerProjectOutput)
}

type ResourcemanagerProjectMapOutput struct{ *pulumi.OutputState }

func (ResourcemanagerProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerProject)(nil)).Elem()
}

func (o ResourcemanagerProjectMapOutput) ToResourcemanagerProjectMapOutput() ResourcemanagerProjectMapOutput {
	return o
}

func (o ResourcemanagerProjectMapOutput) ToResourcemanagerProjectMapOutputWithContext(ctx context.Context) ResourcemanagerProjectMapOutput {
	return o
}

func (o ResourcemanagerProjectMapOutput) MapIndex(k pulumi.StringInput) ResourcemanagerProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcemanagerProject {
		return vs[0].(map[string]*ResourcemanagerProject)[vs[1].(string)]
	}).(ResourcemanagerProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerProjectInput)(nil)).Elem(), &ResourcemanagerProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerProjectArrayInput)(nil)).Elem(), ResourcemanagerProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerProjectMapInput)(nil)).Elem(), ResourcemanagerProjectMap{})
	pulumi.RegisterOutputType(ResourcemanagerProjectOutput{})
	pulumi.RegisterOutputType(ResourcemanagerProjectArrayOutput{})
	pulumi.RegisterOutputType(ResourcemanagerProjectMapOutput{})
}
