// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates an existing public IP to a network interface. This is useful for situations where you have a pre-allocated public IP or unable to use the `PublicIp` resource to create a new public IP. Must have a `region` specified in the provider configuration.
//
// !> The `PublicIpAssociate` resource should not be used together with the `PublicIp` resource for the same public IP or for the same network interface.
// Using both resources together for the same public IP or network interface WILL lead to conflicts, as they both have control of the public IP and network interface association.
//
// ## Example Usage
type PublicIpAssociate struct {
	pulumi.CustomResourceState

	// The IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public IP ID.
	PublicIpId pulumi.StringOutput `pulumi:"publicIpId"`
}

// NewPublicIpAssociate registers a new resource with the given unique name, arguments, and options.
func NewPublicIpAssociate(ctx *pulumi.Context,
	name string, args *PublicIpAssociateArgs, opts ...pulumi.ResourceOption) (*PublicIpAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.PublicIpId == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicIpAssociate
	err := ctx.RegisterResource("stackit:index/publicIpAssociate:PublicIpAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicIpAssociate gets an existing PublicIpAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicIpAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicIpAssociateState, opts ...pulumi.ResourceOption) (*PublicIpAssociate, error) {
	var resource PublicIpAssociate
	err := ctx.ReadResource("stackit:index/publicIpAssociate:PublicIpAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicIpAssociate resources.
type publicIpAssociateState struct {
	// The IP address.
	Ip *string `pulumi:"ip"`
	// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId *string `pulumi:"projectId"`
	// The public IP ID.
	PublicIpId *string `pulumi:"publicIpId"`
}

type PublicIpAssociateState struct {
	// The IP address.
	Ip pulumi.StringPtrInput
	// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
	NetworkInterfaceId pulumi.StringPtrInput
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringPtrInput
	// The public IP ID.
	PublicIpId pulumi.StringPtrInput
}

func (PublicIpAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpAssociateState)(nil)).Elem()
}

type publicIpAssociateArgs struct {
	// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the public IP is associated.
	ProjectId string `pulumi:"projectId"`
	// The public IP ID.
	PublicIpId string `pulumi:"publicIpId"`
}

// The set of arguments for constructing a PublicIpAssociate resource.
type PublicIpAssociateArgs struct {
	// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
	NetworkInterfaceId pulumi.StringInput
	// STACKIT project ID to which the public IP is associated.
	ProjectId pulumi.StringInput
	// The public IP ID.
	PublicIpId pulumi.StringInput
}

func (PublicIpAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpAssociateArgs)(nil)).Elem()
}

type PublicIpAssociateInput interface {
	pulumi.Input

	ToPublicIpAssociateOutput() PublicIpAssociateOutput
	ToPublicIpAssociateOutputWithContext(ctx context.Context) PublicIpAssociateOutput
}

func (*PublicIpAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpAssociate)(nil)).Elem()
}

func (i *PublicIpAssociate) ToPublicIpAssociateOutput() PublicIpAssociateOutput {
	return i.ToPublicIpAssociateOutputWithContext(context.Background())
}

func (i *PublicIpAssociate) ToPublicIpAssociateOutputWithContext(ctx context.Context) PublicIpAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpAssociateOutput)
}

// PublicIpAssociateArrayInput is an input type that accepts PublicIpAssociateArray and PublicIpAssociateArrayOutput values.
// You can construct a concrete instance of `PublicIpAssociateArrayInput` via:
//
//	PublicIpAssociateArray{ PublicIpAssociateArgs{...} }
type PublicIpAssociateArrayInput interface {
	pulumi.Input

	ToPublicIpAssociateArrayOutput() PublicIpAssociateArrayOutput
	ToPublicIpAssociateArrayOutputWithContext(context.Context) PublicIpAssociateArrayOutput
}

type PublicIpAssociateArray []PublicIpAssociateInput

func (PublicIpAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpAssociate)(nil)).Elem()
}

func (i PublicIpAssociateArray) ToPublicIpAssociateArrayOutput() PublicIpAssociateArrayOutput {
	return i.ToPublicIpAssociateArrayOutputWithContext(context.Background())
}

func (i PublicIpAssociateArray) ToPublicIpAssociateArrayOutputWithContext(ctx context.Context) PublicIpAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpAssociateArrayOutput)
}

// PublicIpAssociateMapInput is an input type that accepts PublicIpAssociateMap and PublicIpAssociateMapOutput values.
// You can construct a concrete instance of `PublicIpAssociateMapInput` via:
//
//	PublicIpAssociateMap{ "key": PublicIpAssociateArgs{...} }
type PublicIpAssociateMapInput interface {
	pulumi.Input

	ToPublicIpAssociateMapOutput() PublicIpAssociateMapOutput
	ToPublicIpAssociateMapOutputWithContext(context.Context) PublicIpAssociateMapOutput
}

type PublicIpAssociateMap map[string]PublicIpAssociateInput

func (PublicIpAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpAssociate)(nil)).Elem()
}

func (i PublicIpAssociateMap) ToPublicIpAssociateMapOutput() PublicIpAssociateMapOutput {
	return i.ToPublicIpAssociateMapOutputWithContext(context.Background())
}

func (i PublicIpAssociateMap) ToPublicIpAssociateMapOutputWithContext(ctx context.Context) PublicIpAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpAssociateMapOutput)
}

type PublicIpAssociateOutput struct{ *pulumi.OutputState }

func (PublicIpAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpAssociate)(nil)).Elem()
}

func (o PublicIpAssociateOutput) ToPublicIpAssociateOutput() PublicIpAssociateOutput {
	return o
}

func (o PublicIpAssociateOutput) ToPublicIpAssociateOutputWithContext(ctx context.Context) PublicIpAssociateOutput {
	return o
}

// The IP address.
func (o PublicIpAssociateOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpAssociate) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The ID of the network interface (or virtual IP) to which the public IP should be attached to.
func (o PublicIpAssociateOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpAssociate) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the public IP is associated.
func (o PublicIpAssociateOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpAssociate) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP ID.
func (o PublicIpAssociateOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpAssociate) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

type PublicIpAssociateArrayOutput struct{ *pulumi.OutputState }

func (PublicIpAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpAssociate)(nil)).Elem()
}

func (o PublicIpAssociateArrayOutput) ToPublicIpAssociateArrayOutput() PublicIpAssociateArrayOutput {
	return o
}

func (o PublicIpAssociateArrayOutput) ToPublicIpAssociateArrayOutputWithContext(ctx context.Context) PublicIpAssociateArrayOutput {
	return o
}

func (o PublicIpAssociateArrayOutput) Index(i pulumi.IntInput) PublicIpAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicIpAssociate {
		return vs[0].([]*PublicIpAssociate)[vs[1].(int)]
	}).(PublicIpAssociateOutput)
}

type PublicIpAssociateMapOutput struct{ *pulumi.OutputState }

func (PublicIpAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpAssociate)(nil)).Elem()
}

func (o PublicIpAssociateMapOutput) ToPublicIpAssociateMapOutput() PublicIpAssociateMapOutput {
	return o
}

func (o PublicIpAssociateMapOutput) ToPublicIpAssociateMapOutputWithContext(ctx context.Context) PublicIpAssociateMapOutput {
	return o
}

func (o PublicIpAssociateMapOutput) MapIndex(k pulumi.StringInput) PublicIpAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicIpAssociate {
		return vs[0].(map[string]*PublicIpAssociate)[vs[1].(string)]
	}).(PublicIpAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpAssociateInput)(nil)).Elem(), &PublicIpAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpAssociateArrayInput)(nil)).Elem(), PublicIpAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpAssociateMapInput)(nil)).Elem(), PublicIpAssociateMap{})
	pulumi.RegisterOutputType(PublicIpAssociateOutput{})
	pulumi.RegisterOutputType(PublicIpAssociateArrayOutput{})
	pulumi.RegisterOutputType(PublicIpAssociateMapOutput{})
}
