// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Service account key schema.
// ## Example Usage
//
// ### Automatically rotate service account keys
type ServiceAccountKey struct {
	pulumi.CustomResourceState

	// The raw JSON representation of the service account key json, available for direct use.
	Json pulumi.StringOutput `pulumi:"json"`
	// The unique identifier for the key associated with the service account.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The STACKIT project ID associated with the service account key.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
	PublicKey pulumi.StringPtrOutput `pulumi:"publicKey"`
	// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
	RotateWhenChanged pulumi.StringMapOutput `pulumi:"rotateWhenChanged"`
	// The email address associated with the service account, used for account identification and communication.
	ServiceAccountEmail pulumi.StringOutput `pulumi:"serviceAccountEmail"`
	// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
	TtlDays pulumi.IntPtrOutput `pulumi:"ttlDays"`
}

// NewServiceAccountKey registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountKey(ctx *pulumi.Context,
	name string, args *ServiceAccountKeyArgs, opts ...pulumi.ResourceOption) (*ServiceAccountKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceAccountEmail == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountEmail'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"json",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountKey
	err := ctx.RegisterResource("stackit:index/serviceAccountKey:ServiceAccountKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountKey gets an existing ServiceAccountKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountKeyState, opts ...pulumi.ResourceOption) (*ServiceAccountKey, error) {
	var resource ServiceAccountKey
	err := ctx.ReadResource("stackit:index/serviceAccountKey:ServiceAccountKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountKey resources.
type serviceAccountKeyState struct {
	// The raw JSON representation of the service account key json, available for direct use.
	Json *string `pulumi:"json"`
	// The unique identifier for the key associated with the service account.
	KeyId *string `pulumi:"keyId"`
	// The STACKIT project ID associated with the service account key.
	ProjectId *string `pulumi:"projectId"`
	// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
	PublicKey *string `pulumi:"publicKey"`
	// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
	RotateWhenChanged map[string]string `pulumi:"rotateWhenChanged"`
	// The email address associated with the service account, used for account identification and communication.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
	TtlDays *int `pulumi:"ttlDays"`
}

type ServiceAccountKeyState struct {
	// The raw JSON representation of the service account key json, available for direct use.
	Json pulumi.StringPtrInput
	// The unique identifier for the key associated with the service account.
	KeyId pulumi.StringPtrInput
	// The STACKIT project ID associated with the service account key.
	ProjectId pulumi.StringPtrInput
	// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
	PublicKey pulumi.StringPtrInput
	// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
	RotateWhenChanged pulumi.StringMapInput
	// The email address associated with the service account, used for account identification and communication.
	ServiceAccountEmail pulumi.StringPtrInput
	// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
	TtlDays pulumi.IntPtrInput
}

func (ServiceAccountKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountKeyState)(nil)).Elem()
}

type serviceAccountKeyArgs struct {
	// The STACKIT project ID associated with the service account key.
	ProjectId string `pulumi:"projectId"`
	// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
	PublicKey *string `pulumi:"publicKey"`
	// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
	RotateWhenChanged map[string]string `pulumi:"rotateWhenChanged"`
	// The email address associated with the service account, used for account identification and communication.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
	TtlDays *int `pulumi:"ttlDays"`
}

// The set of arguments for constructing a ServiceAccountKey resource.
type ServiceAccountKeyArgs struct {
	// The STACKIT project ID associated with the service account key.
	ProjectId pulumi.StringInput
	// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
	PublicKey pulumi.StringPtrInput
	// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
	RotateWhenChanged pulumi.StringMapInput
	// The email address associated with the service account, used for account identification and communication.
	ServiceAccountEmail pulumi.StringInput
	// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
	TtlDays pulumi.IntPtrInput
}

func (ServiceAccountKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountKeyArgs)(nil)).Elem()
}

type ServiceAccountKeyInput interface {
	pulumi.Input

	ToServiceAccountKeyOutput() ServiceAccountKeyOutput
	ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput
}

func (*ServiceAccountKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKey)(nil)).Elem()
}

func (i *ServiceAccountKey) ToServiceAccountKeyOutput() ServiceAccountKeyOutput {
	return i.ToServiceAccountKeyOutputWithContext(context.Background())
}

func (i *ServiceAccountKey) ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyOutput)
}

// ServiceAccountKeyArrayInput is an input type that accepts ServiceAccountKeyArray and ServiceAccountKeyArrayOutput values.
// You can construct a concrete instance of `ServiceAccountKeyArrayInput` via:
//
//	ServiceAccountKeyArray{ ServiceAccountKeyArgs{...} }
type ServiceAccountKeyArrayInput interface {
	pulumi.Input

	ToServiceAccountKeyArrayOutput() ServiceAccountKeyArrayOutput
	ToServiceAccountKeyArrayOutputWithContext(context.Context) ServiceAccountKeyArrayOutput
}

type ServiceAccountKeyArray []ServiceAccountKeyInput

func (ServiceAccountKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccountKey)(nil)).Elem()
}

func (i ServiceAccountKeyArray) ToServiceAccountKeyArrayOutput() ServiceAccountKeyArrayOutput {
	return i.ToServiceAccountKeyArrayOutputWithContext(context.Background())
}

func (i ServiceAccountKeyArray) ToServiceAccountKeyArrayOutputWithContext(ctx context.Context) ServiceAccountKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyArrayOutput)
}

// ServiceAccountKeyMapInput is an input type that accepts ServiceAccountKeyMap and ServiceAccountKeyMapOutput values.
// You can construct a concrete instance of `ServiceAccountKeyMapInput` via:
//
//	ServiceAccountKeyMap{ "key": ServiceAccountKeyArgs{...} }
type ServiceAccountKeyMapInput interface {
	pulumi.Input

	ToServiceAccountKeyMapOutput() ServiceAccountKeyMapOutput
	ToServiceAccountKeyMapOutputWithContext(context.Context) ServiceAccountKeyMapOutput
}

type ServiceAccountKeyMap map[string]ServiceAccountKeyInput

func (ServiceAccountKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccountKey)(nil)).Elem()
}

func (i ServiceAccountKeyMap) ToServiceAccountKeyMapOutput() ServiceAccountKeyMapOutput {
	return i.ToServiceAccountKeyMapOutputWithContext(context.Background())
}

func (i ServiceAccountKeyMap) ToServiceAccountKeyMapOutputWithContext(ctx context.Context) ServiceAccountKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyMapOutput)
}

type ServiceAccountKeyOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKey)(nil)).Elem()
}

func (o ServiceAccountKeyOutput) ToServiceAccountKeyOutput() ServiceAccountKeyOutput {
	return o
}

func (o ServiceAccountKeyOutput) ToServiceAccountKeyOutputWithContext(ctx context.Context) ServiceAccountKeyOutput {
	return o
}

// The raw JSON representation of the service account key json, available for direct use.
func (o ServiceAccountKeyOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.Json }).(pulumi.StringOutput)
}

// The unique identifier for the key associated with the service account.
func (o ServiceAccountKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The STACKIT project ID associated with the service account key.
func (o ServiceAccountKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
func (o ServiceAccountKeyOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringPtrOutput { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
func (o ServiceAccountKeyOutput) RotateWhenChanged() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringMapOutput { return v.RotateWhenChanged }).(pulumi.StringMapOutput)
}

// The email address associated with the service account, used for account identification and communication.
func (o ServiceAccountKeyOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.StringOutput { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
func (o ServiceAccountKeyOutput) TtlDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKey) pulumi.IntPtrOutput { return v.TtlDays }).(pulumi.IntPtrOutput)
}

type ServiceAccountKeyArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccountKey)(nil)).Elem()
}

func (o ServiceAccountKeyArrayOutput) ToServiceAccountKeyArrayOutput() ServiceAccountKeyArrayOutput {
	return o
}

func (o ServiceAccountKeyArrayOutput) ToServiceAccountKeyArrayOutputWithContext(ctx context.Context) ServiceAccountKeyArrayOutput {
	return o
}

func (o ServiceAccountKeyArrayOutput) Index(i pulumi.IntInput) ServiceAccountKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAccountKey {
		return vs[0].([]*ServiceAccountKey)[vs[1].(int)]
	}).(ServiceAccountKeyOutput)
}

type ServiceAccountKeyMapOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccountKey)(nil)).Elem()
}

func (o ServiceAccountKeyMapOutput) ToServiceAccountKeyMapOutput() ServiceAccountKeyMapOutput {
	return o
}

func (o ServiceAccountKeyMapOutput) ToServiceAccountKeyMapOutputWithContext(ctx context.Context) ServiceAccountKeyMapOutput {
	return o
}

func (o ServiceAccountKeyMapOutput) MapIndex(k pulumi.StringInput) ServiceAccountKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAccountKey {
		return vs[0].(map[string]*ServiceAccountKey)[vs[1].(string)]
	}).(ServiceAccountKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyInput)(nil)).Elem(), &ServiceAccountKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyArrayInput)(nil)).Elem(), ServiceAccountKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyMapInput)(nil)).Elem(), ServiceAccountKeyMap{})
	pulumi.RegisterOutputType(ServiceAccountKeyOutput{})
	pulumi.RegisterOutputType(ServiceAccountKeyArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountKeyMapOutput{})
}
