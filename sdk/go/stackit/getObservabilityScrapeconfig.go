// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability scrape config data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupObservabilityScrapeconfig(ctx *pulumi.Context, args *LookupObservabilityScrapeconfigArgs, opts ...pulumi.InvokeOption) (*LookupObservabilityScrapeconfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupObservabilityScrapeconfigResult
	err := ctx.Invoke("stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getObservabilityScrapeconfig.
type LookupObservabilityScrapeconfigArgs struct {
	// Observability instance ID to which the scraping job is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the scraping job
	Name string `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getObservabilityScrapeconfig.
type LookupObservabilityScrapeconfigResult struct {
	// A basic authentication block.
	BasicAuth GetObservabilityScrapeconfigBasicAuth `pulumi:"basicAuth"`
	Id        string                                `pulumi:"id"`
	// Observability instance ID to which the scraping job is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the job scraping url path.
	MetricsPath string `pulumi:"metricsPath"`
	// Specifies the name of the scraping job
	Name string `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId string `pulumi:"projectId"`
	// A SAML2 configuration block.
	Saml2 GetObservabilityScrapeconfigSaml2 `pulumi:"saml2"`
	// Specifies the scrape sample limit.
	SampleLimit int `pulumi:"sampleLimit"`
	// Specifies the http scheme.
	Scheme string `pulumi:"scheme"`
	// Specifies the scrape interval as duration string.
	ScrapeInterval string `pulumi:"scrapeInterval"`
	// Specifies the scrape timeout as duration string.
	ScrapeTimeout string `pulumi:"scrapeTimeout"`
	// The targets list (specified by the static config).
	Targets []GetObservabilityScrapeconfigTarget `pulumi:"targets"`
}

func LookupObservabilityScrapeconfigOutput(ctx *pulumi.Context, args LookupObservabilityScrapeconfigOutputArgs, opts ...pulumi.InvokeOption) LookupObservabilityScrapeconfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupObservabilityScrapeconfigResultOutput, error) {
			args := v.(LookupObservabilityScrapeconfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig", args, LookupObservabilityScrapeconfigResultOutput{}, options).(LookupObservabilityScrapeconfigResultOutput), nil
		}).(LookupObservabilityScrapeconfigResultOutput)
}

// A collection of arguments for invoking getObservabilityScrapeconfig.
type LookupObservabilityScrapeconfigOutputArgs struct {
	// Observability instance ID to which the scraping job is associated.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the name of the scraping job
	Name pulumi.StringInput `pulumi:"name"`
	// STACKIT project ID to which the scraping job is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupObservabilityScrapeconfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservabilityScrapeconfigArgs)(nil)).Elem()
}

// A collection of values returned by getObservabilityScrapeconfig.
type LookupObservabilityScrapeconfigResultOutput struct{ *pulumi.OutputState }

func (LookupObservabilityScrapeconfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservabilityScrapeconfigResult)(nil)).Elem()
}

func (o LookupObservabilityScrapeconfigResultOutput) ToLookupObservabilityScrapeconfigResultOutput() LookupObservabilityScrapeconfigResultOutput {
	return o
}

func (o LookupObservabilityScrapeconfigResultOutput) ToLookupObservabilityScrapeconfigResultOutputWithContext(ctx context.Context) LookupObservabilityScrapeconfigResultOutput {
	return o
}

// A basic authentication block.
func (o LookupObservabilityScrapeconfigResultOutput) BasicAuth() GetObservabilityScrapeconfigBasicAuthOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) GetObservabilityScrapeconfigBasicAuth {
		return v.BasicAuth
	}).(GetObservabilityScrapeconfigBasicAuthOutput)
}

func (o LookupObservabilityScrapeconfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// Observability instance ID to which the scraping job is associated.
func (o LookupObservabilityScrapeconfigResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the job scraping url path.
func (o LookupObservabilityScrapeconfigResultOutput) MetricsPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.MetricsPath }).(pulumi.StringOutput)
}

// Specifies the name of the scraping job
func (o LookupObservabilityScrapeconfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the scraping job is associated.
func (o LookupObservabilityScrapeconfigResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A SAML2 configuration block.
func (o LookupObservabilityScrapeconfigResultOutput) Saml2() GetObservabilityScrapeconfigSaml2Output {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) GetObservabilityScrapeconfigSaml2 { return v.Saml2 }).(GetObservabilityScrapeconfigSaml2Output)
}

// Specifies the scrape sample limit.
func (o LookupObservabilityScrapeconfigResultOutput) SampleLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) int { return v.SampleLimit }).(pulumi.IntOutput)
}

// Specifies the http scheme.
func (o LookupObservabilityScrapeconfigResultOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.Scheme }).(pulumi.StringOutput)
}

// Specifies the scrape interval as duration string.
func (o LookupObservabilityScrapeconfigResultOutput) ScrapeInterval() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.ScrapeInterval }).(pulumi.StringOutput)
}

// Specifies the scrape timeout as duration string.
func (o LookupObservabilityScrapeconfigResultOutput) ScrapeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) string { return v.ScrapeTimeout }).(pulumi.StringOutput)
}

// The targets list (specified by the static config).
func (o LookupObservabilityScrapeconfigResultOutput) Targets() GetObservabilityScrapeconfigTargetArrayOutput {
	return o.ApplyT(func(v LookupObservabilityScrapeconfigResult) []GetObservabilityScrapeconfigTarget { return v.Targets }).(GetObservabilityScrapeconfigTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupObservabilityScrapeconfigResultOutput{})
}
