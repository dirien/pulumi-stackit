// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MariaDB credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type MariadbCredential struct {
	pulumi.CustomResourceState

	// The credential's ID.
	CredentialId pulumi.StringOutput      `pulumi:"credentialId"`
	Host         pulumi.StringOutput      `pulumi:"host"`
	Hosts        pulumi.StringArrayOutput `pulumi:"hosts"`
	// ID of the MariaDB instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Name       pulumi.StringOutput `pulumi:"name"`
	Password   pulumi.StringOutput `pulumi:"password"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	Uri       pulumi.StringOutput `pulumi:"uri"`
	Username  pulumi.StringOutput `pulumi:"username"`
}

// NewMariadbCredential registers a new resource with the given unique name, arguments, and options.
func NewMariadbCredential(ctx *pulumi.Context,
	name string, args *MariadbCredentialArgs, opts ...pulumi.ResourceOption) (*MariadbCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MariadbCredential
	err := ctx.RegisterResource("stackit:index/mariadbCredential:MariadbCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMariadbCredential gets an existing MariadbCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMariadbCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MariadbCredentialState, opts ...pulumi.ResourceOption) (*MariadbCredential, error) {
	var resource MariadbCredential
	err := ctx.ReadResource("stackit:index/mariadbCredential:MariadbCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MariadbCredential resources.
type mariadbCredentialState struct {
	// The credential's ID.
	CredentialId *string  `pulumi:"credentialId"`
	Host         *string  `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	// ID of the MariaDB instance.
	InstanceId *string `pulumi:"instanceId"`
	Name       *string `pulumi:"name"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	Uri       *string `pulumi:"uri"`
	Username  *string `pulumi:"username"`
}

type MariadbCredentialState struct {
	// The credential's ID.
	CredentialId pulumi.StringPtrInput
	Host         pulumi.StringPtrInput
	Hosts        pulumi.StringArrayInput
	// ID of the MariaDB instance.
	InstanceId pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	Uri       pulumi.StringPtrInput
	Username  pulumi.StringPtrInput
}

func (MariadbCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*mariadbCredentialState)(nil)).Elem()
}

type mariadbCredentialArgs struct {
	// ID of the MariaDB instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a MariadbCredential resource.
type MariadbCredentialArgs struct {
	// ID of the MariaDB instance.
	InstanceId pulumi.StringInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput
}

func (MariadbCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mariadbCredentialArgs)(nil)).Elem()
}

type MariadbCredentialInput interface {
	pulumi.Input

	ToMariadbCredentialOutput() MariadbCredentialOutput
	ToMariadbCredentialOutputWithContext(ctx context.Context) MariadbCredentialOutput
}

func (*MariadbCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbCredential)(nil)).Elem()
}

func (i *MariadbCredential) ToMariadbCredentialOutput() MariadbCredentialOutput {
	return i.ToMariadbCredentialOutputWithContext(context.Background())
}

func (i *MariadbCredential) ToMariadbCredentialOutputWithContext(ctx context.Context) MariadbCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbCredentialOutput)
}

// MariadbCredentialArrayInput is an input type that accepts MariadbCredentialArray and MariadbCredentialArrayOutput values.
// You can construct a concrete instance of `MariadbCredentialArrayInput` via:
//
//	MariadbCredentialArray{ MariadbCredentialArgs{...} }
type MariadbCredentialArrayInput interface {
	pulumi.Input

	ToMariadbCredentialArrayOutput() MariadbCredentialArrayOutput
	ToMariadbCredentialArrayOutputWithContext(context.Context) MariadbCredentialArrayOutput
}

type MariadbCredentialArray []MariadbCredentialInput

func (MariadbCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariadbCredential)(nil)).Elem()
}

func (i MariadbCredentialArray) ToMariadbCredentialArrayOutput() MariadbCredentialArrayOutput {
	return i.ToMariadbCredentialArrayOutputWithContext(context.Background())
}

func (i MariadbCredentialArray) ToMariadbCredentialArrayOutputWithContext(ctx context.Context) MariadbCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbCredentialArrayOutput)
}

// MariadbCredentialMapInput is an input type that accepts MariadbCredentialMap and MariadbCredentialMapOutput values.
// You can construct a concrete instance of `MariadbCredentialMapInput` via:
//
//	MariadbCredentialMap{ "key": MariadbCredentialArgs{...} }
type MariadbCredentialMapInput interface {
	pulumi.Input

	ToMariadbCredentialMapOutput() MariadbCredentialMapOutput
	ToMariadbCredentialMapOutputWithContext(context.Context) MariadbCredentialMapOutput
}

type MariadbCredentialMap map[string]MariadbCredentialInput

func (MariadbCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariadbCredential)(nil)).Elem()
}

func (i MariadbCredentialMap) ToMariadbCredentialMapOutput() MariadbCredentialMapOutput {
	return i.ToMariadbCredentialMapOutputWithContext(context.Background())
}

func (i MariadbCredentialMap) ToMariadbCredentialMapOutputWithContext(ctx context.Context) MariadbCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbCredentialMapOutput)
}

type MariadbCredentialOutput struct{ *pulumi.OutputState }

func (MariadbCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbCredential)(nil)).Elem()
}

func (o MariadbCredentialOutput) ToMariadbCredentialOutput() MariadbCredentialOutput {
	return o
}

func (o MariadbCredentialOutput) ToMariadbCredentialOutputWithContext(ctx context.Context) MariadbCredentialOutput {
	return o
}

// The credential's ID.
func (o MariadbCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// ID of the MariaDB instance.
func (o MariadbCredentialOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o MariadbCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o MariadbCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type MariadbCredentialArrayOutput struct{ *pulumi.OutputState }

func (MariadbCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariadbCredential)(nil)).Elem()
}

func (o MariadbCredentialArrayOutput) ToMariadbCredentialArrayOutput() MariadbCredentialArrayOutput {
	return o
}

func (o MariadbCredentialArrayOutput) ToMariadbCredentialArrayOutputWithContext(ctx context.Context) MariadbCredentialArrayOutput {
	return o
}

func (o MariadbCredentialArrayOutput) Index(i pulumi.IntInput) MariadbCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MariadbCredential {
		return vs[0].([]*MariadbCredential)[vs[1].(int)]
	}).(MariadbCredentialOutput)
}

type MariadbCredentialMapOutput struct{ *pulumi.OutputState }

func (MariadbCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariadbCredential)(nil)).Elem()
}

func (o MariadbCredentialMapOutput) ToMariadbCredentialMapOutput() MariadbCredentialMapOutput {
	return o
}

func (o MariadbCredentialMapOutput) ToMariadbCredentialMapOutputWithContext(ctx context.Context) MariadbCredentialMapOutput {
	return o
}

func (o MariadbCredentialMapOutput) MapIndex(k pulumi.StringInput) MariadbCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MariadbCredential {
		return vs[0].(map[string]*MariadbCredential)[vs[1].(string)]
	}).(MariadbCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbCredentialInput)(nil)).Elem(), &MariadbCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbCredentialArrayInput)(nil)).Elem(), MariadbCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbCredentialMapInput)(nil)).Elem(), MariadbCredentialMap{})
	pulumi.RegisterOutputType(MariadbCredentialOutput{})
	pulumi.RegisterOutputType(MariadbCredentialArrayOutput{})
	pulumi.RegisterOutputType(MariadbCredentialMapOutput{})
}
