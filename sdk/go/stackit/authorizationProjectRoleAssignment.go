// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// project Role Assignment resource schema.
//
// > This resource is part of the iam experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
//
// ## Example Usage
type AuthorizationProjectRoleAssignment struct {
	pulumi.CustomResourceState

	// project Resource to assign the role to.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Role to be assigned
	Role pulumi.StringOutput `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringOutput `pulumi:"subject"`
}

// NewAuthorizationProjectRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationProjectRoleAssignment(ctx *pulumi.Context,
	name string, args *AuthorizationProjectRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*AuthorizationProjectRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationProjectRoleAssignment
	err := ctx.RegisterResource("stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationProjectRoleAssignment gets an existing AuthorizationProjectRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationProjectRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationProjectRoleAssignmentState, opts ...pulumi.ResourceOption) (*AuthorizationProjectRoleAssignment, error) {
	var resource AuthorizationProjectRoleAssignment
	err := ctx.ReadResource("stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationProjectRoleAssignment resources.
type authorizationProjectRoleAssignmentState struct {
	// project Resource to assign the role to.
	ResourceId *string `pulumi:"resourceId"`
	// Role to be assigned
	Role *string `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject *string `pulumi:"subject"`
}

type AuthorizationProjectRoleAssignmentState struct {
	// project Resource to assign the role to.
	ResourceId pulumi.StringPtrInput
	// Role to be assigned
	Role pulumi.StringPtrInput
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringPtrInput
}

func (AuthorizationProjectRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationProjectRoleAssignmentState)(nil)).Elem()
}

type authorizationProjectRoleAssignmentArgs struct {
	// project Resource to assign the role to.
	ResourceId string `pulumi:"resourceId"`
	// Role to be assigned
	Role string `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject string `pulumi:"subject"`
}

// The set of arguments for constructing a AuthorizationProjectRoleAssignment resource.
type AuthorizationProjectRoleAssignmentArgs struct {
	// project Resource to assign the role to.
	ResourceId pulumi.StringInput
	// Role to be assigned
	Role pulumi.StringInput
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringInput
}

func (AuthorizationProjectRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationProjectRoleAssignmentArgs)(nil)).Elem()
}

type AuthorizationProjectRoleAssignmentInput interface {
	pulumi.Input

	ToAuthorizationProjectRoleAssignmentOutput() AuthorizationProjectRoleAssignmentOutput
	ToAuthorizationProjectRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentOutput
}

func (*AuthorizationProjectRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (i *AuthorizationProjectRoleAssignment) ToAuthorizationProjectRoleAssignmentOutput() AuthorizationProjectRoleAssignmentOutput {
	return i.ToAuthorizationProjectRoleAssignmentOutputWithContext(context.Background())
}

func (i *AuthorizationProjectRoleAssignment) ToAuthorizationProjectRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationProjectRoleAssignmentOutput)
}

// AuthorizationProjectRoleAssignmentArrayInput is an input type that accepts AuthorizationProjectRoleAssignmentArray and AuthorizationProjectRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `AuthorizationProjectRoleAssignmentArrayInput` via:
//
//	AuthorizationProjectRoleAssignmentArray{ AuthorizationProjectRoleAssignmentArgs{...} }
type AuthorizationProjectRoleAssignmentArrayInput interface {
	pulumi.Input

	ToAuthorizationProjectRoleAssignmentArrayOutput() AuthorizationProjectRoleAssignmentArrayOutput
	ToAuthorizationProjectRoleAssignmentArrayOutputWithContext(context.Context) AuthorizationProjectRoleAssignmentArrayOutput
}

type AuthorizationProjectRoleAssignmentArray []AuthorizationProjectRoleAssignmentInput

func (AuthorizationProjectRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (i AuthorizationProjectRoleAssignmentArray) ToAuthorizationProjectRoleAssignmentArrayOutput() AuthorizationProjectRoleAssignmentArrayOutput {
	return i.ToAuthorizationProjectRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i AuthorizationProjectRoleAssignmentArray) ToAuthorizationProjectRoleAssignmentArrayOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationProjectRoleAssignmentArrayOutput)
}

// AuthorizationProjectRoleAssignmentMapInput is an input type that accepts AuthorizationProjectRoleAssignmentMap and AuthorizationProjectRoleAssignmentMapOutput values.
// You can construct a concrete instance of `AuthorizationProjectRoleAssignmentMapInput` via:
//
//	AuthorizationProjectRoleAssignmentMap{ "key": AuthorizationProjectRoleAssignmentArgs{...} }
type AuthorizationProjectRoleAssignmentMapInput interface {
	pulumi.Input

	ToAuthorizationProjectRoleAssignmentMapOutput() AuthorizationProjectRoleAssignmentMapOutput
	ToAuthorizationProjectRoleAssignmentMapOutputWithContext(context.Context) AuthorizationProjectRoleAssignmentMapOutput
}

type AuthorizationProjectRoleAssignmentMap map[string]AuthorizationProjectRoleAssignmentInput

func (AuthorizationProjectRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (i AuthorizationProjectRoleAssignmentMap) ToAuthorizationProjectRoleAssignmentMapOutput() AuthorizationProjectRoleAssignmentMapOutput {
	return i.ToAuthorizationProjectRoleAssignmentMapOutputWithContext(context.Background())
}

func (i AuthorizationProjectRoleAssignmentMap) ToAuthorizationProjectRoleAssignmentMapOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationProjectRoleAssignmentMapOutput)
}

type AuthorizationProjectRoleAssignmentOutput struct{ *pulumi.OutputState }

func (AuthorizationProjectRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (o AuthorizationProjectRoleAssignmentOutput) ToAuthorizationProjectRoleAssignmentOutput() AuthorizationProjectRoleAssignmentOutput {
	return o
}

func (o AuthorizationProjectRoleAssignmentOutput) ToAuthorizationProjectRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentOutput {
	return o
}

// project Resource to assign the role to.
func (o AuthorizationProjectRoleAssignmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationProjectRoleAssignment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Role to be assigned
func (o AuthorizationProjectRoleAssignmentOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationProjectRoleAssignment) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Identifier of user, service account or client. Usually email address or name in case of clients
func (o AuthorizationProjectRoleAssignmentOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationProjectRoleAssignment) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

type AuthorizationProjectRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationProjectRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (o AuthorizationProjectRoleAssignmentArrayOutput) ToAuthorizationProjectRoleAssignmentArrayOutput() AuthorizationProjectRoleAssignmentArrayOutput {
	return o
}

func (o AuthorizationProjectRoleAssignmentArrayOutput) ToAuthorizationProjectRoleAssignmentArrayOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentArrayOutput {
	return o
}

func (o AuthorizationProjectRoleAssignmentArrayOutput) Index(i pulumi.IntInput) AuthorizationProjectRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationProjectRoleAssignment {
		return vs[0].([]*AuthorizationProjectRoleAssignment)[vs[1].(int)]
	}).(AuthorizationProjectRoleAssignmentOutput)
}

type AuthorizationProjectRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (AuthorizationProjectRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationProjectRoleAssignment)(nil)).Elem()
}

func (o AuthorizationProjectRoleAssignmentMapOutput) ToAuthorizationProjectRoleAssignmentMapOutput() AuthorizationProjectRoleAssignmentMapOutput {
	return o
}

func (o AuthorizationProjectRoleAssignmentMapOutput) ToAuthorizationProjectRoleAssignmentMapOutputWithContext(ctx context.Context) AuthorizationProjectRoleAssignmentMapOutput {
	return o
}

func (o AuthorizationProjectRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) AuthorizationProjectRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationProjectRoleAssignment {
		return vs[0].(map[string]*AuthorizationProjectRoleAssignment)[vs[1].(string)]
	}).(AuthorizationProjectRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationProjectRoleAssignmentInput)(nil)).Elem(), &AuthorizationProjectRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationProjectRoleAssignmentArrayInput)(nil)).Elem(), AuthorizationProjectRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationProjectRoleAssignmentMapInput)(nil)).Elem(), AuthorizationProjectRoleAssignmentMap{})
	pulumi.RegisterOutputType(AuthorizationProjectRoleAssignmentOutput{})
	pulumi.RegisterOutputType(AuthorizationProjectRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationProjectRoleAssignmentMapOutput{})
}
