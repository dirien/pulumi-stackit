// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CdnDistributionConfig struct {
	// The configured backend for the distribution
	Backend CdnDistributionConfigBackend `pulumi:"backend"`
	// The configured countries where distribution of content is blocked
	BlockedCountries []string `pulumi:"blockedCountries"`
	// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
	Optimizer *CdnDistributionConfigOptimizer `pulumi:"optimizer"`
	// The configured regions where content will be hosted
	Regions []string `pulumi:"regions"`
}

// CdnDistributionConfigInput is an input type that accepts CdnDistributionConfigArgs and CdnDistributionConfigOutput values.
// You can construct a concrete instance of `CdnDistributionConfigInput` via:
//
//	CdnDistributionConfigArgs{...}
type CdnDistributionConfigInput interface {
	pulumi.Input

	ToCdnDistributionConfigOutput() CdnDistributionConfigOutput
	ToCdnDistributionConfigOutputWithContext(context.Context) CdnDistributionConfigOutput
}

type CdnDistributionConfigArgs struct {
	// The configured backend for the distribution
	Backend CdnDistributionConfigBackendInput `pulumi:"backend"`
	// The configured countries where distribution of content is blocked
	BlockedCountries pulumi.StringArrayInput `pulumi:"blockedCountries"`
	// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
	Optimizer CdnDistributionConfigOptimizerPtrInput `pulumi:"optimizer"`
	// The configured regions where content will be hosted
	Regions pulumi.StringArrayInput `pulumi:"regions"`
}

func (CdnDistributionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfig)(nil)).Elem()
}

func (i CdnDistributionConfigArgs) ToCdnDistributionConfigOutput() CdnDistributionConfigOutput {
	return i.ToCdnDistributionConfigOutputWithContext(context.Background())
}

func (i CdnDistributionConfigArgs) ToCdnDistributionConfigOutputWithContext(ctx context.Context) CdnDistributionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigOutput)
}

func (i CdnDistributionConfigArgs) ToCdnDistributionConfigPtrOutput() CdnDistributionConfigPtrOutput {
	return i.ToCdnDistributionConfigPtrOutputWithContext(context.Background())
}

func (i CdnDistributionConfigArgs) ToCdnDistributionConfigPtrOutputWithContext(ctx context.Context) CdnDistributionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigOutput).ToCdnDistributionConfigPtrOutputWithContext(ctx)
}

// CdnDistributionConfigPtrInput is an input type that accepts CdnDistributionConfigArgs, CdnDistributionConfigPtr and CdnDistributionConfigPtrOutput values.
// You can construct a concrete instance of `CdnDistributionConfigPtrInput` via:
//
//	        CdnDistributionConfigArgs{...}
//
//	or:
//
//	        nil
type CdnDistributionConfigPtrInput interface {
	pulumi.Input

	ToCdnDistributionConfigPtrOutput() CdnDistributionConfigPtrOutput
	ToCdnDistributionConfigPtrOutputWithContext(context.Context) CdnDistributionConfigPtrOutput
}

type cdnDistributionConfigPtrType CdnDistributionConfigArgs

func CdnDistributionConfigPtr(v *CdnDistributionConfigArgs) CdnDistributionConfigPtrInput {
	return (*cdnDistributionConfigPtrType)(v)
}

func (*cdnDistributionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfig)(nil)).Elem()
}

func (i *cdnDistributionConfigPtrType) ToCdnDistributionConfigPtrOutput() CdnDistributionConfigPtrOutput {
	return i.ToCdnDistributionConfigPtrOutputWithContext(context.Background())
}

func (i *cdnDistributionConfigPtrType) ToCdnDistributionConfigPtrOutputWithContext(ctx context.Context) CdnDistributionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigPtrOutput)
}

type CdnDistributionConfigOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfig)(nil)).Elem()
}

func (o CdnDistributionConfigOutput) ToCdnDistributionConfigOutput() CdnDistributionConfigOutput {
	return o
}

func (o CdnDistributionConfigOutput) ToCdnDistributionConfigOutputWithContext(ctx context.Context) CdnDistributionConfigOutput {
	return o
}

func (o CdnDistributionConfigOutput) ToCdnDistributionConfigPtrOutput() CdnDistributionConfigPtrOutput {
	return o.ToCdnDistributionConfigPtrOutputWithContext(context.Background())
}

func (o CdnDistributionConfigOutput) ToCdnDistributionConfigPtrOutputWithContext(ctx context.Context) CdnDistributionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnDistributionConfig) *CdnDistributionConfig {
		return &v
	}).(CdnDistributionConfigPtrOutput)
}

// The configured backend for the distribution
func (o CdnDistributionConfigOutput) Backend() CdnDistributionConfigBackendOutput {
	return o.ApplyT(func(v CdnDistributionConfig) CdnDistributionConfigBackend { return v.Backend }).(CdnDistributionConfigBackendOutput)
}

// The configured countries where distribution of content is blocked
func (o CdnDistributionConfigOutput) BlockedCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CdnDistributionConfig) []string { return v.BlockedCountries }).(pulumi.StringArrayOutput)
}

// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
func (o CdnDistributionConfigOutput) Optimizer() CdnDistributionConfigOptimizerPtrOutput {
	return o.ApplyT(func(v CdnDistributionConfig) *CdnDistributionConfigOptimizer { return v.Optimizer }).(CdnDistributionConfigOptimizerPtrOutput)
}

// The configured regions where content will be hosted
func (o CdnDistributionConfigOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CdnDistributionConfig) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type CdnDistributionConfigPtrOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfig)(nil)).Elem()
}

func (o CdnDistributionConfigPtrOutput) ToCdnDistributionConfigPtrOutput() CdnDistributionConfigPtrOutput {
	return o
}

func (o CdnDistributionConfigPtrOutput) ToCdnDistributionConfigPtrOutputWithContext(ctx context.Context) CdnDistributionConfigPtrOutput {
	return o
}

func (o CdnDistributionConfigPtrOutput) Elem() CdnDistributionConfigOutput {
	return o.ApplyT(func(v *CdnDistributionConfig) CdnDistributionConfig {
		if v != nil {
			return *v
		}
		var ret CdnDistributionConfig
		return ret
	}).(CdnDistributionConfigOutput)
}

// The configured backend for the distribution
func (o CdnDistributionConfigPtrOutput) Backend() CdnDistributionConfigBackendPtrOutput {
	return o.ApplyT(func(v *CdnDistributionConfig) *CdnDistributionConfigBackend {
		if v == nil {
			return nil
		}
		return &v.Backend
	}).(CdnDistributionConfigBackendPtrOutput)
}

// The configured countries where distribution of content is blocked
func (o CdnDistributionConfigPtrOutput) BlockedCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CdnDistributionConfig) []string {
		if v == nil {
			return nil
		}
		return v.BlockedCountries
	}).(pulumi.StringArrayOutput)
}

// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
func (o CdnDistributionConfigPtrOutput) Optimizer() CdnDistributionConfigOptimizerPtrOutput {
	return o.ApplyT(func(v *CdnDistributionConfig) *CdnDistributionConfigOptimizer {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(CdnDistributionConfigOptimizerPtrOutput)
}

// The configured regions where content will be hosted
func (o CdnDistributionConfigPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CdnDistributionConfig) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

type CdnDistributionConfigBackend struct {
	// The configured origin request headers for the backend
	OriginRequestHeaders map[string]string `pulumi:"originRequestHeaders"`
	// The configured backend type for the distribution
	OriginUrl string `pulumi:"originUrl"`
	// The configured backend type. Supported values are: `http`.
	Type string `pulumi:"type"`
}

// CdnDistributionConfigBackendInput is an input type that accepts CdnDistributionConfigBackendArgs and CdnDistributionConfigBackendOutput values.
// You can construct a concrete instance of `CdnDistributionConfigBackendInput` via:
//
//	CdnDistributionConfigBackendArgs{...}
type CdnDistributionConfigBackendInput interface {
	pulumi.Input

	ToCdnDistributionConfigBackendOutput() CdnDistributionConfigBackendOutput
	ToCdnDistributionConfigBackendOutputWithContext(context.Context) CdnDistributionConfigBackendOutput
}

type CdnDistributionConfigBackendArgs struct {
	// The configured origin request headers for the backend
	OriginRequestHeaders pulumi.StringMapInput `pulumi:"originRequestHeaders"`
	// The configured backend type for the distribution
	OriginUrl pulumi.StringInput `pulumi:"originUrl"`
	// The configured backend type. Supported values are: `http`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CdnDistributionConfigBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfigBackend)(nil)).Elem()
}

func (i CdnDistributionConfigBackendArgs) ToCdnDistributionConfigBackendOutput() CdnDistributionConfigBackendOutput {
	return i.ToCdnDistributionConfigBackendOutputWithContext(context.Background())
}

func (i CdnDistributionConfigBackendArgs) ToCdnDistributionConfigBackendOutputWithContext(ctx context.Context) CdnDistributionConfigBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigBackendOutput)
}

func (i CdnDistributionConfigBackendArgs) ToCdnDistributionConfigBackendPtrOutput() CdnDistributionConfigBackendPtrOutput {
	return i.ToCdnDistributionConfigBackendPtrOutputWithContext(context.Background())
}

func (i CdnDistributionConfigBackendArgs) ToCdnDistributionConfigBackendPtrOutputWithContext(ctx context.Context) CdnDistributionConfigBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigBackendOutput).ToCdnDistributionConfigBackendPtrOutputWithContext(ctx)
}

// CdnDistributionConfigBackendPtrInput is an input type that accepts CdnDistributionConfigBackendArgs, CdnDistributionConfigBackendPtr and CdnDistributionConfigBackendPtrOutput values.
// You can construct a concrete instance of `CdnDistributionConfigBackendPtrInput` via:
//
//	        CdnDistributionConfigBackendArgs{...}
//
//	or:
//
//	        nil
type CdnDistributionConfigBackendPtrInput interface {
	pulumi.Input

	ToCdnDistributionConfigBackendPtrOutput() CdnDistributionConfigBackendPtrOutput
	ToCdnDistributionConfigBackendPtrOutputWithContext(context.Context) CdnDistributionConfigBackendPtrOutput
}

type cdnDistributionConfigBackendPtrType CdnDistributionConfigBackendArgs

func CdnDistributionConfigBackendPtr(v *CdnDistributionConfigBackendArgs) CdnDistributionConfigBackendPtrInput {
	return (*cdnDistributionConfigBackendPtrType)(v)
}

func (*cdnDistributionConfigBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfigBackend)(nil)).Elem()
}

func (i *cdnDistributionConfigBackendPtrType) ToCdnDistributionConfigBackendPtrOutput() CdnDistributionConfigBackendPtrOutput {
	return i.ToCdnDistributionConfigBackendPtrOutputWithContext(context.Background())
}

func (i *cdnDistributionConfigBackendPtrType) ToCdnDistributionConfigBackendPtrOutputWithContext(ctx context.Context) CdnDistributionConfigBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigBackendPtrOutput)
}

type CdnDistributionConfigBackendOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfigBackend)(nil)).Elem()
}

func (o CdnDistributionConfigBackendOutput) ToCdnDistributionConfigBackendOutput() CdnDistributionConfigBackendOutput {
	return o
}

func (o CdnDistributionConfigBackendOutput) ToCdnDistributionConfigBackendOutputWithContext(ctx context.Context) CdnDistributionConfigBackendOutput {
	return o
}

func (o CdnDistributionConfigBackendOutput) ToCdnDistributionConfigBackendPtrOutput() CdnDistributionConfigBackendPtrOutput {
	return o.ToCdnDistributionConfigBackendPtrOutputWithContext(context.Background())
}

func (o CdnDistributionConfigBackendOutput) ToCdnDistributionConfigBackendPtrOutputWithContext(ctx context.Context) CdnDistributionConfigBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnDistributionConfigBackend) *CdnDistributionConfigBackend {
		return &v
	}).(CdnDistributionConfigBackendPtrOutput)
}

// The configured origin request headers for the backend
func (o CdnDistributionConfigBackendOutput) OriginRequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v CdnDistributionConfigBackend) map[string]string { return v.OriginRequestHeaders }).(pulumi.StringMapOutput)
}

// The configured backend type for the distribution
func (o CdnDistributionConfigBackendOutput) OriginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v CdnDistributionConfigBackend) string { return v.OriginUrl }).(pulumi.StringOutput)
}

// The configured backend type. Supported values are: `http`.
func (o CdnDistributionConfigBackendOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CdnDistributionConfigBackend) string { return v.Type }).(pulumi.StringOutput)
}

type CdnDistributionConfigBackendPtrOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfigBackend)(nil)).Elem()
}

func (o CdnDistributionConfigBackendPtrOutput) ToCdnDistributionConfigBackendPtrOutput() CdnDistributionConfigBackendPtrOutput {
	return o
}

func (o CdnDistributionConfigBackendPtrOutput) ToCdnDistributionConfigBackendPtrOutputWithContext(ctx context.Context) CdnDistributionConfigBackendPtrOutput {
	return o
}

func (o CdnDistributionConfigBackendPtrOutput) Elem() CdnDistributionConfigBackendOutput {
	return o.ApplyT(func(v *CdnDistributionConfigBackend) CdnDistributionConfigBackend {
		if v != nil {
			return *v
		}
		var ret CdnDistributionConfigBackend
		return ret
	}).(CdnDistributionConfigBackendOutput)
}

// The configured origin request headers for the backend
func (o CdnDistributionConfigBackendPtrOutput) OriginRequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CdnDistributionConfigBackend) map[string]string {
		if v == nil {
			return nil
		}
		return v.OriginRequestHeaders
	}).(pulumi.StringMapOutput)
}

// The configured backend type for the distribution
func (o CdnDistributionConfigBackendPtrOutput) OriginUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDistributionConfigBackend) *string {
		if v == nil {
			return nil
		}
		return &v.OriginUrl
	}).(pulumi.StringPtrOutput)
}

// The configured backend type. Supported values are: `http`.
func (o CdnDistributionConfigBackendPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDistributionConfigBackend) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type CdnDistributionConfigOptimizer struct {
	Enabled *bool `pulumi:"enabled"`
}

// CdnDistributionConfigOptimizerInput is an input type that accepts CdnDistributionConfigOptimizerArgs and CdnDistributionConfigOptimizerOutput values.
// You can construct a concrete instance of `CdnDistributionConfigOptimizerInput` via:
//
//	CdnDistributionConfigOptimizerArgs{...}
type CdnDistributionConfigOptimizerInput interface {
	pulumi.Input

	ToCdnDistributionConfigOptimizerOutput() CdnDistributionConfigOptimizerOutput
	ToCdnDistributionConfigOptimizerOutputWithContext(context.Context) CdnDistributionConfigOptimizerOutput
}

type CdnDistributionConfigOptimizerArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (CdnDistributionConfigOptimizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfigOptimizer)(nil)).Elem()
}

func (i CdnDistributionConfigOptimizerArgs) ToCdnDistributionConfigOptimizerOutput() CdnDistributionConfigOptimizerOutput {
	return i.ToCdnDistributionConfigOptimizerOutputWithContext(context.Background())
}

func (i CdnDistributionConfigOptimizerArgs) ToCdnDistributionConfigOptimizerOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigOptimizerOutput)
}

func (i CdnDistributionConfigOptimizerArgs) ToCdnDistributionConfigOptimizerPtrOutput() CdnDistributionConfigOptimizerPtrOutput {
	return i.ToCdnDistributionConfigOptimizerPtrOutputWithContext(context.Background())
}

func (i CdnDistributionConfigOptimizerArgs) ToCdnDistributionConfigOptimizerPtrOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigOptimizerOutput).ToCdnDistributionConfigOptimizerPtrOutputWithContext(ctx)
}

// CdnDistributionConfigOptimizerPtrInput is an input type that accepts CdnDistributionConfigOptimizerArgs, CdnDistributionConfigOptimizerPtr and CdnDistributionConfigOptimizerPtrOutput values.
// You can construct a concrete instance of `CdnDistributionConfigOptimizerPtrInput` via:
//
//	        CdnDistributionConfigOptimizerArgs{...}
//
//	or:
//
//	        nil
type CdnDistributionConfigOptimizerPtrInput interface {
	pulumi.Input

	ToCdnDistributionConfigOptimizerPtrOutput() CdnDistributionConfigOptimizerPtrOutput
	ToCdnDistributionConfigOptimizerPtrOutputWithContext(context.Context) CdnDistributionConfigOptimizerPtrOutput
}

type cdnDistributionConfigOptimizerPtrType CdnDistributionConfigOptimizerArgs

func CdnDistributionConfigOptimizerPtr(v *CdnDistributionConfigOptimizerArgs) CdnDistributionConfigOptimizerPtrInput {
	return (*cdnDistributionConfigOptimizerPtrType)(v)
}

func (*cdnDistributionConfigOptimizerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfigOptimizer)(nil)).Elem()
}

func (i *cdnDistributionConfigOptimizerPtrType) ToCdnDistributionConfigOptimizerPtrOutput() CdnDistributionConfigOptimizerPtrOutput {
	return i.ToCdnDistributionConfigOptimizerPtrOutputWithContext(context.Background())
}

func (i *cdnDistributionConfigOptimizerPtrType) ToCdnDistributionConfigOptimizerPtrOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionConfigOptimizerPtrOutput)
}

type CdnDistributionConfigOptimizerOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigOptimizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionConfigOptimizer)(nil)).Elem()
}

func (o CdnDistributionConfigOptimizerOutput) ToCdnDistributionConfigOptimizerOutput() CdnDistributionConfigOptimizerOutput {
	return o
}

func (o CdnDistributionConfigOptimizerOutput) ToCdnDistributionConfigOptimizerOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerOutput {
	return o
}

func (o CdnDistributionConfigOptimizerOutput) ToCdnDistributionConfigOptimizerPtrOutput() CdnDistributionConfigOptimizerPtrOutput {
	return o.ToCdnDistributionConfigOptimizerPtrOutputWithContext(context.Background())
}

func (o CdnDistributionConfigOptimizerOutput) ToCdnDistributionConfigOptimizerPtrOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnDistributionConfigOptimizer) *CdnDistributionConfigOptimizer {
		return &v
	}).(CdnDistributionConfigOptimizerPtrOutput)
}

func (o CdnDistributionConfigOptimizerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdnDistributionConfigOptimizer) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type CdnDistributionConfigOptimizerPtrOutput struct{ *pulumi.OutputState }

func (CdnDistributionConfigOptimizerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDistributionConfigOptimizer)(nil)).Elem()
}

func (o CdnDistributionConfigOptimizerPtrOutput) ToCdnDistributionConfigOptimizerPtrOutput() CdnDistributionConfigOptimizerPtrOutput {
	return o
}

func (o CdnDistributionConfigOptimizerPtrOutput) ToCdnDistributionConfigOptimizerPtrOutputWithContext(ctx context.Context) CdnDistributionConfigOptimizerPtrOutput {
	return o
}

func (o CdnDistributionConfigOptimizerPtrOutput) Elem() CdnDistributionConfigOptimizerOutput {
	return o.ApplyT(func(v *CdnDistributionConfigOptimizer) CdnDistributionConfigOptimizer {
		if v != nil {
			return *v
		}
		var ret CdnDistributionConfigOptimizer
		return ret
	}).(CdnDistributionConfigOptimizerOutput)
}

func (o CdnDistributionConfigOptimizerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CdnDistributionConfigOptimizer) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type CdnDistributionDomain struct {
	// List of domain errors
	Errors []string `pulumi:"errors"`
	// The name of the domain
	Name *string `pulumi:"name"`
	// The status of the domain
	Status *string `pulumi:"status"`
	// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
	Type *string `pulumi:"type"`
}

// CdnDistributionDomainInput is an input type that accepts CdnDistributionDomainArgs and CdnDistributionDomainOutput values.
// You can construct a concrete instance of `CdnDistributionDomainInput` via:
//
//	CdnDistributionDomainArgs{...}
type CdnDistributionDomainInput interface {
	pulumi.Input

	ToCdnDistributionDomainOutput() CdnDistributionDomainOutput
	ToCdnDistributionDomainOutputWithContext(context.Context) CdnDistributionDomainOutput
}

type CdnDistributionDomainArgs struct {
	// List of domain errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// The name of the domain
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The status of the domain
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CdnDistributionDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionDomain)(nil)).Elem()
}

func (i CdnDistributionDomainArgs) ToCdnDistributionDomainOutput() CdnDistributionDomainOutput {
	return i.ToCdnDistributionDomainOutputWithContext(context.Background())
}

func (i CdnDistributionDomainArgs) ToCdnDistributionDomainOutputWithContext(ctx context.Context) CdnDistributionDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionDomainOutput)
}

// CdnDistributionDomainArrayInput is an input type that accepts CdnDistributionDomainArray and CdnDistributionDomainArrayOutput values.
// You can construct a concrete instance of `CdnDistributionDomainArrayInput` via:
//
//	CdnDistributionDomainArray{ CdnDistributionDomainArgs{...} }
type CdnDistributionDomainArrayInput interface {
	pulumi.Input

	ToCdnDistributionDomainArrayOutput() CdnDistributionDomainArrayOutput
	ToCdnDistributionDomainArrayOutputWithContext(context.Context) CdnDistributionDomainArrayOutput
}

type CdnDistributionDomainArray []CdnDistributionDomainInput

func (CdnDistributionDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdnDistributionDomain)(nil)).Elem()
}

func (i CdnDistributionDomainArray) ToCdnDistributionDomainArrayOutput() CdnDistributionDomainArrayOutput {
	return i.ToCdnDistributionDomainArrayOutputWithContext(context.Background())
}

func (i CdnDistributionDomainArray) ToCdnDistributionDomainArrayOutputWithContext(ctx context.Context) CdnDistributionDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDistributionDomainArrayOutput)
}

type CdnDistributionDomainOutput struct{ *pulumi.OutputState }

func (CdnDistributionDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDistributionDomain)(nil)).Elem()
}

func (o CdnDistributionDomainOutput) ToCdnDistributionDomainOutput() CdnDistributionDomainOutput {
	return o
}

func (o CdnDistributionDomainOutput) ToCdnDistributionDomainOutputWithContext(ctx context.Context) CdnDistributionDomainOutput {
	return o
}

// List of domain errors
func (o CdnDistributionDomainOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CdnDistributionDomain) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// The name of the domain
func (o CdnDistributionDomainOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnDistributionDomain) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The status of the domain
func (o CdnDistributionDomainOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnDistributionDomain) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
func (o CdnDistributionDomainOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CdnDistributionDomain) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CdnDistributionDomainArrayOutput struct{ *pulumi.OutputState }

func (CdnDistributionDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdnDistributionDomain)(nil)).Elem()
}

func (o CdnDistributionDomainArrayOutput) ToCdnDistributionDomainArrayOutput() CdnDistributionDomainArrayOutput {
	return o
}

func (o CdnDistributionDomainArrayOutput) ToCdnDistributionDomainArrayOutputWithContext(ctx context.Context) CdnDistributionDomainArrayOutput {
	return o
}

func (o CdnDistributionDomainArrayOutput) Index(i pulumi.IntInput) CdnDistributionDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CdnDistributionDomain {
		return vs[0].([]CdnDistributionDomain)[vs[1].(int)]
	}).(CdnDistributionDomainOutput)
}

type ImageChecksum struct {
	// Algorithm for the checksum of the image data.
	Algorithm *string `pulumi:"algorithm"`
	// Hexdigest of the checksum of the image data.
	Digest *string `pulumi:"digest"`
}

// ImageChecksumInput is an input type that accepts ImageChecksumArgs and ImageChecksumOutput values.
// You can construct a concrete instance of `ImageChecksumInput` via:
//
//	ImageChecksumArgs{...}
type ImageChecksumInput interface {
	pulumi.Input

	ToImageChecksumOutput() ImageChecksumOutput
	ToImageChecksumOutputWithContext(context.Context) ImageChecksumOutput
}

type ImageChecksumArgs struct {
	// Algorithm for the checksum of the image data.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// Hexdigest of the checksum of the image data.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
}

func (ImageChecksumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageChecksum)(nil)).Elem()
}

func (i ImageChecksumArgs) ToImageChecksumOutput() ImageChecksumOutput {
	return i.ToImageChecksumOutputWithContext(context.Background())
}

func (i ImageChecksumArgs) ToImageChecksumOutputWithContext(ctx context.Context) ImageChecksumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageChecksumOutput)
}

func (i ImageChecksumArgs) ToImageChecksumPtrOutput() ImageChecksumPtrOutput {
	return i.ToImageChecksumPtrOutputWithContext(context.Background())
}

func (i ImageChecksumArgs) ToImageChecksumPtrOutputWithContext(ctx context.Context) ImageChecksumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageChecksumOutput).ToImageChecksumPtrOutputWithContext(ctx)
}

// ImageChecksumPtrInput is an input type that accepts ImageChecksumArgs, ImageChecksumPtr and ImageChecksumPtrOutput values.
// You can construct a concrete instance of `ImageChecksumPtrInput` via:
//
//	        ImageChecksumArgs{...}
//
//	or:
//
//	        nil
type ImageChecksumPtrInput interface {
	pulumi.Input

	ToImageChecksumPtrOutput() ImageChecksumPtrOutput
	ToImageChecksumPtrOutputWithContext(context.Context) ImageChecksumPtrOutput
}

type imageChecksumPtrType ImageChecksumArgs

func ImageChecksumPtr(v *ImageChecksumArgs) ImageChecksumPtrInput {
	return (*imageChecksumPtrType)(v)
}

func (*imageChecksumPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageChecksum)(nil)).Elem()
}

func (i *imageChecksumPtrType) ToImageChecksumPtrOutput() ImageChecksumPtrOutput {
	return i.ToImageChecksumPtrOutputWithContext(context.Background())
}

func (i *imageChecksumPtrType) ToImageChecksumPtrOutputWithContext(ctx context.Context) ImageChecksumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageChecksumPtrOutput)
}

type ImageChecksumOutput struct{ *pulumi.OutputState }

func (ImageChecksumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageChecksum)(nil)).Elem()
}

func (o ImageChecksumOutput) ToImageChecksumOutput() ImageChecksumOutput {
	return o
}

func (o ImageChecksumOutput) ToImageChecksumOutputWithContext(ctx context.Context) ImageChecksumOutput {
	return o
}

func (o ImageChecksumOutput) ToImageChecksumPtrOutput() ImageChecksumPtrOutput {
	return o.ToImageChecksumPtrOutputWithContext(context.Background())
}

func (o ImageChecksumOutput) ToImageChecksumPtrOutputWithContext(ctx context.Context) ImageChecksumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageChecksum) *ImageChecksum {
		return &v
	}).(ImageChecksumPtrOutput)
}

// Algorithm for the checksum of the image data.
func (o ImageChecksumOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageChecksum) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Hexdigest of the checksum of the image data.
func (o ImageChecksumOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageChecksum) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

type ImageChecksumPtrOutput struct{ *pulumi.OutputState }

func (ImageChecksumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageChecksum)(nil)).Elem()
}

func (o ImageChecksumPtrOutput) ToImageChecksumPtrOutput() ImageChecksumPtrOutput {
	return o
}

func (o ImageChecksumPtrOutput) ToImageChecksumPtrOutputWithContext(ctx context.Context) ImageChecksumPtrOutput {
	return o
}

func (o ImageChecksumPtrOutput) Elem() ImageChecksumOutput {
	return o.ApplyT(func(v *ImageChecksum) ImageChecksum {
		if v != nil {
			return *v
		}
		var ret ImageChecksum
		return ret
	}).(ImageChecksumOutput)
}

// Algorithm for the checksum of the image data.
func (o ImageChecksumPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageChecksum) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// Hexdigest of the checksum of the image data.
func (o ImageChecksumPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageChecksum) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

type ImageConfig struct {
	// Enables the BIOS bootmenu.
	BootMenu *bool `pulumi:"bootMenu"`
	// Sets CDROM bus controller type.
	CdromBus *string `pulumi:"cdromBus"`
	// Sets Disk bus controller type.
	DiskBus *string `pulumi:"diskBus"`
	// Sets virtual network interface model.
	NicModel *string `pulumi:"nicModel"`
	// Enables operating system specific optimizations.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// Operating system distribution.
	OperatingSystemDistro *string `pulumi:"operatingSystemDistro"`
	// Version of the operating system.
	OperatingSystemVersion *string `pulumi:"operatingSystemVersion"`
	// Sets the device bus when the image is used as a rescue image.
	RescueBus *string `pulumi:"rescueBus"`
	// Sets the device when the image is used as a rescue image.
	RescueDevice *string `pulumi:"rescueDevice"`
	// Enables Secure Boot.
	SecureBoot *bool `pulumi:"secureBoot"`
	// Enables UEFI boot.
	Uefi *bool `pulumi:"uefi"`
	// Sets Graphic device model.
	VideoModel *string `pulumi:"videoModel"`
	// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
	VirtioScsi *bool `pulumi:"virtioScsi"`
}

// ImageConfigInput is an input type that accepts ImageConfigArgs and ImageConfigOutput values.
// You can construct a concrete instance of `ImageConfigInput` via:
//
//	ImageConfigArgs{...}
type ImageConfigInput interface {
	pulumi.Input

	ToImageConfigOutput() ImageConfigOutput
	ToImageConfigOutputWithContext(context.Context) ImageConfigOutput
}

type ImageConfigArgs struct {
	// Enables the BIOS bootmenu.
	BootMenu pulumi.BoolPtrInput `pulumi:"bootMenu"`
	// Sets CDROM bus controller type.
	CdromBus pulumi.StringPtrInput `pulumi:"cdromBus"`
	// Sets Disk bus controller type.
	DiskBus pulumi.StringPtrInput `pulumi:"diskBus"`
	// Sets virtual network interface model.
	NicModel pulumi.StringPtrInput `pulumi:"nicModel"`
	// Enables operating system specific optimizations.
	OperatingSystem pulumi.StringPtrInput `pulumi:"operatingSystem"`
	// Operating system distribution.
	OperatingSystemDistro pulumi.StringPtrInput `pulumi:"operatingSystemDistro"`
	// Version of the operating system.
	OperatingSystemVersion pulumi.StringPtrInput `pulumi:"operatingSystemVersion"`
	// Sets the device bus when the image is used as a rescue image.
	RescueBus pulumi.StringPtrInput `pulumi:"rescueBus"`
	// Sets the device when the image is used as a rescue image.
	RescueDevice pulumi.StringPtrInput `pulumi:"rescueDevice"`
	// Enables Secure Boot.
	SecureBoot pulumi.BoolPtrInput `pulumi:"secureBoot"`
	// Enables UEFI boot.
	Uefi pulumi.BoolPtrInput `pulumi:"uefi"`
	// Sets Graphic device model.
	VideoModel pulumi.StringPtrInput `pulumi:"videoModel"`
	// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
	VirtioScsi pulumi.BoolPtrInput `pulumi:"virtioScsi"`
}

func (ImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageConfig)(nil)).Elem()
}

func (i ImageConfigArgs) ToImageConfigOutput() ImageConfigOutput {
	return i.ToImageConfigOutputWithContext(context.Background())
}

func (i ImageConfigArgs) ToImageConfigOutputWithContext(ctx context.Context) ImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigOutput)
}

func (i ImageConfigArgs) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return i.ToImageConfigPtrOutputWithContext(context.Background())
}

func (i ImageConfigArgs) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigOutput).ToImageConfigPtrOutputWithContext(ctx)
}

// ImageConfigPtrInput is an input type that accepts ImageConfigArgs, ImageConfigPtr and ImageConfigPtrOutput values.
// You can construct a concrete instance of `ImageConfigPtrInput` via:
//
//	        ImageConfigArgs{...}
//
//	or:
//
//	        nil
type ImageConfigPtrInput interface {
	pulumi.Input

	ToImageConfigPtrOutput() ImageConfigPtrOutput
	ToImageConfigPtrOutputWithContext(context.Context) ImageConfigPtrOutput
}

type imageConfigPtrType ImageConfigArgs

func ImageConfigPtr(v *ImageConfigArgs) ImageConfigPtrInput {
	return (*imageConfigPtrType)(v)
}

func (*imageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageConfig)(nil)).Elem()
}

func (i *imageConfigPtrType) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return i.ToImageConfigPtrOutputWithContext(context.Background())
}

func (i *imageConfigPtrType) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigPtrOutput)
}

type ImageConfigOutput struct{ *pulumi.OutputState }

func (ImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageConfig)(nil)).Elem()
}

func (o ImageConfigOutput) ToImageConfigOutput() ImageConfigOutput {
	return o
}

func (o ImageConfigOutput) ToImageConfigOutputWithContext(ctx context.Context) ImageConfigOutput {
	return o
}

func (o ImageConfigOutput) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return o.ToImageConfigPtrOutputWithContext(context.Background())
}

func (o ImageConfigOutput) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageConfig) *ImageConfig {
		return &v
	}).(ImageConfigPtrOutput)
}

// Enables the BIOS bootmenu.
func (o ImageConfigOutput) BootMenu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageConfig) *bool { return v.BootMenu }).(pulumi.BoolPtrOutput)
}

// Sets CDROM bus controller type.
func (o ImageConfigOutput) CdromBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.CdromBus }).(pulumi.StringPtrOutput)
}

// Sets Disk bus controller type.
func (o ImageConfigOutput) DiskBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.DiskBus }).(pulumi.StringPtrOutput)
}

// Sets virtual network interface model.
func (o ImageConfigOutput) NicModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.NicModel }).(pulumi.StringPtrOutput)
}

// Enables operating system specific optimizations.
func (o ImageConfigOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.OperatingSystem }).(pulumi.StringPtrOutput)
}

// Operating system distribution.
func (o ImageConfigOutput) OperatingSystemDistro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.OperatingSystemDistro }).(pulumi.StringPtrOutput)
}

// Version of the operating system.
func (o ImageConfigOutput) OperatingSystemVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.OperatingSystemVersion }).(pulumi.StringPtrOutput)
}

// Sets the device bus when the image is used as a rescue image.
func (o ImageConfigOutput) RescueBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.RescueBus }).(pulumi.StringPtrOutput)
}

// Sets the device when the image is used as a rescue image.
func (o ImageConfigOutput) RescueDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.RescueDevice }).(pulumi.StringPtrOutput)
}

// Enables Secure Boot.
func (o ImageConfigOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageConfig) *bool { return v.SecureBoot }).(pulumi.BoolPtrOutput)
}

// Enables UEFI boot.
func (o ImageConfigOutput) Uefi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageConfig) *bool { return v.Uefi }).(pulumi.BoolPtrOutput)
}

// Sets Graphic device model.
func (o ImageConfigOutput) VideoModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageConfig) *string { return v.VideoModel }).(pulumi.StringPtrOutput)
}

// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
func (o ImageConfigOutput) VirtioScsi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageConfig) *bool { return v.VirtioScsi }).(pulumi.BoolPtrOutput)
}

type ImageConfigPtrOutput struct{ *pulumi.OutputState }

func (ImageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageConfig)(nil)).Elem()
}

func (o ImageConfigPtrOutput) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return o
}

func (o ImageConfigPtrOutput) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return o
}

func (o ImageConfigPtrOutput) Elem() ImageConfigOutput {
	return o.ApplyT(func(v *ImageConfig) ImageConfig {
		if v != nil {
			return *v
		}
		var ret ImageConfig
		return ret
	}).(ImageConfigOutput)
}

// Enables the BIOS bootmenu.
func (o ImageConfigPtrOutput) BootMenu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.BootMenu
	}).(pulumi.BoolPtrOutput)
}

// Sets CDROM bus controller type.
func (o ImageConfigPtrOutput) CdromBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.CdromBus
	}).(pulumi.StringPtrOutput)
}

// Sets Disk bus controller type.
func (o ImageConfigPtrOutput) DiskBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskBus
	}).(pulumi.StringPtrOutput)
}

// Sets virtual network interface model.
func (o ImageConfigPtrOutput) NicModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.NicModel
	}).(pulumi.StringPtrOutput)
}

// Enables operating system specific optimizations.
func (o ImageConfigPtrOutput) OperatingSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystem
	}).(pulumi.StringPtrOutput)
}

// Operating system distribution.
func (o ImageConfigPtrOutput) OperatingSystemDistro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemDistro
	}).(pulumi.StringPtrOutput)
}

// Version of the operating system.
func (o ImageConfigPtrOutput) OperatingSystemVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemVersion
	}).(pulumi.StringPtrOutput)
}

// Sets the device bus when the image is used as a rescue image.
func (o ImageConfigPtrOutput) RescueBus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.RescueBus
	}).(pulumi.StringPtrOutput)
}

// Sets the device when the image is used as a rescue image.
func (o ImageConfigPtrOutput) RescueDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.RescueDevice
	}).(pulumi.StringPtrOutput)
}

// Enables Secure Boot.
func (o ImageConfigPtrOutput) SecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Enables UEFI boot.
func (o ImageConfigPtrOutput) Uefi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Uefi
	}).(pulumi.BoolPtrOutput)
}

// Sets Graphic device model.
func (o ImageConfigPtrOutput) VideoModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.VideoModel
	}).(pulumi.StringPtrOutput)
}

// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
func (o ImageConfigPtrOutput) VirtioScsi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VirtioScsi
	}).(pulumi.BoolPtrOutput)
}

type LoadbalancerListener struct {
	DisplayName *string `pulumi:"displayName"`
	// Port number where we listen for traffic.
	Port int `pulumi:"port"`
	// Protocol is the highest network protocol we understand to load balance. Supported values are: `PROTOCOL_UNSPECIFIED`, `PROTOCOL_TCP`, `PROTOCOL_UDP`, `PROTOCOL_TCP_PROXY`, `PROTOCOL_TLS_PASSTHROUGH`.
	Protocol string `pulumi:"protocol"`
	// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
	ServerNameIndicators []LoadbalancerListenerServerNameIndicator `pulumi:"serverNameIndicators"`
	// Reference target pool by target pool name.
	TargetPool string `pulumi:"targetPool"`
}

// LoadbalancerListenerInput is an input type that accepts LoadbalancerListenerArgs and LoadbalancerListenerOutput values.
// You can construct a concrete instance of `LoadbalancerListenerInput` via:
//
//	LoadbalancerListenerArgs{...}
type LoadbalancerListenerInput interface {
	pulumi.Input

	ToLoadbalancerListenerOutput() LoadbalancerListenerOutput
	ToLoadbalancerListenerOutputWithContext(context.Context) LoadbalancerListenerOutput
}

type LoadbalancerListenerArgs struct {
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Port number where we listen for traffic.
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol is the highest network protocol we understand to load balance. Supported values are: `PROTOCOL_UNSPECIFIED`, `PROTOCOL_TCP`, `PROTOCOL_UDP`, `PROTOCOL_TCP_PROXY`, `PROTOCOL_TLS_PASSTHROUGH`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
	ServerNameIndicators LoadbalancerListenerServerNameIndicatorArrayInput `pulumi:"serverNameIndicators"`
	// Reference target pool by target pool name.
	TargetPool pulumi.StringInput `pulumi:"targetPool"`
}

func (LoadbalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerListener)(nil)).Elem()
}

func (i LoadbalancerListenerArgs) ToLoadbalancerListenerOutput() LoadbalancerListenerOutput {
	return i.ToLoadbalancerListenerOutputWithContext(context.Background())
}

func (i LoadbalancerListenerArgs) ToLoadbalancerListenerOutputWithContext(ctx context.Context) LoadbalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerOutput)
}

// LoadbalancerListenerArrayInput is an input type that accepts LoadbalancerListenerArray and LoadbalancerListenerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerListenerArrayInput` via:
//
//	LoadbalancerListenerArray{ LoadbalancerListenerArgs{...} }
type LoadbalancerListenerArrayInput interface {
	pulumi.Input

	ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput
	ToLoadbalancerListenerArrayOutputWithContext(context.Context) LoadbalancerListenerArrayOutput
}

type LoadbalancerListenerArray []LoadbalancerListenerInput

func (LoadbalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerListener)(nil)).Elem()
}

func (i LoadbalancerListenerArray) ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput {
	return i.ToLoadbalancerListenerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerListenerArray) ToLoadbalancerListenerArrayOutputWithContext(ctx context.Context) LoadbalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerArrayOutput)
}

type LoadbalancerListenerOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerListener)(nil)).Elem()
}

func (o LoadbalancerListenerOutput) ToLoadbalancerListenerOutput() LoadbalancerListenerOutput {
	return o
}

func (o LoadbalancerListenerOutput) ToLoadbalancerListenerOutputWithContext(ctx context.Context) LoadbalancerListenerOutput {
	return o
}

func (o LoadbalancerListenerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerListener) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Port number where we listen for traffic.
func (o LoadbalancerListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoadbalancerListener) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol is the highest network protocol we understand to load balance. Supported values are: `PROTOCOL_UNSPECIFIED`, `PROTOCOL_TCP`, `PROTOCOL_UDP`, `PROTOCOL_TCP_PROXY`, `PROTOCOL_TLS_PASSTHROUGH`.
func (o LoadbalancerListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerListener) string { return v.Protocol }).(pulumi.StringOutput)
}

// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
func (o LoadbalancerListenerOutput) ServerNameIndicators() LoadbalancerListenerServerNameIndicatorArrayOutput {
	return o.ApplyT(func(v LoadbalancerListener) []LoadbalancerListenerServerNameIndicator { return v.ServerNameIndicators }).(LoadbalancerListenerServerNameIndicatorArrayOutput)
}

// Reference target pool by target pool name.
func (o LoadbalancerListenerOutput) TargetPool() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerListener) string { return v.TargetPool }).(pulumi.StringOutput)
}

type LoadbalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerListener)(nil)).Elem()
}

func (o LoadbalancerListenerArrayOutput) ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput {
	return o
}

func (o LoadbalancerListenerArrayOutput) ToLoadbalancerListenerArrayOutputWithContext(ctx context.Context) LoadbalancerListenerArrayOutput {
	return o
}

func (o LoadbalancerListenerArrayOutput) Index(i pulumi.IntInput) LoadbalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadbalancerListener {
		return vs[0].([]LoadbalancerListener)[vs[1].(int)]
	}).(LoadbalancerListenerOutput)
}

type LoadbalancerListenerServerNameIndicator struct {
	// A domain name to match in order to pass TLS traffic to the target pool in the current listener
	Name *string `pulumi:"name"`
}

// LoadbalancerListenerServerNameIndicatorInput is an input type that accepts LoadbalancerListenerServerNameIndicatorArgs and LoadbalancerListenerServerNameIndicatorOutput values.
// You can construct a concrete instance of `LoadbalancerListenerServerNameIndicatorInput` via:
//
//	LoadbalancerListenerServerNameIndicatorArgs{...}
type LoadbalancerListenerServerNameIndicatorInput interface {
	pulumi.Input

	ToLoadbalancerListenerServerNameIndicatorOutput() LoadbalancerListenerServerNameIndicatorOutput
	ToLoadbalancerListenerServerNameIndicatorOutputWithContext(context.Context) LoadbalancerListenerServerNameIndicatorOutput
}

type LoadbalancerListenerServerNameIndicatorArgs struct {
	// A domain name to match in order to pass TLS traffic to the target pool in the current listener
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LoadbalancerListenerServerNameIndicatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (i LoadbalancerListenerServerNameIndicatorArgs) ToLoadbalancerListenerServerNameIndicatorOutput() LoadbalancerListenerServerNameIndicatorOutput {
	return i.ToLoadbalancerListenerServerNameIndicatorOutputWithContext(context.Background())
}

func (i LoadbalancerListenerServerNameIndicatorArgs) ToLoadbalancerListenerServerNameIndicatorOutputWithContext(ctx context.Context) LoadbalancerListenerServerNameIndicatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerServerNameIndicatorOutput)
}

// LoadbalancerListenerServerNameIndicatorArrayInput is an input type that accepts LoadbalancerListenerServerNameIndicatorArray and LoadbalancerListenerServerNameIndicatorArrayOutput values.
// You can construct a concrete instance of `LoadbalancerListenerServerNameIndicatorArrayInput` via:
//
//	LoadbalancerListenerServerNameIndicatorArray{ LoadbalancerListenerServerNameIndicatorArgs{...} }
type LoadbalancerListenerServerNameIndicatorArrayInput interface {
	pulumi.Input

	ToLoadbalancerListenerServerNameIndicatorArrayOutput() LoadbalancerListenerServerNameIndicatorArrayOutput
	ToLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(context.Context) LoadbalancerListenerServerNameIndicatorArrayOutput
}

type LoadbalancerListenerServerNameIndicatorArray []LoadbalancerListenerServerNameIndicatorInput

func (LoadbalancerListenerServerNameIndicatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (i LoadbalancerListenerServerNameIndicatorArray) ToLoadbalancerListenerServerNameIndicatorArrayOutput() LoadbalancerListenerServerNameIndicatorArrayOutput {
	return i.ToLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(context.Background())
}

func (i LoadbalancerListenerServerNameIndicatorArray) ToLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(ctx context.Context) LoadbalancerListenerServerNameIndicatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerServerNameIndicatorArrayOutput)
}

type LoadbalancerListenerServerNameIndicatorOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerServerNameIndicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (o LoadbalancerListenerServerNameIndicatorOutput) ToLoadbalancerListenerServerNameIndicatorOutput() LoadbalancerListenerServerNameIndicatorOutput {
	return o
}

func (o LoadbalancerListenerServerNameIndicatorOutput) ToLoadbalancerListenerServerNameIndicatorOutputWithContext(ctx context.Context) LoadbalancerListenerServerNameIndicatorOutput {
	return o
}

// A domain name to match in order to pass TLS traffic to the target pool in the current listener
func (o LoadbalancerListenerServerNameIndicatorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerListenerServerNameIndicator) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LoadbalancerListenerServerNameIndicatorArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerServerNameIndicatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (o LoadbalancerListenerServerNameIndicatorArrayOutput) ToLoadbalancerListenerServerNameIndicatorArrayOutput() LoadbalancerListenerServerNameIndicatorArrayOutput {
	return o
}

func (o LoadbalancerListenerServerNameIndicatorArrayOutput) ToLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(ctx context.Context) LoadbalancerListenerServerNameIndicatorArrayOutput {
	return o
}

func (o LoadbalancerListenerServerNameIndicatorArrayOutput) Index(i pulumi.IntInput) LoadbalancerListenerServerNameIndicatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadbalancerListenerServerNameIndicator {
		return vs[0].([]LoadbalancerListenerServerNameIndicator)[vs[1].(int)]
	}).(LoadbalancerListenerServerNameIndicatorOutput)
}

type LoadbalancerNetwork struct {
	// Openstack network ID.
	NetworkId string `pulumi:"networkId"`
	// The role defines how the load balancer is using the network. Supported values are: `ROLE_UNSPECIFIED`, `ROLE_LISTENERS_AND_TARGETS`, `ROLE_LISTENERS`, `ROLE_TARGETS`.
	Role string `pulumi:"role"`
}

// LoadbalancerNetworkInput is an input type that accepts LoadbalancerNetworkArgs and LoadbalancerNetworkOutput values.
// You can construct a concrete instance of `LoadbalancerNetworkInput` via:
//
//	LoadbalancerNetworkArgs{...}
type LoadbalancerNetworkInput interface {
	pulumi.Input

	ToLoadbalancerNetworkOutput() LoadbalancerNetworkOutput
	ToLoadbalancerNetworkOutputWithContext(context.Context) LoadbalancerNetworkOutput
}

type LoadbalancerNetworkArgs struct {
	// Openstack network ID.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The role defines how the load balancer is using the network. Supported values are: `ROLE_UNSPECIFIED`, `ROLE_LISTENERS_AND_TARGETS`, `ROLE_LISTENERS`, `ROLE_TARGETS`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (LoadbalancerNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerNetwork)(nil)).Elem()
}

func (i LoadbalancerNetworkArgs) ToLoadbalancerNetworkOutput() LoadbalancerNetworkOutput {
	return i.ToLoadbalancerNetworkOutputWithContext(context.Background())
}

func (i LoadbalancerNetworkArgs) ToLoadbalancerNetworkOutputWithContext(ctx context.Context) LoadbalancerNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerNetworkOutput)
}

// LoadbalancerNetworkArrayInput is an input type that accepts LoadbalancerNetworkArray and LoadbalancerNetworkArrayOutput values.
// You can construct a concrete instance of `LoadbalancerNetworkArrayInput` via:
//
//	LoadbalancerNetworkArray{ LoadbalancerNetworkArgs{...} }
type LoadbalancerNetworkArrayInput interface {
	pulumi.Input

	ToLoadbalancerNetworkArrayOutput() LoadbalancerNetworkArrayOutput
	ToLoadbalancerNetworkArrayOutputWithContext(context.Context) LoadbalancerNetworkArrayOutput
}

type LoadbalancerNetworkArray []LoadbalancerNetworkInput

func (LoadbalancerNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerNetwork)(nil)).Elem()
}

func (i LoadbalancerNetworkArray) ToLoadbalancerNetworkArrayOutput() LoadbalancerNetworkArrayOutput {
	return i.ToLoadbalancerNetworkArrayOutputWithContext(context.Background())
}

func (i LoadbalancerNetworkArray) ToLoadbalancerNetworkArrayOutputWithContext(ctx context.Context) LoadbalancerNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerNetworkArrayOutput)
}

type LoadbalancerNetworkOutput struct{ *pulumi.OutputState }

func (LoadbalancerNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerNetwork)(nil)).Elem()
}

func (o LoadbalancerNetworkOutput) ToLoadbalancerNetworkOutput() LoadbalancerNetworkOutput {
	return o
}

func (o LoadbalancerNetworkOutput) ToLoadbalancerNetworkOutputWithContext(ctx context.Context) LoadbalancerNetworkOutput {
	return o
}

// Openstack network ID.
func (o LoadbalancerNetworkOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerNetwork) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The role defines how the load balancer is using the network. Supported values are: `ROLE_UNSPECIFIED`, `ROLE_LISTENERS_AND_TARGETS`, `ROLE_LISTENERS`, `ROLE_TARGETS`.
func (o LoadbalancerNetworkOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerNetwork) string { return v.Role }).(pulumi.StringOutput)
}

type LoadbalancerNetworkArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerNetwork)(nil)).Elem()
}

func (o LoadbalancerNetworkArrayOutput) ToLoadbalancerNetworkArrayOutput() LoadbalancerNetworkArrayOutput {
	return o
}

func (o LoadbalancerNetworkArrayOutput) ToLoadbalancerNetworkArrayOutputWithContext(ctx context.Context) LoadbalancerNetworkArrayOutput {
	return o
}

func (o LoadbalancerNetworkArrayOutput) Index(i pulumi.IntInput) LoadbalancerNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadbalancerNetwork {
		return vs[0].([]LoadbalancerNetwork)[vs[1].(int)]
	}).(LoadbalancerNetworkOutput)
}

type LoadbalancerOptions struct {
	// Load Balancer is accessible only from an IP address in this range.
	Acls []string `pulumi:"acls"`
	// We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.
	Observability *LoadbalancerOptionsObservability `pulumi:"observability"`
	// If true, Load Balancer is accessible only via a private network IP address.
	PrivateNetworkOnly *bool `pulumi:"privateNetworkOnly"`
}

// LoadbalancerOptionsInput is an input type that accepts LoadbalancerOptionsArgs and LoadbalancerOptionsOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsInput` via:
//
//	LoadbalancerOptionsArgs{...}
type LoadbalancerOptionsInput interface {
	pulumi.Input

	ToLoadbalancerOptionsOutput() LoadbalancerOptionsOutput
	ToLoadbalancerOptionsOutputWithContext(context.Context) LoadbalancerOptionsOutput
}

type LoadbalancerOptionsArgs struct {
	// Load Balancer is accessible only from an IP address in this range.
	Acls pulumi.StringArrayInput `pulumi:"acls"`
	// We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.
	Observability LoadbalancerOptionsObservabilityPtrInput `pulumi:"observability"`
	// If true, Load Balancer is accessible only via a private network IP address.
	PrivateNetworkOnly pulumi.BoolPtrInput `pulumi:"privateNetworkOnly"`
}

func (LoadbalancerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptions)(nil)).Elem()
}

func (i LoadbalancerOptionsArgs) ToLoadbalancerOptionsOutput() LoadbalancerOptionsOutput {
	return i.ToLoadbalancerOptionsOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsArgs) ToLoadbalancerOptionsOutputWithContext(ctx context.Context) LoadbalancerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsOutput)
}

func (i LoadbalancerOptionsArgs) ToLoadbalancerOptionsPtrOutput() LoadbalancerOptionsPtrOutput {
	return i.ToLoadbalancerOptionsPtrOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsArgs) ToLoadbalancerOptionsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsOutput).ToLoadbalancerOptionsPtrOutputWithContext(ctx)
}

// LoadbalancerOptionsPtrInput is an input type that accepts LoadbalancerOptionsArgs, LoadbalancerOptionsPtr and LoadbalancerOptionsPtrOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsPtrInput` via:
//
//	        LoadbalancerOptionsArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerOptionsPtrInput interface {
	pulumi.Input

	ToLoadbalancerOptionsPtrOutput() LoadbalancerOptionsPtrOutput
	ToLoadbalancerOptionsPtrOutputWithContext(context.Context) LoadbalancerOptionsPtrOutput
}

type loadbalancerOptionsPtrType LoadbalancerOptionsArgs

func LoadbalancerOptionsPtr(v *LoadbalancerOptionsArgs) LoadbalancerOptionsPtrInput {
	return (*loadbalancerOptionsPtrType)(v)
}

func (*loadbalancerOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptions)(nil)).Elem()
}

func (i *loadbalancerOptionsPtrType) ToLoadbalancerOptionsPtrOutput() LoadbalancerOptionsPtrOutput {
	return i.ToLoadbalancerOptionsPtrOutputWithContext(context.Background())
}

func (i *loadbalancerOptionsPtrType) ToLoadbalancerOptionsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsPtrOutput)
}

type LoadbalancerOptionsOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptions)(nil)).Elem()
}

func (o LoadbalancerOptionsOutput) ToLoadbalancerOptionsOutput() LoadbalancerOptionsOutput {
	return o
}

func (o LoadbalancerOptionsOutput) ToLoadbalancerOptionsOutputWithContext(ctx context.Context) LoadbalancerOptionsOutput {
	return o
}

func (o LoadbalancerOptionsOutput) ToLoadbalancerOptionsPtrOutput() LoadbalancerOptionsPtrOutput {
	return o.ToLoadbalancerOptionsPtrOutputWithContext(context.Background())
}

func (o LoadbalancerOptionsOutput) ToLoadbalancerOptionsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerOptions) *LoadbalancerOptions {
		return &v
	}).(LoadbalancerOptionsPtrOutput)
}

// Load Balancer is accessible only from an IP address in this range.
func (o LoadbalancerOptionsOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadbalancerOptions) []string { return v.Acls }).(pulumi.StringArrayOutput)
}

// We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.
func (o LoadbalancerOptionsOutput) Observability() LoadbalancerOptionsObservabilityPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptions) *LoadbalancerOptionsObservability { return v.Observability }).(LoadbalancerOptionsObservabilityPtrOutput)
}

// If true, Load Balancer is accessible only via a private network IP address.
func (o LoadbalancerOptionsOutput) PrivateNetworkOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptions) *bool { return v.PrivateNetworkOnly }).(pulumi.BoolPtrOutput)
}

type LoadbalancerOptionsPtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptions)(nil)).Elem()
}

func (o LoadbalancerOptionsPtrOutput) ToLoadbalancerOptionsPtrOutput() LoadbalancerOptionsPtrOutput {
	return o
}

func (o LoadbalancerOptionsPtrOutput) ToLoadbalancerOptionsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsPtrOutput {
	return o
}

func (o LoadbalancerOptionsPtrOutput) Elem() LoadbalancerOptionsOutput {
	return o.ApplyT(func(v *LoadbalancerOptions) LoadbalancerOptions {
		if v != nil {
			return *v
		}
		var ret LoadbalancerOptions
		return ret
	}).(LoadbalancerOptionsOutput)
}

// Load Balancer is accessible only from an IP address in this range.
func (o LoadbalancerOptionsPtrOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerOptions) []string {
		if v == nil {
			return nil
		}
		return v.Acls
	}).(pulumi.StringArrayOutput)
}

// We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.
func (o LoadbalancerOptionsPtrOutput) Observability() LoadbalancerOptionsObservabilityPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptions) *LoadbalancerOptionsObservability {
		if v == nil {
			return nil
		}
		return v.Observability
	}).(LoadbalancerOptionsObservabilityPtrOutput)
}

// If true, Load Balancer is accessible only via a private network IP address.
func (o LoadbalancerOptionsPtrOutput) PrivateNetworkOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateNetworkOnly
	}).(pulumi.BoolPtrOutput)
}

type LoadbalancerOptionsObservability struct {
	// Observability logs configuration. Not changeable after creation.
	Logs *LoadbalancerOptionsObservabilityLogs `pulumi:"logs"`
	// Observability metrics configuration. Not changeable after creation.
	Metrics *LoadbalancerOptionsObservabilityMetrics `pulumi:"metrics"`
}

// LoadbalancerOptionsObservabilityInput is an input type that accepts LoadbalancerOptionsObservabilityArgs and LoadbalancerOptionsObservabilityOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityInput` via:
//
//	LoadbalancerOptionsObservabilityArgs{...}
type LoadbalancerOptionsObservabilityInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityOutput() LoadbalancerOptionsObservabilityOutput
	ToLoadbalancerOptionsObservabilityOutputWithContext(context.Context) LoadbalancerOptionsObservabilityOutput
}

type LoadbalancerOptionsObservabilityArgs struct {
	// Observability logs configuration. Not changeable after creation.
	Logs LoadbalancerOptionsObservabilityLogsPtrInput `pulumi:"logs"`
	// Observability metrics configuration. Not changeable after creation.
	Metrics LoadbalancerOptionsObservabilityMetricsPtrInput `pulumi:"metrics"`
}

func (LoadbalancerOptionsObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservability)(nil)).Elem()
}

func (i LoadbalancerOptionsObservabilityArgs) ToLoadbalancerOptionsObservabilityOutput() LoadbalancerOptionsObservabilityOutput {
	return i.ToLoadbalancerOptionsObservabilityOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityArgs) ToLoadbalancerOptionsObservabilityOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityOutput)
}

func (i LoadbalancerOptionsObservabilityArgs) ToLoadbalancerOptionsObservabilityPtrOutput() LoadbalancerOptionsObservabilityPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityPtrOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityArgs) ToLoadbalancerOptionsObservabilityPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityOutput).ToLoadbalancerOptionsObservabilityPtrOutputWithContext(ctx)
}

// LoadbalancerOptionsObservabilityPtrInput is an input type that accepts LoadbalancerOptionsObservabilityArgs, LoadbalancerOptionsObservabilityPtr and LoadbalancerOptionsObservabilityPtrOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityPtrInput` via:
//
//	        LoadbalancerOptionsObservabilityArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerOptionsObservabilityPtrInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityPtrOutput() LoadbalancerOptionsObservabilityPtrOutput
	ToLoadbalancerOptionsObservabilityPtrOutputWithContext(context.Context) LoadbalancerOptionsObservabilityPtrOutput
}

type loadbalancerOptionsObservabilityPtrType LoadbalancerOptionsObservabilityArgs

func LoadbalancerOptionsObservabilityPtr(v *LoadbalancerOptionsObservabilityArgs) LoadbalancerOptionsObservabilityPtrInput {
	return (*loadbalancerOptionsObservabilityPtrType)(v)
}

func (*loadbalancerOptionsObservabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservability)(nil)).Elem()
}

func (i *loadbalancerOptionsObservabilityPtrType) ToLoadbalancerOptionsObservabilityPtrOutput() LoadbalancerOptionsObservabilityPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityPtrOutputWithContext(context.Background())
}

func (i *loadbalancerOptionsObservabilityPtrType) ToLoadbalancerOptionsObservabilityPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityPtrOutput)
}

type LoadbalancerOptionsObservabilityOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservability)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityOutput) ToLoadbalancerOptionsObservabilityOutput() LoadbalancerOptionsObservabilityOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityOutput) ToLoadbalancerOptionsObservabilityOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityOutput) ToLoadbalancerOptionsObservabilityPtrOutput() LoadbalancerOptionsObservabilityPtrOutput {
	return o.ToLoadbalancerOptionsObservabilityPtrOutputWithContext(context.Background())
}

func (o LoadbalancerOptionsObservabilityOutput) ToLoadbalancerOptionsObservabilityPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerOptionsObservability) *LoadbalancerOptionsObservability {
		return &v
	}).(LoadbalancerOptionsObservabilityPtrOutput)
}

// Observability logs configuration. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityOutput) Logs() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservability) *LoadbalancerOptionsObservabilityLogs { return v.Logs }).(LoadbalancerOptionsObservabilityLogsPtrOutput)
}

// Observability metrics configuration. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityOutput) Metrics() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservability) *LoadbalancerOptionsObservabilityMetrics { return v.Metrics }).(LoadbalancerOptionsObservabilityMetricsPtrOutput)
}

type LoadbalancerOptionsObservabilityPtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservability)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityPtrOutput) ToLoadbalancerOptionsObservabilityPtrOutput() LoadbalancerOptionsObservabilityPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityPtrOutput) ToLoadbalancerOptionsObservabilityPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityPtrOutput) Elem() LoadbalancerOptionsObservabilityOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservability) LoadbalancerOptionsObservability {
		if v != nil {
			return *v
		}
		var ret LoadbalancerOptionsObservability
		return ret
	}).(LoadbalancerOptionsObservabilityOutput)
}

// Observability logs configuration. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityPtrOutput) Logs() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservability) *LoadbalancerOptionsObservabilityLogs {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(LoadbalancerOptionsObservabilityLogsPtrOutput)
}

// Observability metrics configuration. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityPtrOutput) Metrics() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservability) *LoadbalancerOptionsObservabilityMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(LoadbalancerOptionsObservabilityMetricsPtrOutput)
}

type LoadbalancerOptionsObservabilityLogs struct {
	// Credentials reference for logs. Not changeable after creation.
	CredentialsRef *string `pulumi:"credentialsRef"`
	// Credentials reference for logs. Not changeable after creation.
	PushUrl *string `pulumi:"pushUrl"`
}

// LoadbalancerOptionsObservabilityLogsInput is an input type that accepts LoadbalancerOptionsObservabilityLogsArgs and LoadbalancerOptionsObservabilityLogsOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityLogsInput` via:
//
//	LoadbalancerOptionsObservabilityLogsArgs{...}
type LoadbalancerOptionsObservabilityLogsInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityLogsOutput() LoadbalancerOptionsObservabilityLogsOutput
	ToLoadbalancerOptionsObservabilityLogsOutputWithContext(context.Context) LoadbalancerOptionsObservabilityLogsOutput
}

type LoadbalancerOptionsObservabilityLogsArgs struct {
	// Credentials reference for logs. Not changeable after creation.
	CredentialsRef pulumi.StringPtrInput `pulumi:"credentialsRef"`
	// Credentials reference for logs. Not changeable after creation.
	PushUrl pulumi.StringPtrInput `pulumi:"pushUrl"`
}

func (LoadbalancerOptionsObservabilityLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (i LoadbalancerOptionsObservabilityLogsArgs) ToLoadbalancerOptionsObservabilityLogsOutput() LoadbalancerOptionsObservabilityLogsOutput {
	return i.ToLoadbalancerOptionsObservabilityLogsOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityLogsArgs) ToLoadbalancerOptionsObservabilityLogsOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityLogsOutput)
}

func (i LoadbalancerOptionsObservabilityLogsArgs) ToLoadbalancerOptionsObservabilityLogsPtrOutput() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityLogsArgs) ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityLogsOutput).ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(ctx)
}

// LoadbalancerOptionsObservabilityLogsPtrInput is an input type that accepts LoadbalancerOptionsObservabilityLogsArgs, LoadbalancerOptionsObservabilityLogsPtr and LoadbalancerOptionsObservabilityLogsPtrOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityLogsPtrInput` via:
//
//	        LoadbalancerOptionsObservabilityLogsArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerOptionsObservabilityLogsPtrInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityLogsPtrOutput() LoadbalancerOptionsObservabilityLogsPtrOutput
	ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(context.Context) LoadbalancerOptionsObservabilityLogsPtrOutput
}

type loadbalancerOptionsObservabilityLogsPtrType LoadbalancerOptionsObservabilityLogsArgs

func LoadbalancerOptionsObservabilityLogsPtr(v *LoadbalancerOptionsObservabilityLogsArgs) LoadbalancerOptionsObservabilityLogsPtrInput {
	return (*loadbalancerOptionsObservabilityLogsPtrType)(v)
}

func (*loadbalancerOptionsObservabilityLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (i *loadbalancerOptionsObservabilityLogsPtrType) ToLoadbalancerOptionsObservabilityLogsPtrOutput() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(context.Background())
}

func (i *loadbalancerOptionsObservabilityLogsPtrType) ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityLogsPtrOutput)
}

type LoadbalancerOptionsObservabilityLogsOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityLogsOutput) ToLoadbalancerOptionsObservabilityLogsOutput() LoadbalancerOptionsObservabilityLogsOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityLogsOutput) ToLoadbalancerOptionsObservabilityLogsOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityLogsOutput) ToLoadbalancerOptionsObservabilityLogsPtrOutput() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o.ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(context.Background())
}

func (o LoadbalancerOptionsObservabilityLogsOutput) ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerOptionsObservabilityLogs) *LoadbalancerOptionsObservabilityLogs {
		return &v
	}).(LoadbalancerOptionsObservabilityLogsPtrOutput)
}

// Credentials reference for logs. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityLogsOutput) CredentialsRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservabilityLogs) *string { return v.CredentialsRef }).(pulumi.StringPtrOutput)
}

// Credentials reference for logs. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityLogsOutput) PushUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservabilityLogs) *string { return v.PushUrl }).(pulumi.StringPtrOutput)
}

type LoadbalancerOptionsObservabilityLogsPtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityLogsPtrOutput) ToLoadbalancerOptionsObservabilityLogsPtrOutput() LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityLogsPtrOutput) ToLoadbalancerOptionsObservabilityLogsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityLogsPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityLogsPtrOutput) Elem() LoadbalancerOptionsObservabilityLogsOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityLogs) LoadbalancerOptionsObservabilityLogs {
		if v != nil {
			return *v
		}
		var ret LoadbalancerOptionsObservabilityLogs
		return ret
	}).(LoadbalancerOptionsObservabilityLogsOutput)
}

// Credentials reference for logs. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityLogsPtrOutput) CredentialsRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityLogs) *string {
		if v == nil {
			return nil
		}
		return v.CredentialsRef
	}).(pulumi.StringPtrOutput)
}

// Credentials reference for logs. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityLogsPtrOutput) PushUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityLogs) *string {
		if v == nil {
			return nil
		}
		return v.PushUrl
	}).(pulumi.StringPtrOutput)
}

type LoadbalancerOptionsObservabilityMetrics struct {
	// Credentials reference for metrics. Not changeable after creation.
	CredentialsRef *string `pulumi:"credentialsRef"`
	// Credentials reference for metrics. Not changeable after creation.
	PushUrl *string `pulumi:"pushUrl"`
}

// LoadbalancerOptionsObservabilityMetricsInput is an input type that accepts LoadbalancerOptionsObservabilityMetricsArgs and LoadbalancerOptionsObservabilityMetricsOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityMetricsInput` via:
//
//	LoadbalancerOptionsObservabilityMetricsArgs{...}
type LoadbalancerOptionsObservabilityMetricsInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityMetricsOutput() LoadbalancerOptionsObservabilityMetricsOutput
	ToLoadbalancerOptionsObservabilityMetricsOutputWithContext(context.Context) LoadbalancerOptionsObservabilityMetricsOutput
}

type LoadbalancerOptionsObservabilityMetricsArgs struct {
	// Credentials reference for metrics. Not changeable after creation.
	CredentialsRef pulumi.StringPtrInput `pulumi:"credentialsRef"`
	// Credentials reference for metrics. Not changeable after creation.
	PushUrl pulumi.StringPtrInput `pulumi:"pushUrl"`
}

func (LoadbalancerOptionsObservabilityMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (i LoadbalancerOptionsObservabilityMetricsArgs) ToLoadbalancerOptionsObservabilityMetricsOutput() LoadbalancerOptionsObservabilityMetricsOutput {
	return i.ToLoadbalancerOptionsObservabilityMetricsOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityMetricsArgs) ToLoadbalancerOptionsObservabilityMetricsOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityMetricsOutput)
}

func (i LoadbalancerOptionsObservabilityMetricsArgs) ToLoadbalancerOptionsObservabilityMetricsPtrOutput() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(context.Background())
}

func (i LoadbalancerOptionsObservabilityMetricsArgs) ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityMetricsOutput).ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(ctx)
}

// LoadbalancerOptionsObservabilityMetricsPtrInput is an input type that accepts LoadbalancerOptionsObservabilityMetricsArgs, LoadbalancerOptionsObservabilityMetricsPtr and LoadbalancerOptionsObservabilityMetricsPtrOutput values.
// You can construct a concrete instance of `LoadbalancerOptionsObservabilityMetricsPtrInput` via:
//
//	        LoadbalancerOptionsObservabilityMetricsArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerOptionsObservabilityMetricsPtrInput interface {
	pulumi.Input

	ToLoadbalancerOptionsObservabilityMetricsPtrOutput() LoadbalancerOptionsObservabilityMetricsPtrOutput
	ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(context.Context) LoadbalancerOptionsObservabilityMetricsPtrOutput
}

type loadbalancerOptionsObservabilityMetricsPtrType LoadbalancerOptionsObservabilityMetricsArgs

func LoadbalancerOptionsObservabilityMetricsPtr(v *LoadbalancerOptionsObservabilityMetricsArgs) LoadbalancerOptionsObservabilityMetricsPtrInput {
	return (*loadbalancerOptionsObservabilityMetricsPtrType)(v)
}

func (*loadbalancerOptionsObservabilityMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (i *loadbalancerOptionsObservabilityMetricsPtrType) ToLoadbalancerOptionsObservabilityMetricsPtrOutput() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return i.ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(context.Background())
}

func (i *loadbalancerOptionsObservabilityMetricsPtrType) ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOptionsObservabilityMetricsPtrOutput)
}

type LoadbalancerOptionsObservabilityMetricsOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityMetricsOutput) ToLoadbalancerOptionsObservabilityMetricsOutput() LoadbalancerOptionsObservabilityMetricsOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityMetricsOutput) ToLoadbalancerOptionsObservabilityMetricsOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityMetricsOutput) ToLoadbalancerOptionsObservabilityMetricsPtrOutput() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o.ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(context.Background())
}

func (o LoadbalancerOptionsObservabilityMetricsOutput) ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerOptionsObservabilityMetrics) *LoadbalancerOptionsObservabilityMetrics {
		return &v
	}).(LoadbalancerOptionsObservabilityMetricsPtrOutput)
}

// Credentials reference for metrics. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityMetricsOutput) CredentialsRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservabilityMetrics) *string { return v.CredentialsRef }).(pulumi.StringPtrOutput)
}

// Credentials reference for metrics. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityMetricsOutput) PushUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerOptionsObservabilityMetrics) *string { return v.PushUrl }).(pulumi.StringPtrOutput)
}

type LoadbalancerOptionsObservabilityMetricsPtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerOptionsObservabilityMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (o LoadbalancerOptionsObservabilityMetricsPtrOutput) ToLoadbalancerOptionsObservabilityMetricsPtrOutput() LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityMetricsPtrOutput) ToLoadbalancerOptionsObservabilityMetricsPtrOutputWithContext(ctx context.Context) LoadbalancerOptionsObservabilityMetricsPtrOutput {
	return o
}

func (o LoadbalancerOptionsObservabilityMetricsPtrOutput) Elem() LoadbalancerOptionsObservabilityMetricsOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityMetrics) LoadbalancerOptionsObservabilityMetrics {
		if v != nil {
			return *v
		}
		var ret LoadbalancerOptionsObservabilityMetrics
		return ret
	}).(LoadbalancerOptionsObservabilityMetricsOutput)
}

// Credentials reference for metrics. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityMetricsPtrOutput) CredentialsRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityMetrics) *string {
		if v == nil {
			return nil
		}
		return v.CredentialsRef
	}).(pulumi.StringPtrOutput)
}

// Credentials reference for metrics. Not changeable after creation.
func (o LoadbalancerOptionsObservabilityMetricsPtrOutput) PushUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerOptionsObservabilityMetrics) *string {
		if v == nil {
			return nil
		}
		return v.PushUrl
	}).(pulumi.StringPtrOutput)
}

type LoadbalancerTargetPool struct {
	ActiveHealthCheck *LoadbalancerTargetPoolActiveHealthCheck `pulumi:"activeHealthCheck"`
	// Target pool name.
	Name string `pulumi:"name"`
	// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
	SessionPersistence *LoadbalancerTargetPoolSessionPersistence `pulumi:"sessionPersistence"`
	// Identical port number where each target listens for traffic.
	TargetPort int `pulumi:"targetPort"`
	// List of all targets which will be used in the pool. Limited to 1000.
	Targets []LoadbalancerTargetPoolTarget `pulumi:"targets"`
}

// LoadbalancerTargetPoolInput is an input type that accepts LoadbalancerTargetPoolArgs and LoadbalancerTargetPoolOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolInput` via:
//
//	LoadbalancerTargetPoolArgs{...}
type LoadbalancerTargetPoolInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolOutput() LoadbalancerTargetPoolOutput
	ToLoadbalancerTargetPoolOutputWithContext(context.Context) LoadbalancerTargetPoolOutput
}

type LoadbalancerTargetPoolArgs struct {
	ActiveHealthCheck LoadbalancerTargetPoolActiveHealthCheckPtrInput `pulumi:"activeHealthCheck"`
	// Target pool name.
	Name pulumi.StringInput `pulumi:"name"`
	// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
	SessionPersistence LoadbalancerTargetPoolSessionPersistencePtrInput `pulumi:"sessionPersistence"`
	// Identical port number where each target listens for traffic.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
	// List of all targets which will be used in the pool. Limited to 1000.
	Targets LoadbalancerTargetPoolTargetArrayInput `pulumi:"targets"`
}

func (LoadbalancerTargetPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPool)(nil)).Elem()
}

func (i LoadbalancerTargetPoolArgs) ToLoadbalancerTargetPoolOutput() LoadbalancerTargetPoolOutput {
	return i.ToLoadbalancerTargetPoolOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolArgs) ToLoadbalancerTargetPoolOutputWithContext(ctx context.Context) LoadbalancerTargetPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolOutput)
}

// LoadbalancerTargetPoolArrayInput is an input type that accepts LoadbalancerTargetPoolArray and LoadbalancerTargetPoolArrayOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolArrayInput` via:
//
//	LoadbalancerTargetPoolArray{ LoadbalancerTargetPoolArgs{...} }
type LoadbalancerTargetPoolArrayInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolArrayOutput() LoadbalancerTargetPoolArrayOutput
	ToLoadbalancerTargetPoolArrayOutputWithContext(context.Context) LoadbalancerTargetPoolArrayOutput
}

type LoadbalancerTargetPoolArray []LoadbalancerTargetPoolInput

func (LoadbalancerTargetPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerTargetPool)(nil)).Elem()
}

func (i LoadbalancerTargetPoolArray) ToLoadbalancerTargetPoolArrayOutput() LoadbalancerTargetPoolArrayOutput {
	return i.ToLoadbalancerTargetPoolArrayOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolArray) ToLoadbalancerTargetPoolArrayOutputWithContext(ctx context.Context) LoadbalancerTargetPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolArrayOutput)
}

type LoadbalancerTargetPoolOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPool)(nil)).Elem()
}

func (o LoadbalancerTargetPoolOutput) ToLoadbalancerTargetPoolOutput() LoadbalancerTargetPoolOutput {
	return o
}

func (o LoadbalancerTargetPoolOutput) ToLoadbalancerTargetPoolOutputWithContext(ctx context.Context) LoadbalancerTargetPoolOutput {
	return o
}

func (o LoadbalancerTargetPoolOutput) ActiveHealthCheck() LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPool) *LoadbalancerTargetPoolActiveHealthCheck { return v.ActiveHealthCheck }).(LoadbalancerTargetPoolActiveHealthCheckPtrOutput)
}

// Target pool name.
func (o LoadbalancerTargetPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerTargetPool) string { return v.Name }).(pulumi.StringOutput)
}

// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
func (o LoadbalancerTargetPoolOutput) SessionPersistence() LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPool) *LoadbalancerTargetPoolSessionPersistence { return v.SessionPersistence }).(LoadbalancerTargetPoolSessionPersistencePtrOutput)
}

// Identical port number where each target listens for traffic.
func (o LoadbalancerTargetPoolOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v LoadbalancerTargetPool) int { return v.TargetPort }).(pulumi.IntOutput)
}

// List of all targets which will be used in the pool. Limited to 1000.
func (o LoadbalancerTargetPoolOutput) Targets() LoadbalancerTargetPoolTargetArrayOutput {
	return o.ApplyT(func(v LoadbalancerTargetPool) []LoadbalancerTargetPoolTarget { return v.Targets }).(LoadbalancerTargetPoolTargetArrayOutput)
}

type LoadbalancerTargetPoolArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerTargetPool)(nil)).Elem()
}

func (o LoadbalancerTargetPoolArrayOutput) ToLoadbalancerTargetPoolArrayOutput() LoadbalancerTargetPoolArrayOutput {
	return o
}

func (o LoadbalancerTargetPoolArrayOutput) ToLoadbalancerTargetPoolArrayOutputWithContext(ctx context.Context) LoadbalancerTargetPoolArrayOutput {
	return o
}

func (o LoadbalancerTargetPoolArrayOutput) Index(i pulumi.IntInput) LoadbalancerTargetPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadbalancerTargetPool {
		return vs[0].([]LoadbalancerTargetPool)[vs[1].(int)]
	}).(LoadbalancerTargetPoolOutput)
}

type LoadbalancerTargetPoolActiveHealthCheck struct {
	// Healthy threshold of the health checking.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Interval duration of health checking in seconds.
	Interval *string `pulumi:"interval"`
	// Interval duration threshold of the health checking in seconds.
	IntervalJitter *string `pulumi:"intervalJitter"`
	// Active health checking timeout duration in seconds.
	Timeout *string `pulumi:"timeout"`
	// Unhealthy threshold of the health checking.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// LoadbalancerTargetPoolActiveHealthCheckInput is an input type that accepts LoadbalancerTargetPoolActiveHealthCheckArgs and LoadbalancerTargetPoolActiveHealthCheckOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolActiveHealthCheckInput` via:
//
//	LoadbalancerTargetPoolActiveHealthCheckArgs{...}
type LoadbalancerTargetPoolActiveHealthCheckInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolActiveHealthCheckOutput() LoadbalancerTargetPoolActiveHealthCheckOutput
	ToLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(context.Context) LoadbalancerTargetPoolActiveHealthCheckOutput
}

type LoadbalancerTargetPoolActiveHealthCheckArgs struct {
	// Healthy threshold of the health checking.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// Interval duration of health checking in seconds.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Interval duration threshold of the health checking in seconds.
	IntervalJitter pulumi.StringPtrInput `pulumi:"intervalJitter"`
	// Active health checking timeout duration in seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Unhealthy threshold of the health checking.
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
}

func (LoadbalancerTargetPoolActiveHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (i LoadbalancerTargetPoolActiveHealthCheckArgs) ToLoadbalancerTargetPoolActiveHealthCheckOutput() LoadbalancerTargetPoolActiveHealthCheckOutput {
	return i.ToLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolActiveHealthCheckArgs) ToLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolActiveHealthCheckOutput)
}

func (i LoadbalancerTargetPoolActiveHealthCheckArgs) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutput() LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return i.ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolActiveHealthCheckArgs) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolActiveHealthCheckOutput).ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(ctx)
}

// LoadbalancerTargetPoolActiveHealthCheckPtrInput is an input type that accepts LoadbalancerTargetPoolActiveHealthCheckArgs, LoadbalancerTargetPoolActiveHealthCheckPtr and LoadbalancerTargetPoolActiveHealthCheckPtrOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolActiveHealthCheckPtrInput` via:
//
//	        LoadbalancerTargetPoolActiveHealthCheckArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerTargetPoolActiveHealthCheckPtrInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolActiveHealthCheckPtrOutput() LoadbalancerTargetPoolActiveHealthCheckPtrOutput
	ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(context.Context) LoadbalancerTargetPoolActiveHealthCheckPtrOutput
}

type loadbalancerTargetPoolActiveHealthCheckPtrType LoadbalancerTargetPoolActiveHealthCheckArgs

func LoadbalancerTargetPoolActiveHealthCheckPtr(v *LoadbalancerTargetPoolActiveHealthCheckArgs) LoadbalancerTargetPoolActiveHealthCheckPtrInput {
	return (*loadbalancerTargetPoolActiveHealthCheckPtrType)(v)
}

func (*loadbalancerTargetPoolActiveHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (i *loadbalancerTargetPoolActiveHealthCheckPtrType) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutput() LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return i.ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(context.Background())
}

func (i *loadbalancerTargetPoolActiveHealthCheckPtrType) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolActiveHealthCheckPtrOutput)
}

type LoadbalancerTargetPoolActiveHealthCheckOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolActiveHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (o LoadbalancerTargetPoolActiveHealthCheckOutput) ToLoadbalancerTargetPoolActiveHealthCheckOutput() LoadbalancerTargetPoolActiveHealthCheckOutput {
	return o
}

func (o LoadbalancerTargetPoolActiveHealthCheckOutput) ToLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckOutput {
	return o
}

func (o LoadbalancerTargetPoolActiveHealthCheckOutput) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutput() LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return o.ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(context.Background())
}

func (o LoadbalancerTargetPoolActiveHealthCheckOutput) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerTargetPoolActiveHealthCheck) *LoadbalancerTargetPoolActiveHealthCheck {
		return &v
	}).(LoadbalancerTargetPoolActiveHealthCheckPtrOutput)
}

// Healthy threshold of the health checking.
func (o LoadbalancerTargetPoolActiveHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolActiveHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// Interval duration of health checking in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolActiveHealthCheck) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Interval duration threshold of the health checking in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckOutput) IntervalJitter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolActiveHealthCheck) *string { return v.IntervalJitter }).(pulumi.StringPtrOutput)
}

// Active health checking timeout duration in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolActiveHealthCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Unhealthy threshold of the health checking.
func (o LoadbalancerTargetPoolActiveHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolActiveHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

type LoadbalancerTargetPoolActiveHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolActiveHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutput() LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return o
}

func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) ToLoadbalancerTargetPoolActiveHealthCheckPtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolActiveHealthCheckPtrOutput {
	return o
}

func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) Elem() LoadbalancerTargetPoolActiveHealthCheckOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) LoadbalancerTargetPoolActiveHealthCheck {
		if v != nil {
			return *v
		}
		var ret LoadbalancerTargetPoolActiveHealthCheck
		return ret
	}).(LoadbalancerTargetPoolActiveHealthCheckOutput)
}

// Healthy threshold of the health checking.
func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// Interval duration of health checking in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Interval duration threshold of the health checking in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) IntervalJitter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.IntervalJitter
	}).(pulumi.StringPtrOutput)
}

// Active health checking timeout duration in seconds.
func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Unhealthy threshold of the health checking.
func (o LoadbalancerTargetPoolActiveHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolActiveHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

type LoadbalancerTargetPoolSessionPersistence struct {
	// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
	UseSourceIpAddress *bool `pulumi:"useSourceIpAddress"`
}

// LoadbalancerTargetPoolSessionPersistenceInput is an input type that accepts LoadbalancerTargetPoolSessionPersistenceArgs and LoadbalancerTargetPoolSessionPersistenceOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolSessionPersistenceInput` via:
//
//	LoadbalancerTargetPoolSessionPersistenceArgs{...}
type LoadbalancerTargetPoolSessionPersistenceInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolSessionPersistenceOutput() LoadbalancerTargetPoolSessionPersistenceOutput
	ToLoadbalancerTargetPoolSessionPersistenceOutputWithContext(context.Context) LoadbalancerTargetPoolSessionPersistenceOutput
}

type LoadbalancerTargetPoolSessionPersistenceArgs struct {
	// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
	UseSourceIpAddress pulumi.BoolPtrInput `pulumi:"useSourceIpAddress"`
}

func (LoadbalancerTargetPoolSessionPersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (i LoadbalancerTargetPoolSessionPersistenceArgs) ToLoadbalancerTargetPoolSessionPersistenceOutput() LoadbalancerTargetPoolSessionPersistenceOutput {
	return i.ToLoadbalancerTargetPoolSessionPersistenceOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolSessionPersistenceArgs) ToLoadbalancerTargetPoolSessionPersistenceOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolSessionPersistenceOutput)
}

func (i LoadbalancerTargetPoolSessionPersistenceArgs) ToLoadbalancerTargetPoolSessionPersistencePtrOutput() LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return i.ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolSessionPersistenceArgs) ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolSessionPersistenceOutput).ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx)
}

// LoadbalancerTargetPoolSessionPersistencePtrInput is an input type that accepts LoadbalancerTargetPoolSessionPersistenceArgs, LoadbalancerTargetPoolSessionPersistencePtr and LoadbalancerTargetPoolSessionPersistencePtrOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolSessionPersistencePtrInput` via:
//
//	        LoadbalancerTargetPoolSessionPersistenceArgs{...}
//
//	or:
//
//	        nil
type LoadbalancerTargetPoolSessionPersistencePtrInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolSessionPersistencePtrOutput() LoadbalancerTargetPoolSessionPersistencePtrOutput
	ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Context) LoadbalancerTargetPoolSessionPersistencePtrOutput
}

type loadbalancerTargetPoolSessionPersistencePtrType LoadbalancerTargetPoolSessionPersistenceArgs

func LoadbalancerTargetPoolSessionPersistencePtr(v *LoadbalancerTargetPoolSessionPersistenceArgs) LoadbalancerTargetPoolSessionPersistencePtrInput {
	return (*loadbalancerTargetPoolSessionPersistencePtrType)(v)
}

func (*loadbalancerTargetPoolSessionPersistencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (i *loadbalancerTargetPoolSessionPersistencePtrType) ToLoadbalancerTargetPoolSessionPersistencePtrOutput() LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return i.ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (i *loadbalancerTargetPoolSessionPersistencePtrType) ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolSessionPersistencePtrOutput)
}

type LoadbalancerTargetPoolSessionPersistenceOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolSessionPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (o LoadbalancerTargetPoolSessionPersistenceOutput) ToLoadbalancerTargetPoolSessionPersistenceOutput() LoadbalancerTargetPoolSessionPersistenceOutput {
	return o
}

func (o LoadbalancerTargetPoolSessionPersistenceOutput) ToLoadbalancerTargetPoolSessionPersistenceOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistenceOutput {
	return o
}

func (o LoadbalancerTargetPoolSessionPersistenceOutput) ToLoadbalancerTargetPoolSessionPersistencePtrOutput() LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (o LoadbalancerTargetPoolSessionPersistenceOutput) ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadbalancerTargetPoolSessionPersistence) *LoadbalancerTargetPoolSessionPersistence {
		return &v
	}).(LoadbalancerTargetPoolSessionPersistencePtrOutput)
}

// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
func (o LoadbalancerTargetPoolSessionPersistenceOutput) UseSourceIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolSessionPersistence) *bool { return v.UseSourceIpAddress }).(pulumi.BoolPtrOutput)
}

type LoadbalancerTargetPoolSessionPersistencePtrOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolSessionPersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (o LoadbalancerTargetPoolSessionPersistencePtrOutput) ToLoadbalancerTargetPoolSessionPersistencePtrOutput() LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o
}

func (o LoadbalancerTargetPoolSessionPersistencePtrOutput) ToLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) LoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o
}

func (o LoadbalancerTargetPoolSessionPersistencePtrOutput) Elem() LoadbalancerTargetPoolSessionPersistenceOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolSessionPersistence) LoadbalancerTargetPoolSessionPersistence {
		if v != nil {
			return *v
		}
		var ret LoadbalancerTargetPoolSessionPersistence
		return ret
	}).(LoadbalancerTargetPoolSessionPersistenceOutput)
}

// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
func (o LoadbalancerTargetPoolSessionPersistencePtrOutput) UseSourceIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerTargetPoolSessionPersistence) *bool {
		if v == nil {
			return nil
		}
		return v.UseSourceIpAddress
	}).(pulumi.BoolPtrOutput)
}

type LoadbalancerTargetPoolTarget struct {
	// Target display name
	DisplayName string `pulumi:"displayName"`
	// Target IP
	Ip string `pulumi:"ip"`
}

// LoadbalancerTargetPoolTargetInput is an input type that accepts LoadbalancerTargetPoolTargetArgs and LoadbalancerTargetPoolTargetOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolTargetInput` via:
//
//	LoadbalancerTargetPoolTargetArgs{...}
type LoadbalancerTargetPoolTargetInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolTargetOutput() LoadbalancerTargetPoolTargetOutput
	ToLoadbalancerTargetPoolTargetOutputWithContext(context.Context) LoadbalancerTargetPoolTargetOutput
}

type LoadbalancerTargetPoolTargetArgs struct {
	// Target display name
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Target IP
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (LoadbalancerTargetPoolTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (i LoadbalancerTargetPoolTargetArgs) ToLoadbalancerTargetPoolTargetOutput() LoadbalancerTargetPoolTargetOutput {
	return i.ToLoadbalancerTargetPoolTargetOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolTargetArgs) ToLoadbalancerTargetPoolTargetOutputWithContext(ctx context.Context) LoadbalancerTargetPoolTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolTargetOutput)
}

// LoadbalancerTargetPoolTargetArrayInput is an input type that accepts LoadbalancerTargetPoolTargetArray and LoadbalancerTargetPoolTargetArrayOutput values.
// You can construct a concrete instance of `LoadbalancerTargetPoolTargetArrayInput` via:
//
//	LoadbalancerTargetPoolTargetArray{ LoadbalancerTargetPoolTargetArgs{...} }
type LoadbalancerTargetPoolTargetArrayInput interface {
	pulumi.Input

	ToLoadbalancerTargetPoolTargetArrayOutput() LoadbalancerTargetPoolTargetArrayOutput
	ToLoadbalancerTargetPoolTargetArrayOutputWithContext(context.Context) LoadbalancerTargetPoolTargetArrayOutput
}

type LoadbalancerTargetPoolTargetArray []LoadbalancerTargetPoolTargetInput

func (LoadbalancerTargetPoolTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (i LoadbalancerTargetPoolTargetArray) ToLoadbalancerTargetPoolTargetArrayOutput() LoadbalancerTargetPoolTargetArrayOutput {
	return i.ToLoadbalancerTargetPoolTargetArrayOutputWithContext(context.Background())
}

func (i LoadbalancerTargetPoolTargetArray) ToLoadbalancerTargetPoolTargetArrayOutputWithContext(ctx context.Context) LoadbalancerTargetPoolTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerTargetPoolTargetArrayOutput)
}

type LoadbalancerTargetPoolTargetOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (o LoadbalancerTargetPoolTargetOutput) ToLoadbalancerTargetPoolTargetOutput() LoadbalancerTargetPoolTargetOutput {
	return o
}

func (o LoadbalancerTargetPoolTargetOutput) ToLoadbalancerTargetPoolTargetOutputWithContext(ctx context.Context) LoadbalancerTargetPoolTargetOutput {
	return o
}

// Target display name
func (o LoadbalancerTargetPoolTargetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolTarget) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Target IP
func (o LoadbalancerTargetPoolTargetOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LoadbalancerTargetPoolTarget) string { return v.Ip }).(pulumi.StringOutput)
}

type LoadbalancerTargetPoolTargetArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerTargetPoolTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (o LoadbalancerTargetPoolTargetArrayOutput) ToLoadbalancerTargetPoolTargetArrayOutput() LoadbalancerTargetPoolTargetArrayOutput {
	return o
}

func (o LoadbalancerTargetPoolTargetArrayOutput) ToLoadbalancerTargetPoolTargetArrayOutputWithContext(ctx context.Context) LoadbalancerTargetPoolTargetArrayOutput {
	return o
}

func (o LoadbalancerTargetPoolTargetArrayOutput) Index(i pulumi.IntInput) LoadbalancerTargetPoolTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadbalancerTargetPoolTarget {
		return vs[0].([]LoadbalancerTargetPoolTarget)[vs[1].(int)]
	}).(LoadbalancerTargetPoolTargetOutput)
}

type LogmeInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring     *bool   `pulumi:"enableMonitoring"`
	FluentdTcp           *int    `pulumi:"fluentdTcp"`
	FluentdTls           *int    `pulumi:"fluentdTls"`
	FluentdTlsCiphers    *string `pulumi:"fluentdTlsCiphers"`
	FluentdTlsMaxVersion *string `pulumi:"fluentdTlsMaxVersion"`
	FluentdTlsMinVersion *string `pulumi:"fluentdTlsMinVersion"`
	FluentdTlsVersion    *string `pulumi:"fluentdTlsVersion"`
	FluentdUdp           *int    `pulumi:"fluentdUdp"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite *string `pulumi:"graphite"`
	// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
	IsmDeletionAfter *string  `pulumi:"ismDeletionAfter"`
	IsmJitter        *float64 `pulumi:"ismJitter"`
	// Jitter of the execution time.
	IsmJobInterval *int `pulumi:"ismJobInterval"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace *int `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace *int `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold *int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency *int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix *string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId   *string  `pulumi:"monitoringInstanceId"`
	OpensearchTlsCiphers   []string `pulumi:"opensearchTlsCiphers"`
	OpensearchTlsProtocols []string `pulumi:"opensearchTlsProtocols"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl *string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
}

// LogmeInstanceParametersInput is an input type that accepts LogmeInstanceParametersArgs and LogmeInstanceParametersOutput values.
// You can construct a concrete instance of `LogmeInstanceParametersInput` via:
//
//	LogmeInstanceParametersArgs{...}
type LogmeInstanceParametersInput interface {
	pulumi.Input

	ToLogmeInstanceParametersOutput() LogmeInstanceParametersOutput
	ToLogmeInstanceParametersOutputWithContext(context.Context) LogmeInstanceParametersOutput
}

type LogmeInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring     pulumi.BoolPtrInput   `pulumi:"enableMonitoring"`
	FluentdTcp           pulumi.IntPtrInput    `pulumi:"fluentdTcp"`
	FluentdTls           pulumi.IntPtrInput    `pulumi:"fluentdTls"`
	FluentdTlsCiphers    pulumi.StringPtrInput `pulumi:"fluentdTlsCiphers"`
	FluentdTlsMaxVersion pulumi.StringPtrInput `pulumi:"fluentdTlsMaxVersion"`
	FluentdTlsMinVersion pulumi.StringPtrInput `pulumi:"fluentdTlsMinVersion"`
	FluentdTlsVersion    pulumi.StringPtrInput `pulumi:"fluentdTlsVersion"`
	FluentdUdp           pulumi.IntPtrInput    `pulumi:"fluentdUdp"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite pulumi.StringPtrInput `pulumi:"graphite"`
	// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
	IsmDeletionAfter pulumi.StringPtrInput  `pulumi:"ismDeletionAfter"`
	IsmJitter        pulumi.Float64PtrInput `pulumi:"ismJitter"`
	// Jitter of the execution time.
	IsmJobInterval pulumi.IntPtrInput `pulumi:"ismJobInterval"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace pulumi.IntPtrInput `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace pulumi.IntPtrInput `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntPtrInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency pulumi.IntPtrInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix pulumi.StringPtrInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId   pulumi.StringPtrInput   `pulumi:"monitoringInstanceId"`
	OpensearchTlsCiphers   pulumi.StringArrayInput `pulumi:"opensearchTlsCiphers"`
	OpensearchTlsProtocols pulumi.StringArrayInput `pulumi:"opensearchTlsProtocols"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringPtrInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
}

func (LogmeInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogmeInstanceParameters)(nil)).Elem()
}

func (i LogmeInstanceParametersArgs) ToLogmeInstanceParametersOutput() LogmeInstanceParametersOutput {
	return i.ToLogmeInstanceParametersOutputWithContext(context.Background())
}

func (i LogmeInstanceParametersArgs) ToLogmeInstanceParametersOutputWithContext(ctx context.Context) LogmeInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceParametersOutput)
}

func (i LogmeInstanceParametersArgs) ToLogmeInstanceParametersPtrOutput() LogmeInstanceParametersPtrOutput {
	return i.ToLogmeInstanceParametersPtrOutputWithContext(context.Background())
}

func (i LogmeInstanceParametersArgs) ToLogmeInstanceParametersPtrOutputWithContext(ctx context.Context) LogmeInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceParametersOutput).ToLogmeInstanceParametersPtrOutputWithContext(ctx)
}

// LogmeInstanceParametersPtrInput is an input type that accepts LogmeInstanceParametersArgs, LogmeInstanceParametersPtr and LogmeInstanceParametersPtrOutput values.
// You can construct a concrete instance of `LogmeInstanceParametersPtrInput` via:
//
//	        LogmeInstanceParametersArgs{...}
//
//	or:
//
//	        nil
type LogmeInstanceParametersPtrInput interface {
	pulumi.Input

	ToLogmeInstanceParametersPtrOutput() LogmeInstanceParametersPtrOutput
	ToLogmeInstanceParametersPtrOutputWithContext(context.Context) LogmeInstanceParametersPtrOutput
}

type logmeInstanceParametersPtrType LogmeInstanceParametersArgs

func LogmeInstanceParametersPtr(v *LogmeInstanceParametersArgs) LogmeInstanceParametersPtrInput {
	return (*logmeInstanceParametersPtrType)(v)
}

func (*logmeInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogmeInstanceParameters)(nil)).Elem()
}

func (i *logmeInstanceParametersPtrType) ToLogmeInstanceParametersPtrOutput() LogmeInstanceParametersPtrOutput {
	return i.ToLogmeInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *logmeInstanceParametersPtrType) ToLogmeInstanceParametersPtrOutputWithContext(ctx context.Context) LogmeInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceParametersPtrOutput)
}

type LogmeInstanceParametersOutput struct{ *pulumi.OutputState }

func (LogmeInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogmeInstanceParameters)(nil)).Elem()
}

func (o LogmeInstanceParametersOutput) ToLogmeInstanceParametersOutput() LogmeInstanceParametersOutput {
	return o
}

func (o LogmeInstanceParametersOutput) ToLogmeInstanceParametersOutputWithContext(ctx context.Context) LogmeInstanceParametersOutput {
	return o
}

func (o LogmeInstanceParametersOutput) ToLogmeInstanceParametersPtrOutput() LogmeInstanceParametersPtrOutput {
	return o.ToLogmeInstanceParametersPtrOutputWithContext(context.Background())
}

func (o LogmeInstanceParametersOutput) ToLogmeInstanceParametersPtrOutputWithContext(ctx context.Context) LogmeInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogmeInstanceParameters) *LogmeInstanceParameters {
		return &v
	}).(LogmeInstanceParametersPtrOutput)
}

// Enable monitoring.
func (o LogmeInstanceParametersOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *bool { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTcp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.FluentdTcp }).(pulumi.IntPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.FluentdTls }).(pulumi.IntPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTlsCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.FluentdTlsCiphers }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTlsMaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.FluentdTlsMaxVersion }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTlsMinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.FluentdTlsMinVersion }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.FluentdTlsVersion }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) FluentdUdp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.FluentdUdp }).(pulumi.IntPtrOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o LogmeInstanceParametersOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.Graphite }).(pulumi.StringPtrOutput)
}

// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
func (o LogmeInstanceParametersOutput) IsmDeletionAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.IsmDeletionAfter }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) IsmJitter() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *float64 { return v.IsmJitter }).(pulumi.Float64PtrOutput)
}

// Jitter of the execution time.
func (o LogmeInstanceParametersOutput) IsmJobInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.IsmJobInterval }).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o LogmeInstanceParametersOutput) JavaHeapspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.JavaHeapspace }).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o LogmeInstanceParametersOutput) JavaMaxmetaspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.JavaMaxmetaspace }).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o LogmeInstanceParametersOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.MaxDiskThreshold }).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o LogmeInstanceParametersOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *int { return v.MetricsFrequency }).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o LogmeInstanceParametersOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.MetricsPrefix }).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o LogmeInstanceParametersOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.MonitoringInstanceId }).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersOutput) OpensearchTlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) []string { return v.OpensearchTlsCiphers }).(pulumi.StringArrayOutput)
}

func (o LogmeInstanceParametersOutput) OpensearchTlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) []string { return v.OpensearchTlsProtocols }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o LogmeInstanceParametersOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) *string { return v.SgwAcl }).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o LogmeInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogmeInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

type LogmeInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (LogmeInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogmeInstanceParameters)(nil)).Elem()
}

func (o LogmeInstanceParametersPtrOutput) ToLogmeInstanceParametersPtrOutput() LogmeInstanceParametersPtrOutput {
	return o
}

func (o LogmeInstanceParametersPtrOutput) ToLogmeInstanceParametersPtrOutputWithContext(ctx context.Context) LogmeInstanceParametersPtrOutput {
	return o
}

func (o LogmeInstanceParametersPtrOutput) Elem() LogmeInstanceParametersOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) LogmeInstanceParameters {
		if v != nil {
			return *v
		}
		var ret LogmeInstanceParameters
		return ret
	}).(LogmeInstanceParametersOutput)
}

// Enable monitoring.
func (o LogmeInstanceParametersPtrOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMonitoring
	}).(pulumi.BoolPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTcp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.FluentdTcp
	}).(pulumi.IntPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.FluentdTls
	}).(pulumi.IntPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTlsCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.FluentdTlsCiphers
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTlsMaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.FluentdTlsMaxVersion
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTlsMinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.FluentdTlsMinVersion
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.FluentdTlsVersion
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) FluentdUdp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.FluentdUdp
	}).(pulumi.IntPtrOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o LogmeInstanceParametersPtrOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Graphite
	}).(pulumi.StringPtrOutput)
}

// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
func (o LogmeInstanceParametersPtrOutput) IsmDeletionAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.IsmDeletionAfter
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) IsmJitter() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.IsmJitter
	}).(pulumi.Float64PtrOutput)
}

// Jitter of the execution time.
func (o LogmeInstanceParametersPtrOutput) IsmJobInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.IsmJobInterval
	}).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o LogmeInstanceParametersPtrOutput) JavaHeapspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.JavaHeapspace
	}).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o LogmeInstanceParametersPtrOutput) JavaMaxmetaspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.JavaMaxmetaspace
	}).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o LogmeInstanceParametersPtrOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDiskThreshold
	}).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o LogmeInstanceParametersPtrOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MetricsFrequency
	}).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o LogmeInstanceParametersPtrOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o LogmeInstanceParametersPtrOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringInstanceId
	}).(pulumi.StringPtrOutput)
}

func (o LogmeInstanceParametersPtrOutput) OpensearchTlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.OpensearchTlsCiphers
	}).(pulumi.StringArrayOutput)
}

func (o LogmeInstanceParametersPtrOutput) OpensearchTlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.OpensearchTlsProtocols
	}).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o LogmeInstanceParametersPtrOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.SgwAcl
	}).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o LogmeInstanceParametersPtrOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogmeInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(pulumi.StringArrayOutput)
}

type MariadbInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite *string `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold *int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency *int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix *string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance. Monitoring instances with the plan "Observability-Monitoring-Starter" are not supported.
	MonitoringInstanceId *string `pulumi:"monitoringInstanceId"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl *string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
}

// MariadbInstanceParametersInput is an input type that accepts MariadbInstanceParametersArgs and MariadbInstanceParametersOutput values.
// You can construct a concrete instance of `MariadbInstanceParametersInput` via:
//
//	MariadbInstanceParametersArgs{...}
type MariadbInstanceParametersInput interface {
	pulumi.Input

	ToMariadbInstanceParametersOutput() MariadbInstanceParametersOutput
	ToMariadbInstanceParametersOutputWithContext(context.Context) MariadbInstanceParametersOutput
}

type MariadbInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring pulumi.BoolPtrInput `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite pulumi.StringPtrInput `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntPtrInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntPtrInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringPtrInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance. Monitoring instances with the plan "Observability-Monitoring-Starter" are not supported.
	MonitoringInstanceId pulumi.StringPtrInput `pulumi:"monitoringInstanceId"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringPtrInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
}

func (MariadbInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariadbInstanceParameters)(nil)).Elem()
}

func (i MariadbInstanceParametersArgs) ToMariadbInstanceParametersOutput() MariadbInstanceParametersOutput {
	return i.ToMariadbInstanceParametersOutputWithContext(context.Background())
}

func (i MariadbInstanceParametersArgs) ToMariadbInstanceParametersOutputWithContext(ctx context.Context) MariadbInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceParametersOutput)
}

func (i MariadbInstanceParametersArgs) ToMariadbInstanceParametersPtrOutput() MariadbInstanceParametersPtrOutput {
	return i.ToMariadbInstanceParametersPtrOutputWithContext(context.Background())
}

func (i MariadbInstanceParametersArgs) ToMariadbInstanceParametersPtrOutputWithContext(ctx context.Context) MariadbInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceParametersOutput).ToMariadbInstanceParametersPtrOutputWithContext(ctx)
}

// MariadbInstanceParametersPtrInput is an input type that accepts MariadbInstanceParametersArgs, MariadbInstanceParametersPtr and MariadbInstanceParametersPtrOutput values.
// You can construct a concrete instance of `MariadbInstanceParametersPtrInput` via:
//
//	        MariadbInstanceParametersArgs{...}
//
//	or:
//
//	        nil
type MariadbInstanceParametersPtrInput interface {
	pulumi.Input

	ToMariadbInstanceParametersPtrOutput() MariadbInstanceParametersPtrOutput
	ToMariadbInstanceParametersPtrOutputWithContext(context.Context) MariadbInstanceParametersPtrOutput
}

type mariadbInstanceParametersPtrType MariadbInstanceParametersArgs

func MariadbInstanceParametersPtr(v *MariadbInstanceParametersArgs) MariadbInstanceParametersPtrInput {
	return (*mariadbInstanceParametersPtrType)(v)
}

func (*mariadbInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbInstanceParameters)(nil)).Elem()
}

func (i *mariadbInstanceParametersPtrType) ToMariadbInstanceParametersPtrOutput() MariadbInstanceParametersPtrOutput {
	return i.ToMariadbInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *mariadbInstanceParametersPtrType) ToMariadbInstanceParametersPtrOutputWithContext(ctx context.Context) MariadbInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceParametersPtrOutput)
}

type MariadbInstanceParametersOutput struct{ *pulumi.OutputState }

func (MariadbInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariadbInstanceParameters)(nil)).Elem()
}

func (o MariadbInstanceParametersOutput) ToMariadbInstanceParametersOutput() MariadbInstanceParametersOutput {
	return o
}

func (o MariadbInstanceParametersOutput) ToMariadbInstanceParametersOutputWithContext(ctx context.Context) MariadbInstanceParametersOutput {
	return o
}

func (o MariadbInstanceParametersOutput) ToMariadbInstanceParametersPtrOutput() MariadbInstanceParametersPtrOutput {
	return o.ToMariadbInstanceParametersPtrOutputWithContext(context.Background())
}

func (o MariadbInstanceParametersOutput) ToMariadbInstanceParametersPtrOutputWithContext(ctx context.Context) MariadbInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MariadbInstanceParameters) *MariadbInstanceParameters {
		return &v
	}).(MariadbInstanceParametersPtrOutput)
}

// Enable monitoring.
func (o MariadbInstanceParametersOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *bool { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o MariadbInstanceParametersOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *string { return v.Graphite }).(pulumi.StringPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o MariadbInstanceParametersOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *int { return v.MaxDiskThreshold }).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o MariadbInstanceParametersOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *int { return v.MetricsFrequency }).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o MariadbInstanceParametersOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *string { return v.MetricsPrefix }).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance. Monitoring instances with the plan "Observability-Monitoring-Starter" are not supported.
func (o MariadbInstanceParametersOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *string { return v.MonitoringInstanceId }).(pulumi.StringPtrOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o MariadbInstanceParametersOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) *string { return v.SgwAcl }).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o MariadbInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MariadbInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

type MariadbInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (MariadbInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbInstanceParameters)(nil)).Elem()
}

func (o MariadbInstanceParametersPtrOutput) ToMariadbInstanceParametersPtrOutput() MariadbInstanceParametersPtrOutput {
	return o
}

func (o MariadbInstanceParametersPtrOutput) ToMariadbInstanceParametersPtrOutputWithContext(ctx context.Context) MariadbInstanceParametersPtrOutput {
	return o
}

func (o MariadbInstanceParametersPtrOutput) Elem() MariadbInstanceParametersOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) MariadbInstanceParameters {
		if v != nil {
			return *v
		}
		var ret MariadbInstanceParameters
		return ret
	}).(MariadbInstanceParametersOutput)
}

// Enable monitoring.
func (o MariadbInstanceParametersPtrOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o MariadbInstanceParametersPtrOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Graphite
	}).(pulumi.StringPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o MariadbInstanceParametersPtrOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDiskThreshold
	}).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o MariadbInstanceParametersPtrOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MetricsFrequency
	}).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o MariadbInstanceParametersPtrOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance. Monitoring instances with the plan "Observability-Monitoring-Starter" are not supported.
func (o MariadbInstanceParametersPtrOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringInstanceId
	}).(pulumi.StringPtrOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o MariadbInstanceParametersPtrOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.SgwAcl
	}).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o MariadbInstanceParametersPtrOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MariadbInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(pulumi.StringArrayOutput)
}

type MongodbflexInstanceFlavor struct {
	Cpu         int     `pulumi:"cpu"`
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Ram         int     `pulumi:"ram"`
}

// MongodbflexInstanceFlavorInput is an input type that accepts MongodbflexInstanceFlavorArgs and MongodbflexInstanceFlavorOutput values.
// You can construct a concrete instance of `MongodbflexInstanceFlavorInput` via:
//
//	MongodbflexInstanceFlavorArgs{...}
type MongodbflexInstanceFlavorInput interface {
	pulumi.Input

	ToMongodbflexInstanceFlavorOutput() MongodbflexInstanceFlavorOutput
	ToMongodbflexInstanceFlavorOutputWithContext(context.Context) MongodbflexInstanceFlavorOutput
}

type MongodbflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput       `pulumi:"cpu"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Ram         pulumi.IntInput       `pulumi:"ram"`
}

func (MongodbflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceFlavor)(nil)).Elem()
}

func (i MongodbflexInstanceFlavorArgs) ToMongodbflexInstanceFlavorOutput() MongodbflexInstanceFlavorOutput {
	return i.ToMongodbflexInstanceFlavorOutputWithContext(context.Background())
}

func (i MongodbflexInstanceFlavorArgs) ToMongodbflexInstanceFlavorOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceFlavorOutput)
}

func (i MongodbflexInstanceFlavorArgs) ToMongodbflexInstanceFlavorPtrOutput() MongodbflexInstanceFlavorPtrOutput {
	return i.ToMongodbflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i MongodbflexInstanceFlavorArgs) ToMongodbflexInstanceFlavorPtrOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceFlavorOutput).ToMongodbflexInstanceFlavorPtrOutputWithContext(ctx)
}

// MongodbflexInstanceFlavorPtrInput is an input type that accepts MongodbflexInstanceFlavorArgs, MongodbflexInstanceFlavorPtr and MongodbflexInstanceFlavorPtrOutput values.
// You can construct a concrete instance of `MongodbflexInstanceFlavorPtrInput` via:
//
//	        MongodbflexInstanceFlavorArgs{...}
//
//	or:
//
//	        nil
type MongodbflexInstanceFlavorPtrInput interface {
	pulumi.Input

	ToMongodbflexInstanceFlavorPtrOutput() MongodbflexInstanceFlavorPtrOutput
	ToMongodbflexInstanceFlavorPtrOutputWithContext(context.Context) MongodbflexInstanceFlavorPtrOutput
}

type mongodbflexInstanceFlavorPtrType MongodbflexInstanceFlavorArgs

func MongodbflexInstanceFlavorPtr(v *MongodbflexInstanceFlavorArgs) MongodbflexInstanceFlavorPtrInput {
	return (*mongodbflexInstanceFlavorPtrType)(v)
}

func (*mongodbflexInstanceFlavorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceFlavor)(nil)).Elem()
}

func (i *mongodbflexInstanceFlavorPtrType) ToMongodbflexInstanceFlavorPtrOutput() MongodbflexInstanceFlavorPtrOutput {
	return i.ToMongodbflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i *mongodbflexInstanceFlavorPtrType) ToMongodbflexInstanceFlavorPtrOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceFlavorPtrOutput)
}

type MongodbflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceFlavor)(nil)).Elem()
}

func (o MongodbflexInstanceFlavorOutput) ToMongodbflexInstanceFlavorOutput() MongodbflexInstanceFlavorOutput {
	return o
}

func (o MongodbflexInstanceFlavorOutput) ToMongodbflexInstanceFlavorOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorOutput {
	return o
}

func (o MongodbflexInstanceFlavorOutput) ToMongodbflexInstanceFlavorPtrOutput() MongodbflexInstanceFlavorPtrOutput {
	return o.ToMongodbflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (o MongodbflexInstanceFlavorOutput) ToMongodbflexInstanceFlavorPtrOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongodbflexInstanceFlavor) *MongodbflexInstanceFlavor {
		return &v
	}).(MongodbflexInstanceFlavorPtrOutput)
}

func (o MongodbflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v MongodbflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o MongodbflexInstanceFlavorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceFlavor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MongodbflexInstanceFlavorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceFlavor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o MongodbflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v MongodbflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type MongodbflexInstanceFlavorPtrOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceFlavorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceFlavor)(nil)).Elem()
}

func (o MongodbflexInstanceFlavorPtrOutput) ToMongodbflexInstanceFlavorPtrOutput() MongodbflexInstanceFlavorPtrOutput {
	return o
}

func (o MongodbflexInstanceFlavorPtrOutput) ToMongodbflexInstanceFlavorPtrOutputWithContext(ctx context.Context) MongodbflexInstanceFlavorPtrOutput {
	return o
}

func (o MongodbflexInstanceFlavorPtrOutput) Elem() MongodbflexInstanceFlavorOutput {
	return o.ApplyT(func(v *MongodbflexInstanceFlavor) MongodbflexInstanceFlavor {
		if v != nil {
			return *v
		}
		var ret MongodbflexInstanceFlavor
		return ret
	}).(MongodbflexInstanceFlavorOutput)
}

func (o MongodbflexInstanceFlavorPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.IntPtrOutput)
}

func (o MongodbflexInstanceFlavorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o MongodbflexInstanceFlavorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o MongodbflexInstanceFlavorPtrOutput) Ram() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Ram
	}).(pulumi.IntPtrOutput)
}

type MongodbflexInstanceOptions struct {
	// The number of days that daily backups will be retained.
	DailySnapshotRetentionDays *int `pulumi:"dailySnapshotRetentionDays"`
	// The number of months that monthly backups will be retained.
	MonthlySnapshotRetentionMonths *int `pulumi:"monthlySnapshotRetentionMonths"`
	// The number of hours back in time the point-in-time recovery feature will be able to recover.
	PointInTimeWindowHours int `pulumi:"pointInTimeWindowHours"`
	// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
	SnapshotRetentionDays *int `pulumi:"snapshotRetentionDays"`
	// Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.
	Type string `pulumi:"type"`
	// The number of weeks that weekly backups will be retained.
	WeeklySnapshotRetentionWeeks *int `pulumi:"weeklySnapshotRetentionWeeks"`
}

// MongodbflexInstanceOptionsInput is an input type that accepts MongodbflexInstanceOptionsArgs and MongodbflexInstanceOptionsOutput values.
// You can construct a concrete instance of `MongodbflexInstanceOptionsInput` via:
//
//	MongodbflexInstanceOptionsArgs{...}
type MongodbflexInstanceOptionsInput interface {
	pulumi.Input

	ToMongodbflexInstanceOptionsOutput() MongodbflexInstanceOptionsOutput
	ToMongodbflexInstanceOptionsOutputWithContext(context.Context) MongodbflexInstanceOptionsOutput
}

type MongodbflexInstanceOptionsArgs struct {
	// The number of days that daily backups will be retained.
	DailySnapshotRetentionDays pulumi.IntPtrInput `pulumi:"dailySnapshotRetentionDays"`
	// The number of months that monthly backups will be retained.
	MonthlySnapshotRetentionMonths pulumi.IntPtrInput `pulumi:"monthlySnapshotRetentionMonths"`
	// The number of hours back in time the point-in-time recovery feature will be able to recover.
	PointInTimeWindowHours pulumi.IntInput `pulumi:"pointInTimeWindowHours"`
	// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
	SnapshotRetentionDays pulumi.IntPtrInput `pulumi:"snapshotRetentionDays"`
	// Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.
	Type pulumi.StringInput `pulumi:"type"`
	// The number of weeks that weekly backups will be retained.
	WeeklySnapshotRetentionWeeks pulumi.IntPtrInput `pulumi:"weeklySnapshotRetentionWeeks"`
}

func (MongodbflexInstanceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceOptions)(nil)).Elem()
}

func (i MongodbflexInstanceOptionsArgs) ToMongodbflexInstanceOptionsOutput() MongodbflexInstanceOptionsOutput {
	return i.ToMongodbflexInstanceOptionsOutputWithContext(context.Background())
}

func (i MongodbflexInstanceOptionsArgs) ToMongodbflexInstanceOptionsOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceOptionsOutput)
}

func (i MongodbflexInstanceOptionsArgs) ToMongodbflexInstanceOptionsPtrOutput() MongodbflexInstanceOptionsPtrOutput {
	return i.ToMongodbflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (i MongodbflexInstanceOptionsArgs) ToMongodbflexInstanceOptionsPtrOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceOptionsOutput).ToMongodbflexInstanceOptionsPtrOutputWithContext(ctx)
}

// MongodbflexInstanceOptionsPtrInput is an input type that accepts MongodbflexInstanceOptionsArgs, MongodbflexInstanceOptionsPtr and MongodbflexInstanceOptionsPtrOutput values.
// You can construct a concrete instance of `MongodbflexInstanceOptionsPtrInput` via:
//
//	        MongodbflexInstanceOptionsArgs{...}
//
//	or:
//
//	        nil
type MongodbflexInstanceOptionsPtrInput interface {
	pulumi.Input

	ToMongodbflexInstanceOptionsPtrOutput() MongodbflexInstanceOptionsPtrOutput
	ToMongodbflexInstanceOptionsPtrOutputWithContext(context.Context) MongodbflexInstanceOptionsPtrOutput
}

type mongodbflexInstanceOptionsPtrType MongodbflexInstanceOptionsArgs

func MongodbflexInstanceOptionsPtr(v *MongodbflexInstanceOptionsArgs) MongodbflexInstanceOptionsPtrInput {
	return (*mongodbflexInstanceOptionsPtrType)(v)
}

func (*mongodbflexInstanceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceOptions)(nil)).Elem()
}

func (i *mongodbflexInstanceOptionsPtrType) ToMongodbflexInstanceOptionsPtrOutput() MongodbflexInstanceOptionsPtrOutput {
	return i.ToMongodbflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (i *mongodbflexInstanceOptionsPtrType) ToMongodbflexInstanceOptionsPtrOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceOptionsPtrOutput)
}

type MongodbflexInstanceOptionsOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceOptions)(nil)).Elem()
}

func (o MongodbflexInstanceOptionsOutput) ToMongodbflexInstanceOptionsOutput() MongodbflexInstanceOptionsOutput {
	return o
}

func (o MongodbflexInstanceOptionsOutput) ToMongodbflexInstanceOptionsOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsOutput {
	return o
}

func (o MongodbflexInstanceOptionsOutput) ToMongodbflexInstanceOptionsPtrOutput() MongodbflexInstanceOptionsPtrOutput {
	return o.ToMongodbflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (o MongodbflexInstanceOptionsOutput) ToMongodbflexInstanceOptionsPtrOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongodbflexInstanceOptions) *MongodbflexInstanceOptions {
		return &v
	}).(MongodbflexInstanceOptionsPtrOutput)
}

// The number of days that daily backups will be retained.
func (o MongodbflexInstanceOptionsOutput) DailySnapshotRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) *int { return v.DailySnapshotRetentionDays }).(pulumi.IntPtrOutput)
}

// The number of months that monthly backups will be retained.
func (o MongodbflexInstanceOptionsOutput) MonthlySnapshotRetentionMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) *int { return v.MonthlySnapshotRetentionMonths }).(pulumi.IntPtrOutput)
}

// The number of hours back in time the point-in-time recovery feature will be able to recover.
func (o MongodbflexInstanceOptionsOutput) PointInTimeWindowHours() pulumi.IntOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) int { return v.PointInTimeWindowHours }).(pulumi.IntOutput)
}

// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
func (o MongodbflexInstanceOptionsOutput) SnapshotRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) *int { return v.SnapshotRetentionDays }).(pulumi.IntPtrOutput)
}

// Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.
func (o MongodbflexInstanceOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) string { return v.Type }).(pulumi.StringOutput)
}

// The number of weeks that weekly backups will be retained.
func (o MongodbflexInstanceOptionsOutput) WeeklySnapshotRetentionWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbflexInstanceOptions) *int { return v.WeeklySnapshotRetentionWeeks }).(pulumi.IntPtrOutput)
}

type MongodbflexInstanceOptionsPtrOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceOptions)(nil)).Elem()
}

func (o MongodbflexInstanceOptionsPtrOutput) ToMongodbflexInstanceOptionsPtrOutput() MongodbflexInstanceOptionsPtrOutput {
	return o
}

func (o MongodbflexInstanceOptionsPtrOutput) ToMongodbflexInstanceOptionsPtrOutputWithContext(ctx context.Context) MongodbflexInstanceOptionsPtrOutput {
	return o
}

func (o MongodbflexInstanceOptionsPtrOutput) Elem() MongodbflexInstanceOptionsOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) MongodbflexInstanceOptions {
		if v != nil {
			return *v
		}
		var ret MongodbflexInstanceOptions
		return ret
	}).(MongodbflexInstanceOptionsOutput)
}

// The number of days that daily backups will be retained.
func (o MongodbflexInstanceOptionsPtrOutput) DailySnapshotRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return v.DailySnapshotRetentionDays
	}).(pulumi.IntPtrOutput)
}

// The number of months that monthly backups will be retained.
func (o MongodbflexInstanceOptionsPtrOutput) MonthlySnapshotRetentionMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return v.MonthlySnapshotRetentionMonths
	}).(pulumi.IntPtrOutput)
}

// The number of hours back in time the point-in-time recovery feature will be able to recover.
func (o MongodbflexInstanceOptionsPtrOutput) PointInTimeWindowHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return &v.PointInTimeWindowHours
	}).(pulumi.IntPtrOutput)
}

// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
func (o MongodbflexInstanceOptionsPtrOutput) SnapshotRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return v.SnapshotRetentionDays
	}).(pulumi.IntPtrOutput)
}

// Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.
func (o MongodbflexInstanceOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The number of weeks that weekly backups will be retained.
func (o MongodbflexInstanceOptionsPtrOutput) WeeklySnapshotRetentionWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return v.WeeklySnapshotRetentionWeeks
	}).(pulumi.IntPtrOutput)
}

type MongodbflexInstanceStorage struct {
	Class string `pulumi:"class"`
	Size  int    `pulumi:"size"`
}

// MongodbflexInstanceStorageInput is an input type that accepts MongodbflexInstanceStorageArgs and MongodbflexInstanceStorageOutput values.
// You can construct a concrete instance of `MongodbflexInstanceStorageInput` via:
//
//	MongodbflexInstanceStorageArgs{...}
type MongodbflexInstanceStorageInput interface {
	pulumi.Input

	ToMongodbflexInstanceStorageOutput() MongodbflexInstanceStorageOutput
	ToMongodbflexInstanceStorageOutputWithContext(context.Context) MongodbflexInstanceStorageOutput
}

type MongodbflexInstanceStorageArgs struct {
	Class pulumi.StringInput `pulumi:"class"`
	Size  pulumi.IntInput    `pulumi:"size"`
}

func (MongodbflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceStorage)(nil)).Elem()
}

func (i MongodbflexInstanceStorageArgs) ToMongodbflexInstanceStorageOutput() MongodbflexInstanceStorageOutput {
	return i.ToMongodbflexInstanceStorageOutputWithContext(context.Background())
}

func (i MongodbflexInstanceStorageArgs) ToMongodbflexInstanceStorageOutputWithContext(ctx context.Context) MongodbflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceStorageOutput)
}

func (i MongodbflexInstanceStorageArgs) ToMongodbflexInstanceStoragePtrOutput() MongodbflexInstanceStoragePtrOutput {
	return i.ToMongodbflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i MongodbflexInstanceStorageArgs) ToMongodbflexInstanceStoragePtrOutputWithContext(ctx context.Context) MongodbflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceStorageOutput).ToMongodbflexInstanceStoragePtrOutputWithContext(ctx)
}

// MongodbflexInstanceStoragePtrInput is an input type that accepts MongodbflexInstanceStorageArgs, MongodbflexInstanceStoragePtr and MongodbflexInstanceStoragePtrOutput values.
// You can construct a concrete instance of `MongodbflexInstanceStoragePtrInput` via:
//
//	        MongodbflexInstanceStorageArgs{...}
//
//	or:
//
//	        nil
type MongodbflexInstanceStoragePtrInput interface {
	pulumi.Input

	ToMongodbflexInstanceStoragePtrOutput() MongodbflexInstanceStoragePtrOutput
	ToMongodbflexInstanceStoragePtrOutputWithContext(context.Context) MongodbflexInstanceStoragePtrOutput
}

type mongodbflexInstanceStoragePtrType MongodbflexInstanceStorageArgs

func MongodbflexInstanceStoragePtr(v *MongodbflexInstanceStorageArgs) MongodbflexInstanceStoragePtrInput {
	return (*mongodbflexInstanceStoragePtrType)(v)
}

func (*mongodbflexInstanceStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceStorage)(nil)).Elem()
}

func (i *mongodbflexInstanceStoragePtrType) ToMongodbflexInstanceStoragePtrOutput() MongodbflexInstanceStoragePtrOutput {
	return i.ToMongodbflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i *mongodbflexInstanceStoragePtrType) ToMongodbflexInstanceStoragePtrOutputWithContext(ctx context.Context) MongodbflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceStoragePtrOutput)
}

type MongodbflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbflexInstanceStorage)(nil)).Elem()
}

func (o MongodbflexInstanceStorageOutput) ToMongodbflexInstanceStorageOutput() MongodbflexInstanceStorageOutput {
	return o
}

func (o MongodbflexInstanceStorageOutput) ToMongodbflexInstanceStorageOutputWithContext(ctx context.Context) MongodbflexInstanceStorageOutput {
	return o
}

func (o MongodbflexInstanceStorageOutput) ToMongodbflexInstanceStoragePtrOutput() MongodbflexInstanceStoragePtrOutput {
	return o.ToMongodbflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (o MongodbflexInstanceStorageOutput) ToMongodbflexInstanceStoragePtrOutputWithContext(ctx context.Context) MongodbflexInstanceStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongodbflexInstanceStorage) *MongodbflexInstanceStorage {
		return &v
	}).(MongodbflexInstanceStoragePtrOutput)
}

func (o MongodbflexInstanceStorageOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v MongodbflexInstanceStorage) string { return v.Class }).(pulumi.StringOutput)
}

func (o MongodbflexInstanceStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v MongodbflexInstanceStorage) int { return v.Size }).(pulumi.IntOutput)
}

type MongodbflexInstanceStoragePtrOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstanceStorage)(nil)).Elem()
}

func (o MongodbflexInstanceStoragePtrOutput) ToMongodbflexInstanceStoragePtrOutput() MongodbflexInstanceStoragePtrOutput {
	return o
}

func (o MongodbflexInstanceStoragePtrOutput) ToMongodbflexInstanceStoragePtrOutputWithContext(ctx context.Context) MongodbflexInstanceStoragePtrOutput {
	return o
}

func (o MongodbflexInstanceStoragePtrOutput) Elem() MongodbflexInstanceStorageOutput {
	return o.ApplyT(func(v *MongodbflexInstanceStorage) MongodbflexInstanceStorage {
		if v != nil {
			return *v
		}
		var ret MongodbflexInstanceStorage
		return ret
	}).(MongodbflexInstanceStorageOutput)
}

func (o MongodbflexInstanceStoragePtrOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceStorage) *string {
		if v == nil {
			return nil
		}
		return &v.Class
	}).(pulumi.StringPtrOutput)
}

func (o MongodbflexInstanceStoragePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbflexInstanceStorage) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

type NetworkAreaNetworkRange struct {
	NetworkRangeId *string `pulumi:"networkRangeId"`
	// Classless Inter-Domain Routing (CIDR).
	Prefix string `pulumi:"prefix"`
}

// NetworkAreaNetworkRangeInput is an input type that accepts NetworkAreaNetworkRangeArgs and NetworkAreaNetworkRangeOutput values.
// You can construct a concrete instance of `NetworkAreaNetworkRangeInput` via:
//
//	NetworkAreaNetworkRangeArgs{...}
type NetworkAreaNetworkRangeInput interface {
	pulumi.Input

	ToNetworkAreaNetworkRangeOutput() NetworkAreaNetworkRangeOutput
	ToNetworkAreaNetworkRangeOutputWithContext(context.Context) NetworkAreaNetworkRangeOutput
}

type NetworkAreaNetworkRangeArgs struct {
	NetworkRangeId pulumi.StringPtrInput `pulumi:"networkRangeId"`
	// Classless Inter-Domain Routing (CIDR).
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (NetworkAreaNetworkRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAreaNetworkRange)(nil)).Elem()
}

func (i NetworkAreaNetworkRangeArgs) ToNetworkAreaNetworkRangeOutput() NetworkAreaNetworkRangeOutput {
	return i.ToNetworkAreaNetworkRangeOutputWithContext(context.Background())
}

func (i NetworkAreaNetworkRangeArgs) ToNetworkAreaNetworkRangeOutputWithContext(ctx context.Context) NetworkAreaNetworkRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAreaNetworkRangeOutput)
}

// NetworkAreaNetworkRangeArrayInput is an input type that accepts NetworkAreaNetworkRangeArray and NetworkAreaNetworkRangeArrayOutput values.
// You can construct a concrete instance of `NetworkAreaNetworkRangeArrayInput` via:
//
//	NetworkAreaNetworkRangeArray{ NetworkAreaNetworkRangeArgs{...} }
type NetworkAreaNetworkRangeArrayInput interface {
	pulumi.Input

	ToNetworkAreaNetworkRangeArrayOutput() NetworkAreaNetworkRangeArrayOutput
	ToNetworkAreaNetworkRangeArrayOutputWithContext(context.Context) NetworkAreaNetworkRangeArrayOutput
}

type NetworkAreaNetworkRangeArray []NetworkAreaNetworkRangeInput

func (NetworkAreaNetworkRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAreaNetworkRange)(nil)).Elem()
}

func (i NetworkAreaNetworkRangeArray) ToNetworkAreaNetworkRangeArrayOutput() NetworkAreaNetworkRangeArrayOutput {
	return i.ToNetworkAreaNetworkRangeArrayOutputWithContext(context.Background())
}

func (i NetworkAreaNetworkRangeArray) ToNetworkAreaNetworkRangeArrayOutputWithContext(ctx context.Context) NetworkAreaNetworkRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAreaNetworkRangeArrayOutput)
}

type NetworkAreaNetworkRangeOutput struct{ *pulumi.OutputState }

func (NetworkAreaNetworkRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAreaNetworkRange)(nil)).Elem()
}

func (o NetworkAreaNetworkRangeOutput) ToNetworkAreaNetworkRangeOutput() NetworkAreaNetworkRangeOutput {
	return o
}

func (o NetworkAreaNetworkRangeOutput) ToNetworkAreaNetworkRangeOutputWithContext(ctx context.Context) NetworkAreaNetworkRangeOutput {
	return o
}

func (o NetworkAreaNetworkRangeOutput) NetworkRangeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAreaNetworkRange) *string { return v.NetworkRangeId }).(pulumi.StringPtrOutput)
}

// Classless Inter-Domain Routing (CIDR).
func (o NetworkAreaNetworkRangeOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAreaNetworkRange) string { return v.Prefix }).(pulumi.StringOutput)
}

type NetworkAreaNetworkRangeArrayOutput struct{ *pulumi.OutputState }

func (NetworkAreaNetworkRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAreaNetworkRange)(nil)).Elem()
}

func (o NetworkAreaNetworkRangeArrayOutput) ToNetworkAreaNetworkRangeArrayOutput() NetworkAreaNetworkRangeArrayOutput {
	return o
}

func (o NetworkAreaNetworkRangeArrayOutput) ToNetworkAreaNetworkRangeArrayOutputWithContext(ctx context.Context) NetworkAreaNetworkRangeArrayOutput {
	return o
}

func (o NetworkAreaNetworkRangeArrayOutput) Index(i pulumi.IntInput) NetworkAreaNetworkRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAreaNetworkRange {
		return vs[0].([]NetworkAreaNetworkRange)[vs[1].(int)]
	}).(NetworkAreaNetworkRangeOutput)
}

type ObservabilityAlertgroupRule struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert string `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations map[string]string `pulumi:"annotations"`
	// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression string `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For *string `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels map[string]string `pulumi:"labels"`
}

// ObservabilityAlertgroupRuleInput is an input type that accepts ObservabilityAlertgroupRuleArgs and ObservabilityAlertgroupRuleOutput values.
// You can construct a concrete instance of `ObservabilityAlertgroupRuleInput` via:
//
//	ObservabilityAlertgroupRuleArgs{...}
type ObservabilityAlertgroupRuleInput interface {
	pulumi.Input

	ToObservabilityAlertgroupRuleOutput() ObservabilityAlertgroupRuleOutput
	ToObservabilityAlertgroupRuleOutputWithContext(context.Context) ObservabilityAlertgroupRuleOutput
}

type ObservabilityAlertgroupRuleArgs struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert pulumi.StringInput `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For pulumi.StringPtrInput `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ObservabilityAlertgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityAlertgroupRule)(nil)).Elem()
}

func (i ObservabilityAlertgroupRuleArgs) ToObservabilityAlertgroupRuleOutput() ObservabilityAlertgroupRuleOutput {
	return i.ToObservabilityAlertgroupRuleOutputWithContext(context.Background())
}

func (i ObservabilityAlertgroupRuleArgs) ToObservabilityAlertgroupRuleOutputWithContext(ctx context.Context) ObservabilityAlertgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityAlertgroupRuleOutput)
}

// ObservabilityAlertgroupRuleArrayInput is an input type that accepts ObservabilityAlertgroupRuleArray and ObservabilityAlertgroupRuleArrayOutput values.
// You can construct a concrete instance of `ObservabilityAlertgroupRuleArrayInput` via:
//
//	ObservabilityAlertgroupRuleArray{ ObservabilityAlertgroupRuleArgs{...} }
type ObservabilityAlertgroupRuleArrayInput interface {
	pulumi.Input

	ToObservabilityAlertgroupRuleArrayOutput() ObservabilityAlertgroupRuleArrayOutput
	ToObservabilityAlertgroupRuleArrayOutputWithContext(context.Context) ObservabilityAlertgroupRuleArrayOutput
}

type ObservabilityAlertgroupRuleArray []ObservabilityAlertgroupRuleInput

func (ObservabilityAlertgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityAlertgroupRule)(nil)).Elem()
}

func (i ObservabilityAlertgroupRuleArray) ToObservabilityAlertgroupRuleArrayOutput() ObservabilityAlertgroupRuleArrayOutput {
	return i.ToObservabilityAlertgroupRuleArrayOutputWithContext(context.Background())
}

func (i ObservabilityAlertgroupRuleArray) ToObservabilityAlertgroupRuleArrayOutputWithContext(ctx context.Context) ObservabilityAlertgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityAlertgroupRuleArrayOutput)
}

type ObservabilityAlertgroupRuleOutput struct{ *pulumi.OutputState }

func (ObservabilityAlertgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityAlertgroupRule)(nil)).Elem()
}

func (o ObservabilityAlertgroupRuleOutput) ToObservabilityAlertgroupRuleOutput() ObservabilityAlertgroupRuleOutput {
	return o
}

func (o ObservabilityAlertgroupRuleOutput) ToObservabilityAlertgroupRuleOutputWithContext(ctx context.Context) ObservabilityAlertgroupRuleOutput {
	return o
}

// The name of the alert rule. Is the identifier and must be unique in the group.
func (o ObservabilityAlertgroupRuleOutput) Alert() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityAlertgroupRule) string { return v.Alert }).(pulumi.StringOutput)
}

// A map of key:value. Annotations to add or overwrite for each alert
func (o ObservabilityAlertgroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityAlertgroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
func (o ObservabilityAlertgroupRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityAlertgroupRule) string { return v.Expression }).(pulumi.StringOutput)
}

// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
func (o ObservabilityAlertgroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityAlertgroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// A map of key:value. Labels to add or overwrite for each alert
func (o ObservabilityAlertgroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityAlertgroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ObservabilityAlertgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityAlertgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityAlertgroupRule)(nil)).Elem()
}

func (o ObservabilityAlertgroupRuleArrayOutput) ToObservabilityAlertgroupRuleArrayOutput() ObservabilityAlertgroupRuleArrayOutput {
	return o
}

func (o ObservabilityAlertgroupRuleArrayOutput) ToObservabilityAlertgroupRuleArrayOutputWithContext(ctx context.Context) ObservabilityAlertgroupRuleArrayOutput {
	return o
}

func (o ObservabilityAlertgroupRuleArrayOutput) Index(i pulumi.IntInput) ObservabilityAlertgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityAlertgroupRule {
		return vs[0].([]ObservabilityAlertgroupRule)[vs[1].(int)]
	}).(ObservabilityAlertgroupRuleOutput)
}

type ObservabilityInstanceAlertConfig struct {
	// Global configuration for the alerts.
	Global *ObservabilityInstanceAlertConfigGlobal `pulumi:"global"`
	// List of alert receivers.
	Receivers []ObservabilityInstanceAlertConfigReceiver `pulumi:"receivers"`
	// Route configuration for the alerts.
	Route ObservabilityInstanceAlertConfigRoute `pulumi:"route"`
}

// ObservabilityInstanceAlertConfigInput is an input type that accepts ObservabilityInstanceAlertConfigArgs and ObservabilityInstanceAlertConfigOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigInput` via:
//
//	ObservabilityInstanceAlertConfigArgs{...}
type ObservabilityInstanceAlertConfigInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigOutput() ObservabilityInstanceAlertConfigOutput
	ToObservabilityInstanceAlertConfigOutputWithContext(context.Context) ObservabilityInstanceAlertConfigOutput
}

type ObservabilityInstanceAlertConfigArgs struct {
	// Global configuration for the alerts.
	Global ObservabilityInstanceAlertConfigGlobalPtrInput `pulumi:"global"`
	// List of alert receivers.
	Receivers ObservabilityInstanceAlertConfigReceiverArrayInput `pulumi:"receivers"`
	// Route configuration for the alerts.
	Route ObservabilityInstanceAlertConfigRouteInput `pulumi:"route"`
}

func (ObservabilityInstanceAlertConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigArgs) ToObservabilityInstanceAlertConfigOutput() ObservabilityInstanceAlertConfigOutput {
	return i.ToObservabilityInstanceAlertConfigOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigArgs) ToObservabilityInstanceAlertConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigOutput)
}

func (i ObservabilityInstanceAlertConfigArgs) ToObservabilityInstanceAlertConfigPtrOutput() ObservabilityInstanceAlertConfigPtrOutput {
	return i.ToObservabilityInstanceAlertConfigPtrOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigArgs) ToObservabilityInstanceAlertConfigPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigOutput).ToObservabilityInstanceAlertConfigPtrOutputWithContext(ctx)
}

// ObservabilityInstanceAlertConfigPtrInput is an input type that accepts ObservabilityInstanceAlertConfigArgs, ObservabilityInstanceAlertConfigPtr and ObservabilityInstanceAlertConfigPtrOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigPtrInput` via:
//
//	        ObservabilityInstanceAlertConfigArgs{...}
//
//	or:
//
//	        nil
type ObservabilityInstanceAlertConfigPtrInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigPtrOutput() ObservabilityInstanceAlertConfigPtrOutput
	ToObservabilityInstanceAlertConfigPtrOutputWithContext(context.Context) ObservabilityInstanceAlertConfigPtrOutput
}

type observabilityInstanceAlertConfigPtrType ObservabilityInstanceAlertConfigArgs

func ObservabilityInstanceAlertConfigPtr(v *ObservabilityInstanceAlertConfigArgs) ObservabilityInstanceAlertConfigPtrInput {
	return (*observabilityInstanceAlertConfigPtrType)(v)
}

func (*observabilityInstanceAlertConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (i *observabilityInstanceAlertConfigPtrType) ToObservabilityInstanceAlertConfigPtrOutput() ObservabilityInstanceAlertConfigPtrOutput {
	return i.ToObservabilityInstanceAlertConfigPtrOutputWithContext(context.Background())
}

func (i *observabilityInstanceAlertConfigPtrType) ToObservabilityInstanceAlertConfigPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigPtrOutput)
}

type ObservabilityInstanceAlertConfigOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigOutput) ToObservabilityInstanceAlertConfigOutput() ObservabilityInstanceAlertConfigOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigOutput) ToObservabilityInstanceAlertConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigOutput) ToObservabilityInstanceAlertConfigPtrOutput() ObservabilityInstanceAlertConfigPtrOutput {
	return o.ToObservabilityInstanceAlertConfigPtrOutputWithContext(context.Background())
}

func (o ObservabilityInstanceAlertConfigOutput) ToObservabilityInstanceAlertConfigPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObservabilityInstanceAlertConfig) *ObservabilityInstanceAlertConfig {
		return &v
	}).(ObservabilityInstanceAlertConfigPtrOutput)
}

// Global configuration for the alerts.
func (o ObservabilityInstanceAlertConfigOutput) Global() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfig) *ObservabilityInstanceAlertConfigGlobal { return v.Global }).(ObservabilityInstanceAlertConfigGlobalPtrOutput)
}

// List of alert receivers.
func (o ObservabilityInstanceAlertConfigOutput) Receivers() ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfig) []ObservabilityInstanceAlertConfigReceiver {
		return v.Receivers
	}).(ObservabilityInstanceAlertConfigReceiverArrayOutput)
}

// Route configuration for the alerts.
func (o ObservabilityInstanceAlertConfigOutput) Route() ObservabilityInstanceAlertConfigRouteOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfig) ObservabilityInstanceAlertConfigRoute { return v.Route }).(ObservabilityInstanceAlertConfigRouteOutput)
}

type ObservabilityInstanceAlertConfigPtrOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigPtrOutput) ToObservabilityInstanceAlertConfigPtrOutput() ObservabilityInstanceAlertConfigPtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigPtrOutput) ToObservabilityInstanceAlertConfigPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigPtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigPtrOutput) Elem() ObservabilityInstanceAlertConfigOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfig) ObservabilityInstanceAlertConfig {
		if v != nil {
			return *v
		}
		var ret ObservabilityInstanceAlertConfig
		return ret
	}).(ObservabilityInstanceAlertConfigOutput)
}

// Global configuration for the alerts.
func (o ObservabilityInstanceAlertConfigPtrOutput) Global() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfig) *ObservabilityInstanceAlertConfigGlobal {
		if v == nil {
			return nil
		}
		return v.Global
	}).(ObservabilityInstanceAlertConfigGlobalPtrOutput)
}

// List of alert receivers.
func (o ObservabilityInstanceAlertConfigPtrOutput) Receivers() ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfig) []ObservabilityInstanceAlertConfigReceiver {
		if v == nil {
			return nil
		}
		return v.Receivers
	}).(ObservabilityInstanceAlertConfigReceiverArrayOutput)
}

// Route configuration for the alerts.
func (o ObservabilityInstanceAlertConfigPtrOutput) Route() ObservabilityInstanceAlertConfigRoutePtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfig) *ObservabilityInstanceAlertConfigRoute {
		if v == nil {
			return nil
		}
		return &v.Route
	}).(ObservabilityInstanceAlertConfigRoutePtrOutput)
}

type ObservabilityInstanceAlertConfigGlobal struct {
	// The API key for OpsGenie.
	OpsgenieApiKey *string `pulumi:"opsgenieApiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	OpsgenieApiUrl *string `pulumi:"opsgenieApiUrl"`
	// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
	ResolveTimeout *string `pulumi:"resolveTimeout"`
	// SMTP authentication information. Must be a valid email address
	SmtpAuthIdentity *string `pulumi:"smtpAuthIdentity"`
	// SMTP Auth using LOGIN and PLAIN.
	SmtpAuthPassword *string `pulumi:"smtpAuthPassword"`
	// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
	SmtpAuthUsername *string `pulumi:"smtpAuthUsername"`
	// The default SMTP From header field. Must be a valid email address
	SmtpFrom *string `pulumi:"smtpFrom"`
	// The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
	SmtpSmartHost *string `pulumi:"smtpSmartHost"`
}

// ObservabilityInstanceAlertConfigGlobalInput is an input type that accepts ObservabilityInstanceAlertConfigGlobalArgs and ObservabilityInstanceAlertConfigGlobalOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigGlobalInput` via:
//
//	ObservabilityInstanceAlertConfigGlobalArgs{...}
type ObservabilityInstanceAlertConfigGlobalInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigGlobalOutput() ObservabilityInstanceAlertConfigGlobalOutput
	ToObservabilityInstanceAlertConfigGlobalOutputWithContext(context.Context) ObservabilityInstanceAlertConfigGlobalOutput
}

type ObservabilityInstanceAlertConfigGlobalArgs struct {
	// The API key for OpsGenie.
	OpsgenieApiKey pulumi.StringPtrInput `pulumi:"opsgenieApiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	OpsgenieApiUrl pulumi.StringPtrInput `pulumi:"opsgenieApiUrl"`
	// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
	ResolveTimeout pulumi.StringPtrInput `pulumi:"resolveTimeout"`
	// SMTP authentication information. Must be a valid email address
	SmtpAuthIdentity pulumi.StringPtrInput `pulumi:"smtpAuthIdentity"`
	// SMTP Auth using LOGIN and PLAIN.
	SmtpAuthPassword pulumi.StringPtrInput `pulumi:"smtpAuthPassword"`
	// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
	SmtpAuthUsername pulumi.StringPtrInput `pulumi:"smtpAuthUsername"`
	// The default SMTP From header field. Must be a valid email address
	SmtpFrom pulumi.StringPtrInput `pulumi:"smtpFrom"`
	// The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
	SmtpSmartHost pulumi.StringPtrInput `pulumi:"smtpSmartHost"`
}

func (ObservabilityInstanceAlertConfigGlobalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigGlobalArgs) ToObservabilityInstanceAlertConfigGlobalOutput() ObservabilityInstanceAlertConfigGlobalOutput {
	return i.ToObservabilityInstanceAlertConfigGlobalOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigGlobalArgs) ToObservabilityInstanceAlertConfigGlobalOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigGlobalOutput)
}

func (i ObservabilityInstanceAlertConfigGlobalArgs) ToObservabilityInstanceAlertConfigGlobalPtrOutput() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return i.ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigGlobalArgs) ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigGlobalOutput).ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(ctx)
}

// ObservabilityInstanceAlertConfigGlobalPtrInput is an input type that accepts ObservabilityInstanceAlertConfigGlobalArgs, ObservabilityInstanceAlertConfigGlobalPtr and ObservabilityInstanceAlertConfigGlobalPtrOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigGlobalPtrInput` via:
//
//	        ObservabilityInstanceAlertConfigGlobalArgs{...}
//
//	or:
//
//	        nil
type ObservabilityInstanceAlertConfigGlobalPtrInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigGlobalPtrOutput() ObservabilityInstanceAlertConfigGlobalPtrOutput
	ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(context.Context) ObservabilityInstanceAlertConfigGlobalPtrOutput
}

type observabilityInstanceAlertConfigGlobalPtrType ObservabilityInstanceAlertConfigGlobalArgs

func ObservabilityInstanceAlertConfigGlobalPtr(v *ObservabilityInstanceAlertConfigGlobalArgs) ObservabilityInstanceAlertConfigGlobalPtrInput {
	return (*observabilityInstanceAlertConfigGlobalPtrType)(v)
}

func (*observabilityInstanceAlertConfigGlobalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (i *observabilityInstanceAlertConfigGlobalPtrType) ToObservabilityInstanceAlertConfigGlobalPtrOutput() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return i.ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(context.Background())
}

func (i *observabilityInstanceAlertConfigGlobalPtrType) ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigGlobalPtrOutput)
}

type ObservabilityInstanceAlertConfigGlobalOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigGlobalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigGlobalOutput) ToObservabilityInstanceAlertConfigGlobalOutput() ObservabilityInstanceAlertConfigGlobalOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigGlobalOutput) ToObservabilityInstanceAlertConfigGlobalOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigGlobalOutput) ToObservabilityInstanceAlertConfigGlobalPtrOutput() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o.ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(context.Background())
}

func (o ObservabilityInstanceAlertConfigGlobalOutput) ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObservabilityInstanceAlertConfigGlobal) *ObservabilityInstanceAlertConfigGlobal {
		return &v
	}).(ObservabilityInstanceAlertConfigGlobalPtrOutput)
}

// The API key for OpsGenie.
func (o ObservabilityInstanceAlertConfigGlobalOutput) OpsgenieApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.OpsgenieApiKey }).(pulumi.StringPtrOutput)
}

// The host to send OpsGenie API requests to. Must be a valid URL
func (o ObservabilityInstanceAlertConfigGlobalOutput) OpsgenieApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.OpsgenieApiUrl }).(pulumi.StringPtrOutput)
}

// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
func (o ObservabilityInstanceAlertConfigGlobalOutput) ResolveTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.ResolveTimeout }).(pulumi.StringPtrOutput)
}

// SMTP authentication information. Must be a valid email address
func (o ObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.SmtpAuthIdentity }).(pulumi.StringPtrOutput)
}

// SMTP Auth using LOGIN and PLAIN.
func (o ObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.SmtpAuthPassword }).(pulumi.StringPtrOutput)
}

// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
func (o ObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.SmtpAuthUsername }).(pulumi.StringPtrOutput)
}

// The default SMTP From header field. Must be a valid email address
func (o ObservabilityInstanceAlertConfigGlobalOutput) SmtpFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.SmtpFrom }).(pulumi.StringPtrOutput)
}

// The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
func (o ObservabilityInstanceAlertConfigGlobalOutput) SmtpSmartHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigGlobal) *string { return v.SmtpSmartHost }).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigGlobalPtrOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigGlobalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) ToObservabilityInstanceAlertConfigGlobalPtrOutput() ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) ToObservabilityInstanceAlertConfigGlobalPtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigGlobalPtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) Elem() ObservabilityInstanceAlertConfigGlobalOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) ObservabilityInstanceAlertConfigGlobal {
		if v != nil {
			return *v
		}
		var ret ObservabilityInstanceAlertConfigGlobal
		return ret
	}).(ObservabilityInstanceAlertConfigGlobalOutput)
}

// The API key for OpsGenie.
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) OpsgenieApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.OpsgenieApiKey
	}).(pulumi.StringPtrOutput)
}

// The host to send OpsGenie API requests to. Must be a valid URL
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) OpsgenieApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.OpsgenieApiUrl
	}).(pulumi.StringPtrOutput)
}

// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) ResolveTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.ResolveTimeout
	}).(pulumi.StringPtrOutput)
}

// SMTP authentication information. Must be a valid email address
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) SmtpAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.SmtpAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// SMTP Auth using LOGIN and PLAIN.
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) SmtpAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.SmtpAuthPassword
	}).(pulumi.StringPtrOutput)
}

// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) SmtpAuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.SmtpAuthUsername
	}).(pulumi.StringPtrOutput)
}

// The default SMTP From header field. Must be a valid email address
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) SmtpFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.SmtpFrom
	}).(pulumi.StringPtrOutput)
}

// The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
func (o ObservabilityInstanceAlertConfigGlobalPtrOutput) SmtpSmartHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigGlobal) *string {
		if v == nil {
			return nil
		}
		return v.SmtpSmartHost
	}).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigReceiver struct {
	// List of email configurations.
	EmailConfigs []ObservabilityInstanceAlertConfigReceiverEmailConfig `pulumi:"emailConfigs"`
	// Name of the receiver.
	Name string `pulumi:"name"`
	// List of OpsGenie configurations.
	OpsgenieConfigs []ObservabilityInstanceAlertConfigReceiverOpsgenieConfig `pulumi:"opsgenieConfigs"`
	// List of Webhooks configurations.
	WebhooksConfigs []ObservabilityInstanceAlertConfigReceiverWebhooksConfig `pulumi:"webhooksConfigs"`
}

// ObservabilityInstanceAlertConfigReceiverInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverArgs and ObservabilityInstanceAlertConfigReceiverOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverArgs{...}
type ObservabilityInstanceAlertConfigReceiverInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverOutput() ObservabilityInstanceAlertConfigReceiverOutput
	ToObservabilityInstanceAlertConfigReceiverOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverOutput
}

type ObservabilityInstanceAlertConfigReceiverArgs struct {
	// List of email configurations.
	EmailConfigs ObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput `pulumi:"emailConfigs"`
	// Name of the receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// List of OpsGenie configurations.
	OpsgenieConfigs ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput `pulumi:"opsgenieConfigs"`
	// List of Webhooks configurations.
	WebhooksConfigs ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput `pulumi:"webhooksConfigs"`
}

func (ObservabilityInstanceAlertConfigReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverArgs) ToObservabilityInstanceAlertConfigReceiverOutput() ObservabilityInstanceAlertConfigReceiverOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverArgs) ToObservabilityInstanceAlertConfigReceiverOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverOutput)
}

// ObservabilityInstanceAlertConfigReceiverArrayInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverArray and ObservabilityInstanceAlertConfigReceiverArrayOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverArrayInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverArray{ ObservabilityInstanceAlertConfigReceiverArgs{...} }
type ObservabilityInstanceAlertConfigReceiverArrayInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverArrayOutput() ObservabilityInstanceAlertConfigReceiverArrayOutput
	ToObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverArrayOutput
}

type ObservabilityInstanceAlertConfigReceiverArray []ObservabilityInstanceAlertConfigReceiverInput

func (ObservabilityInstanceAlertConfigReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverArray) ToObservabilityInstanceAlertConfigReceiverArrayOutput() ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverArray) ToObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverArrayOutput)
}

type ObservabilityInstanceAlertConfigReceiverOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverOutput) ToObservabilityInstanceAlertConfigReceiverOutput() ObservabilityInstanceAlertConfigReceiverOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverOutput) ToObservabilityInstanceAlertConfigReceiverOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOutput {
	return o
}

// List of email configurations.
func (o ObservabilityInstanceAlertConfigReceiverOutput) EmailConfigs() ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiver) []ObservabilityInstanceAlertConfigReceiverEmailConfig {
		return v.EmailConfigs
	}).(ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput)
}

// Name of the receiver.
func (o ObservabilityInstanceAlertConfigReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// List of OpsGenie configurations.
func (o ObservabilityInstanceAlertConfigReceiverOutput) OpsgenieConfigs() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiver) []ObservabilityInstanceAlertConfigReceiverOpsgenieConfig {
		return v.OpsgenieConfigs
	}).(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput)
}

// List of Webhooks configurations.
func (o ObservabilityInstanceAlertConfigReceiverOutput) WebhooksConfigs() ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiver) []ObservabilityInstanceAlertConfigReceiverWebhooksConfig {
		return v.WebhooksConfigs
	}).(ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput)
}

type ObservabilityInstanceAlertConfigReceiverArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverArrayOutput) ToObservabilityInstanceAlertConfigReceiverArrayOutput() ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverArrayOutput) ToObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverArrayOutput) Index(i pulumi.IntInput) ObservabilityInstanceAlertConfigReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityInstanceAlertConfigReceiver {
		return vs[0].([]ObservabilityInstanceAlertConfigReceiver)[vs[1].(int)]
	}).(ObservabilityInstanceAlertConfigReceiverOutput)
}

type ObservabilityInstanceAlertConfigReceiverEmailConfig struct {
	// SMTP authentication information. Must be a valid email address
	AuthIdentity *string `pulumi:"authIdentity"`
	// SMTP authentication password.
	AuthPassword *string `pulumi:"authPassword"`
	// SMTP authentication username.
	AuthUsername *string `pulumi:"authUsername"`
	// The sender email address. Must be a valid email address
	From *string `pulumi:"from"`
	// The SMTP host through which emails are sent.
	SmartHost *string `pulumi:"smartHost"`
	// The email address to send notifications to. Must be a valid email address
	To *string `pulumi:"to"`
}

// ObservabilityInstanceAlertConfigReceiverEmailConfigInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverEmailConfigArgs and ObservabilityInstanceAlertConfigReceiverEmailConfigOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverEmailConfigInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverEmailConfigArgs{...}
type ObservabilityInstanceAlertConfigReceiverEmailConfigInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverEmailConfigOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigOutput
	ToObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigOutput
}

type ObservabilityInstanceAlertConfigReceiverEmailConfigArgs struct {
	// SMTP authentication information. Must be a valid email address
	AuthIdentity pulumi.StringPtrInput `pulumi:"authIdentity"`
	// SMTP authentication password.
	AuthPassword pulumi.StringPtrInput `pulumi:"authPassword"`
	// SMTP authentication username.
	AuthUsername pulumi.StringPtrInput `pulumi:"authUsername"`
	// The sender email address. Must be a valid email address
	From pulumi.StringPtrInput `pulumi:"from"`
	// The SMTP host through which emails are sent.
	SmartHost pulumi.StringPtrInput `pulumi:"smartHost"`
	// The email address to send notifications to. Must be a valid email address
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ToObservabilityInstanceAlertConfigReceiverEmailConfigOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ToObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverEmailConfigOutput)
}

// ObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverEmailConfigArray and ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverEmailConfigArray{ ObservabilityInstanceAlertConfigReceiverEmailConfigArgs{...} }
type ObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput
	ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput
}

type ObservabilityInstanceAlertConfigReceiverEmailConfigArray []ObservabilityInstanceAlertConfigReceiverEmailConfigInput

func (ObservabilityInstanceAlertConfigReceiverEmailConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverEmailConfigArray) ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverEmailConfigArray) ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput)
}

type ObservabilityInstanceAlertConfigReceiverEmailConfigOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ToObservabilityInstanceAlertConfigReceiverEmailConfigOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ToObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return o
}

// SMTP authentication information. Must be a valid email address
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.AuthIdentity }).(pulumi.StringPtrOutput)
}

// SMTP authentication password.
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// SMTP authentication username.
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

// The sender email address. Must be a valid email address
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.From }).(pulumi.StringPtrOutput)
}

// The SMTP host through which emails are sent.
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) SmartHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.SmartHost }).(pulumi.StringPtrOutput)
}

// The email address to send notifications to. Must be a valid email address
func (o ObservabilityInstanceAlertConfigReceiverEmailConfigOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverEmailConfig) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) Index(i pulumi.IntInput) ObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityInstanceAlertConfigReceiverEmailConfig {
		return vs[0].([]ObservabilityInstanceAlertConfigReceiverEmailConfig)[vs[1].(int)]
	}).(ObservabilityInstanceAlertConfigReceiverEmailConfigOutput)
}

type ObservabilityInstanceAlertConfigReceiverOpsgenieConfig struct {
	// The API key for OpsGenie.
	ApiKey *string `pulumi:"apiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	ApiUrl *string `pulumi:"apiUrl"`
	// Comma separated list of tags attached to the notifications.
	Tags *string `pulumi:"tags"`
}

// ObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs and ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{...}
type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput
	ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput
}

type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs struct {
	// The API key for OpsGenie.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	ApiUrl pulumi.StringPtrInput `pulumi:"apiUrl"`
	// Comma separated list of tags attached to the notifications.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
}

func (ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput)
}

// ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray and ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray{ ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{...} }
type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput
	ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput
}

type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray []ObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput

func (ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput)
}

type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return o
}

// The API key for OpsGenie.
func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverOpsgenieConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The host to send OpsGenie API requests to. Must be a valid URL
func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverOpsgenieConfig) *string { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Comma separated list of tags attached to the notifications.
func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverOpsgenieConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) Index(i pulumi.IntInput) ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityInstanceAlertConfigReceiverOpsgenieConfig {
		return vs[0].([]ObservabilityInstanceAlertConfigReceiverOpsgenieConfig)[vs[1].(int)]
	}).(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput)
}

type ObservabilityInstanceAlertConfigReceiverWebhooksConfig struct {
	// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
	MsTeams *bool `pulumi:"msTeams"`
	// The endpoint to send HTTP POST requests to. Must be a valid URL
	Url *string `pulumi:"url"`
}

// ObservabilityInstanceAlertConfigReceiverWebhooksConfigInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs and ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverWebhooksConfigInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{...}
type ObservabilityInstanceAlertConfigReceiverWebhooksConfigInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput
	ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput
}

type ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs struct {
	// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
	MsTeams pulumi.BoolPtrInput `pulumi:"msTeams"`
	// The endpoint to send HTTP POST requests to. Must be a valid URL
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput)
}

// ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput is an input type that accepts ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray and ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput` via:
//
//	ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray{ ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{...} }
type ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput
	ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput
}

type ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray []ObservabilityInstanceAlertConfigReceiverWebhooksConfigInput

func (ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return i.ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput)
}

type ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return o
}

// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) MsTeams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverWebhooksConfig) *bool { return v.MsTeams }).(pulumi.BoolPtrOutput)
}

// The endpoint to send HTTP POST requests to. Must be a valid URL
func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigReceiverWebhooksConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ToObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) Index(i pulumi.IntInput) ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityInstanceAlertConfigReceiverWebhooksConfig {
		return vs[0].([]ObservabilityInstanceAlertConfigReceiverWebhooksConfig)[vs[1].(int)]
	}).(ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput)
}

type ObservabilityInstanceAlertConfigRoute struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies []string `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval *string `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait *string `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match map[string]string `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex map[string]string `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver string `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval *string `pulumi:"repeatInterval"`
	// List of child routes.
	Routes []ObservabilityInstanceAlertConfigRouteRoute `pulumi:"routes"`
}

// ObservabilityInstanceAlertConfigRouteInput is an input type that accepts ObservabilityInstanceAlertConfigRouteArgs and ObservabilityInstanceAlertConfigRouteOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigRouteInput` via:
//
//	ObservabilityInstanceAlertConfigRouteArgs{...}
type ObservabilityInstanceAlertConfigRouteInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigRouteOutput() ObservabilityInstanceAlertConfigRouteOutput
	ToObservabilityInstanceAlertConfigRouteOutputWithContext(context.Context) ObservabilityInstanceAlertConfigRouteOutput
}

type ObservabilityInstanceAlertConfigRouteArgs struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match pulumi.StringMapInput `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex pulumi.StringMapInput `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
	// List of child routes.
	Routes ObservabilityInstanceAlertConfigRouteRouteArrayInput `pulumi:"routes"`
}

func (ObservabilityInstanceAlertConfigRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigRouteArgs) ToObservabilityInstanceAlertConfigRouteOutput() ObservabilityInstanceAlertConfigRouteOutput {
	return i.ToObservabilityInstanceAlertConfigRouteOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigRouteArgs) ToObservabilityInstanceAlertConfigRouteOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigRouteOutput)
}

func (i ObservabilityInstanceAlertConfigRouteArgs) ToObservabilityInstanceAlertConfigRoutePtrOutput() ObservabilityInstanceAlertConfigRoutePtrOutput {
	return i.ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigRouteArgs) ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigRouteOutput).ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(ctx)
}

// ObservabilityInstanceAlertConfigRoutePtrInput is an input type that accepts ObservabilityInstanceAlertConfigRouteArgs, ObservabilityInstanceAlertConfigRoutePtr and ObservabilityInstanceAlertConfigRoutePtrOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigRoutePtrInput` via:
//
//	        ObservabilityInstanceAlertConfigRouteArgs{...}
//
//	or:
//
//	        nil
type ObservabilityInstanceAlertConfigRoutePtrInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigRoutePtrOutput() ObservabilityInstanceAlertConfigRoutePtrOutput
	ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(context.Context) ObservabilityInstanceAlertConfigRoutePtrOutput
}

type observabilityInstanceAlertConfigRoutePtrType ObservabilityInstanceAlertConfigRouteArgs

func ObservabilityInstanceAlertConfigRoutePtr(v *ObservabilityInstanceAlertConfigRouteArgs) ObservabilityInstanceAlertConfigRoutePtrInput {
	return (*observabilityInstanceAlertConfigRoutePtrType)(v)
}

func (*observabilityInstanceAlertConfigRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (i *observabilityInstanceAlertConfigRoutePtrType) ToObservabilityInstanceAlertConfigRoutePtrOutput() ObservabilityInstanceAlertConfigRoutePtrOutput {
	return i.ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(context.Background())
}

func (i *observabilityInstanceAlertConfigRoutePtrType) ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigRoutePtrOutput)
}

type ObservabilityInstanceAlertConfigRouteOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigRouteOutput) ToObservabilityInstanceAlertConfigRouteOutput() ObservabilityInstanceAlertConfigRouteOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRouteOutput) ToObservabilityInstanceAlertConfigRouteOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRouteOutput) ToObservabilityInstanceAlertConfigRoutePtrOutput() ObservabilityInstanceAlertConfigRoutePtrOutput {
	return o.ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(context.Background())
}

func (o ObservabilityInstanceAlertConfigRouteOutput) ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObservabilityInstanceAlertConfigRoute) *ObservabilityInstanceAlertConfigRoute {
		return &v
	}).(ObservabilityInstanceAlertConfigRoutePtrOutput)
}

// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
func (o ObservabilityInstanceAlertConfigRouteOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
func (o ObservabilityInstanceAlertConfigRouteOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
func (o ObservabilityInstanceAlertConfigRouteOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// A set of equality matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRouteOutput) Match() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) map[string]string { return v.Match }).(pulumi.StringMapOutput)
}

// A set of regex-matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRouteOutput) MatchRegex() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) map[string]string { return v.MatchRegex }).(pulumi.StringMapOutput)
}

// The name of the receiver to route the alerts to.
func (o ObservabilityInstanceAlertConfigRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
func (o ObservabilityInstanceAlertConfigRouteOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

// List of child routes.
func (o ObservabilityInstanceAlertConfigRouteOutput) Routes() ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRoute) []ObservabilityInstanceAlertConfigRouteRoute {
		return v.Routes
	}).(ObservabilityInstanceAlertConfigRouteRouteArrayOutput)
}

type ObservabilityInstanceAlertConfigRoutePtrOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigRoutePtrOutput) ToObservabilityInstanceAlertConfigRoutePtrOutput() ObservabilityInstanceAlertConfigRoutePtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRoutePtrOutput) ToObservabilityInstanceAlertConfigRoutePtrOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRoutePtrOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRoutePtrOutput) Elem() ObservabilityInstanceAlertConfigRouteOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) ObservabilityInstanceAlertConfigRoute {
		if v != nil {
			return *v
		}
		var ret ObservabilityInstanceAlertConfigRoute
		return ret
	}).(ObservabilityInstanceAlertConfigRouteOutput)
}

// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) []string {
		if v == nil {
			return nil
		}
		return v.GroupBies
	}).(pulumi.StringArrayOutput)
}

// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) *string {
		if v == nil {
			return nil
		}
		return v.GroupInterval
	}).(pulumi.StringPtrOutput)
}

// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) *string {
		if v == nil {
			return nil
		}
		return v.GroupWait
	}).(pulumi.StringPtrOutput)
}

// A set of equality matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) Match() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) map[string]string {
		if v == nil {
			return nil
		}
		return v.Match
	}).(pulumi.StringMapOutput)
}

// A set of regex-matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) MatchRegex() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchRegex
	}).(pulumi.StringMapOutput)
}

// The name of the receiver to route the alerts to.
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) Receiver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) *string {
		if v == nil {
			return nil
		}
		return &v.Receiver
	}).(pulumi.StringPtrOutput)
}

// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) *string {
		if v == nil {
			return nil
		}
		return v.RepeatInterval
	}).(pulumi.StringPtrOutput)
}

// List of child routes.
func (o ObservabilityInstanceAlertConfigRoutePtrOutput) Routes() ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o.ApplyT(func(v *ObservabilityInstanceAlertConfigRoute) []ObservabilityInstanceAlertConfigRouteRoute {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(ObservabilityInstanceAlertConfigRouteRouteArrayOutput)
}

type ObservabilityInstanceAlertConfigRouteRoute struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies []string `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval *string `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait *string `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match map[string]string `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex map[string]string `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver string `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// ObservabilityInstanceAlertConfigRouteRouteInput is an input type that accepts ObservabilityInstanceAlertConfigRouteRouteArgs and ObservabilityInstanceAlertConfigRouteRouteOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigRouteRouteInput` via:
//
//	ObservabilityInstanceAlertConfigRouteRouteArgs{...}
type ObservabilityInstanceAlertConfigRouteRouteInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigRouteRouteOutput() ObservabilityInstanceAlertConfigRouteRouteOutput
	ToObservabilityInstanceAlertConfigRouteRouteOutputWithContext(context.Context) ObservabilityInstanceAlertConfigRouteRouteOutput
}

type ObservabilityInstanceAlertConfigRouteRouteArgs struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match pulumi.StringMapInput `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex pulumi.StringMapInput `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (ObservabilityInstanceAlertConfigRouteRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigRouteRouteArgs) ToObservabilityInstanceAlertConfigRouteRouteOutput() ObservabilityInstanceAlertConfigRouteRouteOutput {
	return i.ToObservabilityInstanceAlertConfigRouteRouteOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigRouteRouteArgs) ToObservabilityInstanceAlertConfigRouteRouteOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigRouteRouteOutput)
}

// ObservabilityInstanceAlertConfigRouteRouteArrayInput is an input type that accepts ObservabilityInstanceAlertConfigRouteRouteArray and ObservabilityInstanceAlertConfigRouteRouteArrayOutput values.
// You can construct a concrete instance of `ObservabilityInstanceAlertConfigRouteRouteArrayInput` via:
//
//	ObservabilityInstanceAlertConfigRouteRouteArray{ ObservabilityInstanceAlertConfigRouteRouteArgs{...} }
type ObservabilityInstanceAlertConfigRouteRouteArrayInput interface {
	pulumi.Input

	ToObservabilityInstanceAlertConfigRouteRouteArrayOutput() ObservabilityInstanceAlertConfigRouteRouteArrayOutput
	ToObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(context.Context) ObservabilityInstanceAlertConfigRouteRouteArrayOutput
}

type ObservabilityInstanceAlertConfigRouteRouteArray []ObservabilityInstanceAlertConfigRouteRouteInput

func (ObservabilityInstanceAlertConfigRouteRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (i ObservabilityInstanceAlertConfigRouteRouteArray) ToObservabilityInstanceAlertConfigRouteRouteArrayOutput() ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return i.ToObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(context.Background())
}

func (i ObservabilityInstanceAlertConfigRouteRouteArray) ToObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityInstanceAlertConfigRouteRouteArrayOutput)
}

type ObservabilityInstanceAlertConfigRouteRouteOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigRouteRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigRouteRouteOutput) ToObservabilityInstanceAlertConfigRouteRouteOutput() ObservabilityInstanceAlertConfigRouteRouteOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRouteRouteOutput) ToObservabilityInstanceAlertConfigRouteRouteOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteRouteOutput {
	return o
}

// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// A set of equality matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) Match() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) map[string]string { return v.Match }).(pulumi.StringMapOutput)
}

// A set of regex-matchers an alert has to fulfill to match the node.
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) MatchRegex() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) map[string]string { return v.MatchRegex }).(pulumi.StringMapOutput)
}

// The name of the receiver to route the alerts to.
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
func (o ObservabilityInstanceAlertConfigRouteRouteOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityInstanceAlertConfigRouteRoute) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type ObservabilityInstanceAlertConfigRouteRouteArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityInstanceAlertConfigRouteRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (o ObservabilityInstanceAlertConfigRouteRouteArrayOutput) ToObservabilityInstanceAlertConfigRouteRouteArrayOutput() ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRouteRouteArrayOutput) ToObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(ctx context.Context) ObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o
}

func (o ObservabilityInstanceAlertConfigRouteRouteArrayOutput) Index(i pulumi.IntInput) ObservabilityInstanceAlertConfigRouteRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityInstanceAlertConfigRouteRoute {
		return vs[0].([]ObservabilityInstanceAlertConfigRouteRoute)[vs[1].(int)]
	}).(ObservabilityInstanceAlertConfigRouteRouteOutput)
}

type ObservabilityLogalertgroupRule struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert string `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations map[string]string `pulumi:"annotations"`
	// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression string `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For *string `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels map[string]string `pulumi:"labels"`
}

// ObservabilityLogalertgroupRuleInput is an input type that accepts ObservabilityLogalertgroupRuleArgs and ObservabilityLogalertgroupRuleOutput values.
// You can construct a concrete instance of `ObservabilityLogalertgroupRuleInput` via:
//
//	ObservabilityLogalertgroupRuleArgs{...}
type ObservabilityLogalertgroupRuleInput interface {
	pulumi.Input

	ToObservabilityLogalertgroupRuleOutput() ObservabilityLogalertgroupRuleOutput
	ToObservabilityLogalertgroupRuleOutputWithContext(context.Context) ObservabilityLogalertgroupRuleOutput
}

type ObservabilityLogalertgroupRuleArgs struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert pulumi.StringInput `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For pulumi.StringPtrInput `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ObservabilityLogalertgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityLogalertgroupRule)(nil)).Elem()
}

func (i ObservabilityLogalertgroupRuleArgs) ToObservabilityLogalertgroupRuleOutput() ObservabilityLogalertgroupRuleOutput {
	return i.ToObservabilityLogalertgroupRuleOutputWithContext(context.Background())
}

func (i ObservabilityLogalertgroupRuleArgs) ToObservabilityLogalertgroupRuleOutputWithContext(ctx context.Context) ObservabilityLogalertgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityLogalertgroupRuleOutput)
}

// ObservabilityLogalertgroupRuleArrayInput is an input type that accepts ObservabilityLogalertgroupRuleArray and ObservabilityLogalertgroupRuleArrayOutput values.
// You can construct a concrete instance of `ObservabilityLogalertgroupRuleArrayInput` via:
//
//	ObservabilityLogalertgroupRuleArray{ ObservabilityLogalertgroupRuleArgs{...} }
type ObservabilityLogalertgroupRuleArrayInput interface {
	pulumi.Input

	ToObservabilityLogalertgroupRuleArrayOutput() ObservabilityLogalertgroupRuleArrayOutput
	ToObservabilityLogalertgroupRuleArrayOutputWithContext(context.Context) ObservabilityLogalertgroupRuleArrayOutput
}

type ObservabilityLogalertgroupRuleArray []ObservabilityLogalertgroupRuleInput

func (ObservabilityLogalertgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityLogalertgroupRule)(nil)).Elem()
}

func (i ObservabilityLogalertgroupRuleArray) ToObservabilityLogalertgroupRuleArrayOutput() ObservabilityLogalertgroupRuleArrayOutput {
	return i.ToObservabilityLogalertgroupRuleArrayOutputWithContext(context.Background())
}

func (i ObservabilityLogalertgroupRuleArray) ToObservabilityLogalertgroupRuleArrayOutputWithContext(ctx context.Context) ObservabilityLogalertgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityLogalertgroupRuleArrayOutput)
}

type ObservabilityLogalertgroupRuleOutput struct{ *pulumi.OutputState }

func (ObservabilityLogalertgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityLogalertgroupRule)(nil)).Elem()
}

func (o ObservabilityLogalertgroupRuleOutput) ToObservabilityLogalertgroupRuleOutput() ObservabilityLogalertgroupRuleOutput {
	return o
}

func (o ObservabilityLogalertgroupRuleOutput) ToObservabilityLogalertgroupRuleOutputWithContext(ctx context.Context) ObservabilityLogalertgroupRuleOutput {
	return o
}

// The name of the alert rule. Is the identifier and must be unique in the group.
func (o ObservabilityLogalertgroupRuleOutput) Alert() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityLogalertgroupRule) string { return v.Alert }).(pulumi.StringOutput)
}

// A map of key:value. Annotations to add or overwrite for each alert
func (o ObservabilityLogalertgroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityLogalertgroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
func (o ObservabilityLogalertgroupRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityLogalertgroupRule) string { return v.Expression }).(pulumi.StringOutput)
}

// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
func (o ObservabilityLogalertgroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObservabilityLogalertgroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// A map of key:value. Labels to add or overwrite for each alert
func (o ObservabilityLogalertgroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityLogalertgroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ObservabilityLogalertgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityLogalertgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityLogalertgroupRule)(nil)).Elem()
}

func (o ObservabilityLogalertgroupRuleArrayOutput) ToObservabilityLogalertgroupRuleArrayOutput() ObservabilityLogalertgroupRuleArrayOutput {
	return o
}

func (o ObservabilityLogalertgroupRuleArrayOutput) ToObservabilityLogalertgroupRuleArrayOutputWithContext(ctx context.Context) ObservabilityLogalertgroupRuleArrayOutput {
	return o
}

func (o ObservabilityLogalertgroupRuleArrayOutput) Index(i pulumi.IntInput) ObservabilityLogalertgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityLogalertgroupRule {
		return vs[0].([]ObservabilityLogalertgroupRule)[vs[1].(int)]
	}).(ObservabilityLogalertgroupRuleOutput)
}

type ObservabilityScrapeconfigBasicAuth struct {
	// Specifies basic auth password.
	Password string `pulumi:"password"`
	// Specifies basic auth username.
	Username string `pulumi:"username"`
}

// ObservabilityScrapeconfigBasicAuthInput is an input type that accepts ObservabilityScrapeconfigBasicAuthArgs and ObservabilityScrapeconfigBasicAuthOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigBasicAuthInput` via:
//
//	ObservabilityScrapeconfigBasicAuthArgs{...}
type ObservabilityScrapeconfigBasicAuthInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigBasicAuthOutput() ObservabilityScrapeconfigBasicAuthOutput
	ToObservabilityScrapeconfigBasicAuthOutputWithContext(context.Context) ObservabilityScrapeconfigBasicAuthOutput
}

type ObservabilityScrapeconfigBasicAuthArgs struct {
	// Specifies basic auth password.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies basic auth username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ObservabilityScrapeconfigBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (i ObservabilityScrapeconfigBasicAuthArgs) ToObservabilityScrapeconfigBasicAuthOutput() ObservabilityScrapeconfigBasicAuthOutput {
	return i.ToObservabilityScrapeconfigBasicAuthOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigBasicAuthArgs) ToObservabilityScrapeconfigBasicAuthOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigBasicAuthOutput)
}

func (i ObservabilityScrapeconfigBasicAuthArgs) ToObservabilityScrapeconfigBasicAuthPtrOutput() ObservabilityScrapeconfigBasicAuthPtrOutput {
	return i.ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigBasicAuthArgs) ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigBasicAuthOutput).ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(ctx)
}

// ObservabilityScrapeconfigBasicAuthPtrInput is an input type that accepts ObservabilityScrapeconfigBasicAuthArgs, ObservabilityScrapeconfigBasicAuthPtr and ObservabilityScrapeconfigBasicAuthPtrOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigBasicAuthPtrInput` via:
//
//	        ObservabilityScrapeconfigBasicAuthArgs{...}
//
//	or:
//
//	        nil
type ObservabilityScrapeconfigBasicAuthPtrInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigBasicAuthPtrOutput() ObservabilityScrapeconfigBasicAuthPtrOutput
	ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(context.Context) ObservabilityScrapeconfigBasicAuthPtrOutput
}

type observabilityScrapeconfigBasicAuthPtrType ObservabilityScrapeconfigBasicAuthArgs

func ObservabilityScrapeconfigBasicAuthPtr(v *ObservabilityScrapeconfigBasicAuthArgs) ObservabilityScrapeconfigBasicAuthPtrInput {
	return (*observabilityScrapeconfigBasicAuthPtrType)(v)
}

func (*observabilityScrapeconfigBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (i *observabilityScrapeconfigBasicAuthPtrType) ToObservabilityScrapeconfigBasicAuthPtrOutput() ObservabilityScrapeconfigBasicAuthPtrOutput {
	return i.ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(context.Background())
}

func (i *observabilityScrapeconfigBasicAuthPtrType) ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigBasicAuthPtrOutput)
}

type ObservabilityScrapeconfigBasicAuthOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (o ObservabilityScrapeconfigBasicAuthOutput) ToObservabilityScrapeconfigBasicAuthOutput() ObservabilityScrapeconfigBasicAuthOutput {
	return o
}

func (o ObservabilityScrapeconfigBasicAuthOutput) ToObservabilityScrapeconfigBasicAuthOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthOutput {
	return o
}

func (o ObservabilityScrapeconfigBasicAuthOutput) ToObservabilityScrapeconfigBasicAuthPtrOutput() ObservabilityScrapeconfigBasicAuthPtrOutput {
	return o.ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(context.Background())
}

func (o ObservabilityScrapeconfigBasicAuthOutput) ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObservabilityScrapeconfigBasicAuth) *ObservabilityScrapeconfigBasicAuth {
		return &v
	}).(ObservabilityScrapeconfigBasicAuthPtrOutput)
}

// Specifies basic auth password.
func (o ObservabilityScrapeconfigBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityScrapeconfigBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies basic auth username.
func (o ObservabilityScrapeconfigBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ObservabilityScrapeconfigBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type ObservabilityScrapeconfigBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (o ObservabilityScrapeconfigBasicAuthPtrOutput) ToObservabilityScrapeconfigBasicAuthPtrOutput() ObservabilityScrapeconfigBasicAuthPtrOutput {
	return o
}

func (o ObservabilityScrapeconfigBasicAuthPtrOutput) ToObservabilityScrapeconfigBasicAuthPtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigBasicAuthPtrOutput {
	return o
}

func (o ObservabilityScrapeconfigBasicAuthPtrOutput) Elem() ObservabilityScrapeconfigBasicAuthOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfigBasicAuth) ObservabilityScrapeconfigBasicAuth {
		if v != nil {
			return *v
		}
		var ret ObservabilityScrapeconfigBasicAuth
		return ret
	}).(ObservabilityScrapeconfigBasicAuthOutput)
}

// Specifies basic auth password.
func (o ObservabilityScrapeconfigBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfigBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies basic auth username.
func (o ObservabilityScrapeconfigBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfigBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ObservabilityScrapeconfigSaml2 struct {
	// Specifies if URL parameters are enabled. Defaults to `true`
	EnableUrlParameters *bool `pulumi:"enableUrlParameters"`
}

// ObservabilityScrapeconfigSaml2Input is an input type that accepts ObservabilityScrapeconfigSaml2Args and ObservabilityScrapeconfigSaml2Output values.
// You can construct a concrete instance of `ObservabilityScrapeconfigSaml2Input` via:
//
//	ObservabilityScrapeconfigSaml2Args{...}
type ObservabilityScrapeconfigSaml2Input interface {
	pulumi.Input

	ToObservabilityScrapeconfigSaml2Output() ObservabilityScrapeconfigSaml2Output
	ToObservabilityScrapeconfigSaml2OutputWithContext(context.Context) ObservabilityScrapeconfigSaml2Output
}

type ObservabilityScrapeconfigSaml2Args struct {
	// Specifies if URL parameters are enabled. Defaults to `true`
	EnableUrlParameters pulumi.BoolPtrInput `pulumi:"enableUrlParameters"`
}

func (ObservabilityScrapeconfigSaml2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (i ObservabilityScrapeconfigSaml2Args) ToObservabilityScrapeconfigSaml2Output() ObservabilityScrapeconfigSaml2Output {
	return i.ToObservabilityScrapeconfigSaml2OutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigSaml2Args) ToObservabilityScrapeconfigSaml2OutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigSaml2Output)
}

func (i ObservabilityScrapeconfigSaml2Args) ToObservabilityScrapeconfigSaml2PtrOutput() ObservabilityScrapeconfigSaml2PtrOutput {
	return i.ToObservabilityScrapeconfigSaml2PtrOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigSaml2Args) ToObservabilityScrapeconfigSaml2PtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigSaml2Output).ToObservabilityScrapeconfigSaml2PtrOutputWithContext(ctx)
}

// ObservabilityScrapeconfigSaml2PtrInput is an input type that accepts ObservabilityScrapeconfigSaml2Args, ObservabilityScrapeconfigSaml2Ptr and ObservabilityScrapeconfigSaml2PtrOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigSaml2PtrInput` via:
//
//	        ObservabilityScrapeconfigSaml2Args{...}
//
//	or:
//
//	        nil
type ObservabilityScrapeconfigSaml2PtrInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigSaml2PtrOutput() ObservabilityScrapeconfigSaml2PtrOutput
	ToObservabilityScrapeconfigSaml2PtrOutputWithContext(context.Context) ObservabilityScrapeconfigSaml2PtrOutput
}

type observabilityScrapeconfigSaml2PtrType ObservabilityScrapeconfigSaml2Args

func ObservabilityScrapeconfigSaml2Ptr(v *ObservabilityScrapeconfigSaml2Args) ObservabilityScrapeconfigSaml2PtrInput {
	return (*observabilityScrapeconfigSaml2PtrType)(v)
}

func (*observabilityScrapeconfigSaml2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (i *observabilityScrapeconfigSaml2PtrType) ToObservabilityScrapeconfigSaml2PtrOutput() ObservabilityScrapeconfigSaml2PtrOutput {
	return i.ToObservabilityScrapeconfigSaml2PtrOutputWithContext(context.Background())
}

func (i *observabilityScrapeconfigSaml2PtrType) ToObservabilityScrapeconfigSaml2PtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigSaml2PtrOutput)
}

type ObservabilityScrapeconfigSaml2Output struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigSaml2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (o ObservabilityScrapeconfigSaml2Output) ToObservabilityScrapeconfigSaml2Output() ObservabilityScrapeconfigSaml2Output {
	return o
}

func (o ObservabilityScrapeconfigSaml2Output) ToObservabilityScrapeconfigSaml2OutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2Output {
	return o
}

func (o ObservabilityScrapeconfigSaml2Output) ToObservabilityScrapeconfigSaml2PtrOutput() ObservabilityScrapeconfigSaml2PtrOutput {
	return o.ToObservabilityScrapeconfigSaml2PtrOutputWithContext(context.Background())
}

func (o ObservabilityScrapeconfigSaml2Output) ToObservabilityScrapeconfigSaml2PtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObservabilityScrapeconfigSaml2) *ObservabilityScrapeconfigSaml2 {
		return &v
	}).(ObservabilityScrapeconfigSaml2PtrOutput)
}

// Specifies if URL parameters are enabled. Defaults to `true`
func (o ObservabilityScrapeconfigSaml2Output) EnableUrlParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ObservabilityScrapeconfigSaml2) *bool { return v.EnableUrlParameters }).(pulumi.BoolPtrOutput)
}

type ObservabilityScrapeconfigSaml2PtrOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigSaml2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (o ObservabilityScrapeconfigSaml2PtrOutput) ToObservabilityScrapeconfigSaml2PtrOutput() ObservabilityScrapeconfigSaml2PtrOutput {
	return o
}

func (o ObservabilityScrapeconfigSaml2PtrOutput) ToObservabilityScrapeconfigSaml2PtrOutputWithContext(ctx context.Context) ObservabilityScrapeconfigSaml2PtrOutput {
	return o
}

func (o ObservabilityScrapeconfigSaml2PtrOutput) Elem() ObservabilityScrapeconfigSaml2Output {
	return o.ApplyT(func(v *ObservabilityScrapeconfigSaml2) ObservabilityScrapeconfigSaml2 {
		if v != nil {
			return *v
		}
		var ret ObservabilityScrapeconfigSaml2
		return ret
	}).(ObservabilityScrapeconfigSaml2Output)
}

// Specifies if URL parameters are enabled. Defaults to `true`
func (o ObservabilityScrapeconfigSaml2PtrOutput) EnableUrlParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ObservabilityScrapeconfigSaml2) *bool {
		if v == nil {
			return nil
		}
		return v.EnableUrlParameters
	}).(pulumi.BoolPtrOutput)
}

type ObservabilityScrapeconfigTarget struct {
	// Specifies labels.
	Labels map[string]string `pulumi:"labels"`
	// Specifies target URLs.
	Urls []string `pulumi:"urls"`
}

// ObservabilityScrapeconfigTargetInput is an input type that accepts ObservabilityScrapeconfigTargetArgs and ObservabilityScrapeconfigTargetOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigTargetInput` via:
//
//	ObservabilityScrapeconfigTargetArgs{...}
type ObservabilityScrapeconfigTargetInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigTargetOutput() ObservabilityScrapeconfigTargetOutput
	ToObservabilityScrapeconfigTargetOutputWithContext(context.Context) ObservabilityScrapeconfigTargetOutput
}

type ObservabilityScrapeconfigTargetArgs struct {
	// Specifies labels.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies target URLs.
	Urls pulumi.StringArrayInput `pulumi:"urls"`
}

func (ObservabilityScrapeconfigTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (i ObservabilityScrapeconfigTargetArgs) ToObservabilityScrapeconfigTargetOutput() ObservabilityScrapeconfigTargetOutput {
	return i.ToObservabilityScrapeconfigTargetOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigTargetArgs) ToObservabilityScrapeconfigTargetOutputWithContext(ctx context.Context) ObservabilityScrapeconfigTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigTargetOutput)
}

// ObservabilityScrapeconfigTargetArrayInput is an input type that accepts ObservabilityScrapeconfigTargetArray and ObservabilityScrapeconfigTargetArrayOutput values.
// You can construct a concrete instance of `ObservabilityScrapeconfigTargetArrayInput` via:
//
//	ObservabilityScrapeconfigTargetArray{ ObservabilityScrapeconfigTargetArgs{...} }
type ObservabilityScrapeconfigTargetArrayInput interface {
	pulumi.Input

	ToObservabilityScrapeconfigTargetArrayOutput() ObservabilityScrapeconfigTargetArrayOutput
	ToObservabilityScrapeconfigTargetArrayOutputWithContext(context.Context) ObservabilityScrapeconfigTargetArrayOutput
}

type ObservabilityScrapeconfigTargetArray []ObservabilityScrapeconfigTargetInput

func (ObservabilityScrapeconfigTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (i ObservabilityScrapeconfigTargetArray) ToObservabilityScrapeconfigTargetArrayOutput() ObservabilityScrapeconfigTargetArrayOutput {
	return i.ToObservabilityScrapeconfigTargetArrayOutputWithContext(context.Background())
}

func (i ObservabilityScrapeconfigTargetArray) ToObservabilityScrapeconfigTargetArrayOutputWithContext(ctx context.Context) ObservabilityScrapeconfigTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityScrapeconfigTargetArrayOutput)
}

type ObservabilityScrapeconfigTargetOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (o ObservabilityScrapeconfigTargetOutput) ToObservabilityScrapeconfigTargetOutput() ObservabilityScrapeconfigTargetOutput {
	return o
}

func (o ObservabilityScrapeconfigTargetOutput) ToObservabilityScrapeconfigTargetOutputWithContext(ctx context.Context) ObservabilityScrapeconfigTargetOutput {
	return o
}

// Specifies labels.
func (o ObservabilityScrapeconfigTargetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObservabilityScrapeconfigTarget) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies target URLs.
func (o ObservabilityScrapeconfigTargetOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObservabilityScrapeconfigTarget) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

type ObservabilityScrapeconfigTargetArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityScrapeconfigTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (o ObservabilityScrapeconfigTargetArrayOutput) ToObservabilityScrapeconfigTargetArrayOutput() ObservabilityScrapeconfigTargetArrayOutput {
	return o
}

func (o ObservabilityScrapeconfigTargetArrayOutput) ToObservabilityScrapeconfigTargetArrayOutputWithContext(ctx context.Context) ObservabilityScrapeconfigTargetArrayOutput {
	return o
}

func (o ObservabilityScrapeconfigTargetArrayOutput) Index(i pulumi.IntInput) ObservabilityScrapeconfigTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObservabilityScrapeconfigTarget {
		return vs[0].([]ObservabilityScrapeconfigTarget)[vs[1].(int)]
	}).(ObservabilityScrapeconfigTargetOutput)
}

type OpensearchInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite *string `pulumi:"graphite"`
	// The garbage collector to use for OpenSearch.
	JavaGarbageCollector *string `pulumi:"javaGarbageCollector"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace *int `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace *int `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold *int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency *int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix *string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId *string `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
	Plugins []string `pulumi:"plugins"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl *string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// The TLS protocol to use.
	TlsProtocols []string `pulumi:"tlsProtocols"`
}

// OpensearchInstanceParametersInput is an input type that accepts OpensearchInstanceParametersArgs and OpensearchInstanceParametersOutput values.
// You can construct a concrete instance of `OpensearchInstanceParametersInput` via:
//
//	OpensearchInstanceParametersArgs{...}
type OpensearchInstanceParametersInput interface {
	pulumi.Input

	ToOpensearchInstanceParametersOutput() OpensearchInstanceParametersOutput
	ToOpensearchInstanceParametersOutputWithContext(context.Context) OpensearchInstanceParametersOutput
}

type OpensearchInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring pulumi.BoolPtrInput `pulumi:"enableMonitoring"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite pulumi.StringPtrInput `pulumi:"graphite"`
	// The garbage collector to use for OpenSearch.
	JavaGarbageCollector pulumi.StringPtrInput `pulumi:"javaGarbageCollector"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace pulumi.IntPtrInput `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace pulumi.IntPtrInput `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntPtrInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency pulumi.IntPtrInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix pulumi.StringPtrInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringPtrInput `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
	Plugins pulumi.StringArrayInput `pulumi:"plugins"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringPtrInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// The TLS protocol to use.
	TlsProtocols pulumi.StringArrayInput `pulumi:"tlsProtocols"`
}

func (OpensearchInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpensearchInstanceParameters)(nil)).Elem()
}

func (i OpensearchInstanceParametersArgs) ToOpensearchInstanceParametersOutput() OpensearchInstanceParametersOutput {
	return i.ToOpensearchInstanceParametersOutputWithContext(context.Background())
}

func (i OpensearchInstanceParametersArgs) ToOpensearchInstanceParametersOutputWithContext(ctx context.Context) OpensearchInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceParametersOutput)
}

func (i OpensearchInstanceParametersArgs) ToOpensearchInstanceParametersPtrOutput() OpensearchInstanceParametersPtrOutput {
	return i.ToOpensearchInstanceParametersPtrOutputWithContext(context.Background())
}

func (i OpensearchInstanceParametersArgs) ToOpensearchInstanceParametersPtrOutputWithContext(ctx context.Context) OpensearchInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceParametersOutput).ToOpensearchInstanceParametersPtrOutputWithContext(ctx)
}

// OpensearchInstanceParametersPtrInput is an input type that accepts OpensearchInstanceParametersArgs, OpensearchInstanceParametersPtr and OpensearchInstanceParametersPtrOutput values.
// You can construct a concrete instance of `OpensearchInstanceParametersPtrInput` via:
//
//	        OpensearchInstanceParametersArgs{...}
//
//	or:
//
//	        nil
type OpensearchInstanceParametersPtrInput interface {
	pulumi.Input

	ToOpensearchInstanceParametersPtrOutput() OpensearchInstanceParametersPtrOutput
	ToOpensearchInstanceParametersPtrOutputWithContext(context.Context) OpensearchInstanceParametersPtrOutput
}

type opensearchInstanceParametersPtrType OpensearchInstanceParametersArgs

func OpensearchInstanceParametersPtr(v *OpensearchInstanceParametersArgs) OpensearchInstanceParametersPtrInput {
	return (*opensearchInstanceParametersPtrType)(v)
}

func (*opensearchInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchInstanceParameters)(nil)).Elem()
}

func (i *opensearchInstanceParametersPtrType) ToOpensearchInstanceParametersPtrOutput() OpensearchInstanceParametersPtrOutput {
	return i.ToOpensearchInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *opensearchInstanceParametersPtrType) ToOpensearchInstanceParametersPtrOutputWithContext(ctx context.Context) OpensearchInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceParametersPtrOutput)
}

type OpensearchInstanceParametersOutput struct{ *pulumi.OutputState }

func (OpensearchInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpensearchInstanceParameters)(nil)).Elem()
}

func (o OpensearchInstanceParametersOutput) ToOpensearchInstanceParametersOutput() OpensearchInstanceParametersOutput {
	return o
}

func (o OpensearchInstanceParametersOutput) ToOpensearchInstanceParametersOutputWithContext(ctx context.Context) OpensearchInstanceParametersOutput {
	return o
}

func (o OpensearchInstanceParametersOutput) ToOpensearchInstanceParametersPtrOutput() OpensearchInstanceParametersPtrOutput {
	return o.ToOpensearchInstanceParametersPtrOutputWithContext(context.Background())
}

func (o OpensearchInstanceParametersOutput) ToOpensearchInstanceParametersPtrOutputWithContext(ctx context.Context) OpensearchInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpensearchInstanceParameters) *OpensearchInstanceParameters {
		return &v
	}).(OpensearchInstanceParametersPtrOutput)
}

// Enable monitoring.
func (o OpensearchInstanceParametersOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *bool { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o OpensearchInstanceParametersOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *string { return v.Graphite }).(pulumi.StringPtrOutput)
}

// The garbage collector to use for OpenSearch.
func (o OpensearchInstanceParametersOutput) JavaGarbageCollector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *string { return v.JavaGarbageCollector }).(pulumi.StringPtrOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o OpensearchInstanceParametersOutput) JavaHeapspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *int { return v.JavaHeapspace }).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o OpensearchInstanceParametersOutput) JavaMaxmetaspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *int { return v.JavaMaxmetaspace }).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o OpensearchInstanceParametersOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *int { return v.MaxDiskThreshold }).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o OpensearchInstanceParametersOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *int { return v.MetricsFrequency }).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o OpensearchInstanceParametersOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *string { return v.MetricsPrefix }).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o OpensearchInstanceParametersOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *string { return v.MonitoringInstanceId }).(pulumi.StringPtrOutput)
}

// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
func (o OpensearchInstanceParametersOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) []string { return v.Plugins }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o OpensearchInstanceParametersOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) *string { return v.SgwAcl }).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o OpensearchInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o OpensearchInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// The TLS protocol to use.
func (o OpensearchInstanceParametersOutput) TlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpensearchInstanceParameters) []string { return v.TlsProtocols }).(pulumi.StringArrayOutput)
}

type OpensearchInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (OpensearchInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchInstanceParameters)(nil)).Elem()
}

func (o OpensearchInstanceParametersPtrOutput) ToOpensearchInstanceParametersPtrOutput() OpensearchInstanceParametersPtrOutput {
	return o
}

func (o OpensearchInstanceParametersPtrOutput) ToOpensearchInstanceParametersPtrOutputWithContext(ctx context.Context) OpensearchInstanceParametersPtrOutput {
	return o
}

func (o OpensearchInstanceParametersPtrOutput) Elem() OpensearchInstanceParametersOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) OpensearchInstanceParameters {
		if v != nil {
			return *v
		}
		var ret OpensearchInstanceParameters
		return ret
	}).(OpensearchInstanceParametersOutput)
}

// Enable monitoring.
func (o OpensearchInstanceParametersPtrOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMonitoring
	}).(pulumi.BoolPtrOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o OpensearchInstanceParametersPtrOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Graphite
	}).(pulumi.StringPtrOutput)
}

// The garbage collector to use for OpenSearch.
func (o OpensearchInstanceParametersPtrOutput) JavaGarbageCollector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.JavaGarbageCollector
	}).(pulumi.StringPtrOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o OpensearchInstanceParametersPtrOutput) JavaHeapspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.JavaHeapspace
	}).(pulumi.IntPtrOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o OpensearchInstanceParametersPtrOutput) JavaMaxmetaspace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.JavaMaxmetaspace
	}).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o OpensearchInstanceParametersPtrOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDiskThreshold
	}).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o OpensearchInstanceParametersPtrOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MetricsFrequency
	}).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o OpensearchInstanceParametersPtrOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o OpensearchInstanceParametersPtrOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringInstanceId
	}).(pulumi.StringPtrOutput)
}

// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
func (o OpensearchInstanceParametersPtrOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o OpensearchInstanceParametersPtrOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.SgwAcl
	}).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o OpensearchInstanceParametersPtrOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o OpensearchInstanceParametersPtrOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.TlsCiphers
	}).(pulumi.StringArrayOutput)
}

// The TLS protocol to use.
func (o OpensearchInstanceParametersPtrOutput) TlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpensearchInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.TlsProtocols
	}).(pulumi.StringArrayOutput)
}

type PostgresflexInstanceFlavor struct {
	Cpu         int     `pulumi:"cpu"`
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Ram         int     `pulumi:"ram"`
}

// PostgresflexInstanceFlavorInput is an input type that accepts PostgresflexInstanceFlavorArgs and PostgresflexInstanceFlavorOutput values.
// You can construct a concrete instance of `PostgresflexInstanceFlavorInput` via:
//
//	PostgresflexInstanceFlavorArgs{...}
type PostgresflexInstanceFlavorInput interface {
	pulumi.Input

	ToPostgresflexInstanceFlavorOutput() PostgresflexInstanceFlavorOutput
	ToPostgresflexInstanceFlavorOutputWithContext(context.Context) PostgresflexInstanceFlavorOutput
}

type PostgresflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput       `pulumi:"cpu"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Ram         pulumi.IntInput       `pulumi:"ram"`
}

func (PostgresflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresflexInstanceFlavor)(nil)).Elem()
}

func (i PostgresflexInstanceFlavorArgs) ToPostgresflexInstanceFlavorOutput() PostgresflexInstanceFlavorOutput {
	return i.ToPostgresflexInstanceFlavorOutputWithContext(context.Background())
}

func (i PostgresflexInstanceFlavorArgs) ToPostgresflexInstanceFlavorOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceFlavorOutput)
}

func (i PostgresflexInstanceFlavorArgs) ToPostgresflexInstanceFlavorPtrOutput() PostgresflexInstanceFlavorPtrOutput {
	return i.ToPostgresflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i PostgresflexInstanceFlavorArgs) ToPostgresflexInstanceFlavorPtrOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceFlavorOutput).ToPostgresflexInstanceFlavorPtrOutputWithContext(ctx)
}

// PostgresflexInstanceFlavorPtrInput is an input type that accepts PostgresflexInstanceFlavorArgs, PostgresflexInstanceFlavorPtr and PostgresflexInstanceFlavorPtrOutput values.
// You can construct a concrete instance of `PostgresflexInstanceFlavorPtrInput` via:
//
//	        PostgresflexInstanceFlavorArgs{...}
//
//	or:
//
//	        nil
type PostgresflexInstanceFlavorPtrInput interface {
	pulumi.Input

	ToPostgresflexInstanceFlavorPtrOutput() PostgresflexInstanceFlavorPtrOutput
	ToPostgresflexInstanceFlavorPtrOutputWithContext(context.Context) PostgresflexInstanceFlavorPtrOutput
}

type postgresflexInstanceFlavorPtrType PostgresflexInstanceFlavorArgs

func PostgresflexInstanceFlavorPtr(v *PostgresflexInstanceFlavorArgs) PostgresflexInstanceFlavorPtrInput {
	return (*postgresflexInstanceFlavorPtrType)(v)
}

func (*postgresflexInstanceFlavorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstanceFlavor)(nil)).Elem()
}

func (i *postgresflexInstanceFlavorPtrType) ToPostgresflexInstanceFlavorPtrOutput() PostgresflexInstanceFlavorPtrOutput {
	return i.ToPostgresflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i *postgresflexInstanceFlavorPtrType) ToPostgresflexInstanceFlavorPtrOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceFlavorPtrOutput)
}

type PostgresflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresflexInstanceFlavor)(nil)).Elem()
}

func (o PostgresflexInstanceFlavorOutput) ToPostgresflexInstanceFlavorOutput() PostgresflexInstanceFlavorOutput {
	return o
}

func (o PostgresflexInstanceFlavorOutput) ToPostgresflexInstanceFlavorOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorOutput {
	return o
}

func (o PostgresflexInstanceFlavorOutput) ToPostgresflexInstanceFlavorPtrOutput() PostgresflexInstanceFlavorPtrOutput {
	return o.ToPostgresflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (o PostgresflexInstanceFlavorOutput) ToPostgresflexInstanceFlavorPtrOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresflexInstanceFlavor) *PostgresflexInstanceFlavor {
		return &v
	}).(PostgresflexInstanceFlavorPtrOutput)
}

func (o PostgresflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o PostgresflexInstanceFlavorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresflexInstanceFlavor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PostgresflexInstanceFlavorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresflexInstanceFlavor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PostgresflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type PostgresflexInstanceFlavorPtrOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceFlavorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstanceFlavor)(nil)).Elem()
}

func (o PostgresflexInstanceFlavorPtrOutput) ToPostgresflexInstanceFlavorPtrOutput() PostgresflexInstanceFlavorPtrOutput {
	return o
}

func (o PostgresflexInstanceFlavorPtrOutput) ToPostgresflexInstanceFlavorPtrOutputWithContext(ctx context.Context) PostgresflexInstanceFlavorPtrOutput {
	return o
}

func (o PostgresflexInstanceFlavorPtrOutput) Elem() PostgresflexInstanceFlavorOutput {
	return o.ApplyT(func(v *PostgresflexInstanceFlavor) PostgresflexInstanceFlavor {
		if v != nil {
			return *v
		}
		var ret PostgresflexInstanceFlavor
		return ret
	}).(PostgresflexInstanceFlavorOutput)
}

func (o PostgresflexInstanceFlavorPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.IntPtrOutput)
}

func (o PostgresflexInstanceFlavorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o PostgresflexInstanceFlavorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o PostgresflexInstanceFlavorPtrOutput) Ram() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Ram
	}).(pulumi.IntPtrOutput)
}

type PostgresflexInstanceStorage struct {
	Class string `pulumi:"class"`
	Size  int    `pulumi:"size"`
}

// PostgresflexInstanceStorageInput is an input type that accepts PostgresflexInstanceStorageArgs and PostgresflexInstanceStorageOutput values.
// You can construct a concrete instance of `PostgresflexInstanceStorageInput` via:
//
//	PostgresflexInstanceStorageArgs{...}
type PostgresflexInstanceStorageInput interface {
	pulumi.Input

	ToPostgresflexInstanceStorageOutput() PostgresflexInstanceStorageOutput
	ToPostgresflexInstanceStorageOutputWithContext(context.Context) PostgresflexInstanceStorageOutput
}

type PostgresflexInstanceStorageArgs struct {
	Class pulumi.StringInput `pulumi:"class"`
	Size  pulumi.IntInput    `pulumi:"size"`
}

func (PostgresflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresflexInstanceStorage)(nil)).Elem()
}

func (i PostgresflexInstanceStorageArgs) ToPostgresflexInstanceStorageOutput() PostgresflexInstanceStorageOutput {
	return i.ToPostgresflexInstanceStorageOutputWithContext(context.Background())
}

func (i PostgresflexInstanceStorageArgs) ToPostgresflexInstanceStorageOutputWithContext(ctx context.Context) PostgresflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceStorageOutput)
}

func (i PostgresflexInstanceStorageArgs) ToPostgresflexInstanceStoragePtrOutput() PostgresflexInstanceStoragePtrOutput {
	return i.ToPostgresflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i PostgresflexInstanceStorageArgs) ToPostgresflexInstanceStoragePtrOutputWithContext(ctx context.Context) PostgresflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceStorageOutput).ToPostgresflexInstanceStoragePtrOutputWithContext(ctx)
}

// PostgresflexInstanceStoragePtrInput is an input type that accepts PostgresflexInstanceStorageArgs, PostgresflexInstanceStoragePtr and PostgresflexInstanceStoragePtrOutput values.
// You can construct a concrete instance of `PostgresflexInstanceStoragePtrInput` via:
//
//	        PostgresflexInstanceStorageArgs{...}
//
//	or:
//
//	        nil
type PostgresflexInstanceStoragePtrInput interface {
	pulumi.Input

	ToPostgresflexInstanceStoragePtrOutput() PostgresflexInstanceStoragePtrOutput
	ToPostgresflexInstanceStoragePtrOutputWithContext(context.Context) PostgresflexInstanceStoragePtrOutput
}

type postgresflexInstanceStoragePtrType PostgresflexInstanceStorageArgs

func PostgresflexInstanceStoragePtr(v *PostgresflexInstanceStorageArgs) PostgresflexInstanceStoragePtrInput {
	return (*postgresflexInstanceStoragePtrType)(v)
}

func (*postgresflexInstanceStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstanceStorage)(nil)).Elem()
}

func (i *postgresflexInstanceStoragePtrType) ToPostgresflexInstanceStoragePtrOutput() PostgresflexInstanceStoragePtrOutput {
	return i.ToPostgresflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i *postgresflexInstanceStoragePtrType) ToPostgresflexInstanceStoragePtrOutputWithContext(ctx context.Context) PostgresflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceStoragePtrOutput)
}

type PostgresflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresflexInstanceStorage)(nil)).Elem()
}

func (o PostgresflexInstanceStorageOutput) ToPostgresflexInstanceStorageOutput() PostgresflexInstanceStorageOutput {
	return o
}

func (o PostgresflexInstanceStorageOutput) ToPostgresflexInstanceStorageOutputWithContext(ctx context.Context) PostgresflexInstanceStorageOutput {
	return o
}

func (o PostgresflexInstanceStorageOutput) ToPostgresflexInstanceStoragePtrOutput() PostgresflexInstanceStoragePtrOutput {
	return o.ToPostgresflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (o PostgresflexInstanceStorageOutput) ToPostgresflexInstanceStoragePtrOutputWithContext(ctx context.Context) PostgresflexInstanceStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresflexInstanceStorage) *PostgresflexInstanceStorage {
		return &v
	}).(PostgresflexInstanceStoragePtrOutput)
}

func (o PostgresflexInstanceStorageOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresflexInstanceStorage) string { return v.Class }).(pulumi.StringOutput)
}

func (o PostgresflexInstanceStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresflexInstanceStorage) int { return v.Size }).(pulumi.IntOutput)
}

type PostgresflexInstanceStoragePtrOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstanceStorage)(nil)).Elem()
}

func (o PostgresflexInstanceStoragePtrOutput) ToPostgresflexInstanceStoragePtrOutput() PostgresflexInstanceStoragePtrOutput {
	return o
}

func (o PostgresflexInstanceStoragePtrOutput) ToPostgresflexInstanceStoragePtrOutputWithContext(ctx context.Context) PostgresflexInstanceStoragePtrOutput {
	return o
}

func (o PostgresflexInstanceStoragePtrOutput) Elem() PostgresflexInstanceStorageOutput {
	return o.ApplyT(func(v *PostgresflexInstanceStorage) PostgresflexInstanceStorage {
		if v != nil {
			return *v
		}
		var ret PostgresflexInstanceStorage
		return ret
	}).(PostgresflexInstanceStorageOutput)
}

func (o PostgresflexInstanceStoragePtrOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceStorage) *string {
		if v == nil {
			return nil
		}
		return &v.Class
	}).(pulumi.StringPtrOutput)
}

func (o PostgresflexInstanceStoragePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresflexInstanceStorage) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

type RabbitmqInstanceParameters struct {
	// The timeout in milliseconds for the consumer.
	ConsumerTimeout *int `pulumi:"consumerTimeout"`
	// Enable monitoring.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite *string `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold *int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency *int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix *string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId *string `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name.
	Plugins []string `pulumi:"plugins"`
	// List of roles to assign to the instance.
	Roles []string `pulumi:"roles"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl *string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// TLS protocol to use.
	TlsProtocols *string `pulumi:"tlsProtocols"`
}

// RabbitmqInstanceParametersInput is an input type that accepts RabbitmqInstanceParametersArgs and RabbitmqInstanceParametersOutput values.
// You can construct a concrete instance of `RabbitmqInstanceParametersInput` via:
//
//	RabbitmqInstanceParametersArgs{...}
type RabbitmqInstanceParametersInput interface {
	pulumi.Input

	ToRabbitmqInstanceParametersOutput() RabbitmqInstanceParametersOutput
	ToRabbitmqInstanceParametersOutputWithContext(context.Context) RabbitmqInstanceParametersOutput
}

type RabbitmqInstanceParametersArgs struct {
	// The timeout in milliseconds for the consumer.
	ConsumerTimeout pulumi.IntPtrInput `pulumi:"consumerTimeout"`
	// Enable monitoring.
	EnableMonitoring pulumi.BoolPtrInput `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite pulumi.StringPtrInput `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntPtrInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntPtrInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringPtrInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringPtrInput `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name.
	Plugins pulumi.StringArrayInput `pulumi:"plugins"`
	// List of roles to assign to the instance.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringPtrInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// TLS protocol to use.
	TlsProtocols pulumi.StringPtrInput `pulumi:"tlsProtocols"`
}

func (RabbitmqInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RabbitmqInstanceParameters)(nil)).Elem()
}

func (i RabbitmqInstanceParametersArgs) ToRabbitmqInstanceParametersOutput() RabbitmqInstanceParametersOutput {
	return i.ToRabbitmqInstanceParametersOutputWithContext(context.Background())
}

func (i RabbitmqInstanceParametersArgs) ToRabbitmqInstanceParametersOutputWithContext(ctx context.Context) RabbitmqInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceParametersOutput)
}

func (i RabbitmqInstanceParametersArgs) ToRabbitmqInstanceParametersPtrOutput() RabbitmqInstanceParametersPtrOutput {
	return i.ToRabbitmqInstanceParametersPtrOutputWithContext(context.Background())
}

func (i RabbitmqInstanceParametersArgs) ToRabbitmqInstanceParametersPtrOutputWithContext(ctx context.Context) RabbitmqInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceParametersOutput).ToRabbitmqInstanceParametersPtrOutputWithContext(ctx)
}

// RabbitmqInstanceParametersPtrInput is an input type that accepts RabbitmqInstanceParametersArgs, RabbitmqInstanceParametersPtr and RabbitmqInstanceParametersPtrOutput values.
// You can construct a concrete instance of `RabbitmqInstanceParametersPtrInput` via:
//
//	        RabbitmqInstanceParametersArgs{...}
//
//	or:
//
//	        nil
type RabbitmqInstanceParametersPtrInput interface {
	pulumi.Input

	ToRabbitmqInstanceParametersPtrOutput() RabbitmqInstanceParametersPtrOutput
	ToRabbitmqInstanceParametersPtrOutputWithContext(context.Context) RabbitmqInstanceParametersPtrOutput
}

type rabbitmqInstanceParametersPtrType RabbitmqInstanceParametersArgs

func RabbitmqInstanceParametersPtr(v *RabbitmqInstanceParametersArgs) RabbitmqInstanceParametersPtrInput {
	return (*rabbitmqInstanceParametersPtrType)(v)
}

func (*rabbitmqInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstanceParameters)(nil)).Elem()
}

func (i *rabbitmqInstanceParametersPtrType) ToRabbitmqInstanceParametersPtrOutput() RabbitmqInstanceParametersPtrOutput {
	return i.ToRabbitmqInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *rabbitmqInstanceParametersPtrType) ToRabbitmqInstanceParametersPtrOutputWithContext(ctx context.Context) RabbitmqInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceParametersPtrOutput)
}

type RabbitmqInstanceParametersOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RabbitmqInstanceParameters)(nil)).Elem()
}

func (o RabbitmqInstanceParametersOutput) ToRabbitmqInstanceParametersOutput() RabbitmqInstanceParametersOutput {
	return o
}

func (o RabbitmqInstanceParametersOutput) ToRabbitmqInstanceParametersOutputWithContext(ctx context.Context) RabbitmqInstanceParametersOutput {
	return o
}

func (o RabbitmqInstanceParametersOutput) ToRabbitmqInstanceParametersPtrOutput() RabbitmqInstanceParametersPtrOutput {
	return o.ToRabbitmqInstanceParametersPtrOutputWithContext(context.Background())
}

func (o RabbitmqInstanceParametersOutput) ToRabbitmqInstanceParametersPtrOutputWithContext(ctx context.Context) RabbitmqInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RabbitmqInstanceParameters) *RabbitmqInstanceParameters {
		return &v
	}).(RabbitmqInstanceParametersPtrOutput)
}

// The timeout in milliseconds for the consumer.
func (o RabbitmqInstanceParametersOutput) ConsumerTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *int { return v.ConsumerTimeout }).(pulumi.IntPtrOutput)
}

// Enable monitoring.
func (o RabbitmqInstanceParametersOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *bool { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o RabbitmqInstanceParametersOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *string { return v.Graphite }).(pulumi.StringPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o RabbitmqInstanceParametersOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *int { return v.MaxDiskThreshold }).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o RabbitmqInstanceParametersOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *int { return v.MetricsFrequency }).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o RabbitmqInstanceParametersOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *string { return v.MetricsPrefix }).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o RabbitmqInstanceParametersOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *string { return v.MonitoringInstanceId }).(pulumi.StringPtrOutput)
}

// List of plugins to install. Must be a supported plugin name.
func (o RabbitmqInstanceParametersOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) []string { return v.Plugins }).(pulumi.StringArrayOutput)
}

// List of roles to assign to the instance.
func (o RabbitmqInstanceParametersOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o RabbitmqInstanceParametersOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *string { return v.SgwAcl }).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o RabbitmqInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o RabbitmqInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// TLS protocol to use.
func (o RabbitmqInstanceParametersOutput) TlsProtocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RabbitmqInstanceParameters) *string { return v.TlsProtocols }).(pulumi.StringPtrOutput)
}

type RabbitmqInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstanceParameters)(nil)).Elem()
}

func (o RabbitmqInstanceParametersPtrOutput) ToRabbitmqInstanceParametersPtrOutput() RabbitmqInstanceParametersPtrOutput {
	return o
}

func (o RabbitmqInstanceParametersPtrOutput) ToRabbitmqInstanceParametersPtrOutputWithContext(ctx context.Context) RabbitmqInstanceParametersPtrOutput {
	return o
}

func (o RabbitmqInstanceParametersPtrOutput) Elem() RabbitmqInstanceParametersOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) RabbitmqInstanceParameters {
		if v != nil {
			return *v
		}
		var ret RabbitmqInstanceParameters
		return ret
	}).(RabbitmqInstanceParametersOutput)
}

// The timeout in milliseconds for the consumer.
func (o RabbitmqInstanceParametersPtrOutput) ConsumerTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.ConsumerTimeout
	}).(pulumi.IntPtrOutput)
}

// Enable monitoring.
func (o RabbitmqInstanceParametersPtrOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o RabbitmqInstanceParametersPtrOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Graphite
	}).(pulumi.StringPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o RabbitmqInstanceParametersPtrOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDiskThreshold
	}).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o RabbitmqInstanceParametersPtrOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MetricsFrequency
	}).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o RabbitmqInstanceParametersPtrOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o RabbitmqInstanceParametersPtrOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringInstanceId
	}).(pulumi.StringPtrOutput)
}

// List of plugins to install. Must be a supported plugin name.
func (o RabbitmqInstanceParametersPtrOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(pulumi.StringArrayOutput)
}

// List of roles to assign to the instance.
func (o RabbitmqInstanceParametersPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o RabbitmqInstanceParametersPtrOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.SgwAcl
	}).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o RabbitmqInstanceParametersPtrOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o RabbitmqInstanceParametersPtrOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.TlsCiphers
	}).(pulumi.StringArrayOutput)
}

// TLS protocol to use.
func (o RabbitmqInstanceParametersPtrOutput) TlsProtocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.TlsProtocols
	}).(pulumi.StringPtrOutput)
}

type RedisInstanceParameters struct {
	// The number of milliseconds after which the instance is considered down.
	DownAfterMilliseconds *int `pulumi:"downAfterMilliseconds"`
	// Enable monitoring.
	EnableMonitoring *bool `pulumi:"enableMonitoring"`
	// The failover timeout in milliseconds.
	FailoverTimeout *int `pulumi:"failoverTimeout"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite *string `pulumi:"graphite"`
	// The lazy eviction enablement (yes or no).
	LazyfreeLazyEviction *string `pulumi:"lazyfreeLazyEviction"`
	// The lazy expire enablement (yes or no).
	LazyfreeLazyExpire *string `pulumi:"lazyfreeLazyExpire"`
	// The Lua time limit.
	LuaTimeLimit *int `pulumi:"luaTimeLimit"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold *int `pulumi:"maxDiskThreshold"`
	// The maximum number of clients.
	Maxclients *int `pulumi:"maxclients"`
	// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
	// The maximum memory samples.
	MaxmemorySamples *int `pulumi:"maxmemorySamples"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency *int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix *string `pulumi:"metricsPrefix"`
	// The minimum replicas maximum lag.
	MinReplicasMaxLag *int `pulumi:"minReplicasMaxLag"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId *string `pulumi:"monitoringInstanceId"`
	// The notify keyspace events.
	NotifyKeyspaceEvents *string `pulumi:"notifyKeyspaceEvents"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl *string `pulumi:"sgwAcl"`
	// The snapshot configuration.
	Snapshot *string `pulumi:"snapshot"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// TLS cipher suites to use.
	TlsCiphersuites *string `pulumi:"tlsCiphersuites"`
	// TLS protocol to use.
	TlsProtocols *string `pulumi:"tlsProtocols"`
}

// RedisInstanceParametersInput is an input type that accepts RedisInstanceParametersArgs and RedisInstanceParametersOutput values.
// You can construct a concrete instance of `RedisInstanceParametersInput` via:
//
//	RedisInstanceParametersArgs{...}
type RedisInstanceParametersInput interface {
	pulumi.Input

	ToRedisInstanceParametersOutput() RedisInstanceParametersOutput
	ToRedisInstanceParametersOutputWithContext(context.Context) RedisInstanceParametersOutput
}

type RedisInstanceParametersArgs struct {
	// The number of milliseconds after which the instance is considered down.
	DownAfterMilliseconds pulumi.IntPtrInput `pulumi:"downAfterMilliseconds"`
	// Enable monitoring.
	EnableMonitoring pulumi.BoolPtrInput `pulumi:"enableMonitoring"`
	// The failover timeout in milliseconds.
	FailoverTimeout pulumi.IntPtrInput `pulumi:"failoverTimeout"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite pulumi.StringPtrInput `pulumi:"graphite"`
	// The lazy eviction enablement (yes or no).
	LazyfreeLazyEviction pulumi.StringPtrInput `pulumi:"lazyfreeLazyEviction"`
	// The lazy expire enablement (yes or no).
	LazyfreeLazyExpire pulumi.StringPtrInput `pulumi:"lazyfreeLazyExpire"`
	// The Lua time limit.
	LuaTimeLimit pulumi.IntPtrInput `pulumi:"luaTimeLimit"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntPtrInput `pulumi:"maxDiskThreshold"`
	// The maximum number of clients.
	Maxclients pulumi.IntPtrInput `pulumi:"maxclients"`
	// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
	MaxmemoryPolicy pulumi.StringPtrInput `pulumi:"maxmemoryPolicy"`
	// The maximum memory samples.
	MaxmemorySamples pulumi.IntPtrInput `pulumi:"maxmemorySamples"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntPtrInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringPtrInput `pulumi:"metricsPrefix"`
	// The minimum replicas maximum lag.
	MinReplicasMaxLag pulumi.IntPtrInput `pulumi:"minReplicasMaxLag"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringPtrInput `pulumi:"monitoringInstanceId"`
	// The notify keyspace events.
	NotifyKeyspaceEvents pulumi.StringPtrInput `pulumi:"notifyKeyspaceEvents"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringPtrInput `pulumi:"sgwAcl"`
	// The snapshot configuration.
	Snapshot pulumi.StringPtrInput `pulumi:"snapshot"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// TLS cipher suites to use.
	TlsCiphersuites pulumi.StringPtrInput `pulumi:"tlsCiphersuites"`
	// TLS protocol to use.
	TlsProtocols pulumi.StringPtrInput `pulumi:"tlsProtocols"`
}

func (RedisInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceParameters)(nil)).Elem()
}

func (i RedisInstanceParametersArgs) ToRedisInstanceParametersOutput() RedisInstanceParametersOutput {
	return i.ToRedisInstanceParametersOutputWithContext(context.Background())
}

func (i RedisInstanceParametersArgs) ToRedisInstanceParametersOutputWithContext(ctx context.Context) RedisInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceParametersOutput)
}

func (i RedisInstanceParametersArgs) ToRedisInstanceParametersPtrOutput() RedisInstanceParametersPtrOutput {
	return i.ToRedisInstanceParametersPtrOutputWithContext(context.Background())
}

func (i RedisInstanceParametersArgs) ToRedisInstanceParametersPtrOutputWithContext(ctx context.Context) RedisInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceParametersOutput).ToRedisInstanceParametersPtrOutputWithContext(ctx)
}

// RedisInstanceParametersPtrInput is an input type that accepts RedisInstanceParametersArgs, RedisInstanceParametersPtr and RedisInstanceParametersPtrOutput values.
// You can construct a concrete instance of `RedisInstanceParametersPtrInput` via:
//
//	        RedisInstanceParametersArgs{...}
//
//	or:
//
//	        nil
type RedisInstanceParametersPtrInput interface {
	pulumi.Input

	ToRedisInstanceParametersPtrOutput() RedisInstanceParametersPtrOutput
	ToRedisInstanceParametersPtrOutputWithContext(context.Context) RedisInstanceParametersPtrOutput
}

type redisInstanceParametersPtrType RedisInstanceParametersArgs

func RedisInstanceParametersPtr(v *RedisInstanceParametersArgs) RedisInstanceParametersPtrInput {
	return (*redisInstanceParametersPtrType)(v)
}

func (*redisInstanceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstanceParameters)(nil)).Elem()
}

func (i *redisInstanceParametersPtrType) ToRedisInstanceParametersPtrOutput() RedisInstanceParametersPtrOutput {
	return i.ToRedisInstanceParametersPtrOutputWithContext(context.Background())
}

func (i *redisInstanceParametersPtrType) ToRedisInstanceParametersPtrOutputWithContext(ctx context.Context) RedisInstanceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceParametersPtrOutput)
}

type RedisInstanceParametersOutput struct{ *pulumi.OutputState }

func (RedisInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceParameters)(nil)).Elem()
}

func (o RedisInstanceParametersOutput) ToRedisInstanceParametersOutput() RedisInstanceParametersOutput {
	return o
}

func (o RedisInstanceParametersOutput) ToRedisInstanceParametersOutputWithContext(ctx context.Context) RedisInstanceParametersOutput {
	return o
}

func (o RedisInstanceParametersOutput) ToRedisInstanceParametersPtrOutput() RedisInstanceParametersPtrOutput {
	return o.ToRedisInstanceParametersPtrOutputWithContext(context.Background())
}

func (o RedisInstanceParametersOutput) ToRedisInstanceParametersPtrOutputWithContext(ctx context.Context) RedisInstanceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisInstanceParameters) *RedisInstanceParameters {
		return &v
	}).(RedisInstanceParametersPtrOutput)
}

// The number of milliseconds after which the instance is considered down.
func (o RedisInstanceParametersOutput) DownAfterMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.DownAfterMilliseconds }).(pulumi.IntPtrOutput)
}

// Enable monitoring.
func (o RedisInstanceParametersOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *bool { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

// The failover timeout in milliseconds.
func (o RedisInstanceParametersOutput) FailoverTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.FailoverTimeout }).(pulumi.IntPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o RedisInstanceParametersOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.Graphite }).(pulumi.StringPtrOutput)
}

// The lazy eviction enablement (yes or no).
func (o RedisInstanceParametersOutput) LazyfreeLazyEviction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.LazyfreeLazyEviction }).(pulumi.StringPtrOutput)
}

// The lazy expire enablement (yes or no).
func (o RedisInstanceParametersOutput) LazyfreeLazyExpire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.LazyfreeLazyExpire }).(pulumi.StringPtrOutput)
}

// The Lua time limit.
func (o RedisInstanceParametersOutput) LuaTimeLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.LuaTimeLimit }).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o RedisInstanceParametersOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.MaxDiskThreshold }).(pulumi.IntPtrOutput)
}

// The maximum number of clients.
func (o RedisInstanceParametersOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.Maxclients }).(pulumi.IntPtrOutput)
}

// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
func (o RedisInstanceParametersOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

// The maximum memory samples.
func (o RedisInstanceParametersOutput) MaxmemorySamples() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.MaxmemorySamples }).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o RedisInstanceParametersOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.MetricsFrequency }).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o RedisInstanceParametersOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.MetricsPrefix }).(pulumi.StringPtrOutput)
}

// The minimum replicas maximum lag.
func (o RedisInstanceParametersOutput) MinReplicasMaxLag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *int { return v.MinReplicasMaxLag }).(pulumi.IntPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o RedisInstanceParametersOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.MonitoringInstanceId }).(pulumi.StringPtrOutput)
}

// The notify keyspace events.
func (o RedisInstanceParametersOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.NotifyKeyspaceEvents }).(pulumi.StringPtrOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o RedisInstanceParametersOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.SgwAcl }).(pulumi.StringPtrOutput)
}

// The snapshot configuration.
func (o RedisInstanceParametersOutput) Snapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.Snapshot }).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o RedisInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o RedisInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// TLS cipher suites to use.
func (o RedisInstanceParametersOutput) TlsCiphersuites() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.TlsCiphersuites }).(pulumi.StringPtrOutput)
}

// TLS protocol to use.
func (o RedisInstanceParametersOutput) TlsProtocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceParameters) *string { return v.TlsProtocols }).(pulumi.StringPtrOutput)
}

type RedisInstanceParametersPtrOutput struct{ *pulumi.OutputState }

func (RedisInstanceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstanceParameters)(nil)).Elem()
}

func (o RedisInstanceParametersPtrOutput) ToRedisInstanceParametersPtrOutput() RedisInstanceParametersPtrOutput {
	return o
}

func (o RedisInstanceParametersPtrOutput) ToRedisInstanceParametersPtrOutputWithContext(ctx context.Context) RedisInstanceParametersPtrOutput {
	return o
}

func (o RedisInstanceParametersPtrOutput) Elem() RedisInstanceParametersOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) RedisInstanceParameters {
		if v != nil {
			return *v
		}
		var ret RedisInstanceParameters
		return ret
	}).(RedisInstanceParametersOutput)
}

// The number of milliseconds after which the instance is considered down.
func (o RedisInstanceParametersPtrOutput) DownAfterMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.DownAfterMilliseconds
	}).(pulumi.IntPtrOutput)
}

// Enable monitoring.
func (o RedisInstanceParametersPtrOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMonitoring
	}).(pulumi.BoolPtrOutput)
}

// The failover timeout in milliseconds.
func (o RedisInstanceParametersPtrOutput) FailoverTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.FailoverTimeout
	}).(pulumi.IntPtrOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o RedisInstanceParametersPtrOutput) Graphite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Graphite
	}).(pulumi.StringPtrOutput)
}

// The lazy eviction enablement (yes or no).
func (o RedisInstanceParametersPtrOutput) LazyfreeLazyEviction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.LazyfreeLazyEviction
	}).(pulumi.StringPtrOutput)
}

// The lazy expire enablement (yes or no).
func (o RedisInstanceParametersPtrOutput) LazyfreeLazyExpire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.LazyfreeLazyExpire
	}).(pulumi.StringPtrOutput)
}

// The Lua time limit.
func (o RedisInstanceParametersPtrOutput) LuaTimeLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.LuaTimeLimit
	}).(pulumi.IntPtrOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o RedisInstanceParametersPtrOutput) MaxDiskThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDiskThreshold
	}).(pulumi.IntPtrOutput)
}

// The maximum number of clients.
func (o RedisInstanceParametersPtrOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.Maxclients
	}).(pulumi.IntPtrOutput)
}

// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
func (o RedisInstanceParametersPtrOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryPolicy
	}).(pulumi.StringPtrOutput)
}

// The maximum memory samples.
func (o RedisInstanceParametersPtrOutput) MaxmemorySamples() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxmemorySamples
	}).(pulumi.IntPtrOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o RedisInstanceParametersPtrOutput) MetricsFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MetricsFrequency
	}).(pulumi.IntPtrOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o RedisInstanceParametersPtrOutput) MetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// The minimum replicas maximum lag.
func (o RedisInstanceParametersPtrOutput) MinReplicasMaxLag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicasMaxLag
	}).(pulumi.IntPtrOutput)
}

// The ID of the STACKIT monitoring instance.
func (o RedisInstanceParametersPtrOutput) MonitoringInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringInstanceId
	}).(pulumi.StringPtrOutput)
}

// The notify keyspace events.
func (o RedisInstanceParametersPtrOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.NotifyKeyspaceEvents
	}).(pulumi.StringPtrOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o RedisInstanceParametersPtrOutput) SgwAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.SgwAcl
	}).(pulumi.StringPtrOutput)
}

// The snapshot configuration.
func (o RedisInstanceParametersPtrOutput) Snapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(pulumi.StringPtrOutput)
}

// List of syslog servers to send logs to.
func (o RedisInstanceParametersPtrOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o RedisInstanceParametersPtrOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) []string {
		if v == nil {
			return nil
		}
		return v.TlsCiphers
	}).(pulumi.StringArrayOutput)
}

// TLS cipher suites to use.
func (o RedisInstanceParametersPtrOutput) TlsCiphersuites() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.TlsCiphersuites
	}).(pulumi.StringPtrOutput)
}

// TLS protocol to use.
func (o RedisInstanceParametersPtrOutput) TlsProtocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisInstanceParameters) *string {
		if v == nil {
			return nil
		}
		return v.TlsProtocols
	}).(pulumi.StringPtrOutput)
}

type RoutingTableRouteDestination struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type string `pulumi:"type"`
	// An CIDR string.
	Value string `pulumi:"value"`
}

// RoutingTableRouteDestinationInput is an input type that accepts RoutingTableRouteDestinationArgs and RoutingTableRouteDestinationOutput values.
// You can construct a concrete instance of `RoutingTableRouteDestinationInput` via:
//
//	RoutingTableRouteDestinationArgs{...}
type RoutingTableRouteDestinationInput interface {
	pulumi.Input

	ToRoutingTableRouteDestinationOutput() RoutingTableRouteDestinationOutput
	ToRoutingTableRouteDestinationOutputWithContext(context.Context) RoutingTableRouteDestinationOutput
}

type RoutingTableRouteDestinationArgs struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type pulumi.StringInput `pulumi:"type"`
	// An CIDR string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RoutingTableRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingTableRouteDestination)(nil)).Elem()
}

func (i RoutingTableRouteDestinationArgs) ToRoutingTableRouteDestinationOutput() RoutingTableRouteDestinationOutput {
	return i.ToRoutingTableRouteDestinationOutputWithContext(context.Background())
}

func (i RoutingTableRouteDestinationArgs) ToRoutingTableRouteDestinationOutputWithContext(ctx context.Context) RoutingTableRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteDestinationOutput)
}

func (i RoutingTableRouteDestinationArgs) ToRoutingTableRouteDestinationPtrOutput() RoutingTableRouteDestinationPtrOutput {
	return i.ToRoutingTableRouteDestinationPtrOutputWithContext(context.Background())
}

func (i RoutingTableRouteDestinationArgs) ToRoutingTableRouteDestinationPtrOutputWithContext(ctx context.Context) RoutingTableRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteDestinationOutput).ToRoutingTableRouteDestinationPtrOutputWithContext(ctx)
}

// RoutingTableRouteDestinationPtrInput is an input type that accepts RoutingTableRouteDestinationArgs, RoutingTableRouteDestinationPtr and RoutingTableRouteDestinationPtrOutput values.
// You can construct a concrete instance of `RoutingTableRouteDestinationPtrInput` via:
//
//	        RoutingTableRouteDestinationArgs{...}
//
//	or:
//
//	        nil
type RoutingTableRouteDestinationPtrInput interface {
	pulumi.Input

	ToRoutingTableRouteDestinationPtrOutput() RoutingTableRouteDestinationPtrOutput
	ToRoutingTableRouteDestinationPtrOutputWithContext(context.Context) RoutingTableRouteDestinationPtrOutput
}

type routingTableRouteDestinationPtrType RoutingTableRouteDestinationArgs

func RoutingTableRouteDestinationPtr(v *RoutingTableRouteDestinationArgs) RoutingTableRouteDestinationPtrInput {
	return (*routingTableRouteDestinationPtrType)(v)
}

func (*routingTableRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRouteDestination)(nil)).Elem()
}

func (i *routingTableRouteDestinationPtrType) ToRoutingTableRouteDestinationPtrOutput() RoutingTableRouteDestinationPtrOutput {
	return i.ToRoutingTableRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *routingTableRouteDestinationPtrType) ToRoutingTableRouteDestinationPtrOutputWithContext(ctx context.Context) RoutingTableRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteDestinationPtrOutput)
}

type RoutingTableRouteDestinationOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingTableRouteDestination)(nil)).Elem()
}

func (o RoutingTableRouteDestinationOutput) ToRoutingTableRouteDestinationOutput() RoutingTableRouteDestinationOutput {
	return o
}

func (o RoutingTableRouteDestinationOutput) ToRoutingTableRouteDestinationOutputWithContext(ctx context.Context) RoutingTableRouteDestinationOutput {
	return o
}

func (o RoutingTableRouteDestinationOutput) ToRoutingTableRouteDestinationPtrOutput() RoutingTableRouteDestinationPtrOutput {
	return o.ToRoutingTableRouteDestinationPtrOutputWithContext(context.Background())
}

func (o RoutingTableRouteDestinationOutput) ToRoutingTableRouteDestinationPtrOutputWithContext(ctx context.Context) RoutingTableRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingTableRouteDestination) *RoutingTableRouteDestination {
		return &v
	}).(RoutingTableRouteDestinationPtrOutput)
}

// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
func (o RoutingTableRouteDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingTableRouteDestination) string { return v.Type }).(pulumi.StringOutput)
}

// An CIDR string.
func (o RoutingTableRouteDestinationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingTableRouteDestination) string { return v.Value }).(pulumi.StringOutput)
}

type RoutingTableRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRouteDestination)(nil)).Elem()
}

func (o RoutingTableRouteDestinationPtrOutput) ToRoutingTableRouteDestinationPtrOutput() RoutingTableRouteDestinationPtrOutput {
	return o
}

func (o RoutingTableRouteDestinationPtrOutput) ToRoutingTableRouteDestinationPtrOutputWithContext(ctx context.Context) RoutingTableRouteDestinationPtrOutput {
	return o
}

func (o RoutingTableRouteDestinationPtrOutput) Elem() RoutingTableRouteDestinationOutput {
	return o.ApplyT(func(v *RoutingTableRouteDestination) RoutingTableRouteDestination {
		if v != nil {
			return *v
		}
		var ret RoutingTableRouteDestination
		return ret
	}).(RoutingTableRouteDestinationOutput)
}

// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
func (o RoutingTableRouteDestinationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingTableRouteDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// An CIDR string.
func (o RoutingTableRouteDestinationPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingTableRouteDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type RoutingTableRouteNextHop struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type string `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value *string `pulumi:"value"`
}

// RoutingTableRouteNextHopInput is an input type that accepts RoutingTableRouteNextHopArgs and RoutingTableRouteNextHopOutput values.
// You can construct a concrete instance of `RoutingTableRouteNextHopInput` via:
//
//	RoutingTableRouteNextHopArgs{...}
type RoutingTableRouteNextHopInput interface {
	pulumi.Input

	ToRoutingTableRouteNextHopOutput() RoutingTableRouteNextHopOutput
	ToRoutingTableRouteNextHopOutputWithContext(context.Context) RoutingTableRouteNextHopOutput
}

type RoutingTableRouteNextHopArgs struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type pulumi.StringInput `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RoutingTableRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingTableRouteNextHop)(nil)).Elem()
}

func (i RoutingTableRouteNextHopArgs) ToRoutingTableRouteNextHopOutput() RoutingTableRouteNextHopOutput {
	return i.ToRoutingTableRouteNextHopOutputWithContext(context.Background())
}

func (i RoutingTableRouteNextHopArgs) ToRoutingTableRouteNextHopOutputWithContext(ctx context.Context) RoutingTableRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteNextHopOutput)
}

func (i RoutingTableRouteNextHopArgs) ToRoutingTableRouteNextHopPtrOutput() RoutingTableRouteNextHopPtrOutput {
	return i.ToRoutingTableRouteNextHopPtrOutputWithContext(context.Background())
}

func (i RoutingTableRouteNextHopArgs) ToRoutingTableRouteNextHopPtrOutputWithContext(ctx context.Context) RoutingTableRouteNextHopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteNextHopOutput).ToRoutingTableRouteNextHopPtrOutputWithContext(ctx)
}

// RoutingTableRouteNextHopPtrInput is an input type that accepts RoutingTableRouteNextHopArgs, RoutingTableRouteNextHopPtr and RoutingTableRouteNextHopPtrOutput values.
// You can construct a concrete instance of `RoutingTableRouteNextHopPtrInput` via:
//
//	        RoutingTableRouteNextHopArgs{...}
//
//	or:
//
//	        nil
type RoutingTableRouteNextHopPtrInput interface {
	pulumi.Input

	ToRoutingTableRouteNextHopPtrOutput() RoutingTableRouteNextHopPtrOutput
	ToRoutingTableRouteNextHopPtrOutputWithContext(context.Context) RoutingTableRouteNextHopPtrOutput
}

type routingTableRouteNextHopPtrType RoutingTableRouteNextHopArgs

func RoutingTableRouteNextHopPtr(v *RoutingTableRouteNextHopArgs) RoutingTableRouteNextHopPtrInput {
	return (*routingTableRouteNextHopPtrType)(v)
}

func (*routingTableRouteNextHopPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRouteNextHop)(nil)).Elem()
}

func (i *routingTableRouteNextHopPtrType) ToRoutingTableRouteNextHopPtrOutput() RoutingTableRouteNextHopPtrOutput {
	return i.ToRoutingTableRouteNextHopPtrOutputWithContext(context.Background())
}

func (i *routingTableRouteNextHopPtrType) ToRoutingTableRouteNextHopPtrOutputWithContext(ctx context.Context) RoutingTableRouteNextHopPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableRouteNextHopPtrOutput)
}

type RoutingTableRouteNextHopOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingTableRouteNextHop)(nil)).Elem()
}

func (o RoutingTableRouteNextHopOutput) ToRoutingTableRouteNextHopOutput() RoutingTableRouteNextHopOutput {
	return o
}

func (o RoutingTableRouteNextHopOutput) ToRoutingTableRouteNextHopOutputWithContext(ctx context.Context) RoutingTableRouteNextHopOutput {
	return o
}

func (o RoutingTableRouteNextHopOutput) ToRoutingTableRouteNextHopPtrOutput() RoutingTableRouteNextHopPtrOutput {
	return o.ToRoutingTableRouteNextHopPtrOutputWithContext(context.Background())
}

func (o RoutingTableRouteNextHopOutput) ToRoutingTableRouteNextHopPtrOutputWithContext(ctx context.Context) RoutingTableRouteNextHopPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingTableRouteNextHop) *RoutingTableRouteNextHop {
		return &v
	}).(RoutingTableRouteNextHopPtrOutput)
}

// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
func (o RoutingTableRouteNextHopOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingTableRouteNextHop) string { return v.Type }).(pulumi.StringOutput)
}

// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
func (o RoutingTableRouteNextHopOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingTableRouteNextHop) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RoutingTableRouteNextHopPtrOutput struct{ *pulumi.OutputState }

func (RoutingTableRouteNextHopPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTableRouteNextHop)(nil)).Elem()
}

func (o RoutingTableRouteNextHopPtrOutput) ToRoutingTableRouteNextHopPtrOutput() RoutingTableRouteNextHopPtrOutput {
	return o
}

func (o RoutingTableRouteNextHopPtrOutput) ToRoutingTableRouteNextHopPtrOutputWithContext(ctx context.Context) RoutingTableRouteNextHopPtrOutput {
	return o
}

func (o RoutingTableRouteNextHopPtrOutput) Elem() RoutingTableRouteNextHopOutput {
	return o.ApplyT(func(v *RoutingTableRouteNextHop) RoutingTableRouteNextHop {
		if v != nil {
			return *v
		}
		var ret RoutingTableRouteNextHop
		return ret
	}).(RoutingTableRouteNextHopOutput)
}

// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
func (o RoutingTableRouteNextHopPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingTableRouteNextHop) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
func (o RoutingTableRouteNextHopPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingTableRouteNextHop) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type SecurityGroupRuleIcmpParameters struct {
	// ICMP code. Can be set if the protocol is ICMP.
	Code int `pulumi:"code"`
	// ICMP type. Can be set if the protocol is ICMP.
	Type int `pulumi:"type"`
}

// SecurityGroupRuleIcmpParametersInput is an input type that accepts SecurityGroupRuleIcmpParametersArgs and SecurityGroupRuleIcmpParametersOutput values.
// You can construct a concrete instance of `SecurityGroupRuleIcmpParametersInput` via:
//
//	SecurityGroupRuleIcmpParametersArgs{...}
type SecurityGroupRuleIcmpParametersInput interface {
	pulumi.Input

	ToSecurityGroupRuleIcmpParametersOutput() SecurityGroupRuleIcmpParametersOutput
	ToSecurityGroupRuleIcmpParametersOutputWithContext(context.Context) SecurityGroupRuleIcmpParametersOutput
}

type SecurityGroupRuleIcmpParametersArgs struct {
	// ICMP code. Can be set if the protocol is ICMP.
	Code pulumi.IntInput `pulumi:"code"`
	// ICMP type. Can be set if the protocol is ICMP.
	Type pulumi.IntInput `pulumi:"type"`
}

func (SecurityGroupRuleIcmpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (i SecurityGroupRuleIcmpParametersArgs) ToSecurityGroupRuleIcmpParametersOutput() SecurityGroupRuleIcmpParametersOutput {
	return i.ToSecurityGroupRuleIcmpParametersOutputWithContext(context.Background())
}

func (i SecurityGroupRuleIcmpParametersArgs) ToSecurityGroupRuleIcmpParametersOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleIcmpParametersOutput)
}

func (i SecurityGroupRuleIcmpParametersArgs) ToSecurityGroupRuleIcmpParametersPtrOutput() SecurityGroupRuleIcmpParametersPtrOutput {
	return i.ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(context.Background())
}

func (i SecurityGroupRuleIcmpParametersArgs) ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleIcmpParametersOutput).ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(ctx)
}

// SecurityGroupRuleIcmpParametersPtrInput is an input type that accepts SecurityGroupRuleIcmpParametersArgs, SecurityGroupRuleIcmpParametersPtr and SecurityGroupRuleIcmpParametersPtrOutput values.
// You can construct a concrete instance of `SecurityGroupRuleIcmpParametersPtrInput` via:
//
//	        SecurityGroupRuleIcmpParametersArgs{...}
//
//	or:
//
//	        nil
type SecurityGroupRuleIcmpParametersPtrInput interface {
	pulumi.Input

	ToSecurityGroupRuleIcmpParametersPtrOutput() SecurityGroupRuleIcmpParametersPtrOutput
	ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(context.Context) SecurityGroupRuleIcmpParametersPtrOutput
}

type securityGroupRuleIcmpParametersPtrType SecurityGroupRuleIcmpParametersArgs

func SecurityGroupRuleIcmpParametersPtr(v *SecurityGroupRuleIcmpParametersArgs) SecurityGroupRuleIcmpParametersPtrInput {
	return (*securityGroupRuleIcmpParametersPtrType)(v)
}

func (*securityGroupRuleIcmpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (i *securityGroupRuleIcmpParametersPtrType) ToSecurityGroupRuleIcmpParametersPtrOutput() SecurityGroupRuleIcmpParametersPtrOutput {
	return i.ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(context.Background())
}

func (i *securityGroupRuleIcmpParametersPtrType) ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleIcmpParametersPtrOutput)
}

type SecurityGroupRuleIcmpParametersOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleIcmpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (o SecurityGroupRuleIcmpParametersOutput) ToSecurityGroupRuleIcmpParametersOutput() SecurityGroupRuleIcmpParametersOutput {
	return o
}

func (o SecurityGroupRuleIcmpParametersOutput) ToSecurityGroupRuleIcmpParametersOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersOutput {
	return o
}

func (o SecurityGroupRuleIcmpParametersOutput) ToSecurityGroupRuleIcmpParametersPtrOutput() SecurityGroupRuleIcmpParametersPtrOutput {
	return o.ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(context.Background())
}

func (o SecurityGroupRuleIcmpParametersOutput) ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityGroupRuleIcmpParameters) *SecurityGroupRuleIcmpParameters {
		return &v
	}).(SecurityGroupRuleIcmpParametersPtrOutput)
}

// ICMP code. Can be set if the protocol is ICMP.
func (o SecurityGroupRuleIcmpParametersOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityGroupRuleIcmpParameters) int { return v.Code }).(pulumi.IntOutput)
}

// ICMP type. Can be set if the protocol is ICMP.
func (o SecurityGroupRuleIcmpParametersOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityGroupRuleIcmpParameters) int { return v.Type }).(pulumi.IntOutput)
}

type SecurityGroupRuleIcmpParametersPtrOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleIcmpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (o SecurityGroupRuleIcmpParametersPtrOutput) ToSecurityGroupRuleIcmpParametersPtrOutput() SecurityGroupRuleIcmpParametersPtrOutput {
	return o
}

func (o SecurityGroupRuleIcmpParametersPtrOutput) ToSecurityGroupRuleIcmpParametersPtrOutputWithContext(ctx context.Context) SecurityGroupRuleIcmpParametersPtrOutput {
	return o
}

func (o SecurityGroupRuleIcmpParametersPtrOutput) Elem() SecurityGroupRuleIcmpParametersOutput {
	return o.ApplyT(func(v *SecurityGroupRuleIcmpParameters) SecurityGroupRuleIcmpParameters {
		if v != nil {
			return *v
		}
		var ret SecurityGroupRuleIcmpParameters
		return ret
	}).(SecurityGroupRuleIcmpParametersOutput)
}

// ICMP code. Can be set if the protocol is ICMP.
func (o SecurityGroupRuleIcmpParametersPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRuleIcmpParameters) *int {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.IntPtrOutput)
}

// ICMP type. Can be set if the protocol is ICMP.
func (o SecurityGroupRuleIcmpParametersPtrOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRuleIcmpParameters) *int {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.IntPtrOutput)
}

type SecurityGroupRulePortRange struct {
	// The maximum port number. Should be greater or equal to the minimum.
	Max int `pulumi:"max"`
	// The minimum port number. Should be less or equal to the maximum.
	Min int `pulumi:"min"`
}

// SecurityGroupRulePortRangeInput is an input type that accepts SecurityGroupRulePortRangeArgs and SecurityGroupRulePortRangeOutput values.
// You can construct a concrete instance of `SecurityGroupRulePortRangeInput` via:
//
//	SecurityGroupRulePortRangeArgs{...}
type SecurityGroupRulePortRangeInput interface {
	pulumi.Input

	ToSecurityGroupRulePortRangeOutput() SecurityGroupRulePortRangeOutput
	ToSecurityGroupRulePortRangeOutputWithContext(context.Context) SecurityGroupRulePortRangeOutput
}

type SecurityGroupRulePortRangeArgs struct {
	// The maximum port number. Should be greater or equal to the minimum.
	Max pulumi.IntInput `pulumi:"max"`
	// The minimum port number. Should be less or equal to the maximum.
	Min pulumi.IntInput `pulumi:"min"`
}

func (SecurityGroupRulePortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulePortRange)(nil)).Elem()
}

func (i SecurityGroupRulePortRangeArgs) ToSecurityGroupRulePortRangeOutput() SecurityGroupRulePortRangeOutput {
	return i.ToSecurityGroupRulePortRangeOutputWithContext(context.Background())
}

func (i SecurityGroupRulePortRangeArgs) ToSecurityGroupRulePortRangeOutputWithContext(ctx context.Context) SecurityGroupRulePortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulePortRangeOutput)
}

func (i SecurityGroupRulePortRangeArgs) ToSecurityGroupRulePortRangePtrOutput() SecurityGroupRulePortRangePtrOutput {
	return i.ToSecurityGroupRulePortRangePtrOutputWithContext(context.Background())
}

func (i SecurityGroupRulePortRangeArgs) ToSecurityGroupRulePortRangePtrOutputWithContext(ctx context.Context) SecurityGroupRulePortRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulePortRangeOutput).ToSecurityGroupRulePortRangePtrOutputWithContext(ctx)
}

// SecurityGroupRulePortRangePtrInput is an input type that accepts SecurityGroupRulePortRangeArgs, SecurityGroupRulePortRangePtr and SecurityGroupRulePortRangePtrOutput values.
// You can construct a concrete instance of `SecurityGroupRulePortRangePtrInput` via:
//
//	        SecurityGroupRulePortRangeArgs{...}
//
//	or:
//
//	        nil
type SecurityGroupRulePortRangePtrInput interface {
	pulumi.Input

	ToSecurityGroupRulePortRangePtrOutput() SecurityGroupRulePortRangePtrOutput
	ToSecurityGroupRulePortRangePtrOutputWithContext(context.Context) SecurityGroupRulePortRangePtrOutput
}

type securityGroupRulePortRangePtrType SecurityGroupRulePortRangeArgs

func SecurityGroupRulePortRangePtr(v *SecurityGroupRulePortRangeArgs) SecurityGroupRulePortRangePtrInput {
	return (*securityGroupRulePortRangePtrType)(v)
}

func (*securityGroupRulePortRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRulePortRange)(nil)).Elem()
}

func (i *securityGroupRulePortRangePtrType) ToSecurityGroupRulePortRangePtrOutput() SecurityGroupRulePortRangePtrOutput {
	return i.ToSecurityGroupRulePortRangePtrOutputWithContext(context.Background())
}

func (i *securityGroupRulePortRangePtrType) ToSecurityGroupRulePortRangePtrOutputWithContext(ctx context.Context) SecurityGroupRulePortRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulePortRangePtrOutput)
}

type SecurityGroupRulePortRangeOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulePortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulePortRange)(nil)).Elem()
}

func (o SecurityGroupRulePortRangeOutput) ToSecurityGroupRulePortRangeOutput() SecurityGroupRulePortRangeOutput {
	return o
}

func (o SecurityGroupRulePortRangeOutput) ToSecurityGroupRulePortRangeOutputWithContext(ctx context.Context) SecurityGroupRulePortRangeOutput {
	return o
}

func (o SecurityGroupRulePortRangeOutput) ToSecurityGroupRulePortRangePtrOutput() SecurityGroupRulePortRangePtrOutput {
	return o.ToSecurityGroupRulePortRangePtrOutputWithContext(context.Background())
}

func (o SecurityGroupRulePortRangeOutput) ToSecurityGroupRulePortRangePtrOutputWithContext(ctx context.Context) SecurityGroupRulePortRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityGroupRulePortRange) *SecurityGroupRulePortRange {
		return &v
	}).(SecurityGroupRulePortRangePtrOutput)
}

// The maximum port number. Should be greater or equal to the minimum.
func (o SecurityGroupRulePortRangeOutput) Max() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityGroupRulePortRange) int { return v.Max }).(pulumi.IntOutput)
}

// The minimum port number. Should be less or equal to the maximum.
func (o SecurityGroupRulePortRangeOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityGroupRulePortRange) int { return v.Min }).(pulumi.IntOutput)
}

type SecurityGroupRulePortRangePtrOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulePortRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRulePortRange)(nil)).Elem()
}

func (o SecurityGroupRulePortRangePtrOutput) ToSecurityGroupRulePortRangePtrOutput() SecurityGroupRulePortRangePtrOutput {
	return o
}

func (o SecurityGroupRulePortRangePtrOutput) ToSecurityGroupRulePortRangePtrOutputWithContext(ctx context.Context) SecurityGroupRulePortRangePtrOutput {
	return o
}

func (o SecurityGroupRulePortRangePtrOutput) Elem() SecurityGroupRulePortRangeOutput {
	return o.ApplyT(func(v *SecurityGroupRulePortRange) SecurityGroupRulePortRange {
		if v != nil {
			return *v
		}
		var ret SecurityGroupRulePortRange
		return ret
	}).(SecurityGroupRulePortRangeOutput)
}

// The maximum port number. Should be greater or equal to the minimum.
func (o SecurityGroupRulePortRangePtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRulePortRange) *int {
		if v == nil {
			return nil
		}
		return &v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum port number. Should be less or equal to the maximum.
func (o SecurityGroupRulePortRangePtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRulePortRange) *int {
		if v == nil {
			return nil
		}
		return &v.Min
	}).(pulumi.IntPtrOutput)
}

type SecurityGroupRuleProtocol struct {
	// The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.
	Name *string `pulumi:"name"`
	// The protocol number which the rule should match. Either `name` or `number` must be provided.
	Number *int `pulumi:"number"`
}

// SecurityGroupRuleProtocolInput is an input type that accepts SecurityGroupRuleProtocolArgs and SecurityGroupRuleProtocolOutput values.
// You can construct a concrete instance of `SecurityGroupRuleProtocolInput` via:
//
//	SecurityGroupRuleProtocolArgs{...}
type SecurityGroupRuleProtocolInput interface {
	pulumi.Input

	ToSecurityGroupRuleProtocolOutput() SecurityGroupRuleProtocolOutput
	ToSecurityGroupRuleProtocolOutputWithContext(context.Context) SecurityGroupRuleProtocolOutput
}

type SecurityGroupRuleProtocolArgs struct {
	// The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The protocol number which the rule should match. Either `name` or `number` must be provided.
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (SecurityGroupRuleProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRuleProtocol)(nil)).Elem()
}

func (i SecurityGroupRuleProtocolArgs) ToSecurityGroupRuleProtocolOutput() SecurityGroupRuleProtocolOutput {
	return i.ToSecurityGroupRuleProtocolOutputWithContext(context.Background())
}

func (i SecurityGroupRuleProtocolArgs) ToSecurityGroupRuleProtocolOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleProtocolOutput)
}

func (i SecurityGroupRuleProtocolArgs) ToSecurityGroupRuleProtocolPtrOutput() SecurityGroupRuleProtocolPtrOutput {
	return i.ToSecurityGroupRuleProtocolPtrOutputWithContext(context.Background())
}

func (i SecurityGroupRuleProtocolArgs) ToSecurityGroupRuleProtocolPtrOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleProtocolOutput).ToSecurityGroupRuleProtocolPtrOutputWithContext(ctx)
}

// SecurityGroupRuleProtocolPtrInput is an input type that accepts SecurityGroupRuleProtocolArgs, SecurityGroupRuleProtocolPtr and SecurityGroupRuleProtocolPtrOutput values.
// You can construct a concrete instance of `SecurityGroupRuleProtocolPtrInput` via:
//
//	        SecurityGroupRuleProtocolArgs{...}
//
//	or:
//
//	        nil
type SecurityGroupRuleProtocolPtrInput interface {
	pulumi.Input

	ToSecurityGroupRuleProtocolPtrOutput() SecurityGroupRuleProtocolPtrOutput
	ToSecurityGroupRuleProtocolPtrOutputWithContext(context.Context) SecurityGroupRuleProtocolPtrOutput
}

type securityGroupRuleProtocolPtrType SecurityGroupRuleProtocolArgs

func SecurityGroupRuleProtocolPtr(v *SecurityGroupRuleProtocolArgs) SecurityGroupRuleProtocolPtrInput {
	return (*securityGroupRuleProtocolPtrType)(v)
}

func (*securityGroupRuleProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRuleProtocol)(nil)).Elem()
}

func (i *securityGroupRuleProtocolPtrType) ToSecurityGroupRuleProtocolPtrOutput() SecurityGroupRuleProtocolPtrOutput {
	return i.ToSecurityGroupRuleProtocolPtrOutputWithContext(context.Background())
}

func (i *securityGroupRuleProtocolPtrType) ToSecurityGroupRuleProtocolPtrOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleProtocolPtrOutput)
}

type SecurityGroupRuleProtocolOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRuleProtocol)(nil)).Elem()
}

func (o SecurityGroupRuleProtocolOutput) ToSecurityGroupRuleProtocolOutput() SecurityGroupRuleProtocolOutput {
	return o
}

func (o SecurityGroupRuleProtocolOutput) ToSecurityGroupRuleProtocolOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolOutput {
	return o
}

func (o SecurityGroupRuleProtocolOutput) ToSecurityGroupRuleProtocolPtrOutput() SecurityGroupRuleProtocolPtrOutput {
	return o.ToSecurityGroupRuleProtocolPtrOutputWithContext(context.Background())
}

func (o SecurityGroupRuleProtocolOutput) ToSecurityGroupRuleProtocolPtrOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityGroupRuleProtocol) *SecurityGroupRuleProtocol {
		return &v
	}).(SecurityGroupRuleProtocolPtrOutput)
}

// The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.
func (o SecurityGroupRuleProtocolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRuleProtocol) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protocol number which the rule should match. Either `name` or `number` must be provided.
func (o SecurityGroupRuleProtocolOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRuleProtocol) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type SecurityGroupRuleProtocolPtrOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRuleProtocol)(nil)).Elem()
}

func (o SecurityGroupRuleProtocolPtrOutput) ToSecurityGroupRuleProtocolPtrOutput() SecurityGroupRuleProtocolPtrOutput {
	return o
}

func (o SecurityGroupRuleProtocolPtrOutput) ToSecurityGroupRuleProtocolPtrOutputWithContext(ctx context.Context) SecurityGroupRuleProtocolPtrOutput {
	return o
}

func (o SecurityGroupRuleProtocolPtrOutput) Elem() SecurityGroupRuleProtocolOutput {
	return o.ApplyT(func(v *SecurityGroupRuleProtocol) SecurityGroupRuleProtocol {
		if v != nil {
			return *v
		}
		var ret SecurityGroupRuleProtocol
		return ret
	}).(SecurityGroupRuleProtocolOutput)
}

// The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.
func (o SecurityGroupRuleProtocolPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRuleProtocol) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The protocol number which the rule should match. Either `name` or `number` must be provided.
func (o SecurityGroupRuleProtocolPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRuleProtocol) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type ServerBackupScheduleBackupProperties struct {
	Name            string   `pulumi:"name"`
	RetentionPeriod int      `pulumi:"retentionPeriod"`
	VolumeIds       []string `pulumi:"volumeIds"`
}

// ServerBackupScheduleBackupPropertiesInput is an input type that accepts ServerBackupScheduleBackupPropertiesArgs and ServerBackupScheduleBackupPropertiesOutput values.
// You can construct a concrete instance of `ServerBackupScheduleBackupPropertiesInput` via:
//
//	ServerBackupScheduleBackupPropertiesArgs{...}
type ServerBackupScheduleBackupPropertiesInput interface {
	pulumi.Input

	ToServerBackupScheduleBackupPropertiesOutput() ServerBackupScheduleBackupPropertiesOutput
	ToServerBackupScheduleBackupPropertiesOutputWithContext(context.Context) ServerBackupScheduleBackupPropertiesOutput
}

type ServerBackupScheduleBackupPropertiesArgs struct {
	Name            pulumi.StringInput      `pulumi:"name"`
	RetentionPeriod pulumi.IntInput         `pulumi:"retentionPeriod"`
	VolumeIds       pulumi.StringArrayInput `pulumi:"volumeIds"`
}

func (ServerBackupScheduleBackupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (i ServerBackupScheduleBackupPropertiesArgs) ToServerBackupScheduleBackupPropertiesOutput() ServerBackupScheduleBackupPropertiesOutput {
	return i.ToServerBackupScheduleBackupPropertiesOutputWithContext(context.Background())
}

func (i ServerBackupScheduleBackupPropertiesArgs) ToServerBackupScheduleBackupPropertiesOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBackupScheduleBackupPropertiesOutput)
}

func (i ServerBackupScheduleBackupPropertiesArgs) ToServerBackupScheduleBackupPropertiesPtrOutput() ServerBackupScheduleBackupPropertiesPtrOutput {
	return i.ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i ServerBackupScheduleBackupPropertiesArgs) ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBackupScheduleBackupPropertiesOutput).ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(ctx)
}

// ServerBackupScheduleBackupPropertiesPtrInput is an input type that accepts ServerBackupScheduleBackupPropertiesArgs, ServerBackupScheduleBackupPropertiesPtr and ServerBackupScheduleBackupPropertiesPtrOutput values.
// You can construct a concrete instance of `ServerBackupScheduleBackupPropertiesPtrInput` via:
//
//	        ServerBackupScheduleBackupPropertiesArgs{...}
//
//	or:
//
//	        nil
type ServerBackupScheduleBackupPropertiesPtrInput interface {
	pulumi.Input

	ToServerBackupScheduleBackupPropertiesPtrOutput() ServerBackupScheduleBackupPropertiesPtrOutput
	ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(context.Context) ServerBackupScheduleBackupPropertiesPtrOutput
}

type serverBackupScheduleBackupPropertiesPtrType ServerBackupScheduleBackupPropertiesArgs

func ServerBackupScheduleBackupPropertiesPtr(v *ServerBackupScheduleBackupPropertiesArgs) ServerBackupScheduleBackupPropertiesPtrInput {
	return (*serverBackupScheduleBackupPropertiesPtrType)(v)
}

func (*serverBackupScheduleBackupPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (i *serverBackupScheduleBackupPropertiesPtrType) ToServerBackupScheduleBackupPropertiesPtrOutput() ServerBackupScheduleBackupPropertiesPtrOutput {
	return i.ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i *serverBackupScheduleBackupPropertiesPtrType) ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBackupScheduleBackupPropertiesPtrOutput)
}

type ServerBackupScheduleBackupPropertiesOutput struct{ *pulumi.OutputState }

func (ServerBackupScheduleBackupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (o ServerBackupScheduleBackupPropertiesOutput) ToServerBackupScheduleBackupPropertiesOutput() ServerBackupScheduleBackupPropertiesOutput {
	return o
}

func (o ServerBackupScheduleBackupPropertiesOutput) ToServerBackupScheduleBackupPropertiesOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesOutput {
	return o
}

func (o ServerBackupScheduleBackupPropertiesOutput) ToServerBackupScheduleBackupPropertiesPtrOutput() ServerBackupScheduleBackupPropertiesPtrOutput {
	return o.ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(context.Background())
}

func (o ServerBackupScheduleBackupPropertiesOutput) ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerBackupScheduleBackupProperties) *ServerBackupScheduleBackupProperties {
		return &v
	}).(ServerBackupScheduleBackupPropertiesPtrOutput)
}

func (o ServerBackupScheduleBackupPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerBackupScheduleBackupProperties) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServerBackupScheduleBackupPropertiesOutput) RetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v ServerBackupScheduleBackupProperties) int { return v.RetentionPeriod }).(pulumi.IntOutput)
}

func (o ServerBackupScheduleBackupPropertiesOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerBackupScheduleBackupProperties) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

type ServerBackupScheduleBackupPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ServerBackupScheduleBackupPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) ToServerBackupScheduleBackupPropertiesPtrOutput() ServerBackupScheduleBackupPropertiesPtrOutput {
	return o
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) ToServerBackupScheduleBackupPropertiesPtrOutputWithContext(ctx context.Context) ServerBackupScheduleBackupPropertiesPtrOutput {
	return o
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) Elem() ServerBackupScheduleBackupPropertiesOutput {
	return o.ApplyT(func(v *ServerBackupScheduleBackupProperties) ServerBackupScheduleBackupProperties {
		if v != nil {
			return *v
		}
		var ret ServerBackupScheduleBackupProperties
		return ret
	}).(ServerBackupScheduleBackupPropertiesOutput)
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBackupScheduleBackupProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerBackupScheduleBackupProperties) *int {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

func (o ServerBackupScheduleBackupPropertiesPtrOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerBackupScheduleBackupProperties) []string {
		if v == nil {
			return nil
		}
		return v.VolumeIds
	}).(pulumi.StringArrayOutput)
}

type ServerBootVolume struct {
	// Delete the volume during the termination of the server. Only allowed when `sourceType` is `image`.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// The ID of the boot volume
	Id *string `pulumi:"id"`
	// The performance class of the server.
	PerformanceClass *string `pulumi:"performanceClass"`
	// The size of the boot volume in GB. Must be provided when `sourceType` is `image`.
	Size *int `pulumi:"size"`
	// The ID of the source, either image ID or volume ID
	SourceId string `pulumi:"sourceId"`
	// The type of the source. Supported values are: `volume`, `image`.
	SourceType string `pulumi:"sourceType"`
}

// ServerBootVolumeInput is an input type that accepts ServerBootVolumeArgs and ServerBootVolumeOutput values.
// You can construct a concrete instance of `ServerBootVolumeInput` via:
//
//	ServerBootVolumeArgs{...}
type ServerBootVolumeInput interface {
	pulumi.Input

	ToServerBootVolumeOutput() ServerBootVolumeOutput
	ToServerBootVolumeOutputWithContext(context.Context) ServerBootVolumeOutput
}

type ServerBootVolumeArgs struct {
	// Delete the volume during the termination of the server. Only allowed when `sourceType` is `image`.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// The ID of the boot volume
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The performance class of the server.
	PerformanceClass pulumi.StringPtrInput `pulumi:"performanceClass"`
	// The size of the boot volume in GB. Must be provided when `sourceType` is `image`.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The ID of the source, either image ID or volume ID
	SourceId pulumi.StringInput `pulumi:"sourceId"`
	// The type of the source. Supported values are: `volume`, `image`.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (ServerBootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBootVolume)(nil)).Elem()
}

func (i ServerBootVolumeArgs) ToServerBootVolumeOutput() ServerBootVolumeOutput {
	return i.ToServerBootVolumeOutputWithContext(context.Background())
}

func (i ServerBootVolumeArgs) ToServerBootVolumeOutputWithContext(ctx context.Context) ServerBootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootVolumeOutput)
}

func (i ServerBootVolumeArgs) ToServerBootVolumePtrOutput() ServerBootVolumePtrOutput {
	return i.ToServerBootVolumePtrOutputWithContext(context.Background())
}

func (i ServerBootVolumeArgs) ToServerBootVolumePtrOutputWithContext(ctx context.Context) ServerBootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootVolumeOutput).ToServerBootVolumePtrOutputWithContext(ctx)
}

// ServerBootVolumePtrInput is an input type that accepts ServerBootVolumeArgs, ServerBootVolumePtr and ServerBootVolumePtrOutput values.
// You can construct a concrete instance of `ServerBootVolumePtrInput` via:
//
//	        ServerBootVolumeArgs{...}
//
//	or:
//
//	        nil
type ServerBootVolumePtrInput interface {
	pulumi.Input

	ToServerBootVolumePtrOutput() ServerBootVolumePtrOutput
	ToServerBootVolumePtrOutputWithContext(context.Context) ServerBootVolumePtrOutput
}

type serverBootVolumePtrType ServerBootVolumeArgs

func ServerBootVolumePtr(v *ServerBootVolumeArgs) ServerBootVolumePtrInput {
	return (*serverBootVolumePtrType)(v)
}

func (*serverBootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBootVolume)(nil)).Elem()
}

func (i *serverBootVolumePtrType) ToServerBootVolumePtrOutput() ServerBootVolumePtrOutput {
	return i.ToServerBootVolumePtrOutputWithContext(context.Background())
}

func (i *serverBootVolumePtrType) ToServerBootVolumePtrOutputWithContext(ctx context.Context) ServerBootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootVolumePtrOutput)
}

type ServerBootVolumeOutput struct{ *pulumi.OutputState }

func (ServerBootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBootVolume)(nil)).Elem()
}

func (o ServerBootVolumeOutput) ToServerBootVolumeOutput() ServerBootVolumeOutput {
	return o
}

func (o ServerBootVolumeOutput) ToServerBootVolumeOutputWithContext(ctx context.Context) ServerBootVolumeOutput {
	return o
}

func (o ServerBootVolumeOutput) ToServerBootVolumePtrOutput() ServerBootVolumePtrOutput {
	return o.ToServerBootVolumePtrOutputWithContext(context.Background())
}

func (o ServerBootVolumeOutput) ToServerBootVolumePtrOutputWithContext(ctx context.Context) ServerBootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerBootVolume) *ServerBootVolume {
		return &v
	}).(ServerBootVolumePtrOutput)
}

// Delete the volume during the termination of the server. Only allowed when `sourceType` is `image`.
func (o ServerBootVolumeOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerBootVolume) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// The ID of the boot volume
func (o ServerBootVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBootVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The performance class of the server.
func (o ServerBootVolumeOutput) PerformanceClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBootVolume) *string { return v.PerformanceClass }).(pulumi.StringPtrOutput)
}

// The size of the boot volume in GB. Must be provided when `sourceType` is `image`.
func (o ServerBootVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerBootVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The ID of the source, either image ID or volume ID
func (o ServerBootVolumeOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerBootVolume) string { return v.SourceId }).(pulumi.StringOutput)
}

// The type of the source. Supported values are: `volume`, `image`.
func (o ServerBootVolumeOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ServerBootVolume) string { return v.SourceType }).(pulumi.StringOutput)
}

type ServerBootVolumePtrOutput struct{ *pulumi.OutputState }

func (ServerBootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBootVolume)(nil)).Elem()
}

func (o ServerBootVolumePtrOutput) ToServerBootVolumePtrOutput() ServerBootVolumePtrOutput {
	return o
}

func (o ServerBootVolumePtrOutput) ToServerBootVolumePtrOutputWithContext(ctx context.Context) ServerBootVolumePtrOutput {
	return o
}

func (o ServerBootVolumePtrOutput) Elem() ServerBootVolumeOutput {
	return o.ApplyT(func(v *ServerBootVolume) ServerBootVolume {
		if v != nil {
			return *v
		}
		var ret ServerBootVolume
		return ret
	}).(ServerBootVolumeOutput)
}

// Delete the volume during the termination of the server. Only allowed when `sourceType` is `image`.
func (o ServerBootVolumePtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// The ID of the boot volume
func (o ServerBootVolumePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The performance class of the server.
func (o ServerBootVolumePtrOutput) PerformanceClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *string {
		if v == nil {
			return nil
		}
		return v.PerformanceClass
	}).(pulumi.StringPtrOutput)
}

// The size of the boot volume in GB. Must be provided when `sourceType` is `image`.
func (o ServerBootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// The ID of the source, either image ID or volume ID
func (o ServerBootVolumePtrOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.SourceId
	}).(pulumi.StringPtrOutput)
}

// The type of the source. Supported values are: `volume`, `image`.
func (o ServerBootVolumePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

type SkeClusterExtensions struct {
	// Cluster access control configuration.
	Acl *SkeClusterExtensionsAcl `pulumi:"acl"`
	// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
	//
	// Deprecated: Use observability instead.
	Argus *SkeClusterExtensionsArgus `pulumi:"argus"`
	// DNS extension configuration
	Dns *SkeClusterExtensionsDns `pulumi:"dns"`
	// A single observability block as defined below.
	Observability *SkeClusterExtensionsObservability `pulumi:"observability"`
}

// SkeClusterExtensionsInput is an input type that accepts SkeClusterExtensionsArgs and SkeClusterExtensionsOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsInput` via:
//
//	SkeClusterExtensionsArgs{...}
type SkeClusterExtensionsInput interface {
	pulumi.Input

	ToSkeClusterExtensionsOutput() SkeClusterExtensionsOutput
	ToSkeClusterExtensionsOutputWithContext(context.Context) SkeClusterExtensionsOutput
}

type SkeClusterExtensionsArgs struct {
	// Cluster access control configuration.
	Acl SkeClusterExtensionsAclPtrInput `pulumi:"acl"`
	// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
	//
	// Deprecated: Use observability instead.
	Argus SkeClusterExtensionsArgusPtrInput `pulumi:"argus"`
	// DNS extension configuration
	Dns SkeClusterExtensionsDnsPtrInput `pulumi:"dns"`
	// A single observability block as defined below.
	Observability SkeClusterExtensionsObservabilityPtrInput `pulumi:"observability"`
}

func (SkeClusterExtensionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensions)(nil)).Elem()
}

func (i SkeClusterExtensionsArgs) ToSkeClusterExtensionsOutput() SkeClusterExtensionsOutput {
	return i.ToSkeClusterExtensionsOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsArgs) ToSkeClusterExtensionsOutputWithContext(ctx context.Context) SkeClusterExtensionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsOutput)
}

func (i SkeClusterExtensionsArgs) ToSkeClusterExtensionsPtrOutput() SkeClusterExtensionsPtrOutput {
	return i.ToSkeClusterExtensionsPtrOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsArgs) ToSkeClusterExtensionsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsOutput).ToSkeClusterExtensionsPtrOutputWithContext(ctx)
}

// SkeClusterExtensionsPtrInput is an input type that accepts SkeClusterExtensionsArgs, SkeClusterExtensionsPtr and SkeClusterExtensionsPtrOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsPtrInput` via:
//
//	        SkeClusterExtensionsArgs{...}
//
//	or:
//
//	        nil
type SkeClusterExtensionsPtrInput interface {
	pulumi.Input

	ToSkeClusterExtensionsPtrOutput() SkeClusterExtensionsPtrOutput
	ToSkeClusterExtensionsPtrOutputWithContext(context.Context) SkeClusterExtensionsPtrOutput
}

type skeClusterExtensionsPtrType SkeClusterExtensionsArgs

func SkeClusterExtensionsPtr(v *SkeClusterExtensionsArgs) SkeClusterExtensionsPtrInput {
	return (*skeClusterExtensionsPtrType)(v)
}

func (*skeClusterExtensionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensions)(nil)).Elem()
}

func (i *skeClusterExtensionsPtrType) ToSkeClusterExtensionsPtrOutput() SkeClusterExtensionsPtrOutput {
	return i.ToSkeClusterExtensionsPtrOutputWithContext(context.Background())
}

func (i *skeClusterExtensionsPtrType) ToSkeClusterExtensionsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsPtrOutput)
}

type SkeClusterExtensionsOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensions)(nil)).Elem()
}

func (o SkeClusterExtensionsOutput) ToSkeClusterExtensionsOutput() SkeClusterExtensionsOutput {
	return o
}

func (o SkeClusterExtensionsOutput) ToSkeClusterExtensionsOutputWithContext(ctx context.Context) SkeClusterExtensionsOutput {
	return o
}

func (o SkeClusterExtensionsOutput) ToSkeClusterExtensionsPtrOutput() SkeClusterExtensionsPtrOutput {
	return o.ToSkeClusterExtensionsPtrOutputWithContext(context.Background())
}

func (o SkeClusterExtensionsOutput) ToSkeClusterExtensionsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterExtensions) *SkeClusterExtensions {
		return &v
	}).(SkeClusterExtensionsPtrOutput)
}

// Cluster access control configuration.
func (o SkeClusterExtensionsOutput) Acl() SkeClusterExtensionsAclPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensions) *SkeClusterExtensionsAcl { return v.Acl }).(SkeClusterExtensionsAclPtrOutput)
}

// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
//
// Deprecated: Use observability instead.
func (o SkeClusterExtensionsOutput) Argus() SkeClusterExtensionsArgusPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensions) *SkeClusterExtensionsArgus { return v.Argus }).(SkeClusterExtensionsArgusPtrOutput)
}

// DNS extension configuration
func (o SkeClusterExtensionsOutput) Dns() SkeClusterExtensionsDnsPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensions) *SkeClusterExtensionsDns { return v.Dns }).(SkeClusterExtensionsDnsPtrOutput)
}

// A single observability block as defined below.
func (o SkeClusterExtensionsOutput) Observability() SkeClusterExtensionsObservabilityPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensions) *SkeClusterExtensionsObservability { return v.Observability }).(SkeClusterExtensionsObservabilityPtrOutput)
}

type SkeClusterExtensionsPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensions)(nil)).Elem()
}

func (o SkeClusterExtensionsPtrOutput) ToSkeClusterExtensionsPtrOutput() SkeClusterExtensionsPtrOutput {
	return o
}

func (o SkeClusterExtensionsPtrOutput) ToSkeClusterExtensionsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsPtrOutput {
	return o
}

func (o SkeClusterExtensionsPtrOutput) Elem() SkeClusterExtensionsOutput {
	return o.ApplyT(func(v *SkeClusterExtensions) SkeClusterExtensions {
		if v != nil {
			return *v
		}
		var ret SkeClusterExtensions
		return ret
	}).(SkeClusterExtensionsOutput)
}

// Cluster access control configuration.
func (o SkeClusterExtensionsPtrOutput) Acl() SkeClusterExtensionsAclPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensions) *SkeClusterExtensionsAcl {
		if v == nil {
			return nil
		}
		return v.Acl
	}).(SkeClusterExtensionsAclPtrOutput)
}

// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
//
// Deprecated: Use observability instead.
func (o SkeClusterExtensionsPtrOutput) Argus() SkeClusterExtensionsArgusPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensions) *SkeClusterExtensionsArgus {
		if v == nil {
			return nil
		}
		return v.Argus
	}).(SkeClusterExtensionsArgusPtrOutput)
}

// DNS extension configuration
func (o SkeClusterExtensionsPtrOutput) Dns() SkeClusterExtensionsDnsPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensions) *SkeClusterExtensionsDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(SkeClusterExtensionsDnsPtrOutput)
}

// A single observability block as defined below.
func (o SkeClusterExtensionsPtrOutput) Observability() SkeClusterExtensionsObservabilityPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensions) *SkeClusterExtensionsObservability {
		if v == nil {
			return nil
		}
		return v.Observability
	}).(SkeClusterExtensionsObservabilityPtrOutput)
}

type SkeClusterExtensionsAcl struct {
	// Specify a list of CIDRs to whitelist.
	AllowedCidrs []string `pulumi:"allowedCidrs"`
	// Is ACL enabled?
	Enabled bool `pulumi:"enabled"`
}

// SkeClusterExtensionsAclInput is an input type that accepts SkeClusterExtensionsAclArgs and SkeClusterExtensionsAclOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsAclInput` via:
//
//	SkeClusterExtensionsAclArgs{...}
type SkeClusterExtensionsAclInput interface {
	pulumi.Input

	ToSkeClusterExtensionsAclOutput() SkeClusterExtensionsAclOutput
	ToSkeClusterExtensionsAclOutputWithContext(context.Context) SkeClusterExtensionsAclOutput
}

type SkeClusterExtensionsAclArgs struct {
	// Specify a list of CIDRs to whitelist.
	AllowedCidrs pulumi.StringArrayInput `pulumi:"allowedCidrs"`
	// Is ACL enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (SkeClusterExtensionsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsAcl)(nil)).Elem()
}

func (i SkeClusterExtensionsAclArgs) ToSkeClusterExtensionsAclOutput() SkeClusterExtensionsAclOutput {
	return i.ToSkeClusterExtensionsAclOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsAclArgs) ToSkeClusterExtensionsAclOutputWithContext(ctx context.Context) SkeClusterExtensionsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsAclOutput)
}

func (i SkeClusterExtensionsAclArgs) ToSkeClusterExtensionsAclPtrOutput() SkeClusterExtensionsAclPtrOutput {
	return i.ToSkeClusterExtensionsAclPtrOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsAclArgs) ToSkeClusterExtensionsAclPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsAclOutput).ToSkeClusterExtensionsAclPtrOutputWithContext(ctx)
}

// SkeClusterExtensionsAclPtrInput is an input type that accepts SkeClusterExtensionsAclArgs, SkeClusterExtensionsAclPtr and SkeClusterExtensionsAclPtrOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsAclPtrInput` via:
//
//	        SkeClusterExtensionsAclArgs{...}
//
//	or:
//
//	        nil
type SkeClusterExtensionsAclPtrInput interface {
	pulumi.Input

	ToSkeClusterExtensionsAclPtrOutput() SkeClusterExtensionsAclPtrOutput
	ToSkeClusterExtensionsAclPtrOutputWithContext(context.Context) SkeClusterExtensionsAclPtrOutput
}

type skeClusterExtensionsAclPtrType SkeClusterExtensionsAclArgs

func SkeClusterExtensionsAclPtr(v *SkeClusterExtensionsAclArgs) SkeClusterExtensionsAclPtrInput {
	return (*skeClusterExtensionsAclPtrType)(v)
}

func (*skeClusterExtensionsAclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsAcl)(nil)).Elem()
}

func (i *skeClusterExtensionsAclPtrType) ToSkeClusterExtensionsAclPtrOutput() SkeClusterExtensionsAclPtrOutput {
	return i.ToSkeClusterExtensionsAclPtrOutputWithContext(context.Background())
}

func (i *skeClusterExtensionsAclPtrType) ToSkeClusterExtensionsAclPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsAclPtrOutput)
}

type SkeClusterExtensionsAclOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsAcl)(nil)).Elem()
}

func (o SkeClusterExtensionsAclOutput) ToSkeClusterExtensionsAclOutput() SkeClusterExtensionsAclOutput {
	return o
}

func (o SkeClusterExtensionsAclOutput) ToSkeClusterExtensionsAclOutputWithContext(ctx context.Context) SkeClusterExtensionsAclOutput {
	return o
}

func (o SkeClusterExtensionsAclOutput) ToSkeClusterExtensionsAclPtrOutput() SkeClusterExtensionsAclPtrOutput {
	return o.ToSkeClusterExtensionsAclPtrOutputWithContext(context.Background())
}

func (o SkeClusterExtensionsAclOutput) ToSkeClusterExtensionsAclPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsAclPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterExtensionsAcl) *SkeClusterExtensionsAcl {
		return &v
	}).(SkeClusterExtensionsAclPtrOutput)
}

// Specify a list of CIDRs to whitelist.
func (o SkeClusterExtensionsAclOutput) AllowedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SkeClusterExtensionsAcl) []string { return v.AllowedCidrs }).(pulumi.StringArrayOutput)
}

// Is ACL enabled?
func (o SkeClusterExtensionsAclOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SkeClusterExtensionsAcl) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SkeClusterExtensionsAclPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsAclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsAcl)(nil)).Elem()
}

func (o SkeClusterExtensionsAclPtrOutput) ToSkeClusterExtensionsAclPtrOutput() SkeClusterExtensionsAclPtrOutput {
	return o
}

func (o SkeClusterExtensionsAclPtrOutput) ToSkeClusterExtensionsAclPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsAclPtrOutput {
	return o
}

func (o SkeClusterExtensionsAclPtrOutput) Elem() SkeClusterExtensionsAclOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsAcl) SkeClusterExtensionsAcl {
		if v != nil {
			return *v
		}
		var ret SkeClusterExtensionsAcl
		return ret
	}).(SkeClusterExtensionsAclOutput)
}

// Specify a list of CIDRs to whitelist.
func (o SkeClusterExtensionsAclPtrOutput) AllowedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsAcl) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCidrs
	}).(pulumi.StringArrayOutput)
}

// Is ACL enabled?
func (o SkeClusterExtensionsAclPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsAcl) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SkeClusterExtensionsArgus struct {
	// Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.
	ArgusInstanceId *string `pulumi:"argusInstanceId"`
	// Flag to enable/disable Argus extensions.
	Enabled bool `pulumi:"enabled"`
}

// SkeClusterExtensionsArgusInput is an input type that accepts SkeClusterExtensionsArgusArgs and SkeClusterExtensionsArgusOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsArgusInput` via:
//
//	SkeClusterExtensionsArgusArgs{...}
type SkeClusterExtensionsArgusInput interface {
	pulumi.Input

	ToSkeClusterExtensionsArgusOutput() SkeClusterExtensionsArgusOutput
	ToSkeClusterExtensionsArgusOutputWithContext(context.Context) SkeClusterExtensionsArgusOutput
}

type SkeClusterExtensionsArgusArgs struct {
	// Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.
	ArgusInstanceId pulumi.StringPtrInput `pulumi:"argusInstanceId"`
	// Flag to enable/disable Argus extensions.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (SkeClusterExtensionsArgusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsArgus)(nil)).Elem()
}

func (i SkeClusterExtensionsArgusArgs) ToSkeClusterExtensionsArgusOutput() SkeClusterExtensionsArgusOutput {
	return i.ToSkeClusterExtensionsArgusOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsArgusArgs) ToSkeClusterExtensionsArgusOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsArgusOutput)
}

func (i SkeClusterExtensionsArgusArgs) ToSkeClusterExtensionsArgusPtrOutput() SkeClusterExtensionsArgusPtrOutput {
	return i.ToSkeClusterExtensionsArgusPtrOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsArgusArgs) ToSkeClusterExtensionsArgusPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsArgusOutput).ToSkeClusterExtensionsArgusPtrOutputWithContext(ctx)
}

// SkeClusterExtensionsArgusPtrInput is an input type that accepts SkeClusterExtensionsArgusArgs, SkeClusterExtensionsArgusPtr and SkeClusterExtensionsArgusPtrOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsArgusPtrInput` via:
//
//	        SkeClusterExtensionsArgusArgs{...}
//
//	or:
//
//	        nil
type SkeClusterExtensionsArgusPtrInput interface {
	pulumi.Input

	ToSkeClusterExtensionsArgusPtrOutput() SkeClusterExtensionsArgusPtrOutput
	ToSkeClusterExtensionsArgusPtrOutputWithContext(context.Context) SkeClusterExtensionsArgusPtrOutput
}

type skeClusterExtensionsArgusPtrType SkeClusterExtensionsArgusArgs

func SkeClusterExtensionsArgusPtr(v *SkeClusterExtensionsArgusArgs) SkeClusterExtensionsArgusPtrInput {
	return (*skeClusterExtensionsArgusPtrType)(v)
}

func (*skeClusterExtensionsArgusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsArgus)(nil)).Elem()
}

func (i *skeClusterExtensionsArgusPtrType) ToSkeClusterExtensionsArgusPtrOutput() SkeClusterExtensionsArgusPtrOutput {
	return i.ToSkeClusterExtensionsArgusPtrOutputWithContext(context.Background())
}

func (i *skeClusterExtensionsArgusPtrType) ToSkeClusterExtensionsArgusPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsArgusPtrOutput)
}

type SkeClusterExtensionsArgusOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsArgusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsArgus)(nil)).Elem()
}

func (o SkeClusterExtensionsArgusOutput) ToSkeClusterExtensionsArgusOutput() SkeClusterExtensionsArgusOutput {
	return o
}

func (o SkeClusterExtensionsArgusOutput) ToSkeClusterExtensionsArgusOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusOutput {
	return o
}

func (o SkeClusterExtensionsArgusOutput) ToSkeClusterExtensionsArgusPtrOutput() SkeClusterExtensionsArgusPtrOutput {
	return o.ToSkeClusterExtensionsArgusPtrOutputWithContext(context.Background())
}

func (o SkeClusterExtensionsArgusOutput) ToSkeClusterExtensionsArgusPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterExtensionsArgus) *SkeClusterExtensionsArgus {
		return &v
	}).(SkeClusterExtensionsArgusPtrOutput)
}

// Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.
func (o SkeClusterExtensionsArgusOutput) ArgusInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensionsArgus) *string { return v.ArgusInstanceId }).(pulumi.StringPtrOutput)
}

// Flag to enable/disable Argus extensions.
func (o SkeClusterExtensionsArgusOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SkeClusterExtensionsArgus) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SkeClusterExtensionsArgusPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsArgusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsArgus)(nil)).Elem()
}

func (o SkeClusterExtensionsArgusPtrOutput) ToSkeClusterExtensionsArgusPtrOutput() SkeClusterExtensionsArgusPtrOutput {
	return o
}

func (o SkeClusterExtensionsArgusPtrOutput) ToSkeClusterExtensionsArgusPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsArgusPtrOutput {
	return o
}

func (o SkeClusterExtensionsArgusPtrOutput) Elem() SkeClusterExtensionsArgusOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsArgus) SkeClusterExtensionsArgus {
		if v != nil {
			return *v
		}
		var ret SkeClusterExtensionsArgus
		return ret
	}).(SkeClusterExtensionsArgusOutput)
}

// Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.
func (o SkeClusterExtensionsArgusPtrOutput) ArgusInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsArgus) *string {
		if v == nil {
			return nil
		}
		return v.ArgusInstanceId
	}).(pulumi.StringPtrOutput)
}

// Flag to enable/disable Argus extensions.
func (o SkeClusterExtensionsArgusPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsArgus) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SkeClusterExtensionsDns struct {
	// Flag to enable/disable DNS extensions
	Enabled bool `pulumi:"enabled"`
	// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
	Zones []string `pulumi:"zones"`
}

// SkeClusterExtensionsDnsInput is an input type that accepts SkeClusterExtensionsDnsArgs and SkeClusterExtensionsDnsOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsDnsInput` via:
//
//	SkeClusterExtensionsDnsArgs{...}
type SkeClusterExtensionsDnsInput interface {
	pulumi.Input

	ToSkeClusterExtensionsDnsOutput() SkeClusterExtensionsDnsOutput
	ToSkeClusterExtensionsDnsOutputWithContext(context.Context) SkeClusterExtensionsDnsOutput
}

type SkeClusterExtensionsDnsArgs struct {
	// Flag to enable/disable DNS extensions
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (SkeClusterExtensionsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsDns)(nil)).Elem()
}

func (i SkeClusterExtensionsDnsArgs) ToSkeClusterExtensionsDnsOutput() SkeClusterExtensionsDnsOutput {
	return i.ToSkeClusterExtensionsDnsOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsDnsArgs) ToSkeClusterExtensionsDnsOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsDnsOutput)
}

func (i SkeClusterExtensionsDnsArgs) ToSkeClusterExtensionsDnsPtrOutput() SkeClusterExtensionsDnsPtrOutput {
	return i.ToSkeClusterExtensionsDnsPtrOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsDnsArgs) ToSkeClusterExtensionsDnsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsDnsOutput).ToSkeClusterExtensionsDnsPtrOutputWithContext(ctx)
}

// SkeClusterExtensionsDnsPtrInput is an input type that accepts SkeClusterExtensionsDnsArgs, SkeClusterExtensionsDnsPtr and SkeClusterExtensionsDnsPtrOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsDnsPtrInput` via:
//
//	        SkeClusterExtensionsDnsArgs{...}
//
//	or:
//
//	        nil
type SkeClusterExtensionsDnsPtrInput interface {
	pulumi.Input

	ToSkeClusterExtensionsDnsPtrOutput() SkeClusterExtensionsDnsPtrOutput
	ToSkeClusterExtensionsDnsPtrOutputWithContext(context.Context) SkeClusterExtensionsDnsPtrOutput
}

type skeClusterExtensionsDnsPtrType SkeClusterExtensionsDnsArgs

func SkeClusterExtensionsDnsPtr(v *SkeClusterExtensionsDnsArgs) SkeClusterExtensionsDnsPtrInput {
	return (*skeClusterExtensionsDnsPtrType)(v)
}

func (*skeClusterExtensionsDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsDns)(nil)).Elem()
}

func (i *skeClusterExtensionsDnsPtrType) ToSkeClusterExtensionsDnsPtrOutput() SkeClusterExtensionsDnsPtrOutput {
	return i.ToSkeClusterExtensionsDnsPtrOutputWithContext(context.Background())
}

func (i *skeClusterExtensionsDnsPtrType) ToSkeClusterExtensionsDnsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsDnsPtrOutput)
}

type SkeClusterExtensionsDnsOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsDns)(nil)).Elem()
}

func (o SkeClusterExtensionsDnsOutput) ToSkeClusterExtensionsDnsOutput() SkeClusterExtensionsDnsOutput {
	return o
}

func (o SkeClusterExtensionsDnsOutput) ToSkeClusterExtensionsDnsOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsOutput {
	return o
}

func (o SkeClusterExtensionsDnsOutput) ToSkeClusterExtensionsDnsPtrOutput() SkeClusterExtensionsDnsPtrOutput {
	return o.ToSkeClusterExtensionsDnsPtrOutputWithContext(context.Background())
}

func (o SkeClusterExtensionsDnsOutput) ToSkeClusterExtensionsDnsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterExtensionsDns) *SkeClusterExtensionsDns {
		return &v
	}).(SkeClusterExtensionsDnsPtrOutput)
}

// Flag to enable/disable DNS extensions
func (o SkeClusterExtensionsDnsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SkeClusterExtensionsDns) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
func (o SkeClusterExtensionsDnsOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SkeClusterExtensionsDns) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type SkeClusterExtensionsDnsPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsDns)(nil)).Elem()
}

func (o SkeClusterExtensionsDnsPtrOutput) ToSkeClusterExtensionsDnsPtrOutput() SkeClusterExtensionsDnsPtrOutput {
	return o
}

func (o SkeClusterExtensionsDnsPtrOutput) ToSkeClusterExtensionsDnsPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsDnsPtrOutput {
	return o
}

func (o SkeClusterExtensionsDnsPtrOutput) Elem() SkeClusterExtensionsDnsOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsDns) SkeClusterExtensionsDns {
		if v != nil {
			return *v
		}
		var ret SkeClusterExtensionsDns
		return ret
	}).(SkeClusterExtensionsDnsOutput)
}

// Flag to enable/disable DNS extensions
func (o SkeClusterExtensionsDnsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsDns) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
func (o SkeClusterExtensionsDnsPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsDns) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

type SkeClusterExtensionsObservability struct {
	// Flag to enable/disable Observability extensions.
	Enabled bool `pulumi:"enabled"`
	// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
	InstanceId *string `pulumi:"instanceId"`
}

// SkeClusterExtensionsObservabilityInput is an input type that accepts SkeClusterExtensionsObservabilityArgs and SkeClusterExtensionsObservabilityOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsObservabilityInput` via:
//
//	SkeClusterExtensionsObservabilityArgs{...}
type SkeClusterExtensionsObservabilityInput interface {
	pulumi.Input

	ToSkeClusterExtensionsObservabilityOutput() SkeClusterExtensionsObservabilityOutput
	ToSkeClusterExtensionsObservabilityOutputWithContext(context.Context) SkeClusterExtensionsObservabilityOutput
}

type SkeClusterExtensionsObservabilityArgs struct {
	// Flag to enable/disable Observability extensions.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
}

func (SkeClusterExtensionsObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsObservability)(nil)).Elem()
}

func (i SkeClusterExtensionsObservabilityArgs) ToSkeClusterExtensionsObservabilityOutput() SkeClusterExtensionsObservabilityOutput {
	return i.ToSkeClusterExtensionsObservabilityOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsObservabilityArgs) ToSkeClusterExtensionsObservabilityOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsObservabilityOutput)
}

func (i SkeClusterExtensionsObservabilityArgs) ToSkeClusterExtensionsObservabilityPtrOutput() SkeClusterExtensionsObservabilityPtrOutput {
	return i.ToSkeClusterExtensionsObservabilityPtrOutputWithContext(context.Background())
}

func (i SkeClusterExtensionsObservabilityArgs) ToSkeClusterExtensionsObservabilityPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsObservabilityOutput).ToSkeClusterExtensionsObservabilityPtrOutputWithContext(ctx)
}

// SkeClusterExtensionsObservabilityPtrInput is an input type that accepts SkeClusterExtensionsObservabilityArgs, SkeClusterExtensionsObservabilityPtr and SkeClusterExtensionsObservabilityPtrOutput values.
// You can construct a concrete instance of `SkeClusterExtensionsObservabilityPtrInput` via:
//
//	        SkeClusterExtensionsObservabilityArgs{...}
//
//	or:
//
//	        nil
type SkeClusterExtensionsObservabilityPtrInput interface {
	pulumi.Input

	ToSkeClusterExtensionsObservabilityPtrOutput() SkeClusterExtensionsObservabilityPtrOutput
	ToSkeClusterExtensionsObservabilityPtrOutputWithContext(context.Context) SkeClusterExtensionsObservabilityPtrOutput
}

type skeClusterExtensionsObservabilityPtrType SkeClusterExtensionsObservabilityArgs

func SkeClusterExtensionsObservabilityPtr(v *SkeClusterExtensionsObservabilityArgs) SkeClusterExtensionsObservabilityPtrInput {
	return (*skeClusterExtensionsObservabilityPtrType)(v)
}

func (*skeClusterExtensionsObservabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsObservability)(nil)).Elem()
}

func (i *skeClusterExtensionsObservabilityPtrType) ToSkeClusterExtensionsObservabilityPtrOutput() SkeClusterExtensionsObservabilityPtrOutput {
	return i.ToSkeClusterExtensionsObservabilityPtrOutputWithContext(context.Background())
}

func (i *skeClusterExtensionsObservabilityPtrType) ToSkeClusterExtensionsObservabilityPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterExtensionsObservabilityPtrOutput)
}

type SkeClusterExtensionsObservabilityOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterExtensionsObservability)(nil)).Elem()
}

func (o SkeClusterExtensionsObservabilityOutput) ToSkeClusterExtensionsObservabilityOutput() SkeClusterExtensionsObservabilityOutput {
	return o
}

func (o SkeClusterExtensionsObservabilityOutput) ToSkeClusterExtensionsObservabilityOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityOutput {
	return o
}

func (o SkeClusterExtensionsObservabilityOutput) ToSkeClusterExtensionsObservabilityPtrOutput() SkeClusterExtensionsObservabilityPtrOutput {
	return o.ToSkeClusterExtensionsObservabilityPtrOutputWithContext(context.Background())
}

func (o SkeClusterExtensionsObservabilityOutput) ToSkeClusterExtensionsObservabilityPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterExtensionsObservability) *SkeClusterExtensionsObservability {
		return &v
	}).(SkeClusterExtensionsObservabilityPtrOutput)
}

// Flag to enable/disable Observability extensions.
func (o SkeClusterExtensionsObservabilityOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SkeClusterExtensionsObservability) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
func (o SkeClusterExtensionsObservabilityOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterExtensionsObservability) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

type SkeClusterExtensionsObservabilityPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterExtensionsObservabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterExtensionsObservability)(nil)).Elem()
}

func (o SkeClusterExtensionsObservabilityPtrOutput) ToSkeClusterExtensionsObservabilityPtrOutput() SkeClusterExtensionsObservabilityPtrOutput {
	return o
}

func (o SkeClusterExtensionsObservabilityPtrOutput) ToSkeClusterExtensionsObservabilityPtrOutputWithContext(ctx context.Context) SkeClusterExtensionsObservabilityPtrOutput {
	return o
}

func (o SkeClusterExtensionsObservabilityPtrOutput) Elem() SkeClusterExtensionsObservabilityOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsObservability) SkeClusterExtensionsObservability {
		if v != nil {
			return *v
		}
		var ret SkeClusterExtensionsObservability
		return ret
	}).(SkeClusterExtensionsObservabilityOutput)
}

// Flag to enable/disable Observability extensions.
func (o SkeClusterExtensionsObservabilityPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsObservability) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
func (o SkeClusterExtensionsObservabilityPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeClusterExtensionsObservability) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

type SkeClusterHibernation struct {
	// End time of hibernation in crontab syntax. E.g. `0 8 * * *` for waking up the cluster at 8am.
	End string `pulumi:"end"`
	// Start time of cluster hibernation in crontab syntax. E.g. `0 18 * * *` for starting everyday at 6pm.
	Start string `pulumi:"start"`
	// Timezone name corresponding to a file in the IANA Time Zone database. i.e. `Europe/Berlin`.
	Timezone *string `pulumi:"timezone"`
}

// SkeClusterHibernationInput is an input type that accepts SkeClusterHibernationArgs and SkeClusterHibernationOutput values.
// You can construct a concrete instance of `SkeClusterHibernationInput` via:
//
//	SkeClusterHibernationArgs{...}
type SkeClusterHibernationInput interface {
	pulumi.Input

	ToSkeClusterHibernationOutput() SkeClusterHibernationOutput
	ToSkeClusterHibernationOutputWithContext(context.Context) SkeClusterHibernationOutput
}

type SkeClusterHibernationArgs struct {
	// End time of hibernation in crontab syntax. E.g. `0 8 * * *` for waking up the cluster at 8am.
	End pulumi.StringInput `pulumi:"end"`
	// Start time of cluster hibernation in crontab syntax. E.g. `0 18 * * *` for starting everyday at 6pm.
	Start pulumi.StringInput `pulumi:"start"`
	// Timezone name corresponding to a file in the IANA Time Zone database. i.e. `Europe/Berlin`.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (SkeClusterHibernationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterHibernation)(nil)).Elem()
}

func (i SkeClusterHibernationArgs) ToSkeClusterHibernationOutput() SkeClusterHibernationOutput {
	return i.ToSkeClusterHibernationOutputWithContext(context.Background())
}

func (i SkeClusterHibernationArgs) ToSkeClusterHibernationOutputWithContext(ctx context.Context) SkeClusterHibernationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterHibernationOutput)
}

// SkeClusterHibernationArrayInput is an input type that accepts SkeClusterHibernationArray and SkeClusterHibernationArrayOutput values.
// You can construct a concrete instance of `SkeClusterHibernationArrayInput` via:
//
//	SkeClusterHibernationArray{ SkeClusterHibernationArgs{...} }
type SkeClusterHibernationArrayInput interface {
	pulumi.Input

	ToSkeClusterHibernationArrayOutput() SkeClusterHibernationArrayOutput
	ToSkeClusterHibernationArrayOutputWithContext(context.Context) SkeClusterHibernationArrayOutput
}

type SkeClusterHibernationArray []SkeClusterHibernationInput

func (SkeClusterHibernationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterHibernation)(nil)).Elem()
}

func (i SkeClusterHibernationArray) ToSkeClusterHibernationArrayOutput() SkeClusterHibernationArrayOutput {
	return i.ToSkeClusterHibernationArrayOutputWithContext(context.Background())
}

func (i SkeClusterHibernationArray) ToSkeClusterHibernationArrayOutputWithContext(ctx context.Context) SkeClusterHibernationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterHibernationArrayOutput)
}

type SkeClusterHibernationOutput struct{ *pulumi.OutputState }

func (SkeClusterHibernationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterHibernation)(nil)).Elem()
}

func (o SkeClusterHibernationOutput) ToSkeClusterHibernationOutput() SkeClusterHibernationOutput {
	return o
}

func (o SkeClusterHibernationOutput) ToSkeClusterHibernationOutputWithContext(ctx context.Context) SkeClusterHibernationOutput {
	return o
}

// End time of hibernation in crontab syntax. E.g. `0 8 * * *` for waking up the cluster at 8am.
func (o SkeClusterHibernationOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterHibernation) string { return v.End }).(pulumi.StringOutput)
}

// Start time of cluster hibernation in crontab syntax. E.g. `0 18 * * *` for starting everyday at 6pm.
func (o SkeClusterHibernationOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterHibernation) string { return v.Start }).(pulumi.StringOutput)
}

// Timezone name corresponding to a file in the IANA Time Zone database. i.e. `Europe/Berlin`.
func (o SkeClusterHibernationOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterHibernation) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type SkeClusterHibernationArrayOutput struct{ *pulumi.OutputState }

func (SkeClusterHibernationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterHibernation)(nil)).Elem()
}

func (o SkeClusterHibernationArrayOutput) ToSkeClusterHibernationArrayOutput() SkeClusterHibernationArrayOutput {
	return o
}

func (o SkeClusterHibernationArrayOutput) ToSkeClusterHibernationArrayOutputWithContext(ctx context.Context) SkeClusterHibernationArrayOutput {
	return o
}

func (o SkeClusterHibernationArrayOutput) Index(i pulumi.IntInput) SkeClusterHibernationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SkeClusterHibernation {
		return vs[0].([]SkeClusterHibernation)[vs[1].(int)]
	}).(SkeClusterHibernationOutput)
}

type SkeClusterMaintenance struct {
	// Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	EnableKubernetesVersionUpdates *bool `pulumi:"enableKubernetesVersionUpdates"`
	// Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	EnableMachineImageVersionUpdates *bool `pulumi:"enableMachineImageVersionUpdates"`
	// Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.
	End string `pulumi:"end"`
	// Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.
	Start string `pulumi:"start"`
}

// SkeClusterMaintenanceInput is an input type that accepts SkeClusterMaintenanceArgs and SkeClusterMaintenanceOutput values.
// You can construct a concrete instance of `SkeClusterMaintenanceInput` via:
//
//	SkeClusterMaintenanceArgs{...}
type SkeClusterMaintenanceInput interface {
	pulumi.Input

	ToSkeClusterMaintenanceOutput() SkeClusterMaintenanceOutput
	ToSkeClusterMaintenanceOutputWithContext(context.Context) SkeClusterMaintenanceOutput
}

type SkeClusterMaintenanceArgs struct {
	// Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	EnableKubernetesVersionUpdates pulumi.BoolPtrInput `pulumi:"enableKubernetesVersionUpdates"`
	// Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	EnableMachineImageVersionUpdates pulumi.BoolPtrInput `pulumi:"enableMachineImageVersionUpdates"`
	// Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.
	End pulumi.StringInput `pulumi:"end"`
	// Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.
	Start pulumi.StringInput `pulumi:"start"`
}

func (SkeClusterMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterMaintenance)(nil)).Elem()
}

func (i SkeClusterMaintenanceArgs) ToSkeClusterMaintenanceOutput() SkeClusterMaintenanceOutput {
	return i.ToSkeClusterMaintenanceOutputWithContext(context.Background())
}

func (i SkeClusterMaintenanceArgs) ToSkeClusterMaintenanceOutputWithContext(ctx context.Context) SkeClusterMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterMaintenanceOutput)
}

func (i SkeClusterMaintenanceArgs) ToSkeClusterMaintenancePtrOutput() SkeClusterMaintenancePtrOutput {
	return i.ToSkeClusterMaintenancePtrOutputWithContext(context.Background())
}

func (i SkeClusterMaintenanceArgs) ToSkeClusterMaintenancePtrOutputWithContext(ctx context.Context) SkeClusterMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterMaintenanceOutput).ToSkeClusterMaintenancePtrOutputWithContext(ctx)
}

// SkeClusterMaintenancePtrInput is an input type that accepts SkeClusterMaintenanceArgs, SkeClusterMaintenancePtr and SkeClusterMaintenancePtrOutput values.
// You can construct a concrete instance of `SkeClusterMaintenancePtrInput` via:
//
//	        SkeClusterMaintenanceArgs{...}
//
//	or:
//
//	        nil
type SkeClusterMaintenancePtrInput interface {
	pulumi.Input

	ToSkeClusterMaintenancePtrOutput() SkeClusterMaintenancePtrOutput
	ToSkeClusterMaintenancePtrOutputWithContext(context.Context) SkeClusterMaintenancePtrOutput
}

type skeClusterMaintenancePtrType SkeClusterMaintenanceArgs

func SkeClusterMaintenancePtr(v *SkeClusterMaintenanceArgs) SkeClusterMaintenancePtrInput {
	return (*skeClusterMaintenancePtrType)(v)
}

func (*skeClusterMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterMaintenance)(nil)).Elem()
}

func (i *skeClusterMaintenancePtrType) ToSkeClusterMaintenancePtrOutput() SkeClusterMaintenancePtrOutput {
	return i.ToSkeClusterMaintenancePtrOutputWithContext(context.Background())
}

func (i *skeClusterMaintenancePtrType) ToSkeClusterMaintenancePtrOutputWithContext(ctx context.Context) SkeClusterMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterMaintenancePtrOutput)
}

type SkeClusterMaintenanceOutput struct{ *pulumi.OutputState }

func (SkeClusterMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterMaintenance)(nil)).Elem()
}

func (o SkeClusterMaintenanceOutput) ToSkeClusterMaintenanceOutput() SkeClusterMaintenanceOutput {
	return o
}

func (o SkeClusterMaintenanceOutput) ToSkeClusterMaintenanceOutputWithContext(ctx context.Context) SkeClusterMaintenanceOutput {
	return o
}

func (o SkeClusterMaintenanceOutput) ToSkeClusterMaintenancePtrOutput() SkeClusterMaintenancePtrOutput {
	return o.ToSkeClusterMaintenancePtrOutputWithContext(context.Background())
}

func (o SkeClusterMaintenanceOutput) ToSkeClusterMaintenancePtrOutputWithContext(ctx context.Context) SkeClusterMaintenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterMaintenance) *SkeClusterMaintenance {
		return &v
	}).(SkeClusterMaintenancePtrOutput)
}

// Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterMaintenanceOutput) EnableKubernetesVersionUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SkeClusterMaintenance) *bool { return v.EnableKubernetesVersionUpdates }).(pulumi.BoolPtrOutput)
}

// Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterMaintenanceOutput) EnableMachineImageVersionUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SkeClusterMaintenance) *bool { return v.EnableMachineImageVersionUpdates }).(pulumi.BoolPtrOutput)
}

// Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.
func (o SkeClusterMaintenanceOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterMaintenance) string { return v.End }).(pulumi.StringOutput)
}

// Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.
func (o SkeClusterMaintenanceOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterMaintenance) string { return v.Start }).(pulumi.StringOutput)
}

type SkeClusterMaintenancePtrOutput struct{ *pulumi.OutputState }

func (SkeClusterMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterMaintenance)(nil)).Elem()
}

func (o SkeClusterMaintenancePtrOutput) ToSkeClusterMaintenancePtrOutput() SkeClusterMaintenancePtrOutput {
	return o
}

func (o SkeClusterMaintenancePtrOutput) ToSkeClusterMaintenancePtrOutputWithContext(ctx context.Context) SkeClusterMaintenancePtrOutput {
	return o
}

func (o SkeClusterMaintenancePtrOutput) Elem() SkeClusterMaintenanceOutput {
	return o.ApplyT(func(v *SkeClusterMaintenance) SkeClusterMaintenance {
		if v != nil {
			return *v
		}
		var ret SkeClusterMaintenance
		return ret
	}).(SkeClusterMaintenanceOutput)
}

// Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterMaintenancePtrOutput) EnableKubernetesVersionUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKubernetesVersionUpdates
	}).(pulumi.BoolPtrOutput)
}

// Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterMaintenancePtrOutput) EnableMachineImageVersionUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeClusterMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMachineImageVersionUpdates
	}).(pulumi.BoolPtrOutput)
}

// Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.
func (o SkeClusterMaintenancePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeClusterMaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.StringPtrOutput)
}

// Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.
func (o SkeClusterMaintenancePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeClusterMaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

type SkeClusterNetwork struct {
	// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
	Id *string `pulumi:"id"`
}

// SkeClusterNetworkInput is an input type that accepts SkeClusterNetworkArgs and SkeClusterNetworkOutput values.
// You can construct a concrete instance of `SkeClusterNetworkInput` via:
//
//	SkeClusterNetworkArgs{...}
type SkeClusterNetworkInput interface {
	pulumi.Input

	ToSkeClusterNetworkOutput() SkeClusterNetworkOutput
	ToSkeClusterNetworkOutputWithContext(context.Context) SkeClusterNetworkOutput
}

type SkeClusterNetworkArgs struct {
	// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SkeClusterNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNetwork)(nil)).Elem()
}

func (i SkeClusterNetworkArgs) ToSkeClusterNetworkOutput() SkeClusterNetworkOutput {
	return i.ToSkeClusterNetworkOutputWithContext(context.Background())
}

func (i SkeClusterNetworkArgs) ToSkeClusterNetworkOutputWithContext(ctx context.Context) SkeClusterNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNetworkOutput)
}

func (i SkeClusterNetworkArgs) ToSkeClusterNetworkPtrOutput() SkeClusterNetworkPtrOutput {
	return i.ToSkeClusterNetworkPtrOutputWithContext(context.Background())
}

func (i SkeClusterNetworkArgs) ToSkeClusterNetworkPtrOutputWithContext(ctx context.Context) SkeClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNetworkOutput).ToSkeClusterNetworkPtrOutputWithContext(ctx)
}

// SkeClusterNetworkPtrInput is an input type that accepts SkeClusterNetworkArgs, SkeClusterNetworkPtr and SkeClusterNetworkPtrOutput values.
// You can construct a concrete instance of `SkeClusterNetworkPtrInput` via:
//
//	        SkeClusterNetworkArgs{...}
//
//	or:
//
//	        nil
type SkeClusterNetworkPtrInput interface {
	pulumi.Input

	ToSkeClusterNetworkPtrOutput() SkeClusterNetworkPtrOutput
	ToSkeClusterNetworkPtrOutputWithContext(context.Context) SkeClusterNetworkPtrOutput
}

type skeClusterNetworkPtrType SkeClusterNetworkArgs

func SkeClusterNetworkPtr(v *SkeClusterNetworkArgs) SkeClusterNetworkPtrInput {
	return (*skeClusterNetworkPtrType)(v)
}

func (*skeClusterNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterNetwork)(nil)).Elem()
}

func (i *skeClusterNetworkPtrType) ToSkeClusterNetworkPtrOutput() SkeClusterNetworkPtrOutput {
	return i.ToSkeClusterNetworkPtrOutputWithContext(context.Background())
}

func (i *skeClusterNetworkPtrType) ToSkeClusterNetworkPtrOutputWithContext(ctx context.Context) SkeClusterNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNetworkPtrOutput)
}

type SkeClusterNetworkOutput struct{ *pulumi.OutputState }

func (SkeClusterNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNetwork)(nil)).Elem()
}

func (o SkeClusterNetworkOutput) ToSkeClusterNetworkOutput() SkeClusterNetworkOutput {
	return o
}

func (o SkeClusterNetworkOutput) ToSkeClusterNetworkOutputWithContext(ctx context.Context) SkeClusterNetworkOutput {
	return o
}

func (o SkeClusterNetworkOutput) ToSkeClusterNetworkPtrOutput() SkeClusterNetworkPtrOutput {
	return o.ToSkeClusterNetworkPtrOutputWithContext(context.Background())
}

func (o SkeClusterNetworkOutput) ToSkeClusterNetworkPtrOutputWithContext(ctx context.Context) SkeClusterNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkeClusterNetwork) *SkeClusterNetwork {
		return &v
	}).(SkeClusterNetworkPtrOutput)
}

// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
func (o SkeClusterNetworkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNetwork) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SkeClusterNetworkPtrOutput struct{ *pulumi.OutputState }

func (SkeClusterNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeClusterNetwork)(nil)).Elem()
}

func (o SkeClusterNetworkPtrOutput) ToSkeClusterNetworkPtrOutput() SkeClusterNetworkPtrOutput {
	return o
}

func (o SkeClusterNetworkPtrOutput) ToSkeClusterNetworkPtrOutputWithContext(ctx context.Context) SkeClusterNetworkPtrOutput {
	return o
}

func (o SkeClusterNetworkPtrOutput) Elem() SkeClusterNetworkOutput {
	return o.ApplyT(func(v *SkeClusterNetwork) SkeClusterNetwork {
		if v != nil {
			return *v
		}
		var ret SkeClusterNetwork
		return ret
	}).(SkeClusterNetworkOutput)
}

// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
func (o SkeClusterNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeClusterNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SkeClusterNodePool struct {
	// Allow system components to run on this node pool.
	AllowSystemComponents *bool `pulumi:"allowSystemComponents"`
	// Specify a list of availability zones. E.g. `eu01-m`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the container runtime. Defaults to `containerd`
	Cri *string `pulumi:"cri"`
	// Labels to add to each node.
	Labels map[string]string `pulumi:"labels"`
	// The machine type.
	MachineType string `pulumi:"machineType"`
	// Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
	MaxSurge *int `pulumi:"maxSurge"`
	// Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
	// Maximum number of nodes in the pool.
	Maximum int `pulumi:"maximum"`
	// Minimum number of nodes in the pool.
	Minimum int `pulumi:"minimum"`
	// Specifies the name of the node pool.
	Name string `pulumi:"name"`
	// The name of the OS image. Defaults to `flatcar`.
	OsName *string `pulumi:"osName"`
	// This field is deprecated, use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead.
	//
	// Deprecated: Use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead. Setting a specific OS image version will cause errors during minor OS upgrades due to forced updates.
	OsVersion *string `pulumi:"osVersion"`
	// The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
	OsVersionMin *string `pulumi:"osVersionMin"`
	// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	OsVersionUsed *string `pulumi:"osVersionUsed"`
	// Specifies a taint list as defined below.
	Taints []SkeClusterNodePoolTaint `pulumi:"taints"`
	// The volume size in GB. Defaults to `20`
	VolumeSize *int `pulumi:"volumeSize"`
	// Specifies the volume type. Defaults to `storagePremiumPerf1`.
	VolumeType *string `pulumi:"volumeType"`
}

// SkeClusterNodePoolInput is an input type that accepts SkeClusterNodePoolArgs and SkeClusterNodePoolOutput values.
// You can construct a concrete instance of `SkeClusterNodePoolInput` via:
//
//	SkeClusterNodePoolArgs{...}
type SkeClusterNodePoolInput interface {
	pulumi.Input

	ToSkeClusterNodePoolOutput() SkeClusterNodePoolOutput
	ToSkeClusterNodePoolOutputWithContext(context.Context) SkeClusterNodePoolOutput
}

type SkeClusterNodePoolArgs struct {
	// Allow system components to run on this node pool.
	AllowSystemComponents pulumi.BoolPtrInput `pulumi:"allowSystemComponents"`
	// Specify a list of availability zones. E.g. `eu01-m`
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Specifies the container runtime. Defaults to `containerd`
	Cri pulumi.StringPtrInput `pulumi:"cri"`
	// Labels to add to each node.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The machine type.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
	// Maximum number of nodes in the pool.
	Maximum pulumi.IntInput `pulumi:"maximum"`
	// Minimum number of nodes in the pool.
	Minimum pulumi.IntInput `pulumi:"minimum"`
	// Specifies the name of the node pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the OS image. Defaults to `flatcar`.
	OsName pulumi.StringPtrInput `pulumi:"osName"`
	// This field is deprecated, use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead.
	//
	// Deprecated: Use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead. Setting a specific OS image version will cause errors during minor OS upgrades due to forced updates.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
	// The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
	OsVersionMin pulumi.StringPtrInput `pulumi:"osVersionMin"`
	// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	OsVersionUsed pulumi.StringPtrInput `pulumi:"osVersionUsed"`
	// Specifies a taint list as defined below.
	Taints SkeClusterNodePoolTaintArrayInput `pulumi:"taints"`
	// The volume size in GB. Defaults to `20`
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// Specifies the volume type. Defaults to `storagePremiumPerf1`.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (SkeClusterNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNodePool)(nil)).Elem()
}

func (i SkeClusterNodePoolArgs) ToSkeClusterNodePoolOutput() SkeClusterNodePoolOutput {
	return i.ToSkeClusterNodePoolOutputWithContext(context.Background())
}

func (i SkeClusterNodePoolArgs) ToSkeClusterNodePoolOutputWithContext(ctx context.Context) SkeClusterNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNodePoolOutput)
}

// SkeClusterNodePoolArrayInput is an input type that accepts SkeClusterNodePoolArray and SkeClusterNodePoolArrayOutput values.
// You can construct a concrete instance of `SkeClusterNodePoolArrayInput` via:
//
//	SkeClusterNodePoolArray{ SkeClusterNodePoolArgs{...} }
type SkeClusterNodePoolArrayInput interface {
	pulumi.Input

	ToSkeClusterNodePoolArrayOutput() SkeClusterNodePoolArrayOutput
	ToSkeClusterNodePoolArrayOutputWithContext(context.Context) SkeClusterNodePoolArrayOutput
}

type SkeClusterNodePoolArray []SkeClusterNodePoolInput

func (SkeClusterNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterNodePool)(nil)).Elem()
}

func (i SkeClusterNodePoolArray) ToSkeClusterNodePoolArrayOutput() SkeClusterNodePoolArrayOutput {
	return i.ToSkeClusterNodePoolArrayOutputWithContext(context.Background())
}

func (i SkeClusterNodePoolArray) ToSkeClusterNodePoolArrayOutputWithContext(ctx context.Context) SkeClusterNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNodePoolArrayOutput)
}

type SkeClusterNodePoolOutput struct{ *pulumi.OutputState }

func (SkeClusterNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNodePool)(nil)).Elem()
}

func (o SkeClusterNodePoolOutput) ToSkeClusterNodePoolOutput() SkeClusterNodePoolOutput {
	return o
}

func (o SkeClusterNodePoolOutput) ToSkeClusterNodePoolOutputWithContext(ctx context.Context) SkeClusterNodePoolOutput {
	return o
}

// Allow system components to run on this node pool.
func (o SkeClusterNodePoolOutput) AllowSystemComponents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *bool { return v.AllowSystemComponents }).(pulumi.BoolPtrOutput)
}

// Specify a list of availability zones. E.g. `eu01-m`
func (o SkeClusterNodePoolOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SkeClusterNodePool) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Specifies the container runtime. Defaults to `containerd`
func (o SkeClusterNodePoolOutput) Cri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.Cri }).(pulumi.StringPtrOutput)
}

// Labels to add to each node.
func (o SkeClusterNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SkeClusterNodePool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type.
func (o SkeClusterNodePoolOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterNodePool) string { return v.MachineType }).(pulumi.StringOutput)
}

// Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
func (o SkeClusterNodePoolOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `maxSurge` and `maxUnavailable` fields cannot both be unset at the same time.
func (o SkeClusterNodePoolOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

// Maximum number of nodes in the pool.
func (o SkeClusterNodePoolOutput) Maximum() pulumi.IntOutput {
	return o.ApplyT(func(v SkeClusterNodePool) int { return v.Maximum }).(pulumi.IntOutput)
}

// Minimum number of nodes in the pool.
func (o SkeClusterNodePoolOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v SkeClusterNodePool) int { return v.Minimum }).(pulumi.IntOutput)
}

// Specifies the name of the node pool.
func (o SkeClusterNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterNodePool) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the OS image. Defaults to `flatcar`.
func (o SkeClusterNodePoolOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

// This field is deprecated, use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead.
//
// Deprecated: Use `osVersionMin` to configure the version and `osVersionUsed` to get the currently used version instead. Setting a specific OS image version will cause errors during minor OS upgrades due to forced updates.
func (o SkeClusterNodePoolOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
func (o SkeClusterNodePoolOutput) OsVersionMin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.OsVersionMin }).(pulumi.StringPtrOutput)
}

// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterNodePoolOutput) OsVersionUsed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.OsVersionUsed }).(pulumi.StringPtrOutput)
}

// Specifies a taint list as defined below.
func (o SkeClusterNodePoolOutput) Taints() SkeClusterNodePoolTaintArrayOutput {
	return o.ApplyT(func(v SkeClusterNodePool) []SkeClusterNodePoolTaint { return v.Taints }).(SkeClusterNodePoolTaintArrayOutput)
}

// The volume size in GB. Defaults to `20`
func (o SkeClusterNodePoolOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Defaults to `storagePremiumPerf1`.
func (o SkeClusterNodePoolOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePool) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type SkeClusterNodePoolArrayOutput struct{ *pulumi.OutputState }

func (SkeClusterNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterNodePool)(nil)).Elem()
}

func (o SkeClusterNodePoolArrayOutput) ToSkeClusterNodePoolArrayOutput() SkeClusterNodePoolArrayOutput {
	return o
}

func (o SkeClusterNodePoolArrayOutput) ToSkeClusterNodePoolArrayOutputWithContext(ctx context.Context) SkeClusterNodePoolArrayOutput {
	return o
}

func (o SkeClusterNodePoolArrayOutput) Index(i pulumi.IntInput) SkeClusterNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SkeClusterNodePool {
		return vs[0].([]SkeClusterNodePool)[vs[1].(int)]
	}).(SkeClusterNodePoolOutput)
}

type SkeClusterNodePoolTaint struct {
	// The taint effect. E.g `PreferNoSchedule`.
	Effect string `pulumi:"effect"`
	// Taint key to be applied to a node.
	Key string `pulumi:"key"`
	// Taint value corresponding to the taint key.
	Value *string `pulumi:"value"`
}

// SkeClusterNodePoolTaintInput is an input type that accepts SkeClusterNodePoolTaintArgs and SkeClusterNodePoolTaintOutput values.
// You can construct a concrete instance of `SkeClusterNodePoolTaintInput` via:
//
//	SkeClusterNodePoolTaintArgs{...}
type SkeClusterNodePoolTaintInput interface {
	pulumi.Input

	ToSkeClusterNodePoolTaintOutput() SkeClusterNodePoolTaintOutput
	ToSkeClusterNodePoolTaintOutputWithContext(context.Context) SkeClusterNodePoolTaintOutput
}

type SkeClusterNodePoolTaintArgs struct {
	// The taint effect. E.g `PreferNoSchedule`.
	Effect pulumi.StringInput `pulumi:"effect"`
	// Taint key to be applied to a node.
	Key pulumi.StringInput `pulumi:"key"`
	// Taint value corresponding to the taint key.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SkeClusterNodePoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNodePoolTaint)(nil)).Elem()
}

func (i SkeClusterNodePoolTaintArgs) ToSkeClusterNodePoolTaintOutput() SkeClusterNodePoolTaintOutput {
	return i.ToSkeClusterNodePoolTaintOutputWithContext(context.Background())
}

func (i SkeClusterNodePoolTaintArgs) ToSkeClusterNodePoolTaintOutputWithContext(ctx context.Context) SkeClusterNodePoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNodePoolTaintOutput)
}

// SkeClusterNodePoolTaintArrayInput is an input type that accepts SkeClusterNodePoolTaintArray and SkeClusterNodePoolTaintArrayOutput values.
// You can construct a concrete instance of `SkeClusterNodePoolTaintArrayInput` via:
//
//	SkeClusterNodePoolTaintArray{ SkeClusterNodePoolTaintArgs{...} }
type SkeClusterNodePoolTaintArrayInput interface {
	pulumi.Input

	ToSkeClusterNodePoolTaintArrayOutput() SkeClusterNodePoolTaintArrayOutput
	ToSkeClusterNodePoolTaintArrayOutputWithContext(context.Context) SkeClusterNodePoolTaintArrayOutput
}

type SkeClusterNodePoolTaintArray []SkeClusterNodePoolTaintInput

func (SkeClusterNodePoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterNodePoolTaint)(nil)).Elem()
}

func (i SkeClusterNodePoolTaintArray) ToSkeClusterNodePoolTaintArrayOutput() SkeClusterNodePoolTaintArrayOutput {
	return i.ToSkeClusterNodePoolTaintArrayOutputWithContext(context.Background())
}

func (i SkeClusterNodePoolTaintArray) ToSkeClusterNodePoolTaintArrayOutputWithContext(ctx context.Context) SkeClusterNodePoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterNodePoolTaintArrayOutput)
}

type SkeClusterNodePoolTaintOutput struct{ *pulumi.OutputState }

func (SkeClusterNodePoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkeClusterNodePoolTaint)(nil)).Elem()
}

func (o SkeClusterNodePoolTaintOutput) ToSkeClusterNodePoolTaintOutput() SkeClusterNodePoolTaintOutput {
	return o
}

func (o SkeClusterNodePoolTaintOutput) ToSkeClusterNodePoolTaintOutputWithContext(ctx context.Context) SkeClusterNodePoolTaintOutput {
	return o
}

// The taint effect. E.g `PreferNoSchedule`.
func (o SkeClusterNodePoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterNodePoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

// Taint key to be applied to a node.
func (o SkeClusterNodePoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SkeClusterNodePoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

// Taint value corresponding to the taint key.
func (o SkeClusterNodePoolTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkeClusterNodePoolTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SkeClusterNodePoolTaintArrayOutput struct{ *pulumi.OutputState }

func (SkeClusterNodePoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkeClusterNodePoolTaint)(nil)).Elem()
}

func (o SkeClusterNodePoolTaintArrayOutput) ToSkeClusterNodePoolTaintArrayOutput() SkeClusterNodePoolTaintArrayOutput {
	return o
}

func (o SkeClusterNodePoolTaintArrayOutput) ToSkeClusterNodePoolTaintArrayOutputWithContext(ctx context.Context) SkeClusterNodePoolTaintArrayOutput {
	return o
}

func (o SkeClusterNodePoolTaintArrayOutput) Index(i pulumi.IntInput) SkeClusterNodePoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SkeClusterNodePoolTaint {
		return vs[0].([]SkeClusterNodePoolTaint)[vs[1].(int)]
	}).(SkeClusterNodePoolTaintOutput)
}

type SqlserverflexInstanceFlavor struct {
	Cpu         int     `pulumi:"cpu"`
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Ram         int     `pulumi:"ram"`
}

// SqlserverflexInstanceFlavorInput is an input type that accepts SqlserverflexInstanceFlavorArgs and SqlserverflexInstanceFlavorOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceFlavorInput` via:
//
//	SqlserverflexInstanceFlavorArgs{...}
type SqlserverflexInstanceFlavorInput interface {
	pulumi.Input

	ToSqlserverflexInstanceFlavorOutput() SqlserverflexInstanceFlavorOutput
	ToSqlserverflexInstanceFlavorOutputWithContext(context.Context) SqlserverflexInstanceFlavorOutput
}

type SqlserverflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput       `pulumi:"cpu"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Ram         pulumi.IntInput       `pulumi:"ram"`
}

func (SqlserverflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceFlavor)(nil)).Elem()
}

func (i SqlserverflexInstanceFlavorArgs) ToSqlserverflexInstanceFlavorOutput() SqlserverflexInstanceFlavorOutput {
	return i.ToSqlserverflexInstanceFlavorOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceFlavorArgs) ToSqlserverflexInstanceFlavorOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceFlavorOutput)
}

func (i SqlserverflexInstanceFlavorArgs) ToSqlserverflexInstanceFlavorPtrOutput() SqlserverflexInstanceFlavorPtrOutput {
	return i.ToSqlserverflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceFlavorArgs) ToSqlserverflexInstanceFlavorPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceFlavorOutput).ToSqlserverflexInstanceFlavorPtrOutputWithContext(ctx)
}

// SqlserverflexInstanceFlavorPtrInput is an input type that accepts SqlserverflexInstanceFlavorArgs, SqlserverflexInstanceFlavorPtr and SqlserverflexInstanceFlavorPtrOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceFlavorPtrInput` via:
//
//	        SqlserverflexInstanceFlavorArgs{...}
//
//	or:
//
//	        nil
type SqlserverflexInstanceFlavorPtrInput interface {
	pulumi.Input

	ToSqlserverflexInstanceFlavorPtrOutput() SqlserverflexInstanceFlavorPtrOutput
	ToSqlserverflexInstanceFlavorPtrOutputWithContext(context.Context) SqlserverflexInstanceFlavorPtrOutput
}

type sqlserverflexInstanceFlavorPtrType SqlserverflexInstanceFlavorArgs

func SqlserverflexInstanceFlavorPtr(v *SqlserverflexInstanceFlavorArgs) SqlserverflexInstanceFlavorPtrInput {
	return (*sqlserverflexInstanceFlavorPtrType)(v)
}

func (*sqlserverflexInstanceFlavorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceFlavor)(nil)).Elem()
}

func (i *sqlserverflexInstanceFlavorPtrType) ToSqlserverflexInstanceFlavorPtrOutput() SqlserverflexInstanceFlavorPtrOutput {
	return i.ToSqlserverflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (i *sqlserverflexInstanceFlavorPtrType) ToSqlserverflexInstanceFlavorPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceFlavorPtrOutput)
}

type SqlserverflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceFlavor)(nil)).Elem()
}

func (o SqlserverflexInstanceFlavorOutput) ToSqlserverflexInstanceFlavorOutput() SqlserverflexInstanceFlavorOutput {
	return o
}

func (o SqlserverflexInstanceFlavorOutput) ToSqlserverflexInstanceFlavorOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorOutput {
	return o
}

func (o SqlserverflexInstanceFlavorOutput) ToSqlserverflexInstanceFlavorPtrOutput() SqlserverflexInstanceFlavorPtrOutput {
	return o.ToSqlserverflexInstanceFlavorPtrOutputWithContext(context.Background())
}

func (o SqlserverflexInstanceFlavorOutput) ToSqlserverflexInstanceFlavorPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlserverflexInstanceFlavor) *SqlserverflexInstanceFlavor {
		return &v
	}).(SqlserverflexInstanceFlavorPtrOutput)
}

func (o SqlserverflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v SqlserverflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o SqlserverflexInstanceFlavorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceFlavor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceFlavorOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceFlavor) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v SqlserverflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type SqlserverflexInstanceFlavorPtrOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceFlavorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceFlavor)(nil)).Elem()
}

func (o SqlserverflexInstanceFlavorPtrOutput) ToSqlserverflexInstanceFlavorPtrOutput() SqlserverflexInstanceFlavorPtrOutput {
	return o
}

func (o SqlserverflexInstanceFlavorPtrOutput) ToSqlserverflexInstanceFlavorPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceFlavorPtrOutput {
	return o
}

func (o SqlserverflexInstanceFlavorPtrOutput) Elem() SqlserverflexInstanceFlavorOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceFlavor) SqlserverflexInstanceFlavor {
		if v != nil {
			return *v
		}
		var ret SqlserverflexInstanceFlavor
		return ret
	}).(SqlserverflexInstanceFlavorOutput)
}

func (o SqlserverflexInstanceFlavorPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.IntPtrOutput)
}

func (o SqlserverflexInstanceFlavorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceFlavorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceFlavor) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceFlavorPtrOutput) Ram() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceFlavor) *int {
		if v == nil {
			return nil
		}
		return &v.Ram
	}).(pulumi.IntPtrOutput)
}

type SqlserverflexInstanceOptions struct {
	Edition       *string `pulumi:"edition"`
	RetentionDays *int    `pulumi:"retentionDays"`
}

// SqlserverflexInstanceOptionsInput is an input type that accepts SqlserverflexInstanceOptionsArgs and SqlserverflexInstanceOptionsOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceOptionsInput` via:
//
//	SqlserverflexInstanceOptionsArgs{...}
type SqlserverflexInstanceOptionsInput interface {
	pulumi.Input

	ToSqlserverflexInstanceOptionsOutput() SqlserverflexInstanceOptionsOutput
	ToSqlserverflexInstanceOptionsOutputWithContext(context.Context) SqlserverflexInstanceOptionsOutput
}

type SqlserverflexInstanceOptionsArgs struct {
	Edition       pulumi.StringPtrInput `pulumi:"edition"`
	RetentionDays pulumi.IntPtrInput    `pulumi:"retentionDays"`
}

func (SqlserverflexInstanceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceOptions)(nil)).Elem()
}

func (i SqlserverflexInstanceOptionsArgs) ToSqlserverflexInstanceOptionsOutput() SqlserverflexInstanceOptionsOutput {
	return i.ToSqlserverflexInstanceOptionsOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceOptionsArgs) ToSqlserverflexInstanceOptionsOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceOptionsOutput)
}

func (i SqlserverflexInstanceOptionsArgs) ToSqlserverflexInstanceOptionsPtrOutput() SqlserverflexInstanceOptionsPtrOutput {
	return i.ToSqlserverflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceOptionsArgs) ToSqlserverflexInstanceOptionsPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceOptionsOutput).ToSqlserverflexInstanceOptionsPtrOutputWithContext(ctx)
}

// SqlserverflexInstanceOptionsPtrInput is an input type that accepts SqlserverflexInstanceOptionsArgs, SqlserverflexInstanceOptionsPtr and SqlserverflexInstanceOptionsPtrOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceOptionsPtrInput` via:
//
//	        SqlserverflexInstanceOptionsArgs{...}
//
//	or:
//
//	        nil
type SqlserverflexInstanceOptionsPtrInput interface {
	pulumi.Input

	ToSqlserverflexInstanceOptionsPtrOutput() SqlserverflexInstanceOptionsPtrOutput
	ToSqlserverflexInstanceOptionsPtrOutputWithContext(context.Context) SqlserverflexInstanceOptionsPtrOutput
}

type sqlserverflexInstanceOptionsPtrType SqlserverflexInstanceOptionsArgs

func SqlserverflexInstanceOptionsPtr(v *SqlserverflexInstanceOptionsArgs) SqlserverflexInstanceOptionsPtrInput {
	return (*sqlserverflexInstanceOptionsPtrType)(v)
}

func (*sqlserverflexInstanceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceOptions)(nil)).Elem()
}

func (i *sqlserverflexInstanceOptionsPtrType) ToSqlserverflexInstanceOptionsPtrOutput() SqlserverflexInstanceOptionsPtrOutput {
	return i.ToSqlserverflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (i *sqlserverflexInstanceOptionsPtrType) ToSqlserverflexInstanceOptionsPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceOptionsPtrOutput)
}

type SqlserverflexInstanceOptionsOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceOptions)(nil)).Elem()
}

func (o SqlserverflexInstanceOptionsOutput) ToSqlserverflexInstanceOptionsOutput() SqlserverflexInstanceOptionsOutput {
	return o
}

func (o SqlserverflexInstanceOptionsOutput) ToSqlserverflexInstanceOptionsOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsOutput {
	return o
}

func (o SqlserverflexInstanceOptionsOutput) ToSqlserverflexInstanceOptionsPtrOutput() SqlserverflexInstanceOptionsPtrOutput {
	return o.ToSqlserverflexInstanceOptionsPtrOutputWithContext(context.Background())
}

func (o SqlserverflexInstanceOptionsOutput) ToSqlserverflexInstanceOptionsPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlserverflexInstanceOptions) *SqlserverflexInstanceOptions {
		return &v
	}).(SqlserverflexInstanceOptionsPtrOutput)
}

func (o SqlserverflexInstanceOptionsOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceOptions) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceOptionsOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceOptions) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type SqlserverflexInstanceOptionsPtrOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceOptions)(nil)).Elem()
}

func (o SqlserverflexInstanceOptionsPtrOutput) ToSqlserverflexInstanceOptionsPtrOutput() SqlserverflexInstanceOptionsPtrOutput {
	return o
}

func (o SqlserverflexInstanceOptionsPtrOutput) ToSqlserverflexInstanceOptionsPtrOutputWithContext(ctx context.Context) SqlserverflexInstanceOptionsPtrOutput {
	return o
}

func (o SqlserverflexInstanceOptionsPtrOutput) Elem() SqlserverflexInstanceOptionsOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceOptions) SqlserverflexInstanceOptions {
		if v != nil {
			return *v
		}
		var ret SqlserverflexInstanceOptions
		return ret
	}).(SqlserverflexInstanceOptionsOutput)
}

func (o SqlserverflexInstanceOptionsPtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceOptions) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceOptionsPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceOptions) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

type SqlserverflexInstanceStorage struct {
	Class *string `pulumi:"class"`
	Size  *int    `pulumi:"size"`
}

// SqlserverflexInstanceStorageInput is an input type that accepts SqlserverflexInstanceStorageArgs and SqlserverflexInstanceStorageOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceStorageInput` via:
//
//	SqlserverflexInstanceStorageArgs{...}
type SqlserverflexInstanceStorageInput interface {
	pulumi.Input

	ToSqlserverflexInstanceStorageOutput() SqlserverflexInstanceStorageOutput
	ToSqlserverflexInstanceStorageOutputWithContext(context.Context) SqlserverflexInstanceStorageOutput
}

type SqlserverflexInstanceStorageArgs struct {
	Class pulumi.StringPtrInput `pulumi:"class"`
	Size  pulumi.IntPtrInput    `pulumi:"size"`
}

func (SqlserverflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceStorage)(nil)).Elem()
}

func (i SqlserverflexInstanceStorageArgs) ToSqlserverflexInstanceStorageOutput() SqlserverflexInstanceStorageOutput {
	return i.ToSqlserverflexInstanceStorageOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceStorageArgs) ToSqlserverflexInstanceStorageOutputWithContext(ctx context.Context) SqlserverflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceStorageOutput)
}

func (i SqlserverflexInstanceStorageArgs) ToSqlserverflexInstanceStoragePtrOutput() SqlserverflexInstanceStoragePtrOutput {
	return i.ToSqlserverflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceStorageArgs) ToSqlserverflexInstanceStoragePtrOutputWithContext(ctx context.Context) SqlserverflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceStorageOutput).ToSqlserverflexInstanceStoragePtrOutputWithContext(ctx)
}

// SqlserverflexInstanceStoragePtrInput is an input type that accepts SqlserverflexInstanceStorageArgs, SqlserverflexInstanceStoragePtr and SqlserverflexInstanceStoragePtrOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceStoragePtrInput` via:
//
//	        SqlserverflexInstanceStorageArgs{...}
//
//	or:
//
//	        nil
type SqlserverflexInstanceStoragePtrInput interface {
	pulumi.Input

	ToSqlserverflexInstanceStoragePtrOutput() SqlserverflexInstanceStoragePtrOutput
	ToSqlserverflexInstanceStoragePtrOutputWithContext(context.Context) SqlserverflexInstanceStoragePtrOutput
}

type sqlserverflexInstanceStoragePtrType SqlserverflexInstanceStorageArgs

func SqlserverflexInstanceStoragePtr(v *SqlserverflexInstanceStorageArgs) SqlserverflexInstanceStoragePtrInput {
	return (*sqlserverflexInstanceStoragePtrType)(v)
}

func (*sqlserverflexInstanceStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceStorage)(nil)).Elem()
}

func (i *sqlserverflexInstanceStoragePtrType) ToSqlserverflexInstanceStoragePtrOutput() SqlserverflexInstanceStoragePtrOutput {
	return i.ToSqlserverflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (i *sqlserverflexInstanceStoragePtrType) ToSqlserverflexInstanceStoragePtrOutputWithContext(ctx context.Context) SqlserverflexInstanceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceStoragePtrOutput)
}

type SqlserverflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlserverflexInstanceStorage)(nil)).Elem()
}

func (o SqlserverflexInstanceStorageOutput) ToSqlserverflexInstanceStorageOutput() SqlserverflexInstanceStorageOutput {
	return o
}

func (o SqlserverflexInstanceStorageOutput) ToSqlserverflexInstanceStorageOutputWithContext(ctx context.Context) SqlserverflexInstanceStorageOutput {
	return o
}

func (o SqlserverflexInstanceStorageOutput) ToSqlserverflexInstanceStoragePtrOutput() SqlserverflexInstanceStoragePtrOutput {
	return o.ToSqlserverflexInstanceStoragePtrOutputWithContext(context.Background())
}

func (o SqlserverflexInstanceStorageOutput) ToSqlserverflexInstanceStoragePtrOutputWithContext(ctx context.Context) SqlserverflexInstanceStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlserverflexInstanceStorage) *SqlserverflexInstanceStorage {
		return &v
	}).(SqlserverflexInstanceStoragePtrOutput)
}

func (o SqlserverflexInstanceStorageOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceStorage) *string { return v.Class }).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceStorageOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlserverflexInstanceStorage) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type SqlserverflexInstanceStoragePtrOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstanceStorage)(nil)).Elem()
}

func (o SqlserverflexInstanceStoragePtrOutput) ToSqlserverflexInstanceStoragePtrOutput() SqlserverflexInstanceStoragePtrOutput {
	return o
}

func (o SqlserverflexInstanceStoragePtrOutput) ToSqlserverflexInstanceStoragePtrOutputWithContext(ctx context.Context) SqlserverflexInstanceStoragePtrOutput {
	return o
}

func (o SqlserverflexInstanceStoragePtrOutput) Elem() SqlserverflexInstanceStorageOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceStorage) SqlserverflexInstanceStorage {
		if v != nil {
			return *v
		}
		var ret SqlserverflexInstanceStorage
		return ret
	}).(SqlserverflexInstanceStorageOutput)
}

func (o SqlserverflexInstanceStoragePtrOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceStorage) *string {
		if v == nil {
			return nil
		}
		return v.Class
	}).(pulumi.StringPtrOutput)
}

func (o SqlserverflexInstanceStoragePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlserverflexInstanceStorage) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type VolumeSource struct {
	// The ID of the source, e.g. image ID
	Id string `pulumi:"id"`
	// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
	Type string `pulumi:"type"`
}

// VolumeSourceInput is an input type that accepts VolumeSourceArgs and VolumeSourceOutput values.
// You can construct a concrete instance of `VolumeSourceInput` via:
//
//	VolumeSourceArgs{...}
type VolumeSourceInput interface {
	pulumi.Input

	ToVolumeSourceOutput() VolumeSourceOutput
	ToVolumeSourceOutputWithContext(context.Context) VolumeSourceOutput
}

type VolumeSourceArgs struct {
	// The ID of the source, e.g. image ID
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSource)(nil)).Elem()
}

func (i VolumeSourceArgs) ToVolumeSourceOutput() VolumeSourceOutput {
	return i.ToVolumeSourceOutputWithContext(context.Background())
}

func (i VolumeSourceArgs) ToVolumeSourceOutputWithContext(ctx context.Context) VolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSourceOutput)
}

func (i VolumeSourceArgs) ToVolumeSourcePtrOutput() VolumeSourcePtrOutput {
	return i.ToVolumeSourcePtrOutputWithContext(context.Background())
}

func (i VolumeSourceArgs) ToVolumeSourcePtrOutputWithContext(ctx context.Context) VolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSourceOutput).ToVolumeSourcePtrOutputWithContext(ctx)
}

// VolumeSourcePtrInput is an input type that accepts VolumeSourceArgs, VolumeSourcePtr and VolumeSourcePtrOutput values.
// You can construct a concrete instance of `VolumeSourcePtrInput` via:
//
//	        VolumeSourceArgs{...}
//
//	or:
//
//	        nil
type VolumeSourcePtrInput interface {
	pulumi.Input

	ToVolumeSourcePtrOutput() VolumeSourcePtrOutput
	ToVolumeSourcePtrOutputWithContext(context.Context) VolumeSourcePtrOutput
}

type volumeSourcePtrType VolumeSourceArgs

func VolumeSourcePtr(v *VolumeSourceArgs) VolumeSourcePtrInput {
	return (*volumeSourcePtrType)(v)
}

func (*volumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSource)(nil)).Elem()
}

func (i *volumeSourcePtrType) ToVolumeSourcePtrOutput() VolumeSourcePtrOutput {
	return i.ToVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *volumeSourcePtrType) ToVolumeSourcePtrOutputWithContext(ctx context.Context) VolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSourcePtrOutput)
}

type VolumeSourceOutput struct{ *pulumi.OutputState }

func (VolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSource)(nil)).Elem()
}

func (o VolumeSourceOutput) ToVolumeSourceOutput() VolumeSourceOutput {
	return o
}

func (o VolumeSourceOutput) ToVolumeSourceOutputWithContext(ctx context.Context) VolumeSourceOutput {
	return o
}

func (o VolumeSourceOutput) ToVolumeSourcePtrOutput() VolumeSourcePtrOutput {
	return o.ToVolumeSourcePtrOutputWithContext(context.Background())
}

func (o VolumeSourceOutput) ToVolumeSourcePtrOutputWithContext(ctx context.Context) VolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSource) *VolumeSource {
		return &v
	}).(VolumeSourcePtrOutput)
}

// The ID of the source, e.g. image ID
func (o VolumeSourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeSource) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
func (o VolumeSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeSource) string { return v.Type }).(pulumi.StringOutput)
}

type VolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (VolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSource)(nil)).Elem()
}

func (o VolumeSourcePtrOutput) ToVolumeSourcePtrOutput() VolumeSourcePtrOutput {
	return o
}

func (o VolumeSourcePtrOutput) ToVolumeSourcePtrOutputWithContext(ctx context.Context) VolumeSourcePtrOutput {
	return o
}

func (o VolumeSourcePtrOutput) Elem() VolumeSourceOutput {
	return o.ApplyT(func(v *VolumeSource) VolumeSource {
		if v != nil {
			return *v
		}
		var ret VolumeSource
		return ret
	}).(VolumeSourceOutput)
}

// The ID of the source, e.g. image ID
func (o VolumeSourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
func (o VolumeSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetCdnDistributionConfig struct {
	// The configured backend for the distribution
	Backend GetCdnDistributionConfigBackend `pulumi:"backend"`
	// The configured countries where distribution of content is blocked
	BlockedCountries []string `pulumi:"blockedCountries"`
	// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
	Optimizer GetCdnDistributionConfigOptimizer `pulumi:"optimizer"`
	// The configured regions where content will be hosted
	Regions []string `pulumi:"regions"`
}

// GetCdnDistributionConfigInput is an input type that accepts GetCdnDistributionConfigArgs and GetCdnDistributionConfigOutput values.
// You can construct a concrete instance of `GetCdnDistributionConfigInput` via:
//
//	GetCdnDistributionConfigArgs{...}
type GetCdnDistributionConfigInput interface {
	pulumi.Input

	ToGetCdnDistributionConfigOutput() GetCdnDistributionConfigOutput
	ToGetCdnDistributionConfigOutputWithContext(context.Context) GetCdnDistributionConfigOutput
}

type GetCdnDistributionConfigArgs struct {
	// The configured backend for the distribution
	Backend GetCdnDistributionConfigBackendInput `pulumi:"backend"`
	// The configured countries where distribution of content is blocked
	BlockedCountries pulumi.StringArrayInput `pulumi:"blockedCountries"`
	// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
	Optimizer GetCdnDistributionConfigOptimizerInput `pulumi:"optimizer"`
	// The configured regions where content will be hosted
	Regions pulumi.StringArrayInput `pulumi:"regions"`
}

func (GetCdnDistributionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfig)(nil)).Elem()
}

func (i GetCdnDistributionConfigArgs) ToGetCdnDistributionConfigOutput() GetCdnDistributionConfigOutput {
	return i.ToGetCdnDistributionConfigOutputWithContext(context.Background())
}

func (i GetCdnDistributionConfigArgs) ToGetCdnDistributionConfigOutputWithContext(ctx context.Context) GetCdnDistributionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdnDistributionConfigOutput)
}

type GetCdnDistributionConfigOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfig)(nil)).Elem()
}

func (o GetCdnDistributionConfigOutput) ToGetCdnDistributionConfigOutput() GetCdnDistributionConfigOutput {
	return o
}

func (o GetCdnDistributionConfigOutput) ToGetCdnDistributionConfigOutputWithContext(ctx context.Context) GetCdnDistributionConfigOutput {
	return o
}

// The configured backend for the distribution
func (o GetCdnDistributionConfigOutput) Backend() GetCdnDistributionConfigBackendOutput {
	return o.ApplyT(func(v GetCdnDistributionConfig) GetCdnDistributionConfigBackend { return v.Backend }).(GetCdnDistributionConfigBackendOutput)
}

// The configured countries where distribution of content is blocked
func (o GetCdnDistributionConfigOutput) BlockedCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCdnDistributionConfig) []string { return v.BlockedCountries }).(pulumi.StringArrayOutput)
}

// Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.
func (o GetCdnDistributionConfigOutput) Optimizer() GetCdnDistributionConfigOptimizerOutput {
	return o.ApplyT(func(v GetCdnDistributionConfig) GetCdnDistributionConfigOptimizer { return v.Optimizer }).(GetCdnDistributionConfigOptimizerOutput)
}

// The configured regions where content will be hosted
func (o GetCdnDistributionConfigOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCdnDistributionConfig) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type GetCdnDistributionConfigBackend struct {
	// The configured origin request headers for the backend
	OriginRequestHeaders map[string]string `pulumi:"originRequestHeaders"`
	// The configured backend type for the distribution
	OriginUrl string `pulumi:"originUrl"`
	// The configured backend type. Supported values are: `http`.
	Type string `pulumi:"type"`
}

// GetCdnDistributionConfigBackendInput is an input type that accepts GetCdnDistributionConfigBackendArgs and GetCdnDistributionConfigBackendOutput values.
// You can construct a concrete instance of `GetCdnDistributionConfigBackendInput` via:
//
//	GetCdnDistributionConfigBackendArgs{...}
type GetCdnDistributionConfigBackendInput interface {
	pulumi.Input

	ToGetCdnDistributionConfigBackendOutput() GetCdnDistributionConfigBackendOutput
	ToGetCdnDistributionConfigBackendOutputWithContext(context.Context) GetCdnDistributionConfigBackendOutput
}

type GetCdnDistributionConfigBackendArgs struct {
	// The configured origin request headers for the backend
	OriginRequestHeaders pulumi.StringMapInput `pulumi:"originRequestHeaders"`
	// The configured backend type for the distribution
	OriginUrl pulumi.StringInput `pulumi:"originUrl"`
	// The configured backend type. Supported values are: `http`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetCdnDistributionConfigBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfigBackend)(nil)).Elem()
}

func (i GetCdnDistributionConfigBackendArgs) ToGetCdnDistributionConfigBackendOutput() GetCdnDistributionConfigBackendOutput {
	return i.ToGetCdnDistributionConfigBackendOutputWithContext(context.Background())
}

func (i GetCdnDistributionConfigBackendArgs) ToGetCdnDistributionConfigBackendOutputWithContext(ctx context.Context) GetCdnDistributionConfigBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdnDistributionConfigBackendOutput)
}

type GetCdnDistributionConfigBackendOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionConfigBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfigBackend)(nil)).Elem()
}

func (o GetCdnDistributionConfigBackendOutput) ToGetCdnDistributionConfigBackendOutput() GetCdnDistributionConfigBackendOutput {
	return o
}

func (o GetCdnDistributionConfigBackendOutput) ToGetCdnDistributionConfigBackendOutputWithContext(ctx context.Context) GetCdnDistributionConfigBackendOutput {
	return o
}

// The configured origin request headers for the backend
func (o GetCdnDistributionConfigBackendOutput) OriginRequestHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetCdnDistributionConfigBackend) map[string]string { return v.OriginRequestHeaders }).(pulumi.StringMapOutput)
}

// The configured backend type for the distribution
func (o GetCdnDistributionConfigBackendOutput) OriginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionConfigBackend) string { return v.OriginUrl }).(pulumi.StringOutput)
}

// The configured backend type. Supported values are: `http`.
func (o GetCdnDistributionConfigBackendOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionConfigBackend) string { return v.Type }).(pulumi.StringOutput)
}

type GetCdnDistributionConfigOptimizer struct {
	Enabled bool `pulumi:"enabled"`
}

// GetCdnDistributionConfigOptimizerInput is an input type that accepts GetCdnDistributionConfigOptimizerArgs and GetCdnDistributionConfigOptimizerOutput values.
// You can construct a concrete instance of `GetCdnDistributionConfigOptimizerInput` via:
//
//	GetCdnDistributionConfigOptimizerArgs{...}
type GetCdnDistributionConfigOptimizerInput interface {
	pulumi.Input

	ToGetCdnDistributionConfigOptimizerOutput() GetCdnDistributionConfigOptimizerOutput
	ToGetCdnDistributionConfigOptimizerOutputWithContext(context.Context) GetCdnDistributionConfigOptimizerOutput
}

type GetCdnDistributionConfigOptimizerArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetCdnDistributionConfigOptimizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfigOptimizer)(nil)).Elem()
}

func (i GetCdnDistributionConfigOptimizerArgs) ToGetCdnDistributionConfigOptimizerOutput() GetCdnDistributionConfigOptimizerOutput {
	return i.ToGetCdnDistributionConfigOptimizerOutputWithContext(context.Background())
}

func (i GetCdnDistributionConfigOptimizerArgs) ToGetCdnDistributionConfigOptimizerOutputWithContext(ctx context.Context) GetCdnDistributionConfigOptimizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdnDistributionConfigOptimizerOutput)
}

type GetCdnDistributionConfigOptimizerOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionConfigOptimizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionConfigOptimizer)(nil)).Elem()
}

func (o GetCdnDistributionConfigOptimizerOutput) ToGetCdnDistributionConfigOptimizerOutput() GetCdnDistributionConfigOptimizerOutput {
	return o
}

func (o GetCdnDistributionConfigOptimizerOutput) ToGetCdnDistributionConfigOptimizerOutputWithContext(ctx context.Context) GetCdnDistributionConfigOptimizerOutput {
	return o
}

func (o GetCdnDistributionConfigOptimizerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdnDistributionConfigOptimizer) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetCdnDistributionDomain struct {
	// List of domain errors
	Errors []string `pulumi:"errors"`
	// The name of the domain
	Name string `pulumi:"name"`
	// The status of the domain
	Status string `pulumi:"status"`
	// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
	Type string `pulumi:"type"`
}

// GetCdnDistributionDomainInput is an input type that accepts GetCdnDistributionDomainArgs and GetCdnDistributionDomainOutput values.
// You can construct a concrete instance of `GetCdnDistributionDomainInput` via:
//
//	GetCdnDistributionDomainArgs{...}
type GetCdnDistributionDomainInput interface {
	pulumi.Input

	ToGetCdnDistributionDomainOutput() GetCdnDistributionDomainOutput
	ToGetCdnDistributionDomainOutputWithContext(context.Context) GetCdnDistributionDomainOutput
}

type GetCdnDistributionDomainArgs struct {
	// List of domain errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// The name of the domain
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the domain
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetCdnDistributionDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionDomain)(nil)).Elem()
}

func (i GetCdnDistributionDomainArgs) ToGetCdnDistributionDomainOutput() GetCdnDistributionDomainOutput {
	return i.ToGetCdnDistributionDomainOutputWithContext(context.Background())
}

func (i GetCdnDistributionDomainArgs) ToGetCdnDistributionDomainOutputWithContext(ctx context.Context) GetCdnDistributionDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdnDistributionDomainOutput)
}

// GetCdnDistributionDomainArrayInput is an input type that accepts GetCdnDistributionDomainArray and GetCdnDistributionDomainArrayOutput values.
// You can construct a concrete instance of `GetCdnDistributionDomainArrayInput` via:
//
//	GetCdnDistributionDomainArray{ GetCdnDistributionDomainArgs{...} }
type GetCdnDistributionDomainArrayInput interface {
	pulumi.Input

	ToGetCdnDistributionDomainArrayOutput() GetCdnDistributionDomainArrayOutput
	ToGetCdnDistributionDomainArrayOutputWithContext(context.Context) GetCdnDistributionDomainArrayOutput
}

type GetCdnDistributionDomainArray []GetCdnDistributionDomainInput

func (GetCdnDistributionDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCdnDistributionDomain)(nil)).Elem()
}

func (i GetCdnDistributionDomainArray) ToGetCdnDistributionDomainArrayOutput() GetCdnDistributionDomainArrayOutput {
	return i.ToGetCdnDistributionDomainArrayOutputWithContext(context.Background())
}

func (i GetCdnDistributionDomainArray) ToGetCdnDistributionDomainArrayOutputWithContext(ctx context.Context) GetCdnDistributionDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdnDistributionDomainArrayOutput)
}

type GetCdnDistributionDomainOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionDomain)(nil)).Elem()
}

func (o GetCdnDistributionDomainOutput) ToGetCdnDistributionDomainOutput() GetCdnDistributionDomainOutput {
	return o
}

func (o GetCdnDistributionDomainOutput) ToGetCdnDistributionDomainOutputWithContext(ctx context.Context) GetCdnDistributionDomainOutput {
	return o
}

// List of domain errors
func (o GetCdnDistributionDomainOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCdnDistributionDomain) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// The name of the domain
func (o GetCdnDistributionDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionDomain) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the domain
func (o GetCdnDistributionDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionDomain) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the domain. Each distribution has one domain of type "managed", and domains of type "custom" may be additionally created by the user
func (o GetCdnDistributionDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionDomain) string { return v.Type }).(pulumi.StringOutput)
}

type GetCdnDistributionDomainArrayOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCdnDistributionDomain)(nil)).Elem()
}

func (o GetCdnDistributionDomainArrayOutput) ToGetCdnDistributionDomainArrayOutput() GetCdnDistributionDomainArrayOutput {
	return o
}

func (o GetCdnDistributionDomainArrayOutput) ToGetCdnDistributionDomainArrayOutputWithContext(ctx context.Context) GetCdnDistributionDomainArrayOutput {
	return o
}

func (o GetCdnDistributionDomainArrayOutput) Index(i pulumi.IntInput) GetCdnDistributionDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCdnDistributionDomain {
		return vs[0].([]GetCdnDistributionDomain)[vs[1].(int)]
	}).(GetCdnDistributionDomainOutput)
}

type GetImageChecksum struct {
	// Algorithm for the checksum of the image data.
	Algorithm string `pulumi:"algorithm"`
	// Hexdigest of the checksum of the image data.
	Digest string `pulumi:"digest"`
}

// GetImageChecksumInput is an input type that accepts GetImageChecksumArgs and GetImageChecksumOutput values.
// You can construct a concrete instance of `GetImageChecksumInput` via:
//
//	GetImageChecksumArgs{...}
type GetImageChecksumInput interface {
	pulumi.Input

	ToGetImageChecksumOutput() GetImageChecksumOutput
	ToGetImageChecksumOutputWithContext(context.Context) GetImageChecksumOutput
}

type GetImageChecksumArgs struct {
	// Algorithm for the checksum of the image data.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// Hexdigest of the checksum of the image data.
	Digest pulumi.StringInput `pulumi:"digest"`
}

func (GetImageChecksumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageChecksum)(nil)).Elem()
}

func (i GetImageChecksumArgs) ToGetImageChecksumOutput() GetImageChecksumOutput {
	return i.ToGetImageChecksumOutputWithContext(context.Background())
}

func (i GetImageChecksumArgs) ToGetImageChecksumOutputWithContext(ctx context.Context) GetImageChecksumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageChecksumOutput)
}

type GetImageChecksumOutput struct{ *pulumi.OutputState }

func (GetImageChecksumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageChecksum)(nil)).Elem()
}

func (o GetImageChecksumOutput) ToGetImageChecksumOutput() GetImageChecksumOutput {
	return o
}

func (o GetImageChecksumOutput) ToGetImageChecksumOutputWithContext(ctx context.Context) GetImageChecksumOutput {
	return o
}

// Algorithm for the checksum of the image data.
func (o GetImageChecksumOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageChecksum) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Hexdigest of the checksum of the image data.
func (o GetImageChecksumOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageChecksum) string { return v.Digest }).(pulumi.StringOutput)
}

type GetImageConfig struct {
	// Enables the BIOS bootmenu.
	BootMenu bool `pulumi:"bootMenu"`
	// Sets CDROM bus controller type.
	CdromBus string `pulumi:"cdromBus"`
	// Sets Disk bus controller type.
	DiskBus string `pulumi:"diskBus"`
	// Sets virtual network interface model.
	NicModel string `pulumi:"nicModel"`
	// Enables operating system specific optimizations.
	OperatingSystem string `pulumi:"operatingSystem"`
	// Operating system distribution.
	OperatingSystemDistro string `pulumi:"operatingSystemDistro"`
	// Version of the operating system.
	OperatingSystemVersion string `pulumi:"operatingSystemVersion"`
	// Sets the device bus when the image is used as a rescue image.
	RescueBus string `pulumi:"rescueBus"`
	// Sets the device when the image is used as a rescue image.
	RescueDevice string `pulumi:"rescueDevice"`
	// Enables Secure Boot.
	SecureBoot bool `pulumi:"secureBoot"`
	// Enables UEFI boot.
	Uefi bool `pulumi:"uefi"`
	// Sets Graphic device model.
	VideoModel string `pulumi:"videoModel"`
	// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
	VirtioScsi bool `pulumi:"virtioScsi"`
}

// GetImageConfigInput is an input type that accepts GetImageConfigArgs and GetImageConfigOutput values.
// You can construct a concrete instance of `GetImageConfigInput` via:
//
//	GetImageConfigArgs{...}
type GetImageConfigInput interface {
	pulumi.Input

	ToGetImageConfigOutput() GetImageConfigOutput
	ToGetImageConfigOutputWithContext(context.Context) GetImageConfigOutput
}

type GetImageConfigArgs struct {
	// Enables the BIOS bootmenu.
	BootMenu pulumi.BoolInput `pulumi:"bootMenu"`
	// Sets CDROM bus controller type.
	CdromBus pulumi.StringInput `pulumi:"cdromBus"`
	// Sets Disk bus controller type.
	DiskBus pulumi.StringInput `pulumi:"diskBus"`
	// Sets virtual network interface model.
	NicModel pulumi.StringInput `pulumi:"nicModel"`
	// Enables operating system specific optimizations.
	OperatingSystem pulumi.StringInput `pulumi:"operatingSystem"`
	// Operating system distribution.
	OperatingSystemDistro pulumi.StringInput `pulumi:"operatingSystemDistro"`
	// Version of the operating system.
	OperatingSystemVersion pulumi.StringInput `pulumi:"operatingSystemVersion"`
	// Sets the device bus when the image is used as a rescue image.
	RescueBus pulumi.StringInput `pulumi:"rescueBus"`
	// Sets the device when the image is used as a rescue image.
	RescueDevice pulumi.StringInput `pulumi:"rescueDevice"`
	// Enables Secure Boot.
	SecureBoot pulumi.BoolInput `pulumi:"secureBoot"`
	// Enables UEFI boot.
	Uefi pulumi.BoolInput `pulumi:"uefi"`
	// Sets Graphic device model.
	VideoModel pulumi.StringInput `pulumi:"videoModel"`
	// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
	VirtioScsi pulumi.BoolInput `pulumi:"virtioScsi"`
}

func (GetImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageConfig)(nil)).Elem()
}

func (i GetImageConfigArgs) ToGetImageConfigOutput() GetImageConfigOutput {
	return i.ToGetImageConfigOutputWithContext(context.Background())
}

func (i GetImageConfigArgs) ToGetImageConfigOutputWithContext(ctx context.Context) GetImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageConfigOutput)
}

type GetImageConfigOutput struct{ *pulumi.OutputState }

func (GetImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageConfig)(nil)).Elem()
}

func (o GetImageConfigOutput) ToGetImageConfigOutput() GetImageConfigOutput {
	return o
}

func (o GetImageConfigOutput) ToGetImageConfigOutputWithContext(ctx context.Context) GetImageConfigOutput {
	return o
}

// Enables the BIOS bootmenu.
func (o GetImageConfigOutput) BootMenu() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageConfig) bool { return v.BootMenu }).(pulumi.BoolOutput)
}

// Sets CDROM bus controller type.
func (o GetImageConfigOutput) CdromBus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.CdromBus }).(pulumi.StringOutput)
}

// Sets Disk bus controller type.
func (o GetImageConfigOutput) DiskBus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.DiskBus }).(pulumi.StringOutput)
}

// Sets virtual network interface model.
func (o GetImageConfigOutput) NicModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.NicModel }).(pulumi.StringOutput)
}

// Enables operating system specific optimizations.
func (o GetImageConfigOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// Operating system distribution.
func (o GetImageConfigOutput) OperatingSystemDistro() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.OperatingSystemDistro }).(pulumi.StringOutput)
}

// Version of the operating system.
func (o GetImageConfigOutput) OperatingSystemVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.OperatingSystemVersion }).(pulumi.StringOutput)
}

// Sets the device bus when the image is used as a rescue image.
func (o GetImageConfigOutput) RescueBus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.RescueBus }).(pulumi.StringOutput)
}

// Sets the device when the image is used as a rescue image.
func (o GetImageConfigOutput) RescueDevice() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.RescueDevice }).(pulumi.StringOutput)
}

// Enables Secure Boot.
func (o GetImageConfigOutput) SecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageConfig) bool { return v.SecureBoot }).(pulumi.BoolOutput)
}

// Enables UEFI boot.
func (o GetImageConfigOutput) Uefi() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageConfig) bool { return v.Uefi }).(pulumi.BoolOutput)
}

// Sets Graphic device model.
func (o GetImageConfigOutput) VideoModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageConfig) string { return v.VideoModel }).(pulumi.StringOutput)
}

// Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.
func (o GetImageConfigOutput) VirtioScsi() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageConfig) bool { return v.VirtioScsi }).(pulumi.BoolOutput)
}

type GetLoadbalancerListener struct {
	DisplayName string `pulumi:"displayName"`
	// Port number where we listen for traffic.
	Port int `pulumi:"port"`
	// Protocol is the highest network protocol we understand to load balance.
	Protocol string `pulumi:"protocol"`
	// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
	ServerNameIndicators []GetLoadbalancerListenerServerNameIndicator `pulumi:"serverNameIndicators"`
	// Reference target pool by target pool name.
	TargetPool string `pulumi:"targetPool"`
}

// GetLoadbalancerListenerInput is an input type that accepts GetLoadbalancerListenerArgs and GetLoadbalancerListenerOutput values.
// You can construct a concrete instance of `GetLoadbalancerListenerInput` via:
//
//	GetLoadbalancerListenerArgs{...}
type GetLoadbalancerListenerInput interface {
	pulumi.Input

	ToGetLoadbalancerListenerOutput() GetLoadbalancerListenerOutput
	ToGetLoadbalancerListenerOutputWithContext(context.Context) GetLoadbalancerListenerOutput
}

type GetLoadbalancerListenerArgs struct {
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Port number where we listen for traffic.
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol is the highest network protocol we understand to load balance.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
	ServerNameIndicators GetLoadbalancerListenerServerNameIndicatorArrayInput `pulumi:"serverNameIndicators"`
	// Reference target pool by target pool name.
	TargetPool pulumi.StringInput `pulumi:"targetPool"`
}

func (GetLoadbalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerListener)(nil)).Elem()
}

func (i GetLoadbalancerListenerArgs) ToGetLoadbalancerListenerOutput() GetLoadbalancerListenerOutput {
	return i.ToGetLoadbalancerListenerOutputWithContext(context.Background())
}

func (i GetLoadbalancerListenerArgs) ToGetLoadbalancerListenerOutputWithContext(ctx context.Context) GetLoadbalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerListenerOutput)
}

// GetLoadbalancerListenerArrayInput is an input type that accepts GetLoadbalancerListenerArray and GetLoadbalancerListenerArrayOutput values.
// You can construct a concrete instance of `GetLoadbalancerListenerArrayInput` via:
//
//	GetLoadbalancerListenerArray{ GetLoadbalancerListenerArgs{...} }
type GetLoadbalancerListenerArrayInput interface {
	pulumi.Input

	ToGetLoadbalancerListenerArrayOutput() GetLoadbalancerListenerArrayOutput
	ToGetLoadbalancerListenerArrayOutputWithContext(context.Context) GetLoadbalancerListenerArrayOutput
}

type GetLoadbalancerListenerArray []GetLoadbalancerListenerInput

func (GetLoadbalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerListener)(nil)).Elem()
}

func (i GetLoadbalancerListenerArray) ToGetLoadbalancerListenerArrayOutput() GetLoadbalancerListenerArrayOutput {
	return i.ToGetLoadbalancerListenerArrayOutputWithContext(context.Background())
}

func (i GetLoadbalancerListenerArray) ToGetLoadbalancerListenerArrayOutputWithContext(ctx context.Context) GetLoadbalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerListenerArrayOutput)
}

type GetLoadbalancerListenerOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerListener)(nil)).Elem()
}

func (o GetLoadbalancerListenerOutput) ToGetLoadbalancerListenerOutput() GetLoadbalancerListenerOutput {
	return o
}

func (o GetLoadbalancerListenerOutput) ToGetLoadbalancerListenerOutputWithContext(ctx context.Context) GetLoadbalancerListenerOutput {
	return o
}

func (o GetLoadbalancerListenerOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerListener) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Port number where we listen for traffic.
func (o GetLoadbalancerListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadbalancerListener) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol is the highest network protocol we understand to load balance.
func (o GetLoadbalancerListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerListener) string { return v.Protocol }).(pulumi.StringOutput)
}

// A list of domain names to match in order to pass TLS traffic to the target pool in the current listener
func (o GetLoadbalancerListenerOutput) ServerNameIndicators() GetLoadbalancerListenerServerNameIndicatorArrayOutput {
	return o.ApplyT(func(v GetLoadbalancerListener) []GetLoadbalancerListenerServerNameIndicator {
		return v.ServerNameIndicators
	}).(GetLoadbalancerListenerServerNameIndicatorArrayOutput)
}

// Reference target pool by target pool name.
func (o GetLoadbalancerListenerOutput) TargetPool() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerListener) string { return v.TargetPool }).(pulumi.StringOutput)
}

type GetLoadbalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerListener)(nil)).Elem()
}

func (o GetLoadbalancerListenerArrayOutput) ToGetLoadbalancerListenerArrayOutput() GetLoadbalancerListenerArrayOutput {
	return o
}

func (o GetLoadbalancerListenerArrayOutput) ToGetLoadbalancerListenerArrayOutputWithContext(ctx context.Context) GetLoadbalancerListenerArrayOutput {
	return o
}

func (o GetLoadbalancerListenerArrayOutput) Index(i pulumi.IntInput) GetLoadbalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadbalancerListener {
		return vs[0].([]GetLoadbalancerListener)[vs[1].(int)]
	}).(GetLoadbalancerListenerOutput)
}

type GetLoadbalancerListenerServerNameIndicator struct {
	// A domain name to match in order to pass TLS traffic to the target pool in the current listener
	Name *string `pulumi:"name"`
}

// GetLoadbalancerListenerServerNameIndicatorInput is an input type that accepts GetLoadbalancerListenerServerNameIndicatorArgs and GetLoadbalancerListenerServerNameIndicatorOutput values.
// You can construct a concrete instance of `GetLoadbalancerListenerServerNameIndicatorInput` via:
//
//	GetLoadbalancerListenerServerNameIndicatorArgs{...}
type GetLoadbalancerListenerServerNameIndicatorInput interface {
	pulumi.Input

	ToGetLoadbalancerListenerServerNameIndicatorOutput() GetLoadbalancerListenerServerNameIndicatorOutput
	ToGetLoadbalancerListenerServerNameIndicatorOutputWithContext(context.Context) GetLoadbalancerListenerServerNameIndicatorOutput
}

type GetLoadbalancerListenerServerNameIndicatorArgs struct {
	// A domain name to match in order to pass TLS traffic to the target pool in the current listener
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLoadbalancerListenerServerNameIndicatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (i GetLoadbalancerListenerServerNameIndicatorArgs) ToGetLoadbalancerListenerServerNameIndicatorOutput() GetLoadbalancerListenerServerNameIndicatorOutput {
	return i.ToGetLoadbalancerListenerServerNameIndicatorOutputWithContext(context.Background())
}

func (i GetLoadbalancerListenerServerNameIndicatorArgs) ToGetLoadbalancerListenerServerNameIndicatorOutputWithContext(ctx context.Context) GetLoadbalancerListenerServerNameIndicatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerListenerServerNameIndicatorOutput)
}

// GetLoadbalancerListenerServerNameIndicatorArrayInput is an input type that accepts GetLoadbalancerListenerServerNameIndicatorArray and GetLoadbalancerListenerServerNameIndicatorArrayOutput values.
// You can construct a concrete instance of `GetLoadbalancerListenerServerNameIndicatorArrayInput` via:
//
//	GetLoadbalancerListenerServerNameIndicatorArray{ GetLoadbalancerListenerServerNameIndicatorArgs{...} }
type GetLoadbalancerListenerServerNameIndicatorArrayInput interface {
	pulumi.Input

	ToGetLoadbalancerListenerServerNameIndicatorArrayOutput() GetLoadbalancerListenerServerNameIndicatorArrayOutput
	ToGetLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(context.Context) GetLoadbalancerListenerServerNameIndicatorArrayOutput
}

type GetLoadbalancerListenerServerNameIndicatorArray []GetLoadbalancerListenerServerNameIndicatorInput

func (GetLoadbalancerListenerServerNameIndicatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (i GetLoadbalancerListenerServerNameIndicatorArray) ToGetLoadbalancerListenerServerNameIndicatorArrayOutput() GetLoadbalancerListenerServerNameIndicatorArrayOutput {
	return i.ToGetLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(context.Background())
}

func (i GetLoadbalancerListenerServerNameIndicatorArray) ToGetLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(ctx context.Context) GetLoadbalancerListenerServerNameIndicatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerListenerServerNameIndicatorArrayOutput)
}

type GetLoadbalancerListenerServerNameIndicatorOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerListenerServerNameIndicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (o GetLoadbalancerListenerServerNameIndicatorOutput) ToGetLoadbalancerListenerServerNameIndicatorOutput() GetLoadbalancerListenerServerNameIndicatorOutput {
	return o
}

func (o GetLoadbalancerListenerServerNameIndicatorOutput) ToGetLoadbalancerListenerServerNameIndicatorOutputWithContext(ctx context.Context) GetLoadbalancerListenerServerNameIndicatorOutput {
	return o
}

// A domain name to match in order to pass TLS traffic to the target pool in the current listener
func (o GetLoadbalancerListenerServerNameIndicatorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadbalancerListenerServerNameIndicator) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetLoadbalancerListenerServerNameIndicatorArrayOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerListenerServerNameIndicatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerListenerServerNameIndicator)(nil)).Elem()
}

func (o GetLoadbalancerListenerServerNameIndicatorArrayOutput) ToGetLoadbalancerListenerServerNameIndicatorArrayOutput() GetLoadbalancerListenerServerNameIndicatorArrayOutput {
	return o
}

func (o GetLoadbalancerListenerServerNameIndicatorArrayOutput) ToGetLoadbalancerListenerServerNameIndicatorArrayOutputWithContext(ctx context.Context) GetLoadbalancerListenerServerNameIndicatorArrayOutput {
	return o
}

func (o GetLoadbalancerListenerServerNameIndicatorArrayOutput) Index(i pulumi.IntInput) GetLoadbalancerListenerServerNameIndicatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadbalancerListenerServerNameIndicator {
		return vs[0].([]GetLoadbalancerListenerServerNameIndicator)[vs[1].(int)]
	}).(GetLoadbalancerListenerServerNameIndicatorOutput)
}

type GetLoadbalancerNetwork struct {
	// Openstack network ID.
	NetworkId string `pulumi:"networkId"`
	// The role defines how the load balancer is using the network.
	Role string `pulumi:"role"`
}

// GetLoadbalancerNetworkInput is an input type that accepts GetLoadbalancerNetworkArgs and GetLoadbalancerNetworkOutput values.
// You can construct a concrete instance of `GetLoadbalancerNetworkInput` via:
//
//	GetLoadbalancerNetworkArgs{...}
type GetLoadbalancerNetworkInput interface {
	pulumi.Input

	ToGetLoadbalancerNetworkOutput() GetLoadbalancerNetworkOutput
	ToGetLoadbalancerNetworkOutputWithContext(context.Context) GetLoadbalancerNetworkOutput
}

type GetLoadbalancerNetworkArgs struct {
	// Openstack network ID.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The role defines how the load balancer is using the network.
	Role pulumi.StringInput `pulumi:"role"`
}

func (GetLoadbalancerNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerNetwork)(nil)).Elem()
}

func (i GetLoadbalancerNetworkArgs) ToGetLoadbalancerNetworkOutput() GetLoadbalancerNetworkOutput {
	return i.ToGetLoadbalancerNetworkOutputWithContext(context.Background())
}

func (i GetLoadbalancerNetworkArgs) ToGetLoadbalancerNetworkOutputWithContext(ctx context.Context) GetLoadbalancerNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerNetworkOutput)
}

// GetLoadbalancerNetworkArrayInput is an input type that accepts GetLoadbalancerNetworkArray and GetLoadbalancerNetworkArrayOutput values.
// You can construct a concrete instance of `GetLoadbalancerNetworkArrayInput` via:
//
//	GetLoadbalancerNetworkArray{ GetLoadbalancerNetworkArgs{...} }
type GetLoadbalancerNetworkArrayInput interface {
	pulumi.Input

	ToGetLoadbalancerNetworkArrayOutput() GetLoadbalancerNetworkArrayOutput
	ToGetLoadbalancerNetworkArrayOutputWithContext(context.Context) GetLoadbalancerNetworkArrayOutput
}

type GetLoadbalancerNetworkArray []GetLoadbalancerNetworkInput

func (GetLoadbalancerNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerNetwork)(nil)).Elem()
}

func (i GetLoadbalancerNetworkArray) ToGetLoadbalancerNetworkArrayOutput() GetLoadbalancerNetworkArrayOutput {
	return i.ToGetLoadbalancerNetworkArrayOutputWithContext(context.Background())
}

func (i GetLoadbalancerNetworkArray) ToGetLoadbalancerNetworkArrayOutputWithContext(ctx context.Context) GetLoadbalancerNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerNetworkArrayOutput)
}

type GetLoadbalancerNetworkOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerNetwork)(nil)).Elem()
}

func (o GetLoadbalancerNetworkOutput) ToGetLoadbalancerNetworkOutput() GetLoadbalancerNetworkOutput {
	return o
}

func (o GetLoadbalancerNetworkOutput) ToGetLoadbalancerNetworkOutputWithContext(ctx context.Context) GetLoadbalancerNetworkOutput {
	return o
}

// Openstack network ID.
func (o GetLoadbalancerNetworkOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerNetwork) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The role defines how the load balancer is using the network.
func (o GetLoadbalancerNetworkOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerNetwork) string { return v.Role }).(pulumi.StringOutput)
}

type GetLoadbalancerNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerNetwork)(nil)).Elem()
}

func (o GetLoadbalancerNetworkArrayOutput) ToGetLoadbalancerNetworkArrayOutput() GetLoadbalancerNetworkArrayOutput {
	return o
}

func (o GetLoadbalancerNetworkArrayOutput) ToGetLoadbalancerNetworkArrayOutputWithContext(ctx context.Context) GetLoadbalancerNetworkArrayOutput {
	return o
}

func (o GetLoadbalancerNetworkArrayOutput) Index(i pulumi.IntInput) GetLoadbalancerNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadbalancerNetwork {
		return vs[0].([]GetLoadbalancerNetwork)[vs[1].(int)]
	}).(GetLoadbalancerNetworkOutput)
}

type GetLoadbalancerOptions struct {
	// Load Balancer is accessible only from an IP address in this range.
	Acls []string `pulumi:"acls"`
	// We offer Load Balancer metrics observability via ARGUS or external solutions.
	Observability GetLoadbalancerOptionsObservability `pulumi:"observability"`
	// If true, Load Balancer is accessible only via a private network IP address.
	PrivateNetworkOnly bool `pulumi:"privateNetworkOnly"`
}

// GetLoadbalancerOptionsInput is an input type that accepts GetLoadbalancerOptionsArgs and GetLoadbalancerOptionsOutput values.
// You can construct a concrete instance of `GetLoadbalancerOptionsInput` via:
//
//	GetLoadbalancerOptionsArgs{...}
type GetLoadbalancerOptionsInput interface {
	pulumi.Input

	ToGetLoadbalancerOptionsOutput() GetLoadbalancerOptionsOutput
	ToGetLoadbalancerOptionsOutputWithContext(context.Context) GetLoadbalancerOptionsOutput
}

type GetLoadbalancerOptionsArgs struct {
	// Load Balancer is accessible only from an IP address in this range.
	Acls pulumi.StringArrayInput `pulumi:"acls"`
	// We offer Load Balancer metrics observability via ARGUS or external solutions.
	Observability GetLoadbalancerOptionsObservabilityInput `pulumi:"observability"`
	// If true, Load Balancer is accessible only via a private network IP address.
	PrivateNetworkOnly pulumi.BoolInput `pulumi:"privateNetworkOnly"`
}

func (GetLoadbalancerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptions)(nil)).Elem()
}

func (i GetLoadbalancerOptionsArgs) ToGetLoadbalancerOptionsOutput() GetLoadbalancerOptionsOutput {
	return i.ToGetLoadbalancerOptionsOutputWithContext(context.Background())
}

func (i GetLoadbalancerOptionsArgs) ToGetLoadbalancerOptionsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerOptionsOutput)
}

type GetLoadbalancerOptionsOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptions)(nil)).Elem()
}

func (o GetLoadbalancerOptionsOutput) ToGetLoadbalancerOptionsOutput() GetLoadbalancerOptionsOutput {
	return o
}

func (o GetLoadbalancerOptionsOutput) ToGetLoadbalancerOptionsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsOutput {
	return o
}

// Load Balancer is accessible only from an IP address in this range.
func (o GetLoadbalancerOptionsOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadbalancerOptions) []string { return v.Acls }).(pulumi.StringArrayOutput)
}

// We offer Load Balancer metrics observability via ARGUS or external solutions.
func (o GetLoadbalancerOptionsOutput) Observability() GetLoadbalancerOptionsObservabilityOutput {
	return o.ApplyT(func(v GetLoadbalancerOptions) GetLoadbalancerOptionsObservability { return v.Observability }).(GetLoadbalancerOptionsObservabilityOutput)
}

// If true, Load Balancer is accessible only via a private network IP address.
func (o GetLoadbalancerOptionsOutput) PrivateNetworkOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadbalancerOptions) bool { return v.PrivateNetworkOnly }).(pulumi.BoolOutput)
}

type GetLoadbalancerOptionsObservability struct {
	// Observability logs configuration.
	Logs GetLoadbalancerOptionsObservabilityLogs `pulumi:"logs"`
	// Observability metrics configuration.
	Metrics GetLoadbalancerOptionsObservabilityMetrics `pulumi:"metrics"`
}

// GetLoadbalancerOptionsObservabilityInput is an input type that accepts GetLoadbalancerOptionsObservabilityArgs and GetLoadbalancerOptionsObservabilityOutput values.
// You can construct a concrete instance of `GetLoadbalancerOptionsObservabilityInput` via:
//
//	GetLoadbalancerOptionsObservabilityArgs{...}
type GetLoadbalancerOptionsObservabilityInput interface {
	pulumi.Input

	ToGetLoadbalancerOptionsObservabilityOutput() GetLoadbalancerOptionsObservabilityOutput
	ToGetLoadbalancerOptionsObservabilityOutputWithContext(context.Context) GetLoadbalancerOptionsObservabilityOutput
}

type GetLoadbalancerOptionsObservabilityArgs struct {
	// Observability logs configuration.
	Logs GetLoadbalancerOptionsObservabilityLogsInput `pulumi:"logs"`
	// Observability metrics configuration.
	Metrics GetLoadbalancerOptionsObservabilityMetricsInput `pulumi:"metrics"`
}

func (GetLoadbalancerOptionsObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservability)(nil)).Elem()
}

func (i GetLoadbalancerOptionsObservabilityArgs) ToGetLoadbalancerOptionsObservabilityOutput() GetLoadbalancerOptionsObservabilityOutput {
	return i.ToGetLoadbalancerOptionsObservabilityOutputWithContext(context.Background())
}

func (i GetLoadbalancerOptionsObservabilityArgs) ToGetLoadbalancerOptionsObservabilityOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerOptionsObservabilityOutput)
}

type GetLoadbalancerOptionsObservabilityOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerOptionsObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservability)(nil)).Elem()
}

func (o GetLoadbalancerOptionsObservabilityOutput) ToGetLoadbalancerOptionsObservabilityOutput() GetLoadbalancerOptionsObservabilityOutput {
	return o
}

func (o GetLoadbalancerOptionsObservabilityOutput) ToGetLoadbalancerOptionsObservabilityOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityOutput {
	return o
}

// Observability logs configuration.
func (o GetLoadbalancerOptionsObservabilityOutput) Logs() GetLoadbalancerOptionsObservabilityLogsOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservability) GetLoadbalancerOptionsObservabilityLogs { return v.Logs }).(GetLoadbalancerOptionsObservabilityLogsOutput)
}

// Observability metrics configuration.
func (o GetLoadbalancerOptionsObservabilityOutput) Metrics() GetLoadbalancerOptionsObservabilityMetricsOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservability) GetLoadbalancerOptionsObservabilityMetrics {
		return v.Metrics
	}).(GetLoadbalancerOptionsObservabilityMetricsOutput)
}

type GetLoadbalancerOptionsObservabilityLogs struct {
	// Credentials reference for logs.
	CredentialsRef string `pulumi:"credentialsRef"`
	// Credentials reference for logs.
	PushUrl string `pulumi:"pushUrl"`
}

// GetLoadbalancerOptionsObservabilityLogsInput is an input type that accepts GetLoadbalancerOptionsObservabilityLogsArgs and GetLoadbalancerOptionsObservabilityLogsOutput values.
// You can construct a concrete instance of `GetLoadbalancerOptionsObservabilityLogsInput` via:
//
//	GetLoadbalancerOptionsObservabilityLogsArgs{...}
type GetLoadbalancerOptionsObservabilityLogsInput interface {
	pulumi.Input

	ToGetLoadbalancerOptionsObservabilityLogsOutput() GetLoadbalancerOptionsObservabilityLogsOutput
	ToGetLoadbalancerOptionsObservabilityLogsOutputWithContext(context.Context) GetLoadbalancerOptionsObservabilityLogsOutput
}

type GetLoadbalancerOptionsObservabilityLogsArgs struct {
	// Credentials reference for logs.
	CredentialsRef pulumi.StringInput `pulumi:"credentialsRef"`
	// Credentials reference for logs.
	PushUrl pulumi.StringInput `pulumi:"pushUrl"`
}

func (GetLoadbalancerOptionsObservabilityLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (i GetLoadbalancerOptionsObservabilityLogsArgs) ToGetLoadbalancerOptionsObservabilityLogsOutput() GetLoadbalancerOptionsObservabilityLogsOutput {
	return i.ToGetLoadbalancerOptionsObservabilityLogsOutputWithContext(context.Background())
}

func (i GetLoadbalancerOptionsObservabilityLogsArgs) ToGetLoadbalancerOptionsObservabilityLogsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerOptionsObservabilityLogsOutput)
}

type GetLoadbalancerOptionsObservabilityLogsOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerOptionsObservabilityLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservabilityLogs)(nil)).Elem()
}

func (o GetLoadbalancerOptionsObservabilityLogsOutput) ToGetLoadbalancerOptionsObservabilityLogsOutput() GetLoadbalancerOptionsObservabilityLogsOutput {
	return o
}

func (o GetLoadbalancerOptionsObservabilityLogsOutput) ToGetLoadbalancerOptionsObservabilityLogsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityLogsOutput {
	return o
}

// Credentials reference for logs.
func (o GetLoadbalancerOptionsObservabilityLogsOutput) CredentialsRef() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservabilityLogs) string { return v.CredentialsRef }).(pulumi.StringOutput)
}

// Credentials reference for logs.
func (o GetLoadbalancerOptionsObservabilityLogsOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservabilityLogs) string { return v.PushUrl }).(pulumi.StringOutput)
}

type GetLoadbalancerOptionsObservabilityMetrics struct {
	// Credentials reference for metrics.
	CredentialsRef string `pulumi:"credentialsRef"`
	// Credentials reference for metrics.
	PushUrl string `pulumi:"pushUrl"`
}

// GetLoadbalancerOptionsObservabilityMetricsInput is an input type that accepts GetLoadbalancerOptionsObservabilityMetricsArgs and GetLoadbalancerOptionsObservabilityMetricsOutput values.
// You can construct a concrete instance of `GetLoadbalancerOptionsObservabilityMetricsInput` via:
//
//	GetLoadbalancerOptionsObservabilityMetricsArgs{...}
type GetLoadbalancerOptionsObservabilityMetricsInput interface {
	pulumi.Input

	ToGetLoadbalancerOptionsObservabilityMetricsOutput() GetLoadbalancerOptionsObservabilityMetricsOutput
	ToGetLoadbalancerOptionsObservabilityMetricsOutputWithContext(context.Context) GetLoadbalancerOptionsObservabilityMetricsOutput
}

type GetLoadbalancerOptionsObservabilityMetricsArgs struct {
	// Credentials reference for metrics.
	CredentialsRef pulumi.StringInput `pulumi:"credentialsRef"`
	// Credentials reference for metrics.
	PushUrl pulumi.StringInput `pulumi:"pushUrl"`
}

func (GetLoadbalancerOptionsObservabilityMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (i GetLoadbalancerOptionsObservabilityMetricsArgs) ToGetLoadbalancerOptionsObservabilityMetricsOutput() GetLoadbalancerOptionsObservabilityMetricsOutput {
	return i.ToGetLoadbalancerOptionsObservabilityMetricsOutputWithContext(context.Background())
}

func (i GetLoadbalancerOptionsObservabilityMetricsArgs) ToGetLoadbalancerOptionsObservabilityMetricsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerOptionsObservabilityMetricsOutput)
}

type GetLoadbalancerOptionsObservabilityMetricsOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerOptionsObservabilityMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerOptionsObservabilityMetrics)(nil)).Elem()
}

func (o GetLoadbalancerOptionsObservabilityMetricsOutput) ToGetLoadbalancerOptionsObservabilityMetricsOutput() GetLoadbalancerOptionsObservabilityMetricsOutput {
	return o
}

func (o GetLoadbalancerOptionsObservabilityMetricsOutput) ToGetLoadbalancerOptionsObservabilityMetricsOutputWithContext(ctx context.Context) GetLoadbalancerOptionsObservabilityMetricsOutput {
	return o
}

// Credentials reference for metrics.
func (o GetLoadbalancerOptionsObservabilityMetricsOutput) CredentialsRef() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservabilityMetrics) string { return v.CredentialsRef }).(pulumi.StringOutput)
}

// Credentials reference for metrics.
func (o GetLoadbalancerOptionsObservabilityMetricsOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerOptionsObservabilityMetrics) string { return v.PushUrl }).(pulumi.StringOutput)
}

type GetLoadbalancerTargetPool struct {
	ActiveHealthCheck GetLoadbalancerTargetPoolActiveHealthCheck `pulumi:"activeHealthCheck"`
	// Target pool name.
	Name string `pulumi:"name"`
	// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
	SessionPersistence *GetLoadbalancerTargetPoolSessionPersistence `pulumi:"sessionPersistence"`
	// Identical port number where each target listens for traffic.
	TargetPort int `pulumi:"targetPort"`
	// List of all targets which will be used in the pool. Limited to 1000.
	Targets []GetLoadbalancerTargetPoolTarget `pulumi:"targets"`
}

// GetLoadbalancerTargetPoolInput is an input type that accepts GetLoadbalancerTargetPoolArgs and GetLoadbalancerTargetPoolOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolInput` via:
//
//	GetLoadbalancerTargetPoolArgs{...}
type GetLoadbalancerTargetPoolInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolOutput() GetLoadbalancerTargetPoolOutput
	ToGetLoadbalancerTargetPoolOutputWithContext(context.Context) GetLoadbalancerTargetPoolOutput
}

type GetLoadbalancerTargetPoolArgs struct {
	ActiveHealthCheck GetLoadbalancerTargetPoolActiveHealthCheckInput `pulumi:"activeHealthCheck"`
	// Target pool name.
	Name pulumi.StringInput `pulumi:"name"`
	// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
	SessionPersistence GetLoadbalancerTargetPoolSessionPersistencePtrInput `pulumi:"sessionPersistence"`
	// Identical port number where each target listens for traffic.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
	// List of all targets which will be used in the pool. Limited to 1000.
	Targets GetLoadbalancerTargetPoolTargetArrayInput `pulumi:"targets"`
}

func (GetLoadbalancerTargetPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPool)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolArgs) ToGetLoadbalancerTargetPoolOutput() GetLoadbalancerTargetPoolOutput {
	return i.ToGetLoadbalancerTargetPoolOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolArgs) ToGetLoadbalancerTargetPoolOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolOutput)
}

// GetLoadbalancerTargetPoolArrayInput is an input type that accepts GetLoadbalancerTargetPoolArray and GetLoadbalancerTargetPoolArrayOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolArrayInput` via:
//
//	GetLoadbalancerTargetPoolArray{ GetLoadbalancerTargetPoolArgs{...} }
type GetLoadbalancerTargetPoolArrayInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolArrayOutput() GetLoadbalancerTargetPoolArrayOutput
	ToGetLoadbalancerTargetPoolArrayOutputWithContext(context.Context) GetLoadbalancerTargetPoolArrayOutput
}

type GetLoadbalancerTargetPoolArray []GetLoadbalancerTargetPoolInput

func (GetLoadbalancerTargetPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerTargetPool)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolArray) ToGetLoadbalancerTargetPoolArrayOutput() GetLoadbalancerTargetPoolArrayOutput {
	return i.ToGetLoadbalancerTargetPoolArrayOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolArray) ToGetLoadbalancerTargetPoolArrayOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolArrayOutput)
}

type GetLoadbalancerTargetPoolOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPool)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolOutput) ToGetLoadbalancerTargetPoolOutput() GetLoadbalancerTargetPoolOutput {
	return o
}

func (o GetLoadbalancerTargetPoolOutput) ToGetLoadbalancerTargetPoolOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolOutput {
	return o
}

func (o GetLoadbalancerTargetPoolOutput) ActiveHealthCheck() GetLoadbalancerTargetPoolActiveHealthCheckOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPool) GetLoadbalancerTargetPoolActiveHealthCheck {
		return v.ActiveHealthCheck
	}).(GetLoadbalancerTargetPoolActiveHealthCheckOutput)
}

// Target pool name.
func (o GetLoadbalancerTargetPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPool) string { return v.Name }).(pulumi.StringOutput)
}

// Here you can setup various session persistence options, so far only "`useSourceIpAddress`" is supported.
func (o GetLoadbalancerTargetPoolOutput) SessionPersistence() GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPool) *GetLoadbalancerTargetPoolSessionPersistence {
		return v.SessionPersistence
	}).(GetLoadbalancerTargetPoolSessionPersistencePtrOutput)
}

// Identical port number where each target listens for traffic.
func (o GetLoadbalancerTargetPoolOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPool) int { return v.TargetPort }).(pulumi.IntOutput)
}

// List of all targets which will be used in the pool. Limited to 1000.
func (o GetLoadbalancerTargetPoolOutput) Targets() GetLoadbalancerTargetPoolTargetArrayOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPool) []GetLoadbalancerTargetPoolTarget { return v.Targets }).(GetLoadbalancerTargetPoolTargetArrayOutput)
}

type GetLoadbalancerTargetPoolArrayOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerTargetPool)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolArrayOutput) ToGetLoadbalancerTargetPoolArrayOutput() GetLoadbalancerTargetPoolArrayOutput {
	return o
}

func (o GetLoadbalancerTargetPoolArrayOutput) ToGetLoadbalancerTargetPoolArrayOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolArrayOutput {
	return o
}

func (o GetLoadbalancerTargetPoolArrayOutput) Index(i pulumi.IntInput) GetLoadbalancerTargetPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadbalancerTargetPool {
		return vs[0].([]GetLoadbalancerTargetPool)[vs[1].(int)]
	}).(GetLoadbalancerTargetPoolOutput)
}

type GetLoadbalancerTargetPoolActiveHealthCheck struct {
	// Healthy threshold of the health checking.
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// Interval duration of health checking in seconds.
	Interval string `pulumi:"interval"`
	// Interval duration threshold of the health checking in seconds.
	IntervalJitter string `pulumi:"intervalJitter"`
	// Active health checking timeout duration in seconds.
	Timeout string `pulumi:"timeout"`
	// Unhealthy threshold of the health checking.
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
}

// GetLoadbalancerTargetPoolActiveHealthCheckInput is an input type that accepts GetLoadbalancerTargetPoolActiveHealthCheckArgs and GetLoadbalancerTargetPoolActiveHealthCheckOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolActiveHealthCheckInput` via:
//
//	GetLoadbalancerTargetPoolActiveHealthCheckArgs{...}
type GetLoadbalancerTargetPoolActiveHealthCheckInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolActiveHealthCheckOutput() GetLoadbalancerTargetPoolActiveHealthCheckOutput
	ToGetLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(context.Context) GetLoadbalancerTargetPoolActiveHealthCheckOutput
}

type GetLoadbalancerTargetPoolActiveHealthCheckArgs struct {
	// Healthy threshold of the health checking.
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// Interval duration of health checking in seconds.
	Interval pulumi.StringInput `pulumi:"interval"`
	// Interval duration threshold of the health checking in seconds.
	IntervalJitter pulumi.StringInput `pulumi:"intervalJitter"`
	// Active health checking timeout duration in seconds.
	Timeout pulumi.StringInput `pulumi:"timeout"`
	// Unhealthy threshold of the health checking.
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
}

func (GetLoadbalancerTargetPoolActiveHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolActiveHealthCheckArgs) ToGetLoadbalancerTargetPoolActiveHealthCheckOutput() GetLoadbalancerTargetPoolActiveHealthCheckOutput {
	return i.ToGetLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolActiveHealthCheckArgs) ToGetLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolActiveHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolActiveHealthCheckOutput)
}

type GetLoadbalancerTargetPoolActiveHealthCheckOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolActiveHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolActiveHealthCheck)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) ToGetLoadbalancerTargetPoolActiveHealthCheckOutput() GetLoadbalancerTargetPoolActiveHealthCheckOutput {
	return o
}

func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) ToGetLoadbalancerTargetPoolActiveHealthCheckOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolActiveHealthCheckOutput {
	return o
}

// Healthy threshold of the health checking.
func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolActiveHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// Interval duration of health checking in seconds.
func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolActiveHealthCheck) string { return v.Interval }).(pulumi.StringOutput)
}

// Interval duration threshold of the health checking in seconds.
func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) IntervalJitter() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolActiveHealthCheck) string { return v.IntervalJitter }).(pulumi.StringOutput)
}

// Active health checking timeout duration in seconds.
func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolActiveHealthCheck) string { return v.Timeout }).(pulumi.StringOutput)
}

// Unhealthy threshold of the health checking.
func (o GetLoadbalancerTargetPoolActiveHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolActiveHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

type GetLoadbalancerTargetPoolSessionPersistence struct {
	// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
	UseSourceIpAddress *bool `pulumi:"useSourceIpAddress"`
}

// GetLoadbalancerTargetPoolSessionPersistenceInput is an input type that accepts GetLoadbalancerTargetPoolSessionPersistenceArgs and GetLoadbalancerTargetPoolSessionPersistenceOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolSessionPersistenceInput` via:
//
//	GetLoadbalancerTargetPoolSessionPersistenceArgs{...}
type GetLoadbalancerTargetPoolSessionPersistenceInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolSessionPersistenceOutput() GetLoadbalancerTargetPoolSessionPersistenceOutput
	ToGetLoadbalancerTargetPoolSessionPersistenceOutputWithContext(context.Context) GetLoadbalancerTargetPoolSessionPersistenceOutput
}

type GetLoadbalancerTargetPoolSessionPersistenceArgs struct {
	// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
	UseSourceIpAddress pulumi.BoolPtrInput `pulumi:"useSourceIpAddress"`
}

func (GetLoadbalancerTargetPoolSessionPersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolSessionPersistenceArgs) ToGetLoadbalancerTargetPoolSessionPersistenceOutput() GetLoadbalancerTargetPoolSessionPersistenceOutput {
	return i.ToGetLoadbalancerTargetPoolSessionPersistenceOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolSessionPersistenceArgs) ToGetLoadbalancerTargetPoolSessionPersistenceOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolSessionPersistenceOutput)
}

func (i GetLoadbalancerTargetPoolSessionPersistenceArgs) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutput() GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return i.ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolSessionPersistenceArgs) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolSessionPersistenceOutput).ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx)
}

// GetLoadbalancerTargetPoolSessionPersistencePtrInput is an input type that accepts GetLoadbalancerTargetPoolSessionPersistenceArgs, GetLoadbalancerTargetPoolSessionPersistencePtr and GetLoadbalancerTargetPoolSessionPersistencePtrOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolSessionPersistencePtrInput` via:
//
//	        GetLoadbalancerTargetPoolSessionPersistenceArgs{...}
//
//	or:
//
//	        nil
type GetLoadbalancerTargetPoolSessionPersistencePtrInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolSessionPersistencePtrOutput() GetLoadbalancerTargetPoolSessionPersistencePtrOutput
	ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Context) GetLoadbalancerTargetPoolSessionPersistencePtrOutput
}

type getLoadbalancerTargetPoolSessionPersistencePtrType GetLoadbalancerTargetPoolSessionPersistenceArgs

func GetLoadbalancerTargetPoolSessionPersistencePtr(v *GetLoadbalancerTargetPoolSessionPersistenceArgs) GetLoadbalancerTargetPoolSessionPersistencePtrInput {
	return (*getLoadbalancerTargetPoolSessionPersistencePtrType)(v)
}

func (*getLoadbalancerTargetPoolSessionPersistencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetLoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (i *getLoadbalancerTargetPoolSessionPersistencePtrType) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutput() GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return i.ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (i *getLoadbalancerTargetPoolSessionPersistencePtrType) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolSessionPersistencePtrOutput)
}

type GetLoadbalancerTargetPoolSessionPersistenceOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolSessionPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolSessionPersistenceOutput) ToGetLoadbalancerTargetPoolSessionPersistenceOutput() GetLoadbalancerTargetPoolSessionPersistenceOutput {
	return o
}

func (o GetLoadbalancerTargetPoolSessionPersistenceOutput) ToGetLoadbalancerTargetPoolSessionPersistenceOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistenceOutput {
	return o
}

func (o GetLoadbalancerTargetPoolSessionPersistenceOutput) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutput() GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(context.Background())
}

func (o GetLoadbalancerTargetPoolSessionPersistenceOutput) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetLoadbalancerTargetPoolSessionPersistence) *GetLoadbalancerTargetPoolSessionPersistence {
		return &v
	}).(GetLoadbalancerTargetPoolSessionPersistencePtrOutput)
}

// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
func (o GetLoadbalancerTargetPoolSessionPersistenceOutput) UseSourceIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolSessionPersistence) *bool { return v.UseSourceIpAddress }).(pulumi.BoolPtrOutput)
}

type GetLoadbalancerTargetPoolSessionPersistencePtrOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolSessionPersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetLoadbalancerTargetPoolSessionPersistence)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolSessionPersistencePtrOutput) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutput() GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o
}

func (o GetLoadbalancerTargetPoolSessionPersistencePtrOutput) ToGetLoadbalancerTargetPoolSessionPersistencePtrOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolSessionPersistencePtrOutput {
	return o
}

func (o GetLoadbalancerTargetPoolSessionPersistencePtrOutput) Elem() GetLoadbalancerTargetPoolSessionPersistenceOutput {
	return o.ApplyT(func(v *GetLoadbalancerTargetPoolSessionPersistence) GetLoadbalancerTargetPoolSessionPersistence {
		if v != nil {
			return *v
		}
		var ret GetLoadbalancerTargetPoolSessionPersistence
		return ret
	}).(GetLoadbalancerTargetPoolSessionPersistenceOutput)
}

// If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.
func (o GetLoadbalancerTargetPoolSessionPersistencePtrOutput) UseSourceIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetLoadbalancerTargetPoolSessionPersistence) *bool {
		if v == nil {
			return nil
		}
		return v.UseSourceIpAddress
	}).(pulumi.BoolPtrOutput)
}

type GetLoadbalancerTargetPoolTarget struct {
	// Target display name
	DisplayName string `pulumi:"displayName"`
	// Target IP
	Ip string `pulumi:"ip"`
}

// GetLoadbalancerTargetPoolTargetInput is an input type that accepts GetLoadbalancerTargetPoolTargetArgs and GetLoadbalancerTargetPoolTargetOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolTargetInput` via:
//
//	GetLoadbalancerTargetPoolTargetArgs{...}
type GetLoadbalancerTargetPoolTargetInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolTargetOutput() GetLoadbalancerTargetPoolTargetOutput
	ToGetLoadbalancerTargetPoolTargetOutputWithContext(context.Context) GetLoadbalancerTargetPoolTargetOutput
}

type GetLoadbalancerTargetPoolTargetArgs struct {
	// Target display name
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Target IP
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetLoadbalancerTargetPoolTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolTargetArgs) ToGetLoadbalancerTargetPoolTargetOutput() GetLoadbalancerTargetPoolTargetOutput {
	return i.ToGetLoadbalancerTargetPoolTargetOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolTargetArgs) ToGetLoadbalancerTargetPoolTargetOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolTargetOutput)
}

// GetLoadbalancerTargetPoolTargetArrayInput is an input type that accepts GetLoadbalancerTargetPoolTargetArray and GetLoadbalancerTargetPoolTargetArrayOutput values.
// You can construct a concrete instance of `GetLoadbalancerTargetPoolTargetArrayInput` via:
//
//	GetLoadbalancerTargetPoolTargetArray{ GetLoadbalancerTargetPoolTargetArgs{...} }
type GetLoadbalancerTargetPoolTargetArrayInput interface {
	pulumi.Input

	ToGetLoadbalancerTargetPoolTargetArrayOutput() GetLoadbalancerTargetPoolTargetArrayOutput
	ToGetLoadbalancerTargetPoolTargetArrayOutputWithContext(context.Context) GetLoadbalancerTargetPoolTargetArrayOutput
}

type GetLoadbalancerTargetPoolTargetArray []GetLoadbalancerTargetPoolTargetInput

func (GetLoadbalancerTargetPoolTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (i GetLoadbalancerTargetPoolTargetArray) ToGetLoadbalancerTargetPoolTargetArrayOutput() GetLoadbalancerTargetPoolTargetArrayOutput {
	return i.ToGetLoadbalancerTargetPoolTargetArrayOutputWithContext(context.Background())
}

func (i GetLoadbalancerTargetPoolTargetArray) ToGetLoadbalancerTargetPoolTargetArrayOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadbalancerTargetPoolTargetArrayOutput)
}

type GetLoadbalancerTargetPoolTargetOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolTargetOutput) ToGetLoadbalancerTargetPoolTargetOutput() GetLoadbalancerTargetPoolTargetOutput {
	return o
}

func (o GetLoadbalancerTargetPoolTargetOutput) ToGetLoadbalancerTargetPoolTargetOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolTargetOutput {
	return o
}

// Target display name
func (o GetLoadbalancerTargetPoolTargetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolTarget) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Target IP
func (o GetLoadbalancerTargetPoolTargetOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadbalancerTargetPoolTarget) string { return v.Ip }).(pulumi.StringOutput)
}

type GetLoadbalancerTargetPoolTargetArrayOutput struct{ *pulumi.OutputState }

func (GetLoadbalancerTargetPoolTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadbalancerTargetPoolTarget)(nil)).Elem()
}

func (o GetLoadbalancerTargetPoolTargetArrayOutput) ToGetLoadbalancerTargetPoolTargetArrayOutput() GetLoadbalancerTargetPoolTargetArrayOutput {
	return o
}

func (o GetLoadbalancerTargetPoolTargetArrayOutput) ToGetLoadbalancerTargetPoolTargetArrayOutputWithContext(ctx context.Context) GetLoadbalancerTargetPoolTargetArrayOutput {
	return o
}

func (o GetLoadbalancerTargetPoolTargetArrayOutput) Index(i pulumi.IntInput) GetLoadbalancerTargetPoolTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadbalancerTargetPoolTarget {
		return vs[0].([]GetLoadbalancerTargetPoolTarget)[vs[1].(int)]
	}).(GetLoadbalancerTargetPoolTargetOutput)
}

type GetLogmeInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring     bool   `pulumi:"enableMonitoring"`
	FluentdTcp           int    `pulumi:"fluentdTcp"`
	FluentdTls           int    `pulumi:"fluentdTls"`
	FluentdTlsCiphers    string `pulumi:"fluentdTlsCiphers"`
	FluentdTlsMaxVersion string `pulumi:"fluentdTlsMaxVersion"`
	FluentdTlsMinVersion string `pulumi:"fluentdTlsMinVersion"`
	FluentdTlsVersion    string `pulumi:"fluentdTlsVersion"`
	FluentdUdp           int    `pulumi:"fluentdUdp"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite string `pulumi:"graphite"`
	// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
	IsmDeletionAfter string  `pulumi:"ismDeletionAfter"`
	IsmJitter        float64 `pulumi:"ismJitter"`
	// Jitter of the execution time.
	IsmJobInterval int `pulumi:"ismJobInterval"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace int `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace int `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId   string   `pulumi:"monitoringInstanceId"`
	OpensearchTlsCiphers   []string `pulumi:"opensearchTlsCiphers"`
	OpensearchTlsProtocols []string `pulumi:"opensearchTlsProtocols"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
}

// GetLogmeInstanceParametersInput is an input type that accepts GetLogmeInstanceParametersArgs and GetLogmeInstanceParametersOutput values.
// You can construct a concrete instance of `GetLogmeInstanceParametersInput` via:
//
//	GetLogmeInstanceParametersArgs{...}
type GetLogmeInstanceParametersInput interface {
	pulumi.Input

	ToGetLogmeInstanceParametersOutput() GetLogmeInstanceParametersOutput
	ToGetLogmeInstanceParametersOutputWithContext(context.Context) GetLogmeInstanceParametersOutput
}

type GetLogmeInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring     pulumi.BoolInput   `pulumi:"enableMonitoring"`
	FluentdTcp           pulumi.IntInput    `pulumi:"fluentdTcp"`
	FluentdTls           pulumi.IntInput    `pulumi:"fluentdTls"`
	FluentdTlsCiphers    pulumi.StringInput `pulumi:"fluentdTlsCiphers"`
	FluentdTlsMaxVersion pulumi.StringInput `pulumi:"fluentdTlsMaxVersion"`
	FluentdTlsMinVersion pulumi.StringInput `pulumi:"fluentdTlsMinVersion"`
	FluentdTlsVersion    pulumi.StringInput `pulumi:"fluentdTlsVersion"`
	FluentdUdp           pulumi.IntInput    `pulumi:"fluentdUdp"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite pulumi.StringInput `pulumi:"graphite"`
	// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
	IsmDeletionAfter pulumi.StringInput  `pulumi:"ismDeletionAfter"`
	IsmJitter        pulumi.Float64Input `pulumi:"ismJitter"`
	// Jitter of the execution time.
	IsmJobInterval pulumi.IntInput `pulumi:"ismJobInterval"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace pulumi.IntInput `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace pulumi.IntInput `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency pulumi.IntInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix pulumi.StringInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId   pulumi.StringInput      `pulumi:"monitoringInstanceId"`
	OpensearchTlsCiphers   pulumi.StringArrayInput `pulumi:"opensearchTlsCiphers"`
	OpensearchTlsProtocols pulumi.StringArrayInput `pulumi:"opensearchTlsProtocols"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
}

func (GetLogmeInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogmeInstanceParameters)(nil)).Elem()
}

func (i GetLogmeInstanceParametersArgs) ToGetLogmeInstanceParametersOutput() GetLogmeInstanceParametersOutput {
	return i.ToGetLogmeInstanceParametersOutputWithContext(context.Background())
}

func (i GetLogmeInstanceParametersArgs) ToGetLogmeInstanceParametersOutputWithContext(ctx context.Context) GetLogmeInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogmeInstanceParametersOutput)
}

type GetLogmeInstanceParametersOutput struct{ *pulumi.OutputState }

func (GetLogmeInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogmeInstanceParameters)(nil)).Elem()
}

func (o GetLogmeInstanceParametersOutput) ToGetLogmeInstanceParametersOutput() GetLogmeInstanceParametersOutput {
	return o
}

func (o GetLogmeInstanceParametersOutput) ToGetLogmeInstanceParametersOutputWithContext(ctx context.Context) GetLogmeInstanceParametersOutput {
	return o
}

// Enable monitoring.
func (o GetLogmeInstanceParametersOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTcp() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.FluentdTcp }).(pulumi.IntOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTls() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.FluentdTls }).(pulumi.IntOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTlsCiphers() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.FluentdTlsCiphers }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTlsMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.FluentdTlsMaxVersion }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTlsMinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.FluentdTlsMinVersion }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.FluentdTlsVersion }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) FluentdUdp() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.FluentdUdp }).(pulumi.IntOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o GetLogmeInstanceParametersOutput) Graphite() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.Graphite }).(pulumi.StringOutput)
}

// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
func (o GetLogmeInstanceParametersOutput) IsmDeletionAfter() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.IsmDeletionAfter }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) IsmJitter() pulumi.Float64Output {
	return o.ApplyT(func(v GetLogmeInstanceParameters) float64 { return v.IsmJitter }).(pulumi.Float64Output)
}

// Jitter of the execution time.
func (o GetLogmeInstanceParametersOutput) IsmJobInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.IsmJobInterval }).(pulumi.IntOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o GetLogmeInstanceParametersOutput) JavaHeapspace() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.JavaHeapspace }).(pulumi.IntOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o GetLogmeInstanceParametersOutput) JavaMaxmetaspace() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.JavaMaxmetaspace }).(pulumi.IntOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o GetLogmeInstanceParametersOutput) MaxDiskThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.MaxDiskThreshold }).(pulumi.IntOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o GetLogmeInstanceParametersOutput) MetricsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) int { return v.MetricsFrequency }).(pulumi.IntOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o GetLogmeInstanceParametersOutput) MetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.MetricsPrefix }).(pulumi.StringOutput)
}

// The ID of the STACKIT monitoring instance.
func (o GetLogmeInstanceParametersOutput) MonitoringInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.MonitoringInstanceId }).(pulumi.StringOutput)
}

func (o GetLogmeInstanceParametersOutput) OpensearchTlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) []string { return v.OpensearchTlsCiphers }).(pulumi.StringArrayOutput)
}

func (o GetLogmeInstanceParametersOutput) OpensearchTlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) []string { return v.OpensearchTlsProtocols }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o GetLogmeInstanceParametersOutput) SgwAcl() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) string { return v.SgwAcl }).(pulumi.StringOutput)
}

// List of syslog servers to send logs to.
func (o GetLogmeInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogmeInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

type GetMariadbInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring bool   `pulumi:"enableMonitoring"`
	Graphite         string `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId string `pulumi:"monitoringInstanceId"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
}

// GetMariadbInstanceParametersInput is an input type that accepts GetMariadbInstanceParametersArgs and GetMariadbInstanceParametersOutput values.
// You can construct a concrete instance of `GetMariadbInstanceParametersInput` via:
//
//	GetMariadbInstanceParametersArgs{...}
type GetMariadbInstanceParametersInput interface {
	pulumi.Input

	ToGetMariadbInstanceParametersOutput() GetMariadbInstanceParametersOutput
	ToGetMariadbInstanceParametersOutputWithContext(context.Context) GetMariadbInstanceParametersOutput
}

type GetMariadbInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring pulumi.BoolInput   `pulumi:"enableMonitoring"`
	Graphite         pulumi.StringInput `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringInput `pulumi:"monitoringInstanceId"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
}

func (GetMariadbInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMariadbInstanceParameters)(nil)).Elem()
}

func (i GetMariadbInstanceParametersArgs) ToGetMariadbInstanceParametersOutput() GetMariadbInstanceParametersOutput {
	return i.ToGetMariadbInstanceParametersOutputWithContext(context.Background())
}

func (i GetMariadbInstanceParametersArgs) ToGetMariadbInstanceParametersOutputWithContext(ctx context.Context) GetMariadbInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMariadbInstanceParametersOutput)
}

type GetMariadbInstanceParametersOutput struct{ *pulumi.OutputState }

func (GetMariadbInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMariadbInstanceParameters)(nil)).Elem()
}

func (o GetMariadbInstanceParametersOutput) ToGetMariadbInstanceParametersOutput() GetMariadbInstanceParametersOutput {
	return o
}

func (o GetMariadbInstanceParametersOutput) ToGetMariadbInstanceParametersOutputWithContext(ctx context.Context) GetMariadbInstanceParametersOutput {
	return o
}

// Enable monitoring.
func (o GetMariadbInstanceParametersOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

func (o GetMariadbInstanceParametersOutput) Graphite() pulumi.StringOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) string { return v.Graphite }).(pulumi.StringOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o GetMariadbInstanceParametersOutput) MaxDiskThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) int { return v.MaxDiskThreshold }).(pulumi.IntOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o GetMariadbInstanceParametersOutput) MetricsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) int { return v.MetricsFrequency }).(pulumi.IntOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o GetMariadbInstanceParametersOutput) MetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) string { return v.MetricsPrefix }).(pulumi.StringOutput)
}

// The ID of the STACKIT monitoring instance.
func (o GetMariadbInstanceParametersOutput) MonitoringInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) string { return v.MonitoringInstanceId }).(pulumi.StringOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o GetMariadbInstanceParametersOutput) SgwAcl() pulumi.StringOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) string { return v.SgwAcl }).(pulumi.StringOutput)
}

// List of syslog servers to send logs to.
func (o GetMariadbInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMariadbInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

type GetMongodbflexInstanceFlavor struct {
	Cpu         int    `pulumi:"cpu"`
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Ram         int    `pulumi:"ram"`
}

// GetMongodbflexInstanceFlavorInput is an input type that accepts GetMongodbflexInstanceFlavorArgs and GetMongodbflexInstanceFlavorOutput values.
// You can construct a concrete instance of `GetMongodbflexInstanceFlavorInput` via:
//
//	GetMongodbflexInstanceFlavorArgs{...}
type GetMongodbflexInstanceFlavorInput interface {
	pulumi.Input

	ToGetMongodbflexInstanceFlavorOutput() GetMongodbflexInstanceFlavorOutput
	ToGetMongodbflexInstanceFlavorOutputWithContext(context.Context) GetMongodbflexInstanceFlavorOutput
}

type GetMongodbflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput    `pulumi:"cpu"`
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.StringInput `pulumi:"id"`
	Ram         pulumi.IntInput    `pulumi:"ram"`
}

func (GetMongodbflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceFlavor)(nil)).Elem()
}

func (i GetMongodbflexInstanceFlavorArgs) ToGetMongodbflexInstanceFlavorOutput() GetMongodbflexInstanceFlavorOutput {
	return i.ToGetMongodbflexInstanceFlavorOutputWithContext(context.Background())
}

func (i GetMongodbflexInstanceFlavorArgs) ToGetMongodbflexInstanceFlavorOutputWithContext(ctx context.Context) GetMongodbflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMongodbflexInstanceFlavorOutput)
}

type GetMongodbflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (GetMongodbflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceFlavor)(nil)).Elem()
}

func (o GetMongodbflexInstanceFlavorOutput) ToGetMongodbflexInstanceFlavorOutput() GetMongodbflexInstanceFlavorOutput {
	return o
}

func (o GetMongodbflexInstanceFlavorOutput) ToGetMongodbflexInstanceFlavorOutputWithContext(ctx context.Context) GetMongodbflexInstanceFlavorOutput {
	return o
}

func (o GetMongodbflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o GetMongodbflexInstanceFlavorOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceFlavor) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetMongodbflexInstanceFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceFlavor) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMongodbflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type GetMongodbflexInstanceOptions struct {
	// The number of days that daily backups will be retained.
	DailySnapshotRetentionDays int `pulumi:"dailySnapshotRetentionDays"`
	// The number of months that monthly backups will be retained.
	MonthlySnapshotRetentionMonths int `pulumi:"monthlySnapshotRetentionMonths"`
	// The number of hours back in time the point-in-time recovery feature will be able to recover.
	PointInTimeWindowHours int `pulumi:"pointInTimeWindowHours"`
	// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
	SnapshotRetentionDays int `pulumi:"snapshotRetentionDays"`
	// Type of the MongoDB Flex instance.
	Type string `pulumi:"type"`
	// The number of weeks that weekly backups will be retained.
	WeeklySnapshotRetentionWeeks int `pulumi:"weeklySnapshotRetentionWeeks"`
}

// GetMongodbflexInstanceOptionsInput is an input type that accepts GetMongodbflexInstanceOptionsArgs and GetMongodbflexInstanceOptionsOutput values.
// You can construct a concrete instance of `GetMongodbflexInstanceOptionsInput` via:
//
//	GetMongodbflexInstanceOptionsArgs{...}
type GetMongodbflexInstanceOptionsInput interface {
	pulumi.Input

	ToGetMongodbflexInstanceOptionsOutput() GetMongodbflexInstanceOptionsOutput
	ToGetMongodbflexInstanceOptionsOutputWithContext(context.Context) GetMongodbflexInstanceOptionsOutput
}

type GetMongodbflexInstanceOptionsArgs struct {
	// The number of days that daily backups will be retained.
	DailySnapshotRetentionDays pulumi.IntInput `pulumi:"dailySnapshotRetentionDays"`
	// The number of months that monthly backups will be retained.
	MonthlySnapshotRetentionMonths pulumi.IntInput `pulumi:"monthlySnapshotRetentionMonths"`
	// The number of hours back in time the point-in-time recovery feature will be able to recover.
	PointInTimeWindowHours pulumi.IntInput `pulumi:"pointInTimeWindowHours"`
	// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
	SnapshotRetentionDays pulumi.IntInput `pulumi:"snapshotRetentionDays"`
	// Type of the MongoDB Flex instance.
	Type pulumi.StringInput `pulumi:"type"`
	// The number of weeks that weekly backups will be retained.
	WeeklySnapshotRetentionWeeks pulumi.IntInput `pulumi:"weeklySnapshotRetentionWeeks"`
}

func (GetMongodbflexInstanceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceOptions)(nil)).Elem()
}

func (i GetMongodbflexInstanceOptionsArgs) ToGetMongodbflexInstanceOptionsOutput() GetMongodbflexInstanceOptionsOutput {
	return i.ToGetMongodbflexInstanceOptionsOutputWithContext(context.Background())
}

func (i GetMongodbflexInstanceOptionsArgs) ToGetMongodbflexInstanceOptionsOutputWithContext(ctx context.Context) GetMongodbflexInstanceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMongodbflexInstanceOptionsOutput)
}

type GetMongodbflexInstanceOptionsOutput struct{ *pulumi.OutputState }

func (GetMongodbflexInstanceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceOptions)(nil)).Elem()
}

func (o GetMongodbflexInstanceOptionsOutput) ToGetMongodbflexInstanceOptionsOutput() GetMongodbflexInstanceOptionsOutput {
	return o
}

func (o GetMongodbflexInstanceOptionsOutput) ToGetMongodbflexInstanceOptionsOutputWithContext(ctx context.Context) GetMongodbflexInstanceOptionsOutput {
	return o
}

// The number of days that daily backups will be retained.
func (o GetMongodbflexInstanceOptionsOutput) DailySnapshotRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) int { return v.DailySnapshotRetentionDays }).(pulumi.IntOutput)
}

// The number of months that monthly backups will be retained.
func (o GetMongodbflexInstanceOptionsOutput) MonthlySnapshotRetentionMonths() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) int { return v.MonthlySnapshotRetentionMonths }).(pulumi.IntOutput)
}

// The number of hours back in time the point-in-time recovery feature will be able to recover.
func (o GetMongodbflexInstanceOptionsOutput) PointInTimeWindowHours() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) int { return v.PointInTimeWindowHours }).(pulumi.IntOutput)
}

// The number of days that continuous backups (controlled via the `backupSchedule`) will be retained.
func (o GetMongodbflexInstanceOptionsOutput) SnapshotRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) int { return v.SnapshotRetentionDays }).(pulumi.IntOutput)
}

// Type of the MongoDB Flex instance.
func (o GetMongodbflexInstanceOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) string { return v.Type }).(pulumi.StringOutput)
}

// The number of weeks that weekly backups will be retained.
func (o GetMongodbflexInstanceOptionsOutput) WeeklySnapshotRetentionWeeks() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceOptions) int { return v.WeeklySnapshotRetentionWeeks }).(pulumi.IntOutput)
}

type GetMongodbflexInstanceStorage struct {
	Class string `pulumi:"class"`
	Size  int    `pulumi:"size"`
}

// GetMongodbflexInstanceStorageInput is an input type that accepts GetMongodbflexInstanceStorageArgs and GetMongodbflexInstanceStorageOutput values.
// You can construct a concrete instance of `GetMongodbflexInstanceStorageInput` via:
//
//	GetMongodbflexInstanceStorageArgs{...}
type GetMongodbflexInstanceStorageInput interface {
	pulumi.Input

	ToGetMongodbflexInstanceStorageOutput() GetMongodbflexInstanceStorageOutput
	ToGetMongodbflexInstanceStorageOutputWithContext(context.Context) GetMongodbflexInstanceStorageOutput
}

type GetMongodbflexInstanceStorageArgs struct {
	Class pulumi.StringInput `pulumi:"class"`
	Size  pulumi.IntInput    `pulumi:"size"`
}

func (GetMongodbflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceStorage)(nil)).Elem()
}

func (i GetMongodbflexInstanceStorageArgs) ToGetMongodbflexInstanceStorageOutput() GetMongodbflexInstanceStorageOutput {
	return i.ToGetMongodbflexInstanceStorageOutputWithContext(context.Background())
}

func (i GetMongodbflexInstanceStorageArgs) ToGetMongodbflexInstanceStorageOutputWithContext(ctx context.Context) GetMongodbflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMongodbflexInstanceStorageOutput)
}

type GetMongodbflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (GetMongodbflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMongodbflexInstanceStorage)(nil)).Elem()
}

func (o GetMongodbflexInstanceStorageOutput) ToGetMongodbflexInstanceStorageOutput() GetMongodbflexInstanceStorageOutput {
	return o
}

func (o GetMongodbflexInstanceStorageOutput) ToGetMongodbflexInstanceStorageOutputWithContext(ctx context.Context) GetMongodbflexInstanceStorageOutput {
	return o
}

func (o GetMongodbflexInstanceStorageOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceStorage) string { return v.Class }).(pulumi.StringOutput)
}

func (o GetMongodbflexInstanceStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetMongodbflexInstanceStorage) int { return v.Size }).(pulumi.IntOutput)
}

type GetNetworkAreaNetworkRange struct {
	NetworkRangeId string `pulumi:"networkRangeId"`
	Prefix         string `pulumi:"prefix"`
}

// GetNetworkAreaNetworkRangeInput is an input type that accepts GetNetworkAreaNetworkRangeArgs and GetNetworkAreaNetworkRangeOutput values.
// You can construct a concrete instance of `GetNetworkAreaNetworkRangeInput` via:
//
//	GetNetworkAreaNetworkRangeArgs{...}
type GetNetworkAreaNetworkRangeInput interface {
	pulumi.Input

	ToGetNetworkAreaNetworkRangeOutput() GetNetworkAreaNetworkRangeOutput
	ToGetNetworkAreaNetworkRangeOutputWithContext(context.Context) GetNetworkAreaNetworkRangeOutput
}

type GetNetworkAreaNetworkRangeArgs struct {
	NetworkRangeId pulumi.StringInput `pulumi:"networkRangeId"`
	Prefix         pulumi.StringInput `pulumi:"prefix"`
}

func (GetNetworkAreaNetworkRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAreaNetworkRange)(nil)).Elem()
}

func (i GetNetworkAreaNetworkRangeArgs) ToGetNetworkAreaNetworkRangeOutput() GetNetworkAreaNetworkRangeOutput {
	return i.ToGetNetworkAreaNetworkRangeOutputWithContext(context.Background())
}

func (i GetNetworkAreaNetworkRangeArgs) ToGetNetworkAreaNetworkRangeOutputWithContext(ctx context.Context) GetNetworkAreaNetworkRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAreaNetworkRangeOutput)
}

// GetNetworkAreaNetworkRangeArrayInput is an input type that accepts GetNetworkAreaNetworkRangeArray and GetNetworkAreaNetworkRangeArrayOutput values.
// You can construct a concrete instance of `GetNetworkAreaNetworkRangeArrayInput` via:
//
//	GetNetworkAreaNetworkRangeArray{ GetNetworkAreaNetworkRangeArgs{...} }
type GetNetworkAreaNetworkRangeArrayInput interface {
	pulumi.Input

	ToGetNetworkAreaNetworkRangeArrayOutput() GetNetworkAreaNetworkRangeArrayOutput
	ToGetNetworkAreaNetworkRangeArrayOutputWithContext(context.Context) GetNetworkAreaNetworkRangeArrayOutput
}

type GetNetworkAreaNetworkRangeArray []GetNetworkAreaNetworkRangeInput

func (GetNetworkAreaNetworkRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAreaNetworkRange)(nil)).Elem()
}

func (i GetNetworkAreaNetworkRangeArray) ToGetNetworkAreaNetworkRangeArrayOutput() GetNetworkAreaNetworkRangeArrayOutput {
	return i.ToGetNetworkAreaNetworkRangeArrayOutputWithContext(context.Background())
}

func (i GetNetworkAreaNetworkRangeArray) ToGetNetworkAreaNetworkRangeArrayOutputWithContext(ctx context.Context) GetNetworkAreaNetworkRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAreaNetworkRangeArrayOutput)
}

type GetNetworkAreaNetworkRangeOutput struct{ *pulumi.OutputState }

func (GetNetworkAreaNetworkRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAreaNetworkRange)(nil)).Elem()
}

func (o GetNetworkAreaNetworkRangeOutput) ToGetNetworkAreaNetworkRangeOutput() GetNetworkAreaNetworkRangeOutput {
	return o
}

func (o GetNetworkAreaNetworkRangeOutput) ToGetNetworkAreaNetworkRangeOutputWithContext(ctx context.Context) GetNetworkAreaNetworkRangeOutput {
	return o
}

func (o GetNetworkAreaNetworkRangeOutput) NetworkRangeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAreaNetworkRange) string { return v.NetworkRangeId }).(pulumi.StringOutput)
}

func (o GetNetworkAreaNetworkRangeOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAreaNetworkRange) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetNetworkAreaNetworkRangeArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAreaNetworkRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAreaNetworkRange)(nil)).Elem()
}

func (o GetNetworkAreaNetworkRangeArrayOutput) ToGetNetworkAreaNetworkRangeArrayOutput() GetNetworkAreaNetworkRangeArrayOutput {
	return o
}

func (o GetNetworkAreaNetworkRangeArrayOutput) ToGetNetworkAreaNetworkRangeArrayOutputWithContext(ctx context.Context) GetNetworkAreaNetworkRangeArrayOutput {
	return o
}

func (o GetNetworkAreaNetworkRangeArrayOutput) Index(i pulumi.IntInput) GetNetworkAreaNetworkRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAreaNetworkRange {
		return vs[0].([]GetNetworkAreaNetworkRange)[vs[1].(int)]
	}).(GetNetworkAreaNetworkRangeOutput)
}

type GetObservabilityAlertgroupRule struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert string `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations map[string]string `pulumi:"annotations"`
	// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression string `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For string `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels map[string]string `pulumi:"labels"`
}

// GetObservabilityAlertgroupRuleInput is an input type that accepts GetObservabilityAlertgroupRuleArgs and GetObservabilityAlertgroupRuleOutput values.
// You can construct a concrete instance of `GetObservabilityAlertgroupRuleInput` via:
//
//	GetObservabilityAlertgroupRuleArgs{...}
type GetObservabilityAlertgroupRuleInput interface {
	pulumi.Input

	ToGetObservabilityAlertgroupRuleOutput() GetObservabilityAlertgroupRuleOutput
	ToGetObservabilityAlertgroupRuleOutputWithContext(context.Context) GetObservabilityAlertgroupRuleOutput
}

type GetObservabilityAlertgroupRuleArgs struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert pulumi.StringInput `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For pulumi.StringInput `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (GetObservabilityAlertgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityAlertgroupRule)(nil)).Elem()
}

func (i GetObservabilityAlertgroupRuleArgs) ToGetObservabilityAlertgroupRuleOutput() GetObservabilityAlertgroupRuleOutput {
	return i.ToGetObservabilityAlertgroupRuleOutputWithContext(context.Background())
}

func (i GetObservabilityAlertgroupRuleArgs) ToGetObservabilityAlertgroupRuleOutputWithContext(ctx context.Context) GetObservabilityAlertgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityAlertgroupRuleOutput)
}

// GetObservabilityAlertgroupRuleArrayInput is an input type that accepts GetObservabilityAlertgroupRuleArray and GetObservabilityAlertgroupRuleArrayOutput values.
// You can construct a concrete instance of `GetObservabilityAlertgroupRuleArrayInput` via:
//
//	GetObservabilityAlertgroupRuleArray{ GetObservabilityAlertgroupRuleArgs{...} }
type GetObservabilityAlertgroupRuleArrayInput interface {
	pulumi.Input

	ToGetObservabilityAlertgroupRuleArrayOutput() GetObservabilityAlertgroupRuleArrayOutput
	ToGetObservabilityAlertgroupRuleArrayOutputWithContext(context.Context) GetObservabilityAlertgroupRuleArrayOutput
}

type GetObservabilityAlertgroupRuleArray []GetObservabilityAlertgroupRuleInput

func (GetObservabilityAlertgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityAlertgroupRule)(nil)).Elem()
}

func (i GetObservabilityAlertgroupRuleArray) ToGetObservabilityAlertgroupRuleArrayOutput() GetObservabilityAlertgroupRuleArrayOutput {
	return i.ToGetObservabilityAlertgroupRuleArrayOutputWithContext(context.Background())
}

func (i GetObservabilityAlertgroupRuleArray) ToGetObservabilityAlertgroupRuleArrayOutputWithContext(ctx context.Context) GetObservabilityAlertgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityAlertgroupRuleArrayOutput)
}

type GetObservabilityAlertgroupRuleOutput struct{ *pulumi.OutputState }

func (GetObservabilityAlertgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityAlertgroupRule)(nil)).Elem()
}

func (o GetObservabilityAlertgroupRuleOutput) ToGetObservabilityAlertgroupRuleOutput() GetObservabilityAlertgroupRuleOutput {
	return o
}

func (o GetObservabilityAlertgroupRuleOutput) ToGetObservabilityAlertgroupRuleOutputWithContext(ctx context.Context) GetObservabilityAlertgroupRuleOutput {
	return o
}

// The name of the alert rule. Is the identifier and must be unique in the group.
func (o GetObservabilityAlertgroupRuleOutput) Alert() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityAlertgroupRule) string { return v.Alert }).(pulumi.StringOutput)
}

// A map of key:value. Annotations to add or overwrite for each alert
func (o GetObservabilityAlertgroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityAlertgroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
func (o GetObservabilityAlertgroupRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityAlertgroupRule) string { return v.Expression }).(pulumi.StringOutput)
}

// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
func (o GetObservabilityAlertgroupRuleOutput) For() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityAlertgroupRule) string { return v.For }).(pulumi.StringOutput)
}

// A map of key:value. Labels to add or overwrite for each alert
func (o GetObservabilityAlertgroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityAlertgroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type GetObservabilityAlertgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityAlertgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityAlertgroupRule)(nil)).Elem()
}

func (o GetObservabilityAlertgroupRuleArrayOutput) ToGetObservabilityAlertgroupRuleArrayOutput() GetObservabilityAlertgroupRuleArrayOutput {
	return o
}

func (o GetObservabilityAlertgroupRuleArrayOutput) ToGetObservabilityAlertgroupRuleArrayOutputWithContext(ctx context.Context) GetObservabilityAlertgroupRuleArrayOutput {
	return o
}

func (o GetObservabilityAlertgroupRuleArrayOutput) Index(i pulumi.IntInput) GetObservabilityAlertgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityAlertgroupRule {
		return vs[0].([]GetObservabilityAlertgroupRule)[vs[1].(int)]
	}).(GetObservabilityAlertgroupRuleOutput)
}

type GetObservabilityInstanceAlertConfig struct {
	// Global configuration for the alerts.
	Global GetObservabilityInstanceAlertConfigGlobal `pulumi:"global"`
	// List of alert receivers.
	Receivers []GetObservabilityInstanceAlertConfigReceiver `pulumi:"receivers"`
	// The route for the alert.
	Route GetObservabilityInstanceAlertConfigRoute `pulumi:"route"`
}

// GetObservabilityInstanceAlertConfigInput is an input type that accepts GetObservabilityInstanceAlertConfigArgs and GetObservabilityInstanceAlertConfigOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigInput` via:
//
//	GetObservabilityInstanceAlertConfigArgs{...}
type GetObservabilityInstanceAlertConfigInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigOutput() GetObservabilityInstanceAlertConfigOutput
	ToGetObservabilityInstanceAlertConfigOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigOutput
}

type GetObservabilityInstanceAlertConfigArgs struct {
	// Global configuration for the alerts.
	Global GetObservabilityInstanceAlertConfigGlobalInput `pulumi:"global"`
	// List of alert receivers.
	Receivers GetObservabilityInstanceAlertConfigReceiverArrayInput `pulumi:"receivers"`
	// The route for the alert.
	Route GetObservabilityInstanceAlertConfigRouteInput `pulumi:"route"`
}

func (GetObservabilityInstanceAlertConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigArgs) ToGetObservabilityInstanceAlertConfigOutput() GetObservabilityInstanceAlertConfigOutput {
	return i.ToGetObservabilityInstanceAlertConfigOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigArgs) ToGetObservabilityInstanceAlertConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigOutput)
}

type GetObservabilityInstanceAlertConfigOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigOutput) ToGetObservabilityInstanceAlertConfigOutput() GetObservabilityInstanceAlertConfigOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigOutput) ToGetObservabilityInstanceAlertConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigOutput {
	return o
}

// Global configuration for the alerts.
func (o GetObservabilityInstanceAlertConfigOutput) Global() GetObservabilityInstanceAlertConfigGlobalOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfig) GetObservabilityInstanceAlertConfigGlobal { return v.Global }).(GetObservabilityInstanceAlertConfigGlobalOutput)
}

// List of alert receivers.
func (o GetObservabilityInstanceAlertConfigOutput) Receivers() GetObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfig) []GetObservabilityInstanceAlertConfigReceiver {
		return v.Receivers
	}).(GetObservabilityInstanceAlertConfigReceiverArrayOutput)
}

// The route for the alert.
func (o GetObservabilityInstanceAlertConfigOutput) Route() GetObservabilityInstanceAlertConfigRouteOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfig) GetObservabilityInstanceAlertConfigRoute { return v.Route }).(GetObservabilityInstanceAlertConfigRouteOutput)
}

type GetObservabilityInstanceAlertConfigGlobal struct {
	// The API key for OpsGenie.
	OpsgenieApiKey string `pulumi:"opsgenieApiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	OpsgenieApiUrl string `pulumi:"opsgenieApiUrl"`
	// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
	ResolveTimeout string `pulumi:"resolveTimeout"`
	// SMTP authentication information. Must be a valid email address
	SmtpAuthIdentity string `pulumi:"smtpAuthIdentity"`
	// SMTP Auth using LOGIN and PLAIN.
	SmtpAuthPassword string `pulumi:"smtpAuthPassword"`
	// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
	SmtpAuthUsername string `pulumi:"smtpAuthUsername"`
	// The default SMTP From header field. Must be a valid email address
	SmtpFrom string `pulumi:"smtpFrom"`
	// The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
	SmtpSmartHost string `pulumi:"smtpSmartHost"`
}

// GetObservabilityInstanceAlertConfigGlobalInput is an input type that accepts GetObservabilityInstanceAlertConfigGlobalArgs and GetObservabilityInstanceAlertConfigGlobalOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigGlobalInput` via:
//
//	GetObservabilityInstanceAlertConfigGlobalArgs{...}
type GetObservabilityInstanceAlertConfigGlobalInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigGlobalOutput() GetObservabilityInstanceAlertConfigGlobalOutput
	ToGetObservabilityInstanceAlertConfigGlobalOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigGlobalOutput
}

type GetObservabilityInstanceAlertConfigGlobalArgs struct {
	// The API key for OpsGenie.
	OpsgenieApiKey pulumi.StringInput `pulumi:"opsgenieApiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	OpsgenieApiUrl pulumi.StringInput `pulumi:"opsgenieApiUrl"`
	// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
	ResolveTimeout pulumi.StringInput `pulumi:"resolveTimeout"`
	// SMTP authentication information. Must be a valid email address
	SmtpAuthIdentity pulumi.StringInput `pulumi:"smtpAuthIdentity"`
	// SMTP Auth using LOGIN and PLAIN.
	SmtpAuthPassword pulumi.StringInput `pulumi:"smtpAuthPassword"`
	// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
	SmtpAuthUsername pulumi.StringInput `pulumi:"smtpAuthUsername"`
	// The default SMTP From header field. Must be a valid email address
	SmtpFrom pulumi.StringInput `pulumi:"smtpFrom"`
	// The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
	SmtpSmartHost pulumi.StringInput `pulumi:"smtpSmartHost"`
}

func (GetObservabilityInstanceAlertConfigGlobalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigGlobalArgs) ToGetObservabilityInstanceAlertConfigGlobalOutput() GetObservabilityInstanceAlertConfigGlobalOutput {
	return i.ToGetObservabilityInstanceAlertConfigGlobalOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigGlobalArgs) ToGetObservabilityInstanceAlertConfigGlobalOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigGlobalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigGlobalOutput)
}

type GetObservabilityInstanceAlertConfigGlobalOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigGlobalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigGlobal)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigGlobalOutput) ToGetObservabilityInstanceAlertConfigGlobalOutput() GetObservabilityInstanceAlertConfigGlobalOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigGlobalOutput) ToGetObservabilityInstanceAlertConfigGlobalOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigGlobalOutput {
	return o
}

// The API key for OpsGenie.
func (o GetObservabilityInstanceAlertConfigGlobalOutput) OpsgenieApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.OpsgenieApiKey }).(pulumi.StringOutput)
}

// The host to send OpsGenie API requests to. Must be a valid URL
func (o GetObservabilityInstanceAlertConfigGlobalOutput) OpsgenieApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.OpsgenieApiUrl }).(pulumi.StringOutput)
}

// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
func (o GetObservabilityInstanceAlertConfigGlobalOutput) ResolveTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.ResolveTimeout }).(pulumi.StringOutput)
}

// SMTP authentication information. Must be a valid email address
func (o GetObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.SmtpAuthIdentity }).(pulumi.StringOutput)
}

// SMTP Auth using LOGIN and PLAIN.
func (o GetObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.SmtpAuthPassword }).(pulumi.StringOutput)
}

// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
func (o GetObservabilityInstanceAlertConfigGlobalOutput) SmtpAuthUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.SmtpAuthUsername }).(pulumi.StringOutput)
}

// The default SMTP From header field. Must be a valid email address
func (o GetObservabilityInstanceAlertConfigGlobalOutput) SmtpFrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.SmtpFrom }).(pulumi.StringOutput)
}

// The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
func (o GetObservabilityInstanceAlertConfigGlobalOutput) SmtpSmartHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigGlobal) string { return v.SmtpSmartHost }).(pulumi.StringOutput)
}

type GetObservabilityInstanceAlertConfigReceiver struct {
	// List of email configurations.
	EmailConfigs []GetObservabilityInstanceAlertConfigReceiverEmailConfig `pulumi:"emailConfigs"`
	// Name of the receiver.
	Name string `pulumi:"name"`
	// List of OpsGenie configurations.
	OpsgenieConfigs []GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig `pulumi:"opsgenieConfigs"`
	// List of Webhooks configurations.
	WebhooksConfigs []GetObservabilityInstanceAlertConfigReceiverWebhooksConfig `pulumi:"webhooksConfigs"`
}

// GetObservabilityInstanceAlertConfigReceiverInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverArgs and GetObservabilityInstanceAlertConfigReceiverOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverArgs{...}
type GetObservabilityInstanceAlertConfigReceiverInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverOutput() GetObservabilityInstanceAlertConfigReceiverOutput
	ToGetObservabilityInstanceAlertConfigReceiverOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverOutput
}

type GetObservabilityInstanceAlertConfigReceiverArgs struct {
	// List of email configurations.
	EmailConfigs GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput `pulumi:"emailConfigs"`
	// Name of the receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// List of OpsGenie configurations.
	OpsgenieConfigs GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput `pulumi:"opsgenieConfigs"`
	// List of Webhooks configurations.
	WebhooksConfigs GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput `pulumi:"webhooksConfigs"`
}

func (GetObservabilityInstanceAlertConfigReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverArgs) ToGetObservabilityInstanceAlertConfigReceiverOutput() GetObservabilityInstanceAlertConfigReceiverOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverArgs) ToGetObservabilityInstanceAlertConfigReceiverOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverOutput)
}

// GetObservabilityInstanceAlertConfigReceiverArrayInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverArray and GetObservabilityInstanceAlertConfigReceiverArrayOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverArrayInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverArray{ GetObservabilityInstanceAlertConfigReceiverArgs{...} }
type GetObservabilityInstanceAlertConfigReceiverArrayInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverArrayOutput() GetObservabilityInstanceAlertConfigReceiverArrayOutput
	ToGetObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverArrayOutput
}

type GetObservabilityInstanceAlertConfigReceiverArray []GetObservabilityInstanceAlertConfigReceiverInput

func (GetObservabilityInstanceAlertConfigReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverArray) ToGetObservabilityInstanceAlertConfigReceiverArrayOutput() GetObservabilityInstanceAlertConfigReceiverArrayOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverArray) ToGetObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverArrayOutput)
}

type GetObservabilityInstanceAlertConfigReceiverOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverOutput) ToGetObservabilityInstanceAlertConfigReceiverOutput() GetObservabilityInstanceAlertConfigReceiverOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverOutput) ToGetObservabilityInstanceAlertConfigReceiverOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOutput {
	return o
}

// List of email configurations.
func (o GetObservabilityInstanceAlertConfigReceiverOutput) EmailConfigs() GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiver) []GetObservabilityInstanceAlertConfigReceiverEmailConfig {
		return v.EmailConfigs
	}).(GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput)
}

// Name of the receiver.
func (o GetObservabilityInstanceAlertConfigReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// List of OpsGenie configurations.
func (o GetObservabilityInstanceAlertConfigReceiverOutput) OpsgenieConfigs() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiver) []GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig {
		return v.OpsgenieConfigs
	}).(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput)
}

// List of Webhooks configurations.
func (o GetObservabilityInstanceAlertConfigReceiverOutput) WebhooksConfigs() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiver) []GetObservabilityInstanceAlertConfigReceiverWebhooksConfig {
		return v.WebhooksConfigs
	}).(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput)
}

type GetObservabilityInstanceAlertConfigReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiver)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverArrayOutput() GetObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverArrayOutput) Index(i pulumi.IntInput) GetObservabilityInstanceAlertConfigReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityInstanceAlertConfigReceiver {
		return vs[0].([]GetObservabilityInstanceAlertConfigReceiver)[vs[1].(int)]
	}).(GetObservabilityInstanceAlertConfigReceiverOutput)
}

type GetObservabilityInstanceAlertConfigReceiverEmailConfig struct {
	// SMTP authentication information. Must be a valid email address
	AuthIdentity string `pulumi:"authIdentity"`
	// SMTP authentication password.
	AuthPassword string `pulumi:"authPassword"`
	// SMTP authentication username.
	AuthUsername string `pulumi:"authUsername"`
	// The sender email address. Must be a valid email address
	From string `pulumi:"from"`
	// The SMTP host through which emails are sent.
	SmartHost string `pulumi:"smartHost"`
	// The email address to send notifications to. Must be a valid email address
	To string `pulumi:"to"`
}

// GetObservabilityInstanceAlertConfigReceiverEmailConfigInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs and GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverEmailConfigInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs{...}
type GetObservabilityInstanceAlertConfigReceiverEmailConfigInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput
	ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput
}

type GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs struct {
	// SMTP authentication information. Must be a valid email address
	AuthIdentity pulumi.StringInput `pulumi:"authIdentity"`
	// SMTP authentication password.
	AuthPassword pulumi.StringInput `pulumi:"authPassword"`
	// SMTP authentication username.
	AuthUsername pulumi.StringInput `pulumi:"authUsername"`
	// The sender email address. Must be a valid email address
	From pulumi.StringInput `pulumi:"from"`
	// The SMTP host through which emails are sent.
	SmartHost pulumi.StringInput `pulumi:"smartHost"`
	// The email address to send notifications to. Must be a valid email address
	To pulumi.StringInput `pulumi:"to"`
}

func (GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput)
}

// GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverEmailConfigArray and GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverEmailConfigArray{ GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs{...} }
type GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput
	ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput
}

type GetObservabilityInstanceAlertConfigReceiverEmailConfigArray []GetObservabilityInstanceAlertConfigReceiverEmailConfigInput

func (GetObservabilityInstanceAlertConfigReceiverEmailConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverEmailConfigArray) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverEmailConfigArray) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput)
}

type GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return o
}

// SMTP authentication information. Must be a valid email address
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.AuthIdentity }).(pulumi.StringOutput)
}

// SMTP authentication password.
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.AuthPassword }).(pulumi.StringOutput)
}

// SMTP authentication username.
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) AuthUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.AuthUsername }).(pulumi.StringOutput)
}

// The sender email address. Must be a valid email address
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.From }).(pulumi.StringOutput)
}

// The SMTP host through which emails are sent.
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) SmartHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.SmartHost }).(pulumi.StringOutput)
}

// The email address to send notifications to. Must be a valid email address
func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverEmailConfig) string { return v.To }).(pulumi.StringOutput)
}

type GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverEmailConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput) Index(i pulumi.IntInput) GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityInstanceAlertConfigReceiverEmailConfig {
		return vs[0].([]GetObservabilityInstanceAlertConfigReceiverEmailConfig)[vs[1].(int)]
	}).(GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput)
}

type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig struct {
	// The API key for OpsGenie.
	ApiKey string `pulumi:"apiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	ApiUrl string `pulumi:"apiUrl"`
	// Comma separated list of tags attached to the notifications.
	Tags string `pulumi:"tags"`
}

// GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs and GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{...}
type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput
	ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput
}

type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs struct {
	// The API key for OpsGenie.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The host to send OpsGenie API requests to. Must be a valid URL
	ApiUrl pulumi.StringInput `pulumi:"apiUrl"`
	// Comma separated list of tags attached to the notifications.
	Tags pulumi.StringInput `pulumi:"tags"`
}

func (GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput)
}

// GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray and GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray{ GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{...} }
type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput
	ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput
}

type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray []GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput

func (GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput)
}

type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return o
}

// The API key for OpsGenie.
func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The host to send OpsGenie API requests to. Must be a valid URL
func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) ApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig) string { return v.ApiUrl }).(pulumi.StringOutput)
}

// Comma separated list of tags attached to the notifications.
func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput) Tags() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig) string { return v.Tags }).(pulumi.StringOutput)
}

type GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput) Index(i pulumi.IntInput) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig {
		return vs[0].([]GetObservabilityInstanceAlertConfigReceiverOpsgenieConfig)[vs[1].(int)]
	}).(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput)
}

type GetObservabilityInstanceAlertConfigReceiverWebhooksConfig struct {
	// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
	MsTeams bool `pulumi:"msTeams"`
	// The endpoint to send HTTP POST requests to. Must be a valid URL
	Url string `pulumi:"url"`
}

// GetObservabilityInstanceAlertConfigReceiverWebhooksConfigInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs and GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverWebhooksConfigInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{...}
type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput
	ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput
}

type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs struct {
	// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
	MsTeams pulumi.BoolInput `pulumi:"msTeams"`
	// The endpoint to send HTTP POST requests to. Must be a valid URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput)
}

// GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput is an input type that accepts GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray and GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput` via:
//
//	GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray{ GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{...} }
type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput
	ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput
}

type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray []GetObservabilityInstanceAlertConfigReceiverWebhooksConfigInput

func (GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return i.ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput)
}

type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return o
}

// Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.
func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) MsTeams() pulumi.BoolOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverWebhooksConfig) bool { return v.MsTeams }).(pulumi.BoolOutput)
}

// The endpoint to send HTTP POST requests to. Must be a valid URL
func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigReceiverWebhooksConfig) string { return v.Url }).(pulumi.StringOutput)
}

type GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigReceiverWebhooksConfig)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput() GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) ToGetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput) Index(i pulumi.IntInput) GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityInstanceAlertConfigReceiverWebhooksConfig {
		return vs[0].([]GetObservabilityInstanceAlertConfigReceiverWebhooksConfig)[vs[1].(int)]
	}).(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput)
}

type GetObservabilityInstanceAlertConfigRoute struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies []string `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval string `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.) .
	GroupWait string `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match map[string]string `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex map[string]string `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver string `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval string `pulumi:"repeatInterval"`
	// List of child routes.
	Routes []GetObservabilityInstanceAlertConfigRouteRoute `pulumi:"routes"`
}

// GetObservabilityInstanceAlertConfigRouteInput is an input type that accepts GetObservabilityInstanceAlertConfigRouteArgs and GetObservabilityInstanceAlertConfigRouteOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigRouteInput` via:
//
//	GetObservabilityInstanceAlertConfigRouteArgs{...}
type GetObservabilityInstanceAlertConfigRouteInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigRouteOutput() GetObservabilityInstanceAlertConfigRouteOutput
	ToGetObservabilityInstanceAlertConfigRouteOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigRouteOutput
}

type GetObservabilityInstanceAlertConfigRouteArgs struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval pulumi.StringInput `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.) .
	GroupWait pulumi.StringInput `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match pulumi.StringMapInput `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex pulumi.StringMapInput `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval pulumi.StringInput `pulumi:"repeatInterval"`
	// List of child routes.
	Routes GetObservabilityInstanceAlertConfigRouteRouteArrayInput `pulumi:"routes"`
}

func (GetObservabilityInstanceAlertConfigRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigRouteArgs) ToGetObservabilityInstanceAlertConfigRouteOutput() GetObservabilityInstanceAlertConfigRouteOutput {
	return i.ToGetObservabilityInstanceAlertConfigRouteOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigRouteArgs) ToGetObservabilityInstanceAlertConfigRouteOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigRouteOutput)
}

type GetObservabilityInstanceAlertConfigRouteOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigRoute)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigRouteOutput) ToGetObservabilityInstanceAlertConfigRouteOutput() GetObservabilityInstanceAlertConfigRouteOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigRouteOutput) ToGetObservabilityInstanceAlertConfigRouteOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteOutput {
	return o
}

// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
func (o GetObservabilityInstanceAlertConfigRouteOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
func (o GetObservabilityInstanceAlertConfigRouteOutput) GroupInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) string { return v.GroupInterval }).(pulumi.StringOutput)
}

// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.) .
func (o GetObservabilityInstanceAlertConfigRouteOutput) GroupWait() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) string { return v.GroupWait }).(pulumi.StringOutput)
}

// A set of equality matchers an alert has to fulfill to match the node.
func (o GetObservabilityInstanceAlertConfigRouteOutput) Match() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) map[string]string { return v.Match }).(pulumi.StringMapOutput)
}

// A set of regex-matchers an alert has to fulfill to match the node.
func (o GetObservabilityInstanceAlertConfigRouteOutput) MatchRegex() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) map[string]string { return v.MatchRegex }).(pulumi.StringMapOutput)
}

// The name of the receiver to route the alerts to.
func (o GetObservabilityInstanceAlertConfigRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
func (o GetObservabilityInstanceAlertConfigRouteOutput) RepeatInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) string { return v.RepeatInterval }).(pulumi.StringOutput)
}

// List of child routes.
func (o GetObservabilityInstanceAlertConfigRouteOutput) Routes() GetObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRoute) []GetObservabilityInstanceAlertConfigRouteRoute {
		return v.Routes
	}).(GetObservabilityInstanceAlertConfigRouteRouteArrayOutput)
}

type GetObservabilityInstanceAlertConfigRouteRoute struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies []string `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval string `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait string `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match map[string]string `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex map[string]string `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver string `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval string `pulumi:"repeatInterval"`
}

// GetObservabilityInstanceAlertConfigRouteRouteInput is an input type that accepts GetObservabilityInstanceAlertConfigRouteRouteArgs and GetObservabilityInstanceAlertConfigRouteRouteOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigRouteRouteInput` via:
//
//	GetObservabilityInstanceAlertConfigRouteRouteArgs{...}
type GetObservabilityInstanceAlertConfigRouteRouteInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigRouteRouteOutput() GetObservabilityInstanceAlertConfigRouteRouteOutput
	ToGetObservabilityInstanceAlertConfigRouteRouteOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigRouteRouteOutput
}

type GetObservabilityInstanceAlertConfigRouteRouteArgs struct {
	// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
	GroupInterval pulumi.StringInput `pulumi:"groupInterval"`
	// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
	GroupWait pulumi.StringInput `pulumi:"groupWait"`
	// A set of equality matchers an alert has to fulfill to match the node.
	Match pulumi.StringMapInput `pulumi:"match"`
	// A set of regex-matchers an alert has to fulfill to match the node.
	MatchRegex pulumi.StringMapInput `pulumi:"matchRegex"`
	// The name of the receiver to route the alerts to.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
	RepeatInterval pulumi.StringInput `pulumi:"repeatInterval"`
}

func (GetObservabilityInstanceAlertConfigRouteRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigRouteRouteArgs) ToGetObservabilityInstanceAlertConfigRouteRouteOutput() GetObservabilityInstanceAlertConfigRouteRouteOutput {
	return i.ToGetObservabilityInstanceAlertConfigRouteRouteOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigRouteRouteArgs) ToGetObservabilityInstanceAlertConfigRouteRouteOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigRouteRouteOutput)
}

// GetObservabilityInstanceAlertConfigRouteRouteArrayInput is an input type that accepts GetObservabilityInstanceAlertConfigRouteRouteArray and GetObservabilityInstanceAlertConfigRouteRouteArrayOutput values.
// You can construct a concrete instance of `GetObservabilityInstanceAlertConfigRouteRouteArrayInput` via:
//
//	GetObservabilityInstanceAlertConfigRouteRouteArray{ GetObservabilityInstanceAlertConfigRouteRouteArgs{...} }
type GetObservabilityInstanceAlertConfigRouteRouteArrayInput interface {
	pulumi.Input

	ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutput() GetObservabilityInstanceAlertConfigRouteRouteArrayOutput
	ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(context.Context) GetObservabilityInstanceAlertConfigRouteRouteArrayOutput
}

type GetObservabilityInstanceAlertConfigRouteRouteArray []GetObservabilityInstanceAlertConfigRouteRouteInput

func (GetObservabilityInstanceAlertConfigRouteRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (i GetObservabilityInstanceAlertConfigRouteRouteArray) ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutput() GetObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return i.ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(context.Background())
}

func (i GetObservabilityInstanceAlertConfigRouteRouteArray) ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityInstanceAlertConfigRouteRouteArrayOutput)
}

type GetObservabilityInstanceAlertConfigRouteRouteOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigRouteRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) ToGetObservabilityInstanceAlertConfigRouteRouteOutput() GetObservabilityInstanceAlertConfigRouteRouteOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) ToGetObservabilityInstanceAlertConfigRouteRouteOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteRouteOutput {
	return o
}

// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) GroupInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) string { return v.GroupInterval }).(pulumi.StringOutput)
}

// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) GroupWait() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) string { return v.GroupWait }).(pulumi.StringOutput)
}

// A set of equality matchers an alert has to fulfill to match the node.
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) Match() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) map[string]string { return v.Match }).(pulumi.StringMapOutput)
}

// A set of regex-matchers an alert has to fulfill to match the node.
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) MatchRegex() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) map[string]string { return v.MatchRegex }).(pulumi.StringMapOutput)
}

// The name of the receiver to route the alerts to.
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
func (o GetObservabilityInstanceAlertConfigRouteRouteOutput) RepeatInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityInstanceAlertConfigRouteRoute) string { return v.RepeatInterval }).(pulumi.StringOutput)
}

type GetObservabilityInstanceAlertConfigRouteRouteArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityInstanceAlertConfigRouteRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityInstanceAlertConfigRouteRoute)(nil)).Elem()
}

func (o GetObservabilityInstanceAlertConfigRouteRouteArrayOutput) ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutput() GetObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigRouteRouteArrayOutput) ToGetObservabilityInstanceAlertConfigRouteRouteArrayOutputWithContext(ctx context.Context) GetObservabilityInstanceAlertConfigRouteRouteArrayOutput {
	return o
}

func (o GetObservabilityInstanceAlertConfigRouteRouteArrayOutput) Index(i pulumi.IntInput) GetObservabilityInstanceAlertConfigRouteRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityInstanceAlertConfigRouteRoute {
		return vs[0].([]GetObservabilityInstanceAlertConfigRouteRoute)[vs[1].(int)]
	}).(GetObservabilityInstanceAlertConfigRouteRouteOutput)
}

type GetObservabilityLogalertgroupRule struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert string `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations map[string]string `pulumi:"annotations"`
	// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression string `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For string `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels map[string]string `pulumi:"labels"`
}

// GetObservabilityLogalertgroupRuleInput is an input type that accepts GetObservabilityLogalertgroupRuleArgs and GetObservabilityLogalertgroupRuleOutput values.
// You can construct a concrete instance of `GetObservabilityLogalertgroupRuleInput` via:
//
//	GetObservabilityLogalertgroupRuleArgs{...}
type GetObservabilityLogalertgroupRuleInput interface {
	pulumi.Input

	ToGetObservabilityLogalertgroupRuleOutput() GetObservabilityLogalertgroupRuleOutput
	ToGetObservabilityLogalertgroupRuleOutputWithContext(context.Context) GetObservabilityLogalertgroupRuleOutput
}

type GetObservabilityLogalertgroupRuleArgs struct {
	// The name of the alert rule. Is the identifier and must be unique in the group.
	Alert pulumi.StringInput `pulumi:"alert"`
	// A map of key:value. Annotations to add or overwrite for each alert
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
	For pulumi.StringInput `pulumi:"for"`
	// A map of key:value. Labels to add or overwrite for each alert
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (GetObservabilityLogalertgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityLogalertgroupRule)(nil)).Elem()
}

func (i GetObservabilityLogalertgroupRuleArgs) ToGetObservabilityLogalertgroupRuleOutput() GetObservabilityLogalertgroupRuleOutput {
	return i.ToGetObservabilityLogalertgroupRuleOutputWithContext(context.Background())
}

func (i GetObservabilityLogalertgroupRuleArgs) ToGetObservabilityLogalertgroupRuleOutputWithContext(ctx context.Context) GetObservabilityLogalertgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityLogalertgroupRuleOutput)
}

// GetObservabilityLogalertgroupRuleArrayInput is an input type that accepts GetObservabilityLogalertgroupRuleArray and GetObservabilityLogalertgroupRuleArrayOutput values.
// You can construct a concrete instance of `GetObservabilityLogalertgroupRuleArrayInput` via:
//
//	GetObservabilityLogalertgroupRuleArray{ GetObservabilityLogalertgroupRuleArgs{...} }
type GetObservabilityLogalertgroupRuleArrayInput interface {
	pulumi.Input

	ToGetObservabilityLogalertgroupRuleArrayOutput() GetObservabilityLogalertgroupRuleArrayOutput
	ToGetObservabilityLogalertgroupRuleArrayOutputWithContext(context.Context) GetObservabilityLogalertgroupRuleArrayOutput
}

type GetObservabilityLogalertgroupRuleArray []GetObservabilityLogalertgroupRuleInput

func (GetObservabilityLogalertgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityLogalertgroupRule)(nil)).Elem()
}

func (i GetObservabilityLogalertgroupRuleArray) ToGetObservabilityLogalertgroupRuleArrayOutput() GetObservabilityLogalertgroupRuleArrayOutput {
	return i.ToGetObservabilityLogalertgroupRuleArrayOutputWithContext(context.Background())
}

func (i GetObservabilityLogalertgroupRuleArray) ToGetObservabilityLogalertgroupRuleArrayOutputWithContext(ctx context.Context) GetObservabilityLogalertgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityLogalertgroupRuleArrayOutput)
}

type GetObservabilityLogalertgroupRuleOutput struct{ *pulumi.OutputState }

func (GetObservabilityLogalertgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityLogalertgroupRule)(nil)).Elem()
}

func (o GetObservabilityLogalertgroupRuleOutput) ToGetObservabilityLogalertgroupRuleOutput() GetObservabilityLogalertgroupRuleOutput {
	return o
}

func (o GetObservabilityLogalertgroupRuleOutput) ToGetObservabilityLogalertgroupRuleOutputWithContext(ctx context.Context) GetObservabilityLogalertgroupRuleOutput {
	return o
}

// The name of the alert rule. Is the identifier and must be unique in the group.
func (o GetObservabilityLogalertgroupRuleOutput) Alert() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityLogalertgroupRule) string { return v.Alert }).(pulumi.StringOutput)
}

// A map of key:value. Annotations to add or overwrite for each alert
func (o GetObservabilityLogalertgroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityLogalertgroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
func (o GetObservabilityLogalertgroupRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityLogalertgroupRule) string { return v.Expression }).(pulumi.StringOutput)
}

// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
func (o GetObservabilityLogalertgroupRuleOutput) For() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityLogalertgroupRule) string { return v.For }).(pulumi.StringOutput)
}

// A map of key:value. Labels to add or overwrite for each alert
func (o GetObservabilityLogalertgroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityLogalertgroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type GetObservabilityLogalertgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityLogalertgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityLogalertgroupRule)(nil)).Elem()
}

func (o GetObservabilityLogalertgroupRuleArrayOutput) ToGetObservabilityLogalertgroupRuleArrayOutput() GetObservabilityLogalertgroupRuleArrayOutput {
	return o
}

func (o GetObservabilityLogalertgroupRuleArrayOutput) ToGetObservabilityLogalertgroupRuleArrayOutputWithContext(ctx context.Context) GetObservabilityLogalertgroupRuleArrayOutput {
	return o
}

func (o GetObservabilityLogalertgroupRuleArrayOutput) Index(i pulumi.IntInput) GetObservabilityLogalertgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityLogalertgroupRule {
		return vs[0].([]GetObservabilityLogalertgroupRule)[vs[1].(int)]
	}).(GetObservabilityLogalertgroupRuleOutput)
}

type GetObservabilityScrapeconfigBasicAuth struct {
	// Specifies basic auth password.
	Password string `pulumi:"password"`
	// Specifies basic auth username.
	Username string `pulumi:"username"`
}

// GetObservabilityScrapeconfigBasicAuthInput is an input type that accepts GetObservabilityScrapeconfigBasicAuthArgs and GetObservabilityScrapeconfigBasicAuthOutput values.
// You can construct a concrete instance of `GetObservabilityScrapeconfigBasicAuthInput` via:
//
//	GetObservabilityScrapeconfigBasicAuthArgs{...}
type GetObservabilityScrapeconfigBasicAuthInput interface {
	pulumi.Input

	ToGetObservabilityScrapeconfigBasicAuthOutput() GetObservabilityScrapeconfigBasicAuthOutput
	ToGetObservabilityScrapeconfigBasicAuthOutputWithContext(context.Context) GetObservabilityScrapeconfigBasicAuthOutput
}

type GetObservabilityScrapeconfigBasicAuthArgs struct {
	// Specifies basic auth password.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies basic auth username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetObservabilityScrapeconfigBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (i GetObservabilityScrapeconfigBasicAuthArgs) ToGetObservabilityScrapeconfigBasicAuthOutput() GetObservabilityScrapeconfigBasicAuthOutput {
	return i.ToGetObservabilityScrapeconfigBasicAuthOutputWithContext(context.Background())
}

func (i GetObservabilityScrapeconfigBasicAuthArgs) ToGetObservabilityScrapeconfigBasicAuthOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityScrapeconfigBasicAuthOutput)
}

type GetObservabilityScrapeconfigBasicAuthOutput struct{ *pulumi.OutputState }

func (GetObservabilityScrapeconfigBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigBasicAuth)(nil)).Elem()
}

func (o GetObservabilityScrapeconfigBasicAuthOutput) ToGetObservabilityScrapeconfigBasicAuthOutput() GetObservabilityScrapeconfigBasicAuthOutput {
	return o
}

func (o GetObservabilityScrapeconfigBasicAuthOutput) ToGetObservabilityScrapeconfigBasicAuthOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigBasicAuthOutput {
	return o
}

// Specifies basic auth password.
func (o GetObservabilityScrapeconfigBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityScrapeconfigBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies basic auth username.
func (o GetObservabilityScrapeconfigBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetObservabilityScrapeconfigBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetObservabilityScrapeconfigSaml2 struct {
	// Specifies if URL parameters are enabled
	EnableUrlParameters bool `pulumi:"enableUrlParameters"`
}

// GetObservabilityScrapeconfigSaml2Input is an input type that accepts GetObservabilityScrapeconfigSaml2Args and GetObservabilityScrapeconfigSaml2Output values.
// You can construct a concrete instance of `GetObservabilityScrapeconfigSaml2Input` via:
//
//	GetObservabilityScrapeconfigSaml2Args{...}
type GetObservabilityScrapeconfigSaml2Input interface {
	pulumi.Input

	ToGetObservabilityScrapeconfigSaml2Output() GetObservabilityScrapeconfigSaml2Output
	ToGetObservabilityScrapeconfigSaml2OutputWithContext(context.Context) GetObservabilityScrapeconfigSaml2Output
}

type GetObservabilityScrapeconfigSaml2Args struct {
	// Specifies if URL parameters are enabled
	EnableUrlParameters pulumi.BoolInput `pulumi:"enableUrlParameters"`
}

func (GetObservabilityScrapeconfigSaml2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (i GetObservabilityScrapeconfigSaml2Args) ToGetObservabilityScrapeconfigSaml2Output() GetObservabilityScrapeconfigSaml2Output {
	return i.ToGetObservabilityScrapeconfigSaml2OutputWithContext(context.Background())
}

func (i GetObservabilityScrapeconfigSaml2Args) ToGetObservabilityScrapeconfigSaml2OutputWithContext(ctx context.Context) GetObservabilityScrapeconfigSaml2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityScrapeconfigSaml2Output)
}

type GetObservabilityScrapeconfigSaml2Output struct{ *pulumi.OutputState }

func (GetObservabilityScrapeconfigSaml2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigSaml2)(nil)).Elem()
}

func (o GetObservabilityScrapeconfigSaml2Output) ToGetObservabilityScrapeconfigSaml2Output() GetObservabilityScrapeconfigSaml2Output {
	return o
}

func (o GetObservabilityScrapeconfigSaml2Output) ToGetObservabilityScrapeconfigSaml2OutputWithContext(ctx context.Context) GetObservabilityScrapeconfigSaml2Output {
	return o
}

// Specifies if URL parameters are enabled
func (o GetObservabilityScrapeconfigSaml2Output) EnableUrlParameters() pulumi.BoolOutput {
	return o.ApplyT(func(v GetObservabilityScrapeconfigSaml2) bool { return v.EnableUrlParameters }).(pulumi.BoolOutput)
}

type GetObservabilityScrapeconfigTarget struct {
	// Specifies labels.
	Labels map[string]string `pulumi:"labels"`
	// Specifies target URLs.
	Urls []string `pulumi:"urls"`
}

// GetObservabilityScrapeconfigTargetInput is an input type that accepts GetObservabilityScrapeconfigTargetArgs and GetObservabilityScrapeconfigTargetOutput values.
// You can construct a concrete instance of `GetObservabilityScrapeconfigTargetInput` via:
//
//	GetObservabilityScrapeconfigTargetArgs{...}
type GetObservabilityScrapeconfigTargetInput interface {
	pulumi.Input

	ToGetObservabilityScrapeconfigTargetOutput() GetObservabilityScrapeconfigTargetOutput
	ToGetObservabilityScrapeconfigTargetOutputWithContext(context.Context) GetObservabilityScrapeconfigTargetOutput
}

type GetObservabilityScrapeconfigTargetArgs struct {
	// Specifies labels.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies target URLs.
	Urls pulumi.StringArrayInput `pulumi:"urls"`
}

func (GetObservabilityScrapeconfigTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (i GetObservabilityScrapeconfigTargetArgs) ToGetObservabilityScrapeconfigTargetOutput() GetObservabilityScrapeconfigTargetOutput {
	return i.ToGetObservabilityScrapeconfigTargetOutputWithContext(context.Background())
}

func (i GetObservabilityScrapeconfigTargetArgs) ToGetObservabilityScrapeconfigTargetOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityScrapeconfigTargetOutput)
}

// GetObservabilityScrapeconfigTargetArrayInput is an input type that accepts GetObservabilityScrapeconfigTargetArray and GetObservabilityScrapeconfigTargetArrayOutput values.
// You can construct a concrete instance of `GetObservabilityScrapeconfigTargetArrayInput` via:
//
//	GetObservabilityScrapeconfigTargetArray{ GetObservabilityScrapeconfigTargetArgs{...} }
type GetObservabilityScrapeconfigTargetArrayInput interface {
	pulumi.Input

	ToGetObservabilityScrapeconfigTargetArrayOutput() GetObservabilityScrapeconfigTargetArrayOutput
	ToGetObservabilityScrapeconfigTargetArrayOutputWithContext(context.Context) GetObservabilityScrapeconfigTargetArrayOutput
}

type GetObservabilityScrapeconfigTargetArray []GetObservabilityScrapeconfigTargetInput

func (GetObservabilityScrapeconfigTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (i GetObservabilityScrapeconfigTargetArray) ToGetObservabilityScrapeconfigTargetArrayOutput() GetObservabilityScrapeconfigTargetArrayOutput {
	return i.ToGetObservabilityScrapeconfigTargetArrayOutputWithContext(context.Background())
}

func (i GetObservabilityScrapeconfigTargetArray) ToGetObservabilityScrapeconfigTargetArrayOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObservabilityScrapeconfigTargetArrayOutput)
}

type GetObservabilityScrapeconfigTargetOutput struct{ *pulumi.OutputState }

func (GetObservabilityScrapeconfigTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (o GetObservabilityScrapeconfigTargetOutput) ToGetObservabilityScrapeconfigTargetOutput() GetObservabilityScrapeconfigTargetOutput {
	return o
}

func (o GetObservabilityScrapeconfigTargetOutput) ToGetObservabilityScrapeconfigTargetOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigTargetOutput {
	return o
}

// Specifies labels.
func (o GetObservabilityScrapeconfigTargetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetObservabilityScrapeconfigTarget) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies target URLs.
func (o GetObservabilityScrapeconfigTargetOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetObservabilityScrapeconfigTarget) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

type GetObservabilityScrapeconfigTargetArrayOutput struct{ *pulumi.OutputState }

func (GetObservabilityScrapeconfigTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObservabilityScrapeconfigTarget)(nil)).Elem()
}

func (o GetObservabilityScrapeconfigTargetArrayOutput) ToGetObservabilityScrapeconfigTargetArrayOutput() GetObservabilityScrapeconfigTargetArrayOutput {
	return o
}

func (o GetObservabilityScrapeconfigTargetArrayOutput) ToGetObservabilityScrapeconfigTargetArrayOutputWithContext(ctx context.Context) GetObservabilityScrapeconfigTargetArrayOutput {
	return o
}

func (o GetObservabilityScrapeconfigTargetArrayOutput) Index(i pulumi.IntInput) GetObservabilityScrapeconfigTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObservabilityScrapeconfigTarget {
		return vs[0].([]GetObservabilityScrapeconfigTarget)[vs[1].(int)]
	}).(GetObservabilityScrapeconfigTargetOutput)
}

type GetOpensearchInstanceParameters struct {
	// Enable monitoring.
	EnableMonitoring bool `pulumi:"enableMonitoring"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite string `pulumi:"graphite"`
	// The garbage collector to use for OpenSearch.
	JavaGarbageCollector string `pulumi:"javaGarbageCollector"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace int `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace int `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId string `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
	Plugins []string `pulumi:"plugins"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// The TLS protocol to use.
	TlsProtocols string `pulumi:"tlsProtocols"`
}

// GetOpensearchInstanceParametersInput is an input type that accepts GetOpensearchInstanceParametersArgs and GetOpensearchInstanceParametersOutput values.
// You can construct a concrete instance of `GetOpensearchInstanceParametersInput` via:
//
//	GetOpensearchInstanceParametersArgs{...}
type GetOpensearchInstanceParametersInput interface {
	pulumi.Input

	ToGetOpensearchInstanceParametersOutput() GetOpensearchInstanceParametersOutput
	ToGetOpensearchInstanceParametersOutputWithContext(context.Context) GetOpensearchInstanceParametersOutput
}

type GetOpensearchInstanceParametersArgs struct {
	// Enable monitoring.
	EnableMonitoring pulumi.BoolInput `pulumi:"enableMonitoring"`
	// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
	Graphite pulumi.StringInput `pulumi:"graphite"`
	// The garbage collector to use for OpenSearch.
	JavaGarbageCollector pulumi.StringInput `pulumi:"javaGarbageCollector"`
	// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
	JavaHeapspace pulumi.IntInput `pulumi:"javaHeapspace"`
	// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
	JavaMaxmetaspace pulumi.IntInput `pulumi:"javaMaxmetaspace"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted (in seconds).
	MetricsFrequency pulumi.IntInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
	MetricsPrefix pulumi.StringInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringInput `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
	Plugins pulumi.StringArrayInput `pulumi:"plugins"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// The TLS protocol to use.
	TlsProtocols pulumi.StringInput `pulumi:"tlsProtocols"`
}

func (GetOpensearchInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOpensearchInstanceParameters)(nil)).Elem()
}

func (i GetOpensearchInstanceParametersArgs) ToGetOpensearchInstanceParametersOutput() GetOpensearchInstanceParametersOutput {
	return i.ToGetOpensearchInstanceParametersOutputWithContext(context.Background())
}

func (i GetOpensearchInstanceParametersArgs) ToGetOpensearchInstanceParametersOutputWithContext(ctx context.Context) GetOpensearchInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOpensearchInstanceParametersOutput)
}

type GetOpensearchInstanceParametersOutput struct{ *pulumi.OutputState }

func (GetOpensearchInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOpensearchInstanceParameters)(nil)).Elem()
}

func (o GetOpensearchInstanceParametersOutput) ToGetOpensearchInstanceParametersOutput() GetOpensearchInstanceParametersOutput {
	return o
}

func (o GetOpensearchInstanceParametersOutput) ToGetOpensearchInstanceParametersOutputWithContext(ctx context.Context) GetOpensearchInstanceParametersOutput {
	return o
}

// Enable monitoring.
func (o GetOpensearchInstanceParametersOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
func (o GetOpensearchInstanceParametersOutput) Graphite() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.Graphite }).(pulumi.StringOutput)
}

// The garbage collector to use for OpenSearch.
func (o GetOpensearchInstanceParametersOutput) JavaGarbageCollector() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.JavaGarbageCollector }).(pulumi.StringOutput)
}

// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
func (o GetOpensearchInstanceParametersOutput) JavaHeapspace() pulumi.IntOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) int { return v.JavaHeapspace }).(pulumi.IntOutput)
}

// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
func (o GetOpensearchInstanceParametersOutput) JavaMaxmetaspace() pulumi.IntOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) int { return v.JavaMaxmetaspace }).(pulumi.IntOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o GetOpensearchInstanceParametersOutput) MaxDiskThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) int { return v.MaxDiskThreshold }).(pulumi.IntOutput)
}

// The frequency in seconds at which metrics are emitted (in seconds).
func (o GetOpensearchInstanceParametersOutput) MetricsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) int { return v.MetricsFrequency }).(pulumi.IntOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
func (o GetOpensearchInstanceParametersOutput) MetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.MetricsPrefix }).(pulumi.StringOutput)
}

// The ID of the STACKIT monitoring instance.
func (o GetOpensearchInstanceParametersOutput) MonitoringInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.MonitoringInstanceId }).(pulumi.StringOutput)
}

// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
func (o GetOpensearchInstanceParametersOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) []string { return v.Plugins }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o GetOpensearchInstanceParametersOutput) SgwAcl() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.SgwAcl }).(pulumi.StringOutput)
}

// List of syslog servers to send logs to.
func (o GetOpensearchInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o GetOpensearchInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// The TLS protocol to use.
func (o GetOpensearchInstanceParametersOutput) TlsProtocols() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchInstanceParameters) string { return v.TlsProtocols }).(pulumi.StringOutput)
}

type GetPostgresflexInstanceFlavor struct {
	Cpu         int    `pulumi:"cpu"`
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Ram         int    `pulumi:"ram"`
}

// GetPostgresflexInstanceFlavorInput is an input type that accepts GetPostgresflexInstanceFlavorArgs and GetPostgresflexInstanceFlavorOutput values.
// You can construct a concrete instance of `GetPostgresflexInstanceFlavorInput` via:
//
//	GetPostgresflexInstanceFlavorArgs{...}
type GetPostgresflexInstanceFlavorInput interface {
	pulumi.Input

	ToGetPostgresflexInstanceFlavorOutput() GetPostgresflexInstanceFlavorOutput
	ToGetPostgresflexInstanceFlavorOutputWithContext(context.Context) GetPostgresflexInstanceFlavorOutput
}

type GetPostgresflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput    `pulumi:"cpu"`
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.StringInput `pulumi:"id"`
	Ram         pulumi.IntInput    `pulumi:"ram"`
}

func (GetPostgresflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPostgresflexInstanceFlavor)(nil)).Elem()
}

func (i GetPostgresflexInstanceFlavorArgs) ToGetPostgresflexInstanceFlavorOutput() GetPostgresflexInstanceFlavorOutput {
	return i.ToGetPostgresflexInstanceFlavorOutputWithContext(context.Background())
}

func (i GetPostgresflexInstanceFlavorArgs) ToGetPostgresflexInstanceFlavorOutputWithContext(ctx context.Context) GetPostgresflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPostgresflexInstanceFlavorOutput)
}

type GetPostgresflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (GetPostgresflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPostgresflexInstanceFlavor)(nil)).Elem()
}

func (o GetPostgresflexInstanceFlavorOutput) ToGetPostgresflexInstanceFlavorOutput() GetPostgresflexInstanceFlavorOutput {
	return o
}

func (o GetPostgresflexInstanceFlavorOutput) ToGetPostgresflexInstanceFlavorOutputWithContext(ctx context.Context) GetPostgresflexInstanceFlavorOutput {
	return o
}

func (o GetPostgresflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o GetPostgresflexInstanceFlavorOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceFlavor) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetPostgresflexInstanceFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceFlavor) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPostgresflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type GetPostgresflexInstanceStorage struct {
	Class string `pulumi:"class"`
	Size  int    `pulumi:"size"`
}

// GetPostgresflexInstanceStorageInput is an input type that accepts GetPostgresflexInstanceStorageArgs and GetPostgresflexInstanceStorageOutput values.
// You can construct a concrete instance of `GetPostgresflexInstanceStorageInput` via:
//
//	GetPostgresflexInstanceStorageArgs{...}
type GetPostgresflexInstanceStorageInput interface {
	pulumi.Input

	ToGetPostgresflexInstanceStorageOutput() GetPostgresflexInstanceStorageOutput
	ToGetPostgresflexInstanceStorageOutputWithContext(context.Context) GetPostgresflexInstanceStorageOutput
}

type GetPostgresflexInstanceStorageArgs struct {
	Class pulumi.StringInput `pulumi:"class"`
	Size  pulumi.IntInput    `pulumi:"size"`
}

func (GetPostgresflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPostgresflexInstanceStorage)(nil)).Elem()
}

func (i GetPostgresflexInstanceStorageArgs) ToGetPostgresflexInstanceStorageOutput() GetPostgresflexInstanceStorageOutput {
	return i.ToGetPostgresflexInstanceStorageOutputWithContext(context.Background())
}

func (i GetPostgresflexInstanceStorageArgs) ToGetPostgresflexInstanceStorageOutputWithContext(ctx context.Context) GetPostgresflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPostgresflexInstanceStorageOutput)
}

type GetPostgresflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (GetPostgresflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPostgresflexInstanceStorage)(nil)).Elem()
}

func (o GetPostgresflexInstanceStorageOutput) ToGetPostgresflexInstanceStorageOutput() GetPostgresflexInstanceStorageOutput {
	return o
}

func (o GetPostgresflexInstanceStorageOutput) ToGetPostgresflexInstanceStorageOutputWithContext(ctx context.Context) GetPostgresflexInstanceStorageOutput {
	return o
}

func (o GetPostgresflexInstanceStorageOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceStorage) string { return v.Class }).(pulumi.StringOutput)
}

func (o GetPostgresflexInstanceStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetPostgresflexInstanceStorage) int { return v.Size }).(pulumi.IntOutput)
}

type GetPublicIpRangesPublicIpRange struct {
	// Classless Inter-Domain Routing (CIDR)
	Cidr string `pulumi:"cidr"`
}

// GetPublicIpRangesPublicIpRangeInput is an input type that accepts GetPublicIpRangesPublicIpRangeArgs and GetPublicIpRangesPublicIpRangeOutput values.
// You can construct a concrete instance of `GetPublicIpRangesPublicIpRangeInput` via:
//
//	GetPublicIpRangesPublicIpRangeArgs{...}
type GetPublicIpRangesPublicIpRangeInput interface {
	pulumi.Input

	ToGetPublicIpRangesPublicIpRangeOutput() GetPublicIpRangesPublicIpRangeOutput
	ToGetPublicIpRangesPublicIpRangeOutputWithContext(context.Context) GetPublicIpRangesPublicIpRangeOutput
}

type GetPublicIpRangesPublicIpRangeArgs struct {
	// Classless Inter-Domain Routing (CIDR)
	Cidr pulumi.StringInput `pulumi:"cidr"`
}

func (GetPublicIpRangesPublicIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIpRangesPublicIpRange)(nil)).Elem()
}

func (i GetPublicIpRangesPublicIpRangeArgs) ToGetPublicIpRangesPublicIpRangeOutput() GetPublicIpRangesPublicIpRangeOutput {
	return i.ToGetPublicIpRangesPublicIpRangeOutputWithContext(context.Background())
}

func (i GetPublicIpRangesPublicIpRangeArgs) ToGetPublicIpRangesPublicIpRangeOutputWithContext(ctx context.Context) GetPublicIpRangesPublicIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicIpRangesPublicIpRangeOutput)
}

// GetPublicIpRangesPublicIpRangeArrayInput is an input type that accepts GetPublicIpRangesPublicIpRangeArray and GetPublicIpRangesPublicIpRangeArrayOutput values.
// You can construct a concrete instance of `GetPublicIpRangesPublicIpRangeArrayInput` via:
//
//	GetPublicIpRangesPublicIpRangeArray{ GetPublicIpRangesPublicIpRangeArgs{...} }
type GetPublicIpRangesPublicIpRangeArrayInput interface {
	pulumi.Input

	ToGetPublicIpRangesPublicIpRangeArrayOutput() GetPublicIpRangesPublicIpRangeArrayOutput
	ToGetPublicIpRangesPublicIpRangeArrayOutputWithContext(context.Context) GetPublicIpRangesPublicIpRangeArrayOutput
}

type GetPublicIpRangesPublicIpRangeArray []GetPublicIpRangesPublicIpRangeInput

func (GetPublicIpRangesPublicIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicIpRangesPublicIpRange)(nil)).Elem()
}

func (i GetPublicIpRangesPublicIpRangeArray) ToGetPublicIpRangesPublicIpRangeArrayOutput() GetPublicIpRangesPublicIpRangeArrayOutput {
	return i.ToGetPublicIpRangesPublicIpRangeArrayOutputWithContext(context.Background())
}

func (i GetPublicIpRangesPublicIpRangeArray) ToGetPublicIpRangesPublicIpRangeArrayOutputWithContext(ctx context.Context) GetPublicIpRangesPublicIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicIpRangesPublicIpRangeArrayOutput)
}

type GetPublicIpRangesPublicIpRangeOutput struct{ *pulumi.OutputState }

func (GetPublicIpRangesPublicIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIpRangesPublicIpRange)(nil)).Elem()
}

func (o GetPublicIpRangesPublicIpRangeOutput) ToGetPublicIpRangesPublicIpRangeOutput() GetPublicIpRangesPublicIpRangeOutput {
	return o
}

func (o GetPublicIpRangesPublicIpRangeOutput) ToGetPublicIpRangesPublicIpRangeOutputWithContext(ctx context.Context) GetPublicIpRangesPublicIpRangeOutput {
	return o
}

// Classless Inter-Domain Routing (CIDR)
func (o GetPublicIpRangesPublicIpRangeOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIpRangesPublicIpRange) string { return v.Cidr }).(pulumi.StringOutput)
}

type GetPublicIpRangesPublicIpRangeArrayOutput struct{ *pulumi.OutputState }

func (GetPublicIpRangesPublicIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicIpRangesPublicIpRange)(nil)).Elem()
}

func (o GetPublicIpRangesPublicIpRangeArrayOutput) ToGetPublicIpRangesPublicIpRangeArrayOutput() GetPublicIpRangesPublicIpRangeArrayOutput {
	return o
}

func (o GetPublicIpRangesPublicIpRangeArrayOutput) ToGetPublicIpRangesPublicIpRangeArrayOutputWithContext(ctx context.Context) GetPublicIpRangesPublicIpRangeArrayOutput {
	return o
}

func (o GetPublicIpRangesPublicIpRangeArrayOutput) Index(i pulumi.IntInput) GetPublicIpRangesPublicIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicIpRangesPublicIpRange {
		return vs[0].([]GetPublicIpRangesPublicIpRange)[vs[1].(int)]
	}).(GetPublicIpRangesPublicIpRangeOutput)
}

type GetRabbitmqInstanceParameters struct {
	// The timeout in milliseconds for the consumer.
	ConsumerTimeout int `pulumi:"consumerTimeout"`
	// Enable monitoring.
	EnableMonitoring bool `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite string `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold int `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix string `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId string `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name.
	Plugins []string `pulumi:"plugins"`
	// List of roles to assign to the instance.
	Roles []string `pulumi:"roles"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl string `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// TLS protocol to use.
	TlsProtocols string `pulumi:"tlsProtocols"`
}

// GetRabbitmqInstanceParametersInput is an input type that accepts GetRabbitmqInstanceParametersArgs and GetRabbitmqInstanceParametersOutput values.
// You can construct a concrete instance of `GetRabbitmqInstanceParametersInput` via:
//
//	GetRabbitmqInstanceParametersArgs{...}
type GetRabbitmqInstanceParametersInput interface {
	pulumi.Input

	ToGetRabbitmqInstanceParametersOutput() GetRabbitmqInstanceParametersOutput
	ToGetRabbitmqInstanceParametersOutputWithContext(context.Context) GetRabbitmqInstanceParametersOutput
}

type GetRabbitmqInstanceParametersArgs struct {
	// The timeout in milliseconds for the consumer.
	ConsumerTimeout pulumi.IntInput `pulumi:"consumerTimeout"`
	// Enable monitoring.
	EnableMonitoring pulumi.BoolInput `pulumi:"enableMonitoring"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite pulumi.StringInput `pulumi:"graphite"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntInput `pulumi:"maxDiskThreshold"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringInput `pulumi:"metricsPrefix"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringInput `pulumi:"monitoringInstanceId"`
	// List of plugins to install. Must be a supported plugin name.
	Plugins pulumi.StringArrayInput `pulumi:"plugins"`
	// List of roles to assign to the instance.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringInput `pulumi:"sgwAcl"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// TLS protocol to use.
	TlsProtocols pulumi.StringInput `pulumi:"tlsProtocols"`
}

func (GetRabbitmqInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRabbitmqInstanceParameters)(nil)).Elem()
}

func (i GetRabbitmqInstanceParametersArgs) ToGetRabbitmqInstanceParametersOutput() GetRabbitmqInstanceParametersOutput {
	return i.ToGetRabbitmqInstanceParametersOutputWithContext(context.Background())
}

func (i GetRabbitmqInstanceParametersArgs) ToGetRabbitmqInstanceParametersOutputWithContext(ctx context.Context) GetRabbitmqInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRabbitmqInstanceParametersOutput)
}

type GetRabbitmqInstanceParametersOutput struct{ *pulumi.OutputState }

func (GetRabbitmqInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRabbitmqInstanceParameters)(nil)).Elem()
}

func (o GetRabbitmqInstanceParametersOutput) ToGetRabbitmqInstanceParametersOutput() GetRabbitmqInstanceParametersOutput {
	return o
}

func (o GetRabbitmqInstanceParametersOutput) ToGetRabbitmqInstanceParametersOutputWithContext(ctx context.Context) GetRabbitmqInstanceParametersOutput {
	return o
}

// The timeout in milliseconds for the consumer.
func (o GetRabbitmqInstanceParametersOutput) ConsumerTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) int { return v.ConsumerTimeout }).(pulumi.IntOutput)
}

// Enable monitoring.
func (o GetRabbitmqInstanceParametersOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o GetRabbitmqInstanceParametersOutput) Graphite() pulumi.StringOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) string { return v.Graphite }).(pulumi.StringOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o GetRabbitmqInstanceParametersOutput) MaxDiskThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) int { return v.MaxDiskThreshold }).(pulumi.IntOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o GetRabbitmqInstanceParametersOutput) MetricsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) int { return v.MetricsFrequency }).(pulumi.IntOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o GetRabbitmqInstanceParametersOutput) MetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) string { return v.MetricsPrefix }).(pulumi.StringOutput)
}

// The ID of the STACKIT monitoring instance.
func (o GetRabbitmqInstanceParametersOutput) MonitoringInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) string { return v.MonitoringInstanceId }).(pulumi.StringOutput)
}

// List of plugins to install. Must be a supported plugin name.
func (o GetRabbitmqInstanceParametersOutput) Plugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) []string { return v.Plugins }).(pulumi.StringArrayOutput)
}

// List of roles to assign to the instance.
func (o GetRabbitmqInstanceParametersOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o GetRabbitmqInstanceParametersOutput) SgwAcl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) string { return v.SgwAcl }).(pulumi.StringOutput)
}

// List of syslog servers to send logs to.
func (o GetRabbitmqInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o GetRabbitmqInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// TLS protocol to use.
func (o GetRabbitmqInstanceParametersOutput) TlsProtocols() pulumi.StringOutput {
	return o.ApplyT(func(v GetRabbitmqInstanceParameters) string { return v.TlsProtocols }).(pulumi.StringOutput)
}

type GetRedisInstanceParameters struct {
	// The number of milliseconds after which the instance is considered down.
	DownAfterMilliseconds int `pulumi:"downAfterMilliseconds"`
	// Enable monitoring.
	EnableMonitoring bool `pulumi:"enableMonitoring"`
	// The failover timeout in milliseconds.
	FailoverTimeout int `pulumi:"failoverTimeout"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite string `pulumi:"graphite"`
	// The lazy eviction enablement (yes or no).
	LazyfreeLazyEviction string `pulumi:"lazyfreeLazyEviction"`
	// The lazy expire enablement (yes or no).
	LazyfreeLazyExpire string `pulumi:"lazyfreeLazyExpire"`
	// The Lua time limit.
	LuaTimeLimit int `pulumi:"luaTimeLimit"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold int `pulumi:"maxDiskThreshold"`
	// The maximum number of clients.
	Maxclients int `pulumi:"maxclients"`
	// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
	MaxmemoryPolicy string `pulumi:"maxmemoryPolicy"`
	// The maximum memory samples.
	MaxmemorySamples int `pulumi:"maxmemorySamples"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency int `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix string `pulumi:"metricsPrefix"`
	// The minimum replicas maximum lag.
	MinReplicasMaxLag int `pulumi:"minReplicasMaxLag"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId string `pulumi:"monitoringInstanceId"`
	// The notify keyspace events.
	NotifyKeyspaceEvents string `pulumi:"notifyKeyspaceEvents"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl string `pulumi:"sgwAcl"`
	// The snapshot configuration.
	Snapshot string `pulumi:"snapshot"`
	// List of syslog servers to send logs to.
	Syslogs []string `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// TLS cipher suites to use.
	TlsCiphersuites string `pulumi:"tlsCiphersuites"`
	// TLS protocol to use.
	TlsProtocols string `pulumi:"tlsProtocols"`
}

// GetRedisInstanceParametersInput is an input type that accepts GetRedisInstanceParametersArgs and GetRedisInstanceParametersOutput values.
// You can construct a concrete instance of `GetRedisInstanceParametersInput` via:
//
//	GetRedisInstanceParametersArgs{...}
type GetRedisInstanceParametersInput interface {
	pulumi.Input

	ToGetRedisInstanceParametersOutput() GetRedisInstanceParametersOutput
	ToGetRedisInstanceParametersOutputWithContext(context.Context) GetRedisInstanceParametersOutput
}

type GetRedisInstanceParametersArgs struct {
	// The number of milliseconds after which the instance is considered down.
	DownAfterMilliseconds pulumi.IntInput `pulumi:"downAfterMilliseconds"`
	// Enable monitoring.
	EnableMonitoring pulumi.BoolInput `pulumi:"enableMonitoring"`
	// The failover timeout in milliseconds.
	FailoverTimeout pulumi.IntInput `pulumi:"failoverTimeout"`
	// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
	Graphite pulumi.StringInput `pulumi:"graphite"`
	// The lazy eviction enablement (yes or no).
	LazyfreeLazyEviction pulumi.StringInput `pulumi:"lazyfreeLazyEviction"`
	// The lazy expire enablement (yes or no).
	LazyfreeLazyExpire pulumi.StringInput `pulumi:"lazyfreeLazyExpire"`
	// The Lua time limit.
	LuaTimeLimit pulumi.IntInput `pulumi:"luaTimeLimit"`
	// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
	MaxDiskThreshold pulumi.IntInput `pulumi:"maxDiskThreshold"`
	// The maximum number of clients.
	Maxclients pulumi.IntInput `pulumi:"maxclients"`
	// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
	MaxmemoryPolicy pulumi.StringInput `pulumi:"maxmemoryPolicy"`
	// The maximum memory samples.
	MaxmemorySamples pulumi.IntInput `pulumi:"maxmemorySamples"`
	// The frequency in seconds at which metrics are emitted.
	MetricsFrequency pulumi.IntInput `pulumi:"metricsFrequency"`
	// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
	MetricsPrefix pulumi.StringInput `pulumi:"metricsPrefix"`
	// The minimum replicas maximum lag.
	MinReplicasMaxLag pulumi.IntInput `pulumi:"minReplicasMaxLag"`
	// The ID of the STACKIT monitoring instance.
	MonitoringInstanceId pulumi.StringInput `pulumi:"monitoringInstanceId"`
	// The notify keyspace events.
	NotifyKeyspaceEvents pulumi.StringInput `pulumi:"notifyKeyspaceEvents"`
	// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
	SgwAcl pulumi.StringInput `pulumi:"sgwAcl"`
	// The snapshot configuration.
	Snapshot pulumi.StringInput `pulumi:"snapshot"`
	// List of syslog servers to send logs to.
	Syslogs pulumi.StringArrayInput `pulumi:"syslogs"`
	// List of TLS ciphers to use.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// TLS cipher suites to use.
	TlsCiphersuites pulumi.StringInput `pulumi:"tlsCiphersuites"`
	// TLS protocol to use.
	TlsProtocols pulumi.StringInput `pulumi:"tlsProtocols"`
}

func (GetRedisInstanceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisInstanceParameters)(nil)).Elem()
}

func (i GetRedisInstanceParametersArgs) ToGetRedisInstanceParametersOutput() GetRedisInstanceParametersOutput {
	return i.ToGetRedisInstanceParametersOutputWithContext(context.Background())
}

func (i GetRedisInstanceParametersArgs) ToGetRedisInstanceParametersOutputWithContext(ctx context.Context) GetRedisInstanceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRedisInstanceParametersOutput)
}

type GetRedisInstanceParametersOutput struct{ *pulumi.OutputState }

func (GetRedisInstanceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRedisInstanceParameters)(nil)).Elem()
}

func (o GetRedisInstanceParametersOutput) ToGetRedisInstanceParametersOutput() GetRedisInstanceParametersOutput {
	return o
}

func (o GetRedisInstanceParametersOutput) ToGetRedisInstanceParametersOutputWithContext(ctx context.Context) GetRedisInstanceParametersOutput {
	return o
}

// The number of milliseconds after which the instance is considered down.
func (o GetRedisInstanceParametersOutput) DownAfterMilliseconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.DownAfterMilliseconds }).(pulumi.IntOutput)
}

// Enable monitoring.
func (o GetRedisInstanceParametersOutput) EnableMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) bool { return v.EnableMonitoring }).(pulumi.BoolOutput)
}

// The failover timeout in milliseconds.
func (o GetRedisInstanceParametersOutput) FailoverTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.FailoverTimeout }).(pulumi.IntOutput)
}

// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
func (o GetRedisInstanceParametersOutput) Graphite() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.Graphite }).(pulumi.StringOutput)
}

// The lazy eviction enablement (yes or no).
func (o GetRedisInstanceParametersOutput) LazyfreeLazyEviction() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.LazyfreeLazyEviction }).(pulumi.StringOutput)
}

// The lazy expire enablement (yes or no).
func (o GetRedisInstanceParametersOutput) LazyfreeLazyExpire() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.LazyfreeLazyExpire }).(pulumi.StringOutput)
}

// The Lua time limit.
func (o GetRedisInstanceParametersOutput) LuaTimeLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.LuaTimeLimit }).(pulumi.IntOutput)
}

// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
func (o GetRedisInstanceParametersOutput) MaxDiskThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.MaxDiskThreshold }).(pulumi.IntOutput)
}

// The maximum number of clients.
func (o GetRedisInstanceParametersOutput) Maxclients() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.Maxclients }).(pulumi.IntOutput)
}

// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
func (o GetRedisInstanceParametersOutput) MaxmemoryPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.MaxmemoryPolicy }).(pulumi.StringOutput)
}

// The maximum memory samples.
func (o GetRedisInstanceParametersOutput) MaxmemorySamples() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.MaxmemorySamples }).(pulumi.IntOutput)
}

// The frequency in seconds at which metrics are emitted.
func (o GetRedisInstanceParametersOutput) MetricsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.MetricsFrequency }).(pulumi.IntOutput)
}

// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
func (o GetRedisInstanceParametersOutput) MetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.MetricsPrefix }).(pulumi.StringOutput)
}

// The minimum replicas maximum lag.
func (o GetRedisInstanceParametersOutput) MinReplicasMaxLag() pulumi.IntOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) int { return v.MinReplicasMaxLag }).(pulumi.IntOutput)
}

// The ID of the STACKIT monitoring instance.
func (o GetRedisInstanceParametersOutput) MonitoringInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.MonitoringInstanceId }).(pulumi.StringOutput)
}

// The notify keyspace events.
func (o GetRedisInstanceParametersOutput) NotifyKeyspaceEvents() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.NotifyKeyspaceEvents }).(pulumi.StringOutput)
}

// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
func (o GetRedisInstanceParametersOutput) SgwAcl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.SgwAcl }).(pulumi.StringOutput)
}

// The snapshot configuration.
func (o GetRedisInstanceParametersOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.Snapshot }).(pulumi.StringOutput)
}

// List of syslog servers to send logs to.
func (o GetRedisInstanceParametersOutput) Syslogs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) []string { return v.Syslogs }).(pulumi.StringArrayOutput)
}

// List of TLS ciphers to use.
func (o GetRedisInstanceParametersOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// TLS cipher suites to use.
func (o GetRedisInstanceParametersOutput) TlsCiphersuites() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.TlsCiphersuites }).(pulumi.StringOutput)
}

// TLS protocol to use.
func (o GetRedisInstanceParametersOutput) TlsProtocols() pulumi.StringOutput {
	return o.ApplyT(func(v GetRedisInstanceParameters) string { return v.TlsProtocols }).(pulumi.StringOutput)
}

type GetRoutingTableRouteDestination struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type string `pulumi:"type"`
	// An CIDR string.
	Value string `pulumi:"value"`
}

// GetRoutingTableRouteDestinationInput is an input type that accepts GetRoutingTableRouteDestinationArgs and GetRoutingTableRouteDestinationOutput values.
// You can construct a concrete instance of `GetRoutingTableRouteDestinationInput` via:
//
//	GetRoutingTableRouteDestinationArgs{...}
type GetRoutingTableRouteDestinationInput interface {
	pulumi.Input

	ToGetRoutingTableRouteDestinationOutput() GetRoutingTableRouteDestinationOutput
	ToGetRoutingTableRouteDestinationOutputWithContext(context.Context) GetRoutingTableRouteDestinationOutput
}

type GetRoutingTableRouteDestinationArgs struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type pulumi.StringInput `pulumi:"type"`
	// An CIDR string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRoutingTableRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRouteDestination)(nil)).Elem()
}

func (i GetRoutingTableRouteDestinationArgs) ToGetRoutingTableRouteDestinationOutput() GetRoutingTableRouteDestinationOutput {
	return i.ToGetRoutingTableRouteDestinationOutputWithContext(context.Background())
}

func (i GetRoutingTableRouteDestinationArgs) ToGetRoutingTableRouteDestinationOutputWithContext(ctx context.Context) GetRoutingTableRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRouteDestinationOutput)
}

type GetRoutingTableRouteDestinationOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRouteDestination)(nil)).Elem()
}

func (o GetRoutingTableRouteDestinationOutput) ToGetRoutingTableRouteDestinationOutput() GetRoutingTableRouteDestinationOutput {
	return o
}

func (o GetRoutingTableRouteDestinationOutput) ToGetRoutingTableRouteDestinationOutputWithContext(ctx context.Context) GetRoutingTableRouteDestinationOutput {
	return o
}

// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
func (o GetRoutingTableRouteDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRouteDestination) string { return v.Type }).(pulumi.StringOutput)
}

// An CIDR string.
func (o GetRoutingTableRouteDestinationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRouteDestination) string { return v.Value }).(pulumi.StringOutput)
}

type GetRoutingTableRouteNextHop struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type string `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value string `pulumi:"value"`
}

// GetRoutingTableRouteNextHopInput is an input type that accepts GetRoutingTableRouteNextHopArgs and GetRoutingTableRouteNextHopOutput values.
// You can construct a concrete instance of `GetRoutingTableRouteNextHopInput` via:
//
//	GetRoutingTableRouteNextHopArgs{...}
type GetRoutingTableRouteNextHopInput interface {
	pulumi.Input

	ToGetRoutingTableRouteNextHopOutput() GetRoutingTableRouteNextHopOutput
	ToGetRoutingTableRouteNextHopOutputWithContext(context.Context) GetRoutingTableRouteNextHopOutput
}

type GetRoutingTableRouteNextHopArgs struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type pulumi.StringInput `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRoutingTableRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRouteNextHop)(nil)).Elem()
}

func (i GetRoutingTableRouteNextHopArgs) ToGetRoutingTableRouteNextHopOutput() GetRoutingTableRouteNextHopOutput {
	return i.ToGetRoutingTableRouteNextHopOutputWithContext(context.Background())
}

func (i GetRoutingTableRouteNextHopArgs) ToGetRoutingTableRouteNextHopOutputWithContext(ctx context.Context) GetRoutingTableRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRouteNextHopOutput)
}

type GetRoutingTableRouteNextHopOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRouteNextHop)(nil)).Elem()
}

func (o GetRoutingTableRouteNextHopOutput) ToGetRoutingTableRouteNextHopOutput() GetRoutingTableRouteNextHopOutput {
	return o
}

func (o GetRoutingTableRouteNextHopOutput) ToGetRoutingTableRouteNextHopOutputWithContext(ctx context.Context) GetRoutingTableRouteNextHopOutput {
	return o
}

// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
func (o GetRoutingTableRouteNextHopOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRouteNextHop) string { return v.Type }).(pulumi.StringOutput)
}

// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
func (o GetRoutingTableRouteNextHopOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRouteNextHop) string { return v.Value }).(pulumi.StringOutput)
}

type GetRoutingTableRoutesRoute struct {
	// Date-time when the route was created
	CreatedAt string `pulumi:"createdAt"`
	// Destination of the route.
	Destination GetRoutingTableRoutesRouteDestination `pulumi:"destination"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// Next hop destination.
	NextHop GetRoutingTableRoutesRouteNextHop `pulumi:"nextHop"`
	// Route ID.
	RouteId string `pulumi:"routeId"`
	// Date-time when the route was updated
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetRoutingTableRoutesRouteInput is an input type that accepts GetRoutingTableRoutesRouteArgs and GetRoutingTableRoutesRouteOutput values.
// You can construct a concrete instance of `GetRoutingTableRoutesRouteInput` via:
//
//	GetRoutingTableRoutesRouteArgs{...}
type GetRoutingTableRoutesRouteInput interface {
	pulumi.Input

	ToGetRoutingTableRoutesRouteOutput() GetRoutingTableRoutesRouteOutput
	ToGetRoutingTableRoutesRouteOutputWithContext(context.Context) GetRoutingTableRoutesRouteOutput
}

type GetRoutingTableRoutesRouteArgs struct {
	// Date-time when the route was created
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Destination of the route.
	Destination GetRoutingTableRoutesRouteDestinationInput `pulumi:"destination"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Next hop destination.
	NextHop GetRoutingTableRoutesRouteNextHopInput `pulumi:"nextHop"`
	// Route ID.
	RouteId pulumi.StringInput `pulumi:"routeId"`
	// Date-time when the route was updated
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetRoutingTableRoutesRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRoute)(nil)).Elem()
}

func (i GetRoutingTableRoutesRouteArgs) ToGetRoutingTableRoutesRouteOutput() GetRoutingTableRoutesRouteOutput {
	return i.ToGetRoutingTableRoutesRouteOutputWithContext(context.Background())
}

func (i GetRoutingTableRoutesRouteArgs) ToGetRoutingTableRoutesRouteOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRoutesRouteOutput)
}

// GetRoutingTableRoutesRouteArrayInput is an input type that accepts GetRoutingTableRoutesRouteArray and GetRoutingTableRoutesRouteArrayOutput values.
// You can construct a concrete instance of `GetRoutingTableRoutesRouteArrayInput` via:
//
//	GetRoutingTableRoutesRouteArray{ GetRoutingTableRoutesRouteArgs{...} }
type GetRoutingTableRoutesRouteArrayInput interface {
	pulumi.Input

	ToGetRoutingTableRoutesRouteArrayOutput() GetRoutingTableRoutesRouteArrayOutput
	ToGetRoutingTableRoutesRouteArrayOutputWithContext(context.Context) GetRoutingTableRoutesRouteArrayOutput
}

type GetRoutingTableRoutesRouteArray []GetRoutingTableRoutesRouteInput

func (GetRoutingTableRoutesRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutingTableRoutesRoute)(nil)).Elem()
}

func (i GetRoutingTableRoutesRouteArray) ToGetRoutingTableRoutesRouteArrayOutput() GetRoutingTableRoutesRouteArrayOutput {
	return i.ToGetRoutingTableRoutesRouteArrayOutputWithContext(context.Background())
}

func (i GetRoutingTableRoutesRouteArray) ToGetRoutingTableRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRoutesRouteArrayOutput)
}

type GetRoutingTableRoutesRouteOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRoutesRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRoute)(nil)).Elem()
}

func (o GetRoutingTableRoutesRouteOutput) ToGetRoutingTableRoutesRouteOutput() GetRoutingTableRoutesRouteOutput {
	return o
}

func (o GetRoutingTableRoutesRouteOutput) ToGetRoutingTableRoutesRouteOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteOutput {
	return o
}

// Date-time when the route was created
func (o GetRoutingTableRoutesRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Destination of the route.
func (o GetRoutingTableRoutesRouteOutput) Destination() GetRoutingTableRoutesRouteDestinationOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) GetRoutingTableRoutesRouteDestination { return v.Destination }).(GetRoutingTableRoutesRouteDestinationOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o GetRoutingTableRoutesRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Next hop destination.
func (o GetRoutingTableRoutesRouteOutput) NextHop() GetRoutingTableRoutesRouteNextHopOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) GetRoutingTableRoutesRouteNextHop { return v.NextHop }).(GetRoutingTableRoutesRouteNextHopOutput)
}

// Route ID.
func (o GetRoutingTableRoutesRouteOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) string { return v.RouteId }).(pulumi.StringOutput)
}

// Date-time when the route was updated
func (o GetRoutingTableRoutesRouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRoute) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetRoutingTableRoutesRouteArrayOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRoutesRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutingTableRoutesRoute)(nil)).Elem()
}

func (o GetRoutingTableRoutesRouteArrayOutput) ToGetRoutingTableRoutesRouteArrayOutput() GetRoutingTableRoutesRouteArrayOutput {
	return o
}

func (o GetRoutingTableRoutesRouteArrayOutput) ToGetRoutingTableRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteArrayOutput {
	return o
}

func (o GetRoutingTableRoutesRouteArrayOutput) Index(i pulumi.IntInput) GetRoutingTableRoutesRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoutingTableRoutesRoute {
		return vs[0].([]GetRoutingTableRoutesRoute)[vs[1].(int)]
	}).(GetRoutingTableRoutesRouteOutput)
}

type GetRoutingTableRoutesRouteDestination struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type string `pulumi:"type"`
	// An CIDR string.
	Value string `pulumi:"value"`
}

// GetRoutingTableRoutesRouteDestinationInput is an input type that accepts GetRoutingTableRoutesRouteDestinationArgs and GetRoutingTableRoutesRouteDestinationOutput values.
// You can construct a concrete instance of `GetRoutingTableRoutesRouteDestinationInput` via:
//
//	GetRoutingTableRoutesRouteDestinationArgs{...}
type GetRoutingTableRoutesRouteDestinationInput interface {
	pulumi.Input

	ToGetRoutingTableRoutesRouteDestinationOutput() GetRoutingTableRoutesRouteDestinationOutput
	ToGetRoutingTableRoutesRouteDestinationOutputWithContext(context.Context) GetRoutingTableRoutesRouteDestinationOutput
}

type GetRoutingTableRoutesRouteDestinationArgs struct {
	// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
	Type pulumi.StringInput `pulumi:"type"`
	// An CIDR string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRoutingTableRoutesRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRouteDestination)(nil)).Elem()
}

func (i GetRoutingTableRoutesRouteDestinationArgs) ToGetRoutingTableRoutesRouteDestinationOutput() GetRoutingTableRoutesRouteDestinationOutput {
	return i.ToGetRoutingTableRoutesRouteDestinationOutputWithContext(context.Background())
}

func (i GetRoutingTableRoutesRouteDestinationArgs) ToGetRoutingTableRoutesRouteDestinationOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRoutesRouteDestinationOutput)
}

type GetRoutingTableRoutesRouteDestinationOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRoutesRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRouteDestination)(nil)).Elem()
}

func (o GetRoutingTableRoutesRouteDestinationOutput) ToGetRoutingTableRoutesRouteDestinationOutput() GetRoutingTableRoutesRouteDestinationOutput {
	return o
}

func (o GetRoutingTableRoutesRouteDestinationOutput) ToGetRoutingTableRoutesRouteDestinationOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteDestinationOutput {
	return o
}

// CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.
func (o GetRoutingTableRoutesRouteDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRouteDestination) string { return v.Type }).(pulumi.StringOutput)
}

// An CIDR string.
func (o GetRoutingTableRoutesRouteDestinationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRouteDestination) string { return v.Value }).(pulumi.StringOutput)
}

type GetRoutingTableRoutesRouteNextHop struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type string `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value string `pulumi:"value"`
}

// GetRoutingTableRoutesRouteNextHopInput is an input type that accepts GetRoutingTableRoutesRouteNextHopArgs and GetRoutingTableRoutesRouteNextHopOutput values.
// You can construct a concrete instance of `GetRoutingTableRoutesRouteNextHopInput` via:
//
//	GetRoutingTableRoutesRouteNextHopArgs{...}
type GetRoutingTableRoutesRouteNextHopInput interface {
	pulumi.Input

	ToGetRoutingTableRoutesRouteNextHopOutput() GetRoutingTableRoutesRouteNextHopOutput
	ToGetRoutingTableRoutesRouteNextHopOutputWithContext(context.Context) GetRoutingTableRoutesRouteNextHopOutput
}

type GetRoutingTableRoutesRouteNextHopArgs struct {
	// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
	Type pulumi.StringInput `pulumi:"type"`
	// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRoutingTableRoutesRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRouteNextHop)(nil)).Elem()
}

func (i GetRoutingTableRoutesRouteNextHopArgs) ToGetRoutingTableRoutesRouteNextHopOutput() GetRoutingTableRoutesRouteNextHopOutput {
	return i.ToGetRoutingTableRoutesRouteNextHopOutputWithContext(context.Background())
}

func (i GetRoutingTableRoutesRouteNextHopArgs) ToGetRoutingTableRoutesRouteNextHopOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTableRoutesRouteNextHopOutput)
}

type GetRoutingTableRoutesRouteNextHopOutput struct{ *pulumi.OutputState }

func (GetRoutingTableRoutesRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTableRoutesRouteNextHop)(nil)).Elem()
}

func (o GetRoutingTableRoutesRouteNextHopOutput) ToGetRoutingTableRoutesRouteNextHopOutput() GetRoutingTableRoutesRouteNextHopOutput {
	return o
}

func (o GetRoutingTableRoutesRouteNextHopOutput) ToGetRoutingTableRoutesRouteNextHopOutputWithContext(ctx context.Context) GetRoutingTableRoutesRouteNextHopOutput {
	return o
}

// Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..
func (o GetRoutingTableRoutesRouteNextHopOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRouteNextHop) string { return v.Type }).(pulumi.StringOutput)
}

// Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.
func (o GetRoutingTableRoutesRouteNextHopOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTableRoutesRouteNextHop) string { return v.Value }).(pulumi.StringOutput)
}

type GetRoutingTablesItem struct {
	// Date-time when the routing table was created
	CreatedAt string `pulumi:"createdAt"`
	// When true this is the default routing table for this network area. It can't be deleted and is used if the user does not specify it otherwise.
	Default bool `pulumi:"default"`
	// Description of the routing table.
	Description string `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the routing table.
	Name string `pulumi:"name"`
	// The routing tables ID.
	RoutingTableId string `pulumi:"routingTableId"`
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes bool `pulumi:"systemRoutes"`
	// Date-time when the routing table was updated
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetRoutingTablesItemInput is an input type that accepts GetRoutingTablesItemArgs and GetRoutingTablesItemOutput values.
// You can construct a concrete instance of `GetRoutingTablesItemInput` via:
//
//	GetRoutingTablesItemArgs{...}
type GetRoutingTablesItemInput interface {
	pulumi.Input

	ToGetRoutingTablesItemOutput() GetRoutingTablesItemOutput
	ToGetRoutingTablesItemOutputWithContext(context.Context) GetRoutingTablesItemOutput
}

type GetRoutingTablesItemArgs struct {
	// Date-time when the routing table was created
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// When true this is the default routing table for this network area. It can't be deleted and is used if the user does not specify it otherwise.
	Default pulumi.BoolInput `pulumi:"default"`
	// Description of the routing table.
	Description pulumi.StringInput `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The name of the routing table.
	Name pulumi.StringInput `pulumi:"name"`
	// The routing tables ID.
	RoutingTableId pulumi.StringInput `pulumi:"routingTableId"`
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes pulumi.BoolInput `pulumi:"systemRoutes"`
	// Date-time when the routing table was updated
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetRoutingTablesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTablesItem)(nil)).Elem()
}

func (i GetRoutingTablesItemArgs) ToGetRoutingTablesItemOutput() GetRoutingTablesItemOutput {
	return i.ToGetRoutingTablesItemOutputWithContext(context.Background())
}

func (i GetRoutingTablesItemArgs) ToGetRoutingTablesItemOutputWithContext(ctx context.Context) GetRoutingTablesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTablesItemOutput)
}

// GetRoutingTablesItemArrayInput is an input type that accepts GetRoutingTablesItemArray and GetRoutingTablesItemArrayOutput values.
// You can construct a concrete instance of `GetRoutingTablesItemArrayInput` via:
//
//	GetRoutingTablesItemArray{ GetRoutingTablesItemArgs{...} }
type GetRoutingTablesItemArrayInput interface {
	pulumi.Input

	ToGetRoutingTablesItemArrayOutput() GetRoutingTablesItemArrayOutput
	ToGetRoutingTablesItemArrayOutputWithContext(context.Context) GetRoutingTablesItemArrayOutput
}

type GetRoutingTablesItemArray []GetRoutingTablesItemInput

func (GetRoutingTablesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutingTablesItem)(nil)).Elem()
}

func (i GetRoutingTablesItemArray) ToGetRoutingTablesItemArrayOutput() GetRoutingTablesItemArrayOutput {
	return i.ToGetRoutingTablesItemArrayOutputWithContext(context.Background())
}

func (i GetRoutingTablesItemArray) ToGetRoutingTablesItemArrayOutputWithContext(ctx context.Context) GetRoutingTablesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingTablesItemArrayOutput)
}

type GetRoutingTablesItemOutput struct{ *pulumi.OutputState }

func (GetRoutingTablesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingTablesItem)(nil)).Elem()
}

func (o GetRoutingTablesItemOutput) ToGetRoutingTablesItemOutput() GetRoutingTablesItemOutput {
	return o
}

func (o GetRoutingTablesItemOutput) ToGetRoutingTablesItemOutputWithContext(ctx context.Context) GetRoutingTablesItemOutput {
	return o
}

// Date-time when the routing table was created
func (o GetRoutingTablesItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// When true this is the default routing table for this network area. It can't be deleted and is used if the user does not specify it otherwise.
func (o GetRoutingTablesItemOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) bool { return v.Default }).(pulumi.BoolOutput)
}

// Description of the routing table.
func (o GetRoutingTablesItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) string { return v.Description }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o GetRoutingTablesItemOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the routing table.
func (o GetRoutingTablesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) string { return v.Name }).(pulumi.StringOutput)
}

// The routing tables ID.
func (o GetRoutingTablesItemOutput) RoutingTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) string { return v.RoutingTableId }).(pulumi.StringOutput)
}

// This controls whether the routes for project-to-project communication are created automatically or not.
func (o GetRoutingTablesItemOutput) SystemRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) bool { return v.SystemRoutes }).(pulumi.BoolOutput)
}

// Date-time when the routing table was updated
func (o GetRoutingTablesItemOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutingTablesItem) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetRoutingTablesItemArrayOutput struct{ *pulumi.OutputState }

func (GetRoutingTablesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutingTablesItem)(nil)).Elem()
}

func (o GetRoutingTablesItemArrayOutput) ToGetRoutingTablesItemArrayOutput() GetRoutingTablesItemArrayOutput {
	return o
}

func (o GetRoutingTablesItemArrayOutput) ToGetRoutingTablesItemArrayOutputWithContext(ctx context.Context) GetRoutingTablesItemArrayOutput {
	return o
}

func (o GetRoutingTablesItemArrayOutput) Index(i pulumi.IntInput) GetRoutingTablesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoutingTablesItem {
		return vs[0].([]GetRoutingTablesItem)[vs[1].(int)]
	}).(GetRoutingTablesItemOutput)
}

type GetSecurityGroupRuleIcmpParameters struct {
	// ICMP code. Can be set if the protocol is ICMP.
	Code int `pulumi:"code"`
	// ICMP type. Can be set if the protocol is ICMP.
	Type int `pulumi:"type"`
}

// GetSecurityGroupRuleIcmpParametersInput is an input type that accepts GetSecurityGroupRuleIcmpParametersArgs and GetSecurityGroupRuleIcmpParametersOutput values.
// You can construct a concrete instance of `GetSecurityGroupRuleIcmpParametersInput` via:
//
//	GetSecurityGroupRuleIcmpParametersArgs{...}
type GetSecurityGroupRuleIcmpParametersInput interface {
	pulumi.Input

	ToGetSecurityGroupRuleIcmpParametersOutput() GetSecurityGroupRuleIcmpParametersOutput
	ToGetSecurityGroupRuleIcmpParametersOutputWithContext(context.Context) GetSecurityGroupRuleIcmpParametersOutput
}

type GetSecurityGroupRuleIcmpParametersArgs struct {
	// ICMP code. Can be set if the protocol is ICMP.
	Code pulumi.IntInput `pulumi:"code"`
	// ICMP type. Can be set if the protocol is ICMP.
	Type pulumi.IntInput `pulumi:"type"`
}

func (GetSecurityGroupRuleIcmpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (i GetSecurityGroupRuleIcmpParametersArgs) ToGetSecurityGroupRuleIcmpParametersOutput() GetSecurityGroupRuleIcmpParametersOutput {
	return i.ToGetSecurityGroupRuleIcmpParametersOutputWithContext(context.Background())
}

func (i GetSecurityGroupRuleIcmpParametersArgs) ToGetSecurityGroupRuleIcmpParametersOutputWithContext(ctx context.Context) GetSecurityGroupRuleIcmpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupRuleIcmpParametersOutput)
}

type GetSecurityGroupRuleIcmpParametersOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupRuleIcmpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRuleIcmpParameters)(nil)).Elem()
}

func (o GetSecurityGroupRuleIcmpParametersOutput) ToGetSecurityGroupRuleIcmpParametersOutput() GetSecurityGroupRuleIcmpParametersOutput {
	return o
}

func (o GetSecurityGroupRuleIcmpParametersOutput) ToGetSecurityGroupRuleIcmpParametersOutputWithContext(ctx context.Context) GetSecurityGroupRuleIcmpParametersOutput {
	return o
}

// ICMP code. Can be set if the protocol is ICMP.
func (o GetSecurityGroupRuleIcmpParametersOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupRuleIcmpParameters) int { return v.Code }).(pulumi.IntOutput)
}

// ICMP type. Can be set if the protocol is ICMP.
func (o GetSecurityGroupRuleIcmpParametersOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupRuleIcmpParameters) int { return v.Type }).(pulumi.IntOutput)
}

type GetSecurityGroupRulePortRange struct {
	// The maximum port number. Should be greater or equal to the minimum.
	Max int `pulumi:"max"`
	// The minimum port number. Should be less or equal to the minimum.
	Min int `pulumi:"min"`
}

// GetSecurityGroupRulePortRangeInput is an input type that accepts GetSecurityGroupRulePortRangeArgs and GetSecurityGroupRulePortRangeOutput values.
// You can construct a concrete instance of `GetSecurityGroupRulePortRangeInput` via:
//
//	GetSecurityGroupRulePortRangeArgs{...}
type GetSecurityGroupRulePortRangeInput interface {
	pulumi.Input

	ToGetSecurityGroupRulePortRangeOutput() GetSecurityGroupRulePortRangeOutput
	ToGetSecurityGroupRulePortRangeOutputWithContext(context.Context) GetSecurityGroupRulePortRangeOutput
}

type GetSecurityGroupRulePortRangeArgs struct {
	// The maximum port number. Should be greater or equal to the minimum.
	Max pulumi.IntInput `pulumi:"max"`
	// The minimum port number. Should be less or equal to the minimum.
	Min pulumi.IntInput `pulumi:"min"`
}

func (GetSecurityGroupRulePortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRulePortRange)(nil)).Elem()
}

func (i GetSecurityGroupRulePortRangeArgs) ToGetSecurityGroupRulePortRangeOutput() GetSecurityGroupRulePortRangeOutput {
	return i.ToGetSecurityGroupRulePortRangeOutputWithContext(context.Background())
}

func (i GetSecurityGroupRulePortRangeArgs) ToGetSecurityGroupRulePortRangeOutputWithContext(ctx context.Context) GetSecurityGroupRulePortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupRulePortRangeOutput)
}

type GetSecurityGroupRulePortRangeOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupRulePortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRulePortRange)(nil)).Elem()
}

func (o GetSecurityGroupRulePortRangeOutput) ToGetSecurityGroupRulePortRangeOutput() GetSecurityGroupRulePortRangeOutput {
	return o
}

func (o GetSecurityGroupRulePortRangeOutput) ToGetSecurityGroupRulePortRangeOutputWithContext(ctx context.Context) GetSecurityGroupRulePortRangeOutput {
	return o
}

// The maximum port number. Should be greater or equal to the minimum.
func (o GetSecurityGroupRulePortRangeOutput) Max() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupRulePortRange) int { return v.Max }).(pulumi.IntOutput)
}

// The minimum port number. Should be less or equal to the minimum.
func (o GetSecurityGroupRulePortRangeOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupRulePortRange) int { return v.Min }).(pulumi.IntOutput)
}

type GetSecurityGroupRuleProtocol struct {
	// The protocol name which the rule should match.
	Name string `pulumi:"name"`
	// The protocol number which the rule should match.
	Number int `pulumi:"number"`
}

// GetSecurityGroupRuleProtocolInput is an input type that accepts GetSecurityGroupRuleProtocolArgs and GetSecurityGroupRuleProtocolOutput values.
// You can construct a concrete instance of `GetSecurityGroupRuleProtocolInput` via:
//
//	GetSecurityGroupRuleProtocolArgs{...}
type GetSecurityGroupRuleProtocolInput interface {
	pulumi.Input

	ToGetSecurityGroupRuleProtocolOutput() GetSecurityGroupRuleProtocolOutput
	ToGetSecurityGroupRuleProtocolOutputWithContext(context.Context) GetSecurityGroupRuleProtocolOutput
}

type GetSecurityGroupRuleProtocolArgs struct {
	// The protocol name which the rule should match.
	Name pulumi.StringInput `pulumi:"name"`
	// The protocol number which the rule should match.
	Number pulumi.IntInput `pulumi:"number"`
}

func (GetSecurityGroupRuleProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRuleProtocol)(nil)).Elem()
}

func (i GetSecurityGroupRuleProtocolArgs) ToGetSecurityGroupRuleProtocolOutput() GetSecurityGroupRuleProtocolOutput {
	return i.ToGetSecurityGroupRuleProtocolOutputWithContext(context.Background())
}

func (i GetSecurityGroupRuleProtocolArgs) ToGetSecurityGroupRuleProtocolOutputWithContext(ctx context.Context) GetSecurityGroupRuleProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupRuleProtocolOutput)
}

type GetSecurityGroupRuleProtocolOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupRuleProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRuleProtocol)(nil)).Elem()
}

func (o GetSecurityGroupRuleProtocolOutput) ToGetSecurityGroupRuleProtocolOutput() GetSecurityGroupRuleProtocolOutput {
	return o
}

func (o GetSecurityGroupRuleProtocolOutput) ToGetSecurityGroupRuleProtocolOutputWithContext(ctx context.Context) GetSecurityGroupRuleProtocolOutput {
	return o
}

// The protocol name which the rule should match.
func (o GetSecurityGroupRuleProtocolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupRuleProtocol) string { return v.Name }).(pulumi.StringOutput)
}

// The protocol number which the rule should match.
func (o GetSecurityGroupRuleProtocolOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupRuleProtocol) int { return v.Number }).(pulumi.IntOutput)
}

type GetServerBackupScheduleBackupProperties struct {
	Name            string   `pulumi:"name"`
	RetentionPeriod int      `pulumi:"retentionPeriod"`
	VolumeIds       []string `pulumi:"volumeIds"`
}

// GetServerBackupScheduleBackupPropertiesInput is an input type that accepts GetServerBackupScheduleBackupPropertiesArgs and GetServerBackupScheduleBackupPropertiesOutput values.
// You can construct a concrete instance of `GetServerBackupScheduleBackupPropertiesInput` via:
//
//	GetServerBackupScheduleBackupPropertiesArgs{...}
type GetServerBackupScheduleBackupPropertiesInput interface {
	pulumi.Input

	ToGetServerBackupScheduleBackupPropertiesOutput() GetServerBackupScheduleBackupPropertiesOutput
	ToGetServerBackupScheduleBackupPropertiesOutputWithContext(context.Context) GetServerBackupScheduleBackupPropertiesOutput
}

type GetServerBackupScheduleBackupPropertiesArgs struct {
	Name            pulumi.StringInput      `pulumi:"name"`
	RetentionPeriod pulumi.IntInput         `pulumi:"retentionPeriod"`
	VolumeIds       pulumi.StringArrayInput `pulumi:"volumeIds"`
}

func (GetServerBackupScheduleBackupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (i GetServerBackupScheduleBackupPropertiesArgs) ToGetServerBackupScheduleBackupPropertiesOutput() GetServerBackupScheduleBackupPropertiesOutput {
	return i.ToGetServerBackupScheduleBackupPropertiesOutputWithContext(context.Background())
}

func (i GetServerBackupScheduleBackupPropertiesArgs) ToGetServerBackupScheduleBackupPropertiesOutputWithContext(ctx context.Context) GetServerBackupScheduleBackupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupScheduleBackupPropertiesOutput)
}

type GetServerBackupScheduleBackupPropertiesOutput struct{ *pulumi.OutputState }

func (GetServerBackupScheduleBackupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupScheduleBackupProperties)(nil)).Elem()
}

func (o GetServerBackupScheduleBackupPropertiesOutput) ToGetServerBackupScheduleBackupPropertiesOutput() GetServerBackupScheduleBackupPropertiesOutput {
	return o
}

func (o GetServerBackupScheduleBackupPropertiesOutput) ToGetServerBackupScheduleBackupPropertiesOutputWithContext(ctx context.Context) GetServerBackupScheduleBackupPropertiesOutput {
	return o
}

func (o GetServerBackupScheduleBackupPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupScheduleBackupProperties) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServerBackupScheduleBackupPropertiesOutput) RetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerBackupScheduleBackupProperties) int { return v.RetentionPeriod }).(pulumi.IntOutput)
}

func (o GetServerBackupScheduleBackupPropertiesOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerBackupScheduleBackupProperties) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

type GetServerBackupSchedulesItem struct {
	// Backup schedule details for the backups.
	BackupProperties GetServerBackupSchedulesItemBackupProperties `pulumi:"backupProperties"`
	BackupScheduleId int                                          `pulumi:"backupScheduleId"`
	// Is the backup schedule enabled or disabled.
	Enabled bool `pulumi:"enabled"`
	// The backup schedule name.
	Name string `pulumi:"name"`
	// Backup schedule described in `rrule` (recurrence rule) format.
	Rrule string `pulumi:"rrule"`
}

// GetServerBackupSchedulesItemInput is an input type that accepts GetServerBackupSchedulesItemArgs and GetServerBackupSchedulesItemOutput values.
// You can construct a concrete instance of `GetServerBackupSchedulesItemInput` via:
//
//	GetServerBackupSchedulesItemArgs{...}
type GetServerBackupSchedulesItemInput interface {
	pulumi.Input

	ToGetServerBackupSchedulesItemOutput() GetServerBackupSchedulesItemOutput
	ToGetServerBackupSchedulesItemOutputWithContext(context.Context) GetServerBackupSchedulesItemOutput
}

type GetServerBackupSchedulesItemArgs struct {
	// Backup schedule details for the backups.
	BackupProperties GetServerBackupSchedulesItemBackupPropertiesInput `pulumi:"backupProperties"`
	BackupScheduleId pulumi.IntInput                                   `pulumi:"backupScheduleId"`
	// Is the backup schedule enabled or disabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The backup schedule name.
	Name pulumi.StringInput `pulumi:"name"`
	// Backup schedule described in `rrule` (recurrence rule) format.
	Rrule pulumi.StringInput `pulumi:"rrule"`
}

func (GetServerBackupSchedulesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupSchedulesItem)(nil)).Elem()
}

func (i GetServerBackupSchedulesItemArgs) ToGetServerBackupSchedulesItemOutput() GetServerBackupSchedulesItemOutput {
	return i.ToGetServerBackupSchedulesItemOutputWithContext(context.Background())
}

func (i GetServerBackupSchedulesItemArgs) ToGetServerBackupSchedulesItemOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupSchedulesItemOutput)
}

// GetServerBackupSchedulesItemArrayInput is an input type that accepts GetServerBackupSchedulesItemArray and GetServerBackupSchedulesItemArrayOutput values.
// You can construct a concrete instance of `GetServerBackupSchedulesItemArrayInput` via:
//
//	GetServerBackupSchedulesItemArray{ GetServerBackupSchedulesItemArgs{...} }
type GetServerBackupSchedulesItemArrayInput interface {
	pulumi.Input

	ToGetServerBackupSchedulesItemArrayOutput() GetServerBackupSchedulesItemArrayOutput
	ToGetServerBackupSchedulesItemArrayOutputWithContext(context.Context) GetServerBackupSchedulesItemArrayOutput
}

type GetServerBackupSchedulesItemArray []GetServerBackupSchedulesItemInput

func (GetServerBackupSchedulesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupSchedulesItem)(nil)).Elem()
}

func (i GetServerBackupSchedulesItemArray) ToGetServerBackupSchedulesItemArrayOutput() GetServerBackupSchedulesItemArrayOutput {
	return i.ToGetServerBackupSchedulesItemArrayOutputWithContext(context.Background())
}

func (i GetServerBackupSchedulesItemArray) ToGetServerBackupSchedulesItemArrayOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupSchedulesItemArrayOutput)
}

type GetServerBackupSchedulesItemOutput struct{ *pulumi.OutputState }

func (GetServerBackupSchedulesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupSchedulesItem)(nil)).Elem()
}

func (o GetServerBackupSchedulesItemOutput) ToGetServerBackupSchedulesItemOutput() GetServerBackupSchedulesItemOutput {
	return o
}

func (o GetServerBackupSchedulesItemOutput) ToGetServerBackupSchedulesItemOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemOutput {
	return o
}

// Backup schedule details for the backups.
func (o GetServerBackupSchedulesItemOutput) BackupProperties() GetServerBackupSchedulesItemBackupPropertiesOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItem) GetServerBackupSchedulesItemBackupProperties {
		return v.BackupProperties
	}).(GetServerBackupSchedulesItemBackupPropertiesOutput)
}

func (o GetServerBackupSchedulesItemOutput) BackupScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItem) int { return v.BackupScheduleId }).(pulumi.IntOutput)
}

// Is the backup schedule enabled or disabled.
func (o GetServerBackupSchedulesItemOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItem) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The backup schedule name.
func (o GetServerBackupSchedulesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItem) string { return v.Name }).(pulumi.StringOutput)
}

// Backup schedule described in `rrule` (recurrence rule) format.
func (o GetServerBackupSchedulesItemOutput) Rrule() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItem) string { return v.Rrule }).(pulumi.StringOutput)
}

type GetServerBackupSchedulesItemArrayOutput struct{ *pulumi.OutputState }

func (GetServerBackupSchedulesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerBackupSchedulesItem)(nil)).Elem()
}

func (o GetServerBackupSchedulesItemArrayOutput) ToGetServerBackupSchedulesItemArrayOutput() GetServerBackupSchedulesItemArrayOutput {
	return o
}

func (o GetServerBackupSchedulesItemArrayOutput) ToGetServerBackupSchedulesItemArrayOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemArrayOutput {
	return o
}

func (o GetServerBackupSchedulesItemArrayOutput) Index(i pulumi.IntInput) GetServerBackupSchedulesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerBackupSchedulesItem {
		return vs[0].([]GetServerBackupSchedulesItem)[vs[1].(int)]
	}).(GetServerBackupSchedulesItemOutput)
}

type GetServerBackupSchedulesItemBackupProperties struct {
	Name            string   `pulumi:"name"`
	RetentionPeriod int      `pulumi:"retentionPeriod"`
	VolumeIds       []string `pulumi:"volumeIds"`
}

// GetServerBackupSchedulesItemBackupPropertiesInput is an input type that accepts GetServerBackupSchedulesItemBackupPropertiesArgs and GetServerBackupSchedulesItemBackupPropertiesOutput values.
// You can construct a concrete instance of `GetServerBackupSchedulesItemBackupPropertiesInput` via:
//
//	GetServerBackupSchedulesItemBackupPropertiesArgs{...}
type GetServerBackupSchedulesItemBackupPropertiesInput interface {
	pulumi.Input

	ToGetServerBackupSchedulesItemBackupPropertiesOutput() GetServerBackupSchedulesItemBackupPropertiesOutput
	ToGetServerBackupSchedulesItemBackupPropertiesOutputWithContext(context.Context) GetServerBackupSchedulesItemBackupPropertiesOutput
}

type GetServerBackupSchedulesItemBackupPropertiesArgs struct {
	Name            pulumi.StringInput      `pulumi:"name"`
	RetentionPeriod pulumi.IntInput         `pulumi:"retentionPeriod"`
	VolumeIds       pulumi.StringArrayInput `pulumi:"volumeIds"`
}

func (GetServerBackupSchedulesItemBackupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupSchedulesItemBackupProperties)(nil)).Elem()
}

func (i GetServerBackupSchedulesItemBackupPropertiesArgs) ToGetServerBackupSchedulesItemBackupPropertiesOutput() GetServerBackupSchedulesItemBackupPropertiesOutput {
	return i.ToGetServerBackupSchedulesItemBackupPropertiesOutputWithContext(context.Background())
}

func (i GetServerBackupSchedulesItemBackupPropertiesArgs) ToGetServerBackupSchedulesItemBackupPropertiesOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemBackupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBackupSchedulesItemBackupPropertiesOutput)
}

type GetServerBackupSchedulesItemBackupPropertiesOutput struct{ *pulumi.OutputState }

func (GetServerBackupSchedulesItemBackupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBackupSchedulesItemBackupProperties)(nil)).Elem()
}

func (o GetServerBackupSchedulesItemBackupPropertiesOutput) ToGetServerBackupSchedulesItemBackupPropertiesOutput() GetServerBackupSchedulesItemBackupPropertiesOutput {
	return o
}

func (o GetServerBackupSchedulesItemBackupPropertiesOutput) ToGetServerBackupSchedulesItemBackupPropertiesOutputWithContext(ctx context.Context) GetServerBackupSchedulesItemBackupPropertiesOutput {
	return o
}

func (o GetServerBackupSchedulesItemBackupPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItemBackupProperties) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServerBackupSchedulesItemBackupPropertiesOutput) RetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItemBackupProperties) int { return v.RetentionPeriod }).(pulumi.IntOutput)
}

func (o GetServerBackupSchedulesItemBackupPropertiesOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerBackupSchedulesItemBackupProperties) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

type GetServerBootVolume struct {
	// Delete the volume during the termination of the server.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// The ID of the boot volume
	Id string `pulumi:"id"`
}

// GetServerBootVolumeInput is an input type that accepts GetServerBootVolumeArgs and GetServerBootVolumeOutput values.
// You can construct a concrete instance of `GetServerBootVolumeInput` via:
//
//	GetServerBootVolumeArgs{...}
type GetServerBootVolumeInput interface {
	pulumi.Input

	ToGetServerBootVolumeOutput() GetServerBootVolumeOutput
	ToGetServerBootVolumeOutputWithContext(context.Context) GetServerBootVolumeOutput
}

type GetServerBootVolumeArgs struct {
	// Delete the volume during the termination of the server.
	DeleteOnTermination pulumi.BoolInput `pulumi:"deleteOnTermination"`
	// The ID of the boot volume
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetServerBootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBootVolume)(nil)).Elem()
}

func (i GetServerBootVolumeArgs) ToGetServerBootVolumeOutput() GetServerBootVolumeOutput {
	return i.ToGetServerBootVolumeOutputWithContext(context.Background())
}

func (i GetServerBootVolumeArgs) ToGetServerBootVolumeOutputWithContext(ctx context.Context) GetServerBootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerBootVolumeOutput)
}

type GetServerBootVolumeOutput struct{ *pulumi.OutputState }

func (GetServerBootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerBootVolume)(nil)).Elem()
}

func (o GetServerBootVolumeOutput) ToGetServerBootVolumeOutput() GetServerBootVolumeOutput {
	return o
}

func (o GetServerBootVolumeOutput) ToGetServerBootVolumeOutputWithContext(ctx context.Context) GetServerBootVolumeOutput {
	return o
}

// Delete the volume during the termination of the server.
func (o GetServerBootVolumeOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerBootVolume) bool { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// The ID of the boot volume
func (o GetServerBootVolumeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerBootVolume) string { return v.Id }).(pulumi.StringOutput)
}

type GetServerUpdateSchedulesItem struct {
	// Is the update schedule enabled or disabled.
	Enabled bool `pulumi:"enabled"`
	// Maintenance window [1..24].
	MaintenanceWindow int `pulumi:"maintenanceWindow"`
	// The update schedule name.
	Name string `pulumi:"name"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule            string `pulumi:"rrule"`
	UpdateScheduleId int    `pulumi:"updateScheduleId"`
}

// GetServerUpdateSchedulesItemInput is an input type that accepts GetServerUpdateSchedulesItemArgs and GetServerUpdateSchedulesItemOutput values.
// You can construct a concrete instance of `GetServerUpdateSchedulesItemInput` via:
//
//	GetServerUpdateSchedulesItemArgs{...}
type GetServerUpdateSchedulesItemInput interface {
	pulumi.Input

	ToGetServerUpdateSchedulesItemOutput() GetServerUpdateSchedulesItemOutput
	ToGetServerUpdateSchedulesItemOutputWithContext(context.Context) GetServerUpdateSchedulesItemOutput
}

type GetServerUpdateSchedulesItemArgs struct {
	// Is the update schedule enabled or disabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Maintenance window [1..24].
	MaintenanceWindow pulumi.IntInput `pulumi:"maintenanceWindow"`
	// The update schedule name.
	Name pulumi.StringInput `pulumi:"name"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule            pulumi.StringInput `pulumi:"rrule"`
	UpdateScheduleId pulumi.IntInput    `pulumi:"updateScheduleId"`
}

func (GetServerUpdateSchedulesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerUpdateSchedulesItem)(nil)).Elem()
}

func (i GetServerUpdateSchedulesItemArgs) ToGetServerUpdateSchedulesItemOutput() GetServerUpdateSchedulesItemOutput {
	return i.ToGetServerUpdateSchedulesItemOutputWithContext(context.Background())
}

func (i GetServerUpdateSchedulesItemArgs) ToGetServerUpdateSchedulesItemOutputWithContext(ctx context.Context) GetServerUpdateSchedulesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerUpdateSchedulesItemOutput)
}

// GetServerUpdateSchedulesItemArrayInput is an input type that accepts GetServerUpdateSchedulesItemArray and GetServerUpdateSchedulesItemArrayOutput values.
// You can construct a concrete instance of `GetServerUpdateSchedulesItemArrayInput` via:
//
//	GetServerUpdateSchedulesItemArray{ GetServerUpdateSchedulesItemArgs{...} }
type GetServerUpdateSchedulesItemArrayInput interface {
	pulumi.Input

	ToGetServerUpdateSchedulesItemArrayOutput() GetServerUpdateSchedulesItemArrayOutput
	ToGetServerUpdateSchedulesItemArrayOutputWithContext(context.Context) GetServerUpdateSchedulesItemArrayOutput
}

type GetServerUpdateSchedulesItemArray []GetServerUpdateSchedulesItemInput

func (GetServerUpdateSchedulesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerUpdateSchedulesItem)(nil)).Elem()
}

func (i GetServerUpdateSchedulesItemArray) ToGetServerUpdateSchedulesItemArrayOutput() GetServerUpdateSchedulesItemArrayOutput {
	return i.ToGetServerUpdateSchedulesItemArrayOutputWithContext(context.Background())
}

func (i GetServerUpdateSchedulesItemArray) ToGetServerUpdateSchedulesItemArrayOutputWithContext(ctx context.Context) GetServerUpdateSchedulesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerUpdateSchedulesItemArrayOutput)
}

type GetServerUpdateSchedulesItemOutput struct{ *pulumi.OutputState }

func (GetServerUpdateSchedulesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerUpdateSchedulesItem)(nil)).Elem()
}

func (o GetServerUpdateSchedulesItemOutput) ToGetServerUpdateSchedulesItemOutput() GetServerUpdateSchedulesItemOutput {
	return o
}

func (o GetServerUpdateSchedulesItemOutput) ToGetServerUpdateSchedulesItemOutputWithContext(ctx context.Context) GetServerUpdateSchedulesItemOutput {
	return o
}

// Is the update schedule enabled or disabled.
func (o GetServerUpdateSchedulesItemOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerUpdateSchedulesItem) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Maintenance window [1..24].
func (o GetServerUpdateSchedulesItemOutput) MaintenanceWindow() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerUpdateSchedulesItem) int { return v.MaintenanceWindow }).(pulumi.IntOutput)
}

// The update schedule name.
func (o GetServerUpdateSchedulesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerUpdateSchedulesItem) string { return v.Name }).(pulumi.StringOutput)
}

// Update schedule described in `rrule` (recurrence rule) format.
func (o GetServerUpdateSchedulesItemOutput) Rrule() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerUpdateSchedulesItem) string { return v.Rrule }).(pulumi.StringOutput)
}

func (o GetServerUpdateSchedulesItemOutput) UpdateScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerUpdateSchedulesItem) int { return v.UpdateScheduleId }).(pulumi.IntOutput)
}

type GetServerUpdateSchedulesItemArrayOutput struct{ *pulumi.OutputState }

func (GetServerUpdateSchedulesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerUpdateSchedulesItem)(nil)).Elem()
}

func (o GetServerUpdateSchedulesItemArrayOutput) ToGetServerUpdateSchedulesItemArrayOutput() GetServerUpdateSchedulesItemArrayOutput {
	return o
}

func (o GetServerUpdateSchedulesItemArrayOutput) ToGetServerUpdateSchedulesItemArrayOutputWithContext(ctx context.Context) GetServerUpdateSchedulesItemArrayOutput {
	return o
}

func (o GetServerUpdateSchedulesItemArrayOutput) Index(i pulumi.IntInput) GetServerUpdateSchedulesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerUpdateSchedulesItem {
		return vs[0].([]GetServerUpdateSchedulesItem)[vs[1].(int)]
	}).(GetServerUpdateSchedulesItemOutput)
}

type GetSkeClusterExtensions struct {
	// Cluster access control configuration
	Acl GetSkeClusterExtensionsAcl `pulumi:"acl"`
	// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
	//
	// Deprecated: Use observability instead.
	Argus GetSkeClusterExtensionsArgus `pulumi:"argus"`
	// DNS extension configuration
	Dns GetSkeClusterExtensionsDns `pulumi:"dns"`
	// A single observability block as defined below.
	Observability GetSkeClusterExtensionsObservability `pulumi:"observability"`
}

// GetSkeClusterExtensionsInput is an input type that accepts GetSkeClusterExtensionsArgs and GetSkeClusterExtensionsOutput values.
// You can construct a concrete instance of `GetSkeClusterExtensionsInput` via:
//
//	GetSkeClusterExtensionsArgs{...}
type GetSkeClusterExtensionsInput interface {
	pulumi.Input

	ToGetSkeClusterExtensionsOutput() GetSkeClusterExtensionsOutput
	ToGetSkeClusterExtensionsOutputWithContext(context.Context) GetSkeClusterExtensionsOutput
}

type GetSkeClusterExtensionsArgs struct {
	// Cluster access control configuration
	Acl GetSkeClusterExtensionsAclInput `pulumi:"acl"`
	// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
	//
	// Deprecated: Use observability instead.
	Argus GetSkeClusterExtensionsArgusInput `pulumi:"argus"`
	// DNS extension configuration
	Dns GetSkeClusterExtensionsDnsInput `pulumi:"dns"`
	// A single observability block as defined below.
	Observability GetSkeClusterExtensionsObservabilityInput `pulumi:"observability"`
}

func (GetSkeClusterExtensionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensions)(nil)).Elem()
}

func (i GetSkeClusterExtensionsArgs) ToGetSkeClusterExtensionsOutput() GetSkeClusterExtensionsOutput {
	return i.ToGetSkeClusterExtensionsOutputWithContext(context.Background())
}

func (i GetSkeClusterExtensionsArgs) ToGetSkeClusterExtensionsOutputWithContext(ctx context.Context) GetSkeClusterExtensionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterExtensionsOutput)
}

type GetSkeClusterExtensionsOutput struct{ *pulumi.OutputState }

func (GetSkeClusterExtensionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensions)(nil)).Elem()
}

func (o GetSkeClusterExtensionsOutput) ToGetSkeClusterExtensionsOutput() GetSkeClusterExtensionsOutput {
	return o
}

func (o GetSkeClusterExtensionsOutput) ToGetSkeClusterExtensionsOutputWithContext(ctx context.Context) GetSkeClusterExtensionsOutput {
	return o
}

// Cluster access control configuration
func (o GetSkeClusterExtensionsOutput) Acl() GetSkeClusterExtensionsAclOutput {
	return o.ApplyT(func(v GetSkeClusterExtensions) GetSkeClusterExtensionsAcl { return v.Acl }).(GetSkeClusterExtensionsAclOutput)
}

// A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.
//
// Deprecated: Use observability instead.
func (o GetSkeClusterExtensionsOutput) Argus() GetSkeClusterExtensionsArgusOutput {
	return o.ApplyT(func(v GetSkeClusterExtensions) GetSkeClusterExtensionsArgus { return v.Argus }).(GetSkeClusterExtensionsArgusOutput)
}

// DNS extension configuration
func (o GetSkeClusterExtensionsOutput) Dns() GetSkeClusterExtensionsDnsOutput {
	return o.ApplyT(func(v GetSkeClusterExtensions) GetSkeClusterExtensionsDns { return v.Dns }).(GetSkeClusterExtensionsDnsOutput)
}

// A single observability block as defined below.
func (o GetSkeClusterExtensionsOutput) Observability() GetSkeClusterExtensionsObservabilityOutput {
	return o.ApplyT(func(v GetSkeClusterExtensions) GetSkeClusterExtensionsObservability { return v.Observability }).(GetSkeClusterExtensionsObservabilityOutput)
}

type GetSkeClusterExtensionsAcl struct {
	// Specify a list of CIDRs to whitelist
	AllowedCidrs []string `pulumi:"allowedCidrs"`
	// Is ACL enabled?
	Enabled bool `pulumi:"enabled"`
}

// GetSkeClusterExtensionsAclInput is an input type that accepts GetSkeClusterExtensionsAclArgs and GetSkeClusterExtensionsAclOutput values.
// You can construct a concrete instance of `GetSkeClusterExtensionsAclInput` via:
//
//	GetSkeClusterExtensionsAclArgs{...}
type GetSkeClusterExtensionsAclInput interface {
	pulumi.Input

	ToGetSkeClusterExtensionsAclOutput() GetSkeClusterExtensionsAclOutput
	ToGetSkeClusterExtensionsAclOutputWithContext(context.Context) GetSkeClusterExtensionsAclOutput
}

type GetSkeClusterExtensionsAclArgs struct {
	// Specify a list of CIDRs to whitelist
	AllowedCidrs pulumi.StringArrayInput `pulumi:"allowedCidrs"`
	// Is ACL enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetSkeClusterExtensionsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsAcl)(nil)).Elem()
}

func (i GetSkeClusterExtensionsAclArgs) ToGetSkeClusterExtensionsAclOutput() GetSkeClusterExtensionsAclOutput {
	return i.ToGetSkeClusterExtensionsAclOutputWithContext(context.Background())
}

func (i GetSkeClusterExtensionsAclArgs) ToGetSkeClusterExtensionsAclOutputWithContext(ctx context.Context) GetSkeClusterExtensionsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterExtensionsAclOutput)
}

type GetSkeClusterExtensionsAclOutput struct{ *pulumi.OutputState }

func (GetSkeClusterExtensionsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsAcl)(nil)).Elem()
}

func (o GetSkeClusterExtensionsAclOutput) ToGetSkeClusterExtensionsAclOutput() GetSkeClusterExtensionsAclOutput {
	return o
}

func (o GetSkeClusterExtensionsAclOutput) ToGetSkeClusterExtensionsAclOutputWithContext(ctx context.Context) GetSkeClusterExtensionsAclOutput {
	return o
}

// Specify a list of CIDRs to whitelist
func (o GetSkeClusterExtensionsAclOutput) AllowedCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsAcl) []string { return v.AllowedCidrs }).(pulumi.StringArrayOutput)
}

// Is ACL enabled?
func (o GetSkeClusterExtensionsAclOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsAcl) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetSkeClusterExtensionsArgus struct {
	// Instance ID of argus
	ArgusInstanceId string `pulumi:"argusInstanceId"`
	// Flag to enable/disable argus extensions.
	Enabled bool `pulumi:"enabled"`
}

// GetSkeClusterExtensionsArgusInput is an input type that accepts GetSkeClusterExtensionsArgusArgs and GetSkeClusterExtensionsArgusOutput values.
// You can construct a concrete instance of `GetSkeClusterExtensionsArgusInput` via:
//
//	GetSkeClusterExtensionsArgusArgs{...}
type GetSkeClusterExtensionsArgusInput interface {
	pulumi.Input

	ToGetSkeClusterExtensionsArgusOutput() GetSkeClusterExtensionsArgusOutput
	ToGetSkeClusterExtensionsArgusOutputWithContext(context.Context) GetSkeClusterExtensionsArgusOutput
}

type GetSkeClusterExtensionsArgusArgs struct {
	// Instance ID of argus
	ArgusInstanceId pulumi.StringInput `pulumi:"argusInstanceId"`
	// Flag to enable/disable argus extensions.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetSkeClusterExtensionsArgusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsArgus)(nil)).Elem()
}

func (i GetSkeClusterExtensionsArgusArgs) ToGetSkeClusterExtensionsArgusOutput() GetSkeClusterExtensionsArgusOutput {
	return i.ToGetSkeClusterExtensionsArgusOutputWithContext(context.Background())
}

func (i GetSkeClusterExtensionsArgusArgs) ToGetSkeClusterExtensionsArgusOutputWithContext(ctx context.Context) GetSkeClusterExtensionsArgusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterExtensionsArgusOutput)
}

type GetSkeClusterExtensionsArgusOutput struct{ *pulumi.OutputState }

func (GetSkeClusterExtensionsArgusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsArgus)(nil)).Elem()
}

func (o GetSkeClusterExtensionsArgusOutput) ToGetSkeClusterExtensionsArgusOutput() GetSkeClusterExtensionsArgusOutput {
	return o
}

func (o GetSkeClusterExtensionsArgusOutput) ToGetSkeClusterExtensionsArgusOutputWithContext(ctx context.Context) GetSkeClusterExtensionsArgusOutput {
	return o
}

// Instance ID of argus
func (o GetSkeClusterExtensionsArgusOutput) ArgusInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsArgus) string { return v.ArgusInstanceId }).(pulumi.StringOutput)
}

// Flag to enable/disable argus extensions.
func (o GetSkeClusterExtensionsArgusOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsArgus) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetSkeClusterExtensionsDns struct {
	// Flag to enable/disable DNS extensions
	Enabled bool `pulumi:"enabled"`
	// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
	Zones []string `pulumi:"zones"`
}

// GetSkeClusterExtensionsDnsInput is an input type that accepts GetSkeClusterExtensionsDnsArgs and GetSkeClusterExtensionsDnsOutput values.
// You can construct a concrete instance of `GetSkeClusterExtensionsDnsInput` via:
//
//	GetSkeClusterExtensionsDnsArgs{...}
type GetSkeClusterExtensionsDnsInput interface {
	pulumi.Input

	ToGetSkeClusterExtensionsDnsOutput() GetSkeClusterExtensionsDnsOutput
	ToGetSkeClusterExtensionsDnsOutputWithContext(context.Context) GetSkeClusterExtensionsDnsOutput
}

type GetSkeClusterExtensionsDnsArgs struct {
	// Flag to enable/disable DNS extensions
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (GetSkeClusterExtensionsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsDns)(nil)).Elem()
}

func (i GetSkeClusterExtensionsDnsArgs) ToGetSkeClusterExtensionsDnsOutput() GetSkeClusterExtensionsDnsOutput {
	return i.ToGetSkeClusterExtensionsDnsOutputWithContext(context.Background())
}

func (i GetSkeClusterExtensionsDnsArgs) ToGetSkeClusterExtensionsDnsOutputWithContext(ctx context.Context) GetSkeClusterExtensionsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterExtensionsDnsOutput)
}

type GetSkeClusterExtensionsDnsOutput struct{ *pulumi.OutputState }

func (GetSkeClusterExtensionsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsDns)(nil)).Elem()
}

func (o GetSkeClusterExtensionsDnsOutput) ToGetSkeClusterExtensionsDnsOutput() GetSkeClusterExtensionsDnsOutput {
	return o
}

func (o GetSkeClusterExtensionsDnsOutput) ToGetSkeClusterExtensionsDnsOutputWithContext(ctx context.Context) GetSkeClusterExtensionsDnsOutput {
	return o
}

// Flag to enable/disable DNS extensions
func (o GetSkeClusterExtensionsDnsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsDns) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)
func (o GetSkeClusterExtensionsDnsOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsDns) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type GetSkeClusterExtensionsObservability struct {
	// Flag to enable/disable Observability extensions.
	Enabled bool `pulumi:"enabled"`
	// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
	InstanceId string `pulumi:"instanceId"`
}

// GetSkeClusterExtensionsObservabilityInput is an input type that accepts GetSkeClusterExtensionsObservabilityArgs and GetSkeClusterExtensionsObservabilityOutput values.
// You can construct a concrete instance of `GetSkeClusterExtensionsObservabilityInput` via:
//
//	GetSkeClusterExtensionsObservabilityArgs{...}
type GetSkeClusterExtensionsObservabilityInput interface {
	pulumi.Input

	ToGetSkeClusterExtensionsObservabilityOutput() GetSkeClusterExtensionsObservabilityOutput
	ToGetSkeClusterExtensionsObservabilityOutputWithContext(context.Context) GetSkeClusterExtensionsObservabilityOutput
}

type GetSkeClusterExtensionsObservabilityArgs struct {
	// Flag to enable/disable Observability extensions.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (GetSkeClusterExtensionsObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsObservability)(nil)).Elem()
}

func (i GetSkeClusterExtensionsObservabilityArgs) ToGetSkeClusterExtensionsObservabilityOutput() GetSkeClusterExtensionsObservabilityOutput {
	return i.ToGetSkeClusterExtensionsObservabilityOutputWithContext(context.Background())
}

func (i GetSkeClusterExtensionsObservabilityArgs) ToGetSkeClusterExtensionsObservabilityOutputWithContext(ctx context.Context) GetSkeClusterExtensionsObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterExtensionsObservabilityOutput)
}

type GetSkeClusterExtensionsObservabilityOutput struct{ *pulumi.OutputState }

func (GetSkeClusterExtensionsObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterExtensionsObservability)(nil)).Elem()
}

func (o GetSkeClusterExtensionsObservabilityOutput) ToGetSkeClusterExtensionsObservabilityOutput() GetSkeClusterExtensionsObservabilityOutput {
	return o
}

func (o GetSkeClusterExtensionsObservabilityOutput) ToGetSkeClusterExtensionsObservabilityOutputWithContext(ctx context.Context) GetSkeClusterExtensionsObservabilityOutput {
	return o
}

// Flag to enable/disable Observability extensions.
func (o GetSkeClusterExtensionsObservabilityOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsObservability) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.
func (o GetSkeClusterExtensionsObservabilityOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterExtensionsObservability) string { return v.InstanceId }).(pulumi.StringOutput)
}

type GetSkeClusterHibernation struct {
	// End time of hibernation, in crontab syntax.
	End string `pulumi:"end"`
	// Start time of cluster hibernation in crontab syntax.
	Start string `pulumi:"start"`
	// Timezone name corresponding to a file in the IANA Time Zone database.
	Timezone string `pulumi:"timezone"`
}

// GetSkeClusterHibernationInput is an input type that accepts GetSkeClusterHibernationArgs and GetSkeClusterHibernationOutput values.
// You can construct a concrete instance of `GetSkeClusterHibernationInput` via:
//
//	GetSkeClusterHibernationArgs{...}
type GetSkeClusterHibernationInput interface {
	pulumi.Input

	ToGetSkeClusterHibernationOutput() GetSkeClusterHibernationOutput
	ToGetSkeClusterHibernationOutputWithContext(context.Context) GetSkeClusterHibernationOutput
}

type GetSkeClusterHibernationArgs struct {
	// End time of hibernation, in crontab syntax.
	End pulumi.StringInput `pulumi:"end"`
	// Start time of cluster hibernation in crontab syntax.
	Start pulumi.StringInput `pulumi:"start"`
	// Timezone name corresponding to a file in the IANA Time Zone database.
	Timezone pulumi.StringInput `pulumi:"timezone"`
}

func (GetSkeClusterHibernationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterHibernation)(nil)).Elem()
}

func (i GetSkeClusterHibernationArgs) ToGetSkeClusterHibernationOutput() GetSkeClusterHibernationOutput {
	return i.ToGetSkeClusterHibernationOutputWithContext(context.Background())
}

func (i GetSkeClusterHibernationArgs) ToGetSkeClusterHibernationOutputWithContext(ctx context.Context) GetSkeClusterHibernationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterHibernationOutput)
}

// GetSkeClusterHibernationArrayInput is an input type that accepts GetSkeClusterHibernationArray and GetSkeClusterHibernationArrayOutput values.
// You can construct a concrete instance of `GetSkeClusterHibernationArrayInput` via:
//
//	GetSkeClusterHibernationArray{ GetSkeClusterHibernationArgs{...} }
type GetSkeClusterHibernationArrayInput interface {
	pulumi.Input

	ToGetSkeClusterHibernationArrayOutput() GetSkeClusterHibernationArrayOutput
	ToGetSkeClusterHibernationArrayOutputWithContext(context.Context) GetSkeClusterHibernationArrayOutput
}

type GetSkeClusterHibernationArray []GetSkeClusterHibernationInput

func (GetSkeClusterHibernationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterHibernation)(nil)).Elem()
}

func (i GetSkeClusterHibernationArray) ToGetSkeClusterHibernationArrayOutput() GetSkeClusterHibernationArrayOutput {
	return i.ToGetSkeClusterHibernationArrayOutputWithContext(context.Background())
}

func (i GetSkeClusterHibernationArray) ToGetSkeClusterHibernationArrayOutputWithContext(ctx context.Context) GetSkeClusterHibernationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterHibernationArrayOutput)
}

type GetSkeClusterHibernationOutput struct{ *pulumi.OutputState }

func (GetSkeClusterHibernationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterHibernation)(nil)).Elem()
}

func (o GetSkeClusterHibernationOutput) ToGetSkeClusterHibernationOutput() GetSkeClusterHibernationOutput {
	return o
}

func (o GetSkeClusterHibernationOutput) ToGetSkeClusterHibernationOutputWithContext(ctx context.Context) GetSkeClusterHibernationOutput {
	return o
}

// End time of hibernation, in crontab syntax.
func (o GetSkeClusterHibernationOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterHibernation) string { return v.End }).(pulumi.StringOutput)
}

// Start time of cluster hibernation in crontab syntax.
func (o GetSkeClusterHibernationOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterHibernation) string { return v.Start }).(pulumi.StringOutput)
}

// Timezone name corresponding to a file in the IANA Time Zone database.
func (o GetSkeClusterHibernationOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterHibernation) string { return v.Timezone }).(pulumi.StringOutput)
}

type GetSkeClusterHibernationArrayOutput struct{ *pulumi.OutputState }

func (GetSkeClusterHibernationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterHibernation)(nil)).Elem()
}

func (o GetSkeClusterHibernationArrayOutput) ToGetSkeClusterHibernationArrayOutput() GetSkeClusterHibernationArrayOutput {
	return o
}

func (o GetSkeClusterHibernationArrayOutput) ToGetSkeClusterHibernationArrayOutputWithContext(ctx context.Context) GetSkeClusterHibernationArrayOutput {
	return o
}

func (o GetSkeClusterHibernationArrayOutput) Index(i pulumi.IntInput) GetSkeClusterHibernationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSkeClusterHibernation {
		return vs[0].([]GetSkeClusterHibernation)[vs[1].(int)]
	}).(GetSkeClusterHibernationOutput)
}

type GetSkeClusterMaintenance struct {
	// Flag to enable/disable auto-updates of the Kubernetes version.
	EnableKubernetesVersionUpdates bool `pulumi:"enableKubernetesVersionUpdates"`
	// Flag to enable/disable auto-updates of the OS image version.
	EnableMachineImageVersionUpdates bool `pulumi:"enableMachineImageVersionUpdates"`
	// Date time for maintenance window end.
	End string `pulumi:"end"`
	// Date time for maintenance window start.
	Start string `pulumi:"start"`
}

// GetSkeClusterMaintenanceInput is an input type that accepts GetSkeClusterMaintenanceArgs and GetSkeClusterMaintenanceOutput values.
// You can construct a concrete instance of `GetSkeClusterMaintenanceInput` via:
//
//	GetSkeClusterMaintenanceArgs{...}
type GetSkeClusterMaintenanceInput interface {
	pulumi.Input

	ToGetSkeClusterMaintenanceOutput() GetSkeClusterMaintenanceOutput
	ToGetSkeClusterMaintenanceOutputWithContext(context.Context) GetSkeClusterMaintenanceOutput
}

type GetSkeClusterMaintenanceArgs struct {
	// Flag to enable/disable auto-updates of the Kubernetes version.
	EnableKubernetesVersionUpdates pulumi.BoolInput `pulumi:"enableKubernetesVersionUpdates"`
	// Flag to enable/disable auto-updates of the OS image version.
	EnableMachineImageVersionUpdates pulumi.BoolInput `pulumi:"enableMachineImageVersionUpdates"`
	// Date time for maintenance window end.
	End pulumi.StringInput `pulumi:"end"`
	// Date time for maintenance window start.
	Start pulumi.StringInput `pulumi:"start"`
}

func (GetSkeClusterMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterMaintenance)(nil)).Elem()
}

func (i GetSkeClusterMaintenanceArgs) ToGetSkeClusterMaintenanceOutput() GetSkeClusterMaintenanceOutput {
	return i.ToGetSkeClusterMaintenanceOutputWithContext(context.Background())
}

func (i GetSkeClusterMaintenanceArgs) ToGetSkeClusterMaintenanceOutputWithContext(ctx context.Context) GetSkeClusterMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterMaintenanceOutput)
}

type GetSkeClusterMaintenanceOutput struct{ *pulumi.OutputState }

func (GetSkeClusterMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterMaintenance)(nil)).Elem()
}

func (o GetSkeClusterMaintenanceOutput) ToGetSkeClusterMaintenanceOutput() GetSkeClusterMaintenanceOutput {
	return o
}

func (o GetSkeClusterMaintenanceOutput) ToGetSkeClusterMaintenanceOutputWithContext(ctx context.Context) GetSkeClusterMaintenanceOutput {
	return o
}

// Flag to enable/disable auto-updates of the Kubernetes version.
func (o GetSkeClusterMaintenanceOutput) EnableKubernetesVersionUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterMaintenance) bool { return v.EnableKubernetesVersionUpdates }).(pulumi.BoolOutput)
}

// Flag to enable/disable auto-updates of the OS image version.
func (o GetSkeClusterMaintenanceOutput) EnableMachineImageVersionUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterMaintenance) bool { return v.EnableMachineImageVersionUpdates }).(pulumi.BoolOutput)
}

// Date time for maintenance window end.
func (o GetSkeClusterMaintenanceOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterMaintenance) string { return v.End }).(pulumi.StringOutput)
}

// Date time for maintenance window start.
func (o GetSkeClusterMaintenanceOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterMaintenance) string { return v.Start }).(pulumi.StringOutput)
}

type GetSkeClusterNetwork struct {
	// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
	Id string `pulumi:"id"`
}

// GetSkeClusterNetworkInput is an input type that accepts GetSkeClusterNetworkArgs and GetSkeClusterNetworkOutput values.
// You can construct a concrete instance of `GetSkeClusterNetworkInput` via:
//
//	GetSkeClusterNetworkArgs{...}
type GetSkeClusterNetworkInput interface {
	pulumi.Input

	ToGetSkeClusterNetworkOutput() GetSkeClusterNetworkOutput
	ToGetSkeClusterNetworkOutputWithContext(context.Context) GetSkeClusterNetworkOutput
}

type GetSkeClusterNetworkArgs struct {
	// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetSkeClusterNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNetwork)(nil)).Elem()
}

func (i GetSkeClusterNetworkArgs) ToGetSkeClusterNetworkOutput() GetSkeClusterNetworkOutput {
	return i.ToGetSkeClusterNetworkOutputWithContext(context.Background())
}

func (i GetSkeClusterNetworkArgs) ToGetSkeClusterNetworkOutputWithContext(ctx context.Context) GetSkeClusterNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterNetworkOutput)
}

type GetSkeClusterNetworkOutput struct{ *pulumi.OutputState }

func (GetSkeClusterNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNetwork)(nil)).Elem()
}

func (o GetSkeClusterNetworkOutput) ToGetSkeClusterNetworkOutput() GetSkeClusterNetworkOutput {
	return o
}

func (o GetSkeClusterNetworkOutput) ToGetSkeClusterNetworkOutputWithContext(ctx context.Context) GetSkeClusterNetworkOutput {
	return o
}

// ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.
func (o GetSkeClusterNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetSkeClusterNodePool struct {
	// Allow system components to run on this node pool.
	AllowSystemComponents bool `pulumi:"allowSystemComponents"`
	// Specify a list of availability zones.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the container runtime.
	Cri string `pulumi:"cri"`
	// Labels to add to each node.
	Labels map[string]string `pulumi:"labels"`
	// The machine type.
	MachineType string `pulumi:"machineType"`
	// The maximum number of nodes upgraded simultaneously.
	MaxSurge int `pulumi:"maxSurge"`
	// The maximum number of nodes unavailable during upgraded.
	MaxUnavailable int `pulumi:"maxUnavailable"`
	// Maximum number of nodes in the pool.
	Maximum int `pulumi:"maximum"`
	// Minimum number of nodes in the pool.
	Minimum int `pulumi:"minimum"`
	// Specifies the name of the node pool.
	Name string `pulumi:"name"`
	// The name of the OS image.
	OsName string `pulumi:"osName"`
	// The OS image version.
	OsVersion string `pulumi:"osVersion"`
	// The minimum OS image version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
	OsVersionMin string `pulumi:"osVersionMin"`
	// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	OsVersionUsed string `pulumi:"osVersionUsed"`
	// Specifies a taint list as defined below.
	Taints []GetSkeClusterNodePoolTaint `pulumi:"taints"`
	// The volume size in GB.
	VolumeSize int `pulumi:"volumeSize"`
	// Specifies the volume type.
	VolumeType string `pulumi:"volumeType"`
}

// GetSkeClusterNodePoolInput is an input type that accepts GetSkeClusterNodePoolArgs and GetSkeClusterNodePoolOutput values.
// You can construct a concrete instance of `GetSkeClusterNodePoolInput` via:
//
//	GetSkeClusterNodePoolArgs{...}
type GetSkeClusterNodePoolInput interface {
	pulumi.Input

	ToGetSkeClusterNodePoolOutput() GetSkeClusterNodePoolOutput
	ToGetSkeClusterNodePoolOutputWithContext(context.Context) GetSkeClusterNodePoolOutput
}

type GetSkeClusterNodePoolArgs struct {
	// Allow system components to run on this node pool.
	AllowSystemComponents pulumi.BoolInput `pulumi:"allowSystemComponents"`
	// Specify a list of availability zones.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// Specifies the container runtime.
	Cri pulumi.StringInput `pulumi:"cri"`
	// Labels to add to each node.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The machine type.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// The maximum number of nodes upgraded simultaneously.
	MaxSurge pulumi.IntInput `pulumi:"maxSurge"`
	// The maximum number of nodes unavailable during upgraded.
	MaxUnavailable pulumi.IntInput `pulumi:"maxUnavailable"`
	// Maximum number of nodes in the pool.
	Maximum pulumi.IntInput `pulumi:"maximum"`
	// Minimum number of nodes in the pool.
	Minimum pulumi.IntInput `pulumi:"minimum"`
	// Specifies the name of the node pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the OS image.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The OS image version.
	OsVersion pulumi.StringInput `pulumi:"osVersion"`
	// The minimum OS image version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
	OsVersionMin pulumi.StringInput `pulumi:"osVersionMin"`
	// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	OsVersionUsed pulumi.StringInput `pulumi:"osVersionUsed"`
	// Specifies a taint list as defined below.
	Taints GetSkeClusterNodePoolTaintArrayInput `pulumi:"taints"`
	// The volume size in GB.
	VolumeSize pulumi.IntInput `pulumi:"volumeSize"`
	// Specifies the volume type.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetSkeClusterNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNodePool)(nil)).Elem()
}

func (i GetSkeClusterNodePoolArgs) ToGetSkeClusterNodePoolOutput() GetSkeClusterNodePoolOutput {
	return i.ToGetSkeClusterNodePoolOutputWithContext(context.Background())
}

func (i GetSkeClusterNodePoolArgs) ToGetSkeClusterNodePoolOutputWithContext(ctx context.Context) GetSkeClusterNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterNodePoolOutput)
}

// GetSkeClusterNodePoolArrayInput is an input type that accepts GetSkeClusterNodePoolArray and GetSkeClusterNodePoolArrayOutput values.
// You can construct a concrete instance of `GetSkeClusterNodePoolArrayInput` via:
//
//	GetSkeClusterNodePoolArray{ GetSkeClusterNodePoolArgs{...} }
type GetSkeClusterNodePoolArrayInput interface {
	pulumi.Input

	ToGetSkeClusterNodePoolArrayOutput() GetSkeClusterNodePoolArrayOutput
	ToGetSkeClusterNodePoolArrayOutputWithContext(context.Context) GetSkeClusterNodePoolArrayOutput
}

type GetSkeClusterNodePoolArray []GetSkeClusterNodePoolInput

func (GetSkeClusterNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterNodePool)(nil)).Elem()
}

func (i GetSkeClusterNodePoolArray) ToGetSkeClusterNodePoolArrayOutput() GetSkeClusterNodePoolArrayOutput {
	return i.ToGetSkeClusterNodePoolArrayOutputWithContext(context.Background())
}

func (i GetSkeClusterNodePoolArray) ToGetSkeClusterNodePoolArrayOutputWithContext(ctx context.Context) GetSkeClusterNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterNodePoolArrayOutput)
}

type GetSkeClusterNodePoolOutput struct{ *pulumi.OutputState }

func (GetSkeClusterNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNodePool)(nil)).Elem()
}

func (o GetSkeClusterNodePoolOutput) ToGetSkeClusterNodePoolOutput() GetSkeClusterNodePoolOutput {
	return o
}

func (o GetSkeClusterNodePoolOutput) ToGetSkeClusterNodePoolOutputWithContext(ctx context.Context) GetSkeClusterNodePoolOutput {
	return o
}

// Allow system components to run on this node pool.
func (o GetSkeClusterNodePoolOutput) AllowSystemComponents() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) bool { return v.AllowSystemComponents }).(pulumi.BoolOutput)
}

// Specify a list of availability zones.
func (o GetSkeClusterNodePoolOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Specifies the container runtime.
func (o GetSkeClusterNodePoolOutput) Cri() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.Cri }).(pulumi.StringOutput)
}

// Labels to add to each node.
func (o GetSkeClusterNodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type.
func (o GetSkeClusterNodePoolOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.MachineType }).(pulumi.StringOutput)
}

// The maximum number of nodes upgraded simultaneously.
func (o GetSkeClusterNodePoolOutput) MaxSurge() pulumi.IntOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) int { return v.MaxSurge }).(pulumi.IntOutput)
}

// The maximum number of nodes unavailable during upgraded.
func (o GetSkeClusterNodePoolOutput) MaxUnavailable() pulumi.IntOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) int { return v.MaxUnavailable }).(pulumi.IntOutput)
}

// Maximum number of nodes in the pool.
func (o GetSkeClusterNodePoolOutput) Maximum() pulumi.IntOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) int { return v.Maximum }).(pulumi.IntOutput)
}

// Minimum number of nodes in the pool.
func (o GetSkeClusterNodePoolOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) int { return v.Minimum }).(pulumi.IntOutput)
}

// Specifies the name of the node pool.
func (o GetSkeClusterNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the OS image.
func (o GetSkeClusterNodePoolOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.OsName }).(pulumi.StringOutput)
}

// The OS image version.
func (o GetSkeClusterNodePoolOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.OsVersion }).(pulumi.StringOutput)
}

// The minimum OS image version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `osVersionUsed` field.
func (o GetSkeClusterNodePoolOutput) OsVersionMin() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.OsVersionMin }).(pulumi.StringOutput)
}

// Full OS image version used. For example, if 3815.2 was set in `osVersionMin`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o GetSkeClusterNodePoolOutput) OsVersionUsed() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.OsVersionUsed }).(pulumi.StringOutput)
}

// Specifies a taint list as defined below.
func (o GetSkeClusterNodePoolOutput) Taints() GetSkeClusterNodePoolTaintArrayOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) []GetSkeClusterNodePoolTaint { return v.Taints }).(GetSkeClusterNodePoolTaintArrayOutput)
}

// The volume size in GB.
func (o GetSkeClusterNodePoolOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) int { return v.VolumeSize }).(pulumi.IntOutput)
}

// Specifies the volume type.
func (o GetSkeClusterNodePoolOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePool) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetSkeClusterNodePoolArrayOutput struct{ *pulumi.OutputState }

func (GetSkeClusterNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterNodePool)(nil)).Elem()
}

func (o GetSkeClusterNodePoolArrayOutput) ToGetSkeClusterNodePoolArrayOutput() GetSkeClusterNodePoolArrayOutput {
	return o
}

func (o GetSkeClusterNodePoolArrayOutput) ToGetSkeClusterNodePoolArrayOutputWithContext(ctx context.Context) GetSkeClusterNodePoolArrayOutput {
	return o
}

func (o GetSkeClusterNodePoolArrayOutput) Index(i pulumi.IntInput) GetSkeClusterNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSkeClusterNodePool {
		return vs[0].([]GetSkeClusterNodePool)[vs[1].(int)]
	}).(GetSkeClusterNodePoolOutput)
}

type GetSkeClusterNodePoolTaint struct {
	// The taint effect.
	Effect string `pulumi:"effect"`
	// Taint key to be applied to a node.
	Key string `pulumi:"key"`
	// Taint value corresponding to the taint key.
	Value string `pulumi:"value"`
}

// GetSkeClusterNodePoolTaintInput is an input type that accepts GetSkeClusterNodePoolTaintArgs and GetSkeClusterNodePoolTaintOutput values.
// You can construct a concrete instance of `GetSkeClusterNodePoolTaintInput` via:
//
//	GetSkeClusterNodePoolTaintArgs{...}
type GetSkeClusterNodePoolTaintInput interface {
	pulumi.Input

	ToGetSkeClusterNodePoolTaintOutput() GetSkeClusterNodePoolTaintOutput
	ToGetSkeClusterNodePoolTaintOutputWithContext(context.Context) GetSkeClusterNodePoolTaintOutput
}

type GetSkeClusterNodePoolTaintArgs struct {
	// The taint effect.
	Effect pulumi.StringInput `pulumi:"effect"`
	// Taint key to be applied to a node.
	Key pulumi.StringInput `pulumi:"key"`
	// Taint value corresponding to the taint key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSkeClusterNodePoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNodePoolTaint)(nil)).Elem()
}

func (i GetSkeClusterNodePoolTaintArgs) ToGetSkeClusterNodePoolTaintOutput() GetSkeClusterNodePoolTaintOutput {
	return i.ToGetSkeClusterNodePoolTaintOutputWithContext(context.Background())
}

func (i GetSkeClusterNodePoolTaintArgs) ToGetSkeClusterNodePoolTaintOutputWithContext(ctx context.Context) GetSkeClusterNodePoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterNodePoolTaintOutput)
}

// GetSkeClusterNodePoolTaintArrayInput is an input type that accepts GetSkeClusterNodePoolTaintArray and GetSkeClusterNodePoolTaintArrayOutput values.
// You can construct a concrete instance of `GetSkeClusterNodePoolTaintArrayInput` via:
//
//	GetSkeClusterNodePoolTaintArray{ GetSkeClusterNodePoolTaintArgs{...} }
type GetSkeClusterNodePoolTaintArrayInput interface {
	pulumi.Input

	ToGetSkeClusterNodePoolTaintArrayOutput() GetSkeClusterNodePoolTaintArrayOutput
	ToGetSkeClusterNodePoolTaintArrayOutputWithContext(context.Context) GetSkeClusterNodePoolTaintArrayOutput
}

type GetSkeClusterNodePoolTaintArray []GetSkeClusterNodePoolTaintInput

func (GetSkeClusterNodePoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterNodePoolTaint)(nil)).Elem()
}

func (i GetSkeClusterNodePoolTaintArray) ToGetSkeClusterNodePoolTaintArrayOutput() GetSkeClusterNodePoolTaintArrayOutput {
	return i.ToGetSkeClusterNodePoolTaintArrayOutputWithContext(context.Background())
}

func (i GetSkeClusterNodePoolTaintArray) ToGetSkeClusterNodePoolTaintArrayOutputWithContext(ctx context.Context) GetSkeClusterNodePoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkeClusterNodePoolTaintArrayOutput)
}

type GetSkeClusterNodePoolTaintOutput struct{ *pulumi.OutputState }

func (GetSkeClusterNodePoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkeClusterNodePoolTaint)(nil)).Elem()
}

func (o GetSkeClusterNodePoolTaintOutput) ToGetSkeClusterNodePoolTaintOutput() GetSkeClusterNodePoolTaintOutput {
	return o
}

func (o GetSkeClusterNodePoolTaintOutput) ToGetSkeClusterNodePoolTaintOutputWithContext(ctx context.Context) GetSkeClusterNodePoolTaintOutput {
	return o
}

// The taint effect.
func (o GetSkeClusterNodePoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

// Taint key to be applied to a node.
func (o GetSkeClusterNodePoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

// Taint value corresponding to the taint key.
func (o GetSkeClusterNodePoolTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkeClusterNodePoolTaint) string { return v.Value }).(pulumi.StringOutput)
}

type GetSkeClusterNodePoolTaintArrayOutput struct{ *pulumi.OutputState }

func (GetSkeClusterNodePoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkeClusterNodePoolTaint)(nil)).Elem()
}

func (o GetSkeClusterNodePoolTaintArrayOutput) ToGetSkeClusterNodePoolTaintArrayOutput() GetSkeClusterNodePoolTaintArrayOutput {
	return o
}

func (o GetSkeClusterNodePoolTaintArrayOutput) ToGetSkeClusterNodePoolTaintArrayOutputWithContext(ctx context.Context) GetSkeClusterNodePoolTaintArrayOutput {
	return o
}

func (o GetSkeClusterNodePoolTaintArrayOutput) Index(i pulumi.IntInput) GetSkeClusterNodePoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSkeClusterNodePoolTaint {
		return vs[0].([]GetSkeClusterNodePoolTaint)[vs[1].(int)]
	}).(GetSkeClusterNodePoolTaintOutput)
}

type GetSqlserverflexInstanceFlavor struct {
	Cpu         int    `pulumi:"cpu"`
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Ram         int    `pulumi:"ram"`
}

// GetSqlserverflexInstanceFlavorInput is an input type that accepts GetSqlserverflexInstanceFlavorArgs and GetSqlserverflexInstanceFlavorOutput values.
// You can construct a concrete instance of `GetSqlserverflexInstanceFlavorInput` via:
//
//	GetSqlserverflexInstanceFlavorArgs{...}
type GetSqlserverflexInstanceFlavorInput interface {
	pulumi.Input

	ToGetSqlserverflexInstanceFlavorOutput() GetSqlserverflexInstanceFlavorOutput
	ToGetSqlserverflexInstanceFlavorOutputWithContext(context.Context) GetSqlserverflexInstanceFlavorOutput
}

type GetSqlserverflexInstanceFlavorArgs struct {
	Cpu         pulumi.IntInput    `pulumi:"cpu"`
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.StringInput `pulumi:"id"`
	Ram         pulumi.IntInput    `pulumi:"ram"`
}

func (GetSqlserverflexInstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceFlavor)(nil)).Elem()
}

func (i GetSqlserverflexInstanceFlavorArgs) ToGetSqlserverflexInstanceFlavorOutput() GetSqlserverflexInstanceFlavorOutput {
	return i.ToGetSqlserverflexInstanceFlavorOutputWithContext(context.Background())
}

func (i GetSqlserverflexInstanceFlavorArgs) ToGetSqlserverflexInstanceFlavorOutputWithContext(ctx context.Context) GetSqlserverflexInstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlserverflexInstanceFlavorOutput)
}

type GetSqlserverflexInstanceFlavorOutput struct{ *pulumi.OutputState }

func (GetSqlserverflexInstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceFlavor)(nil)).Elem()
}

func (o GetSqlserverflexInstanceFlavorOutput) ToGetSqlserverflexInstanceFlavorOutput() GetSqlserverflexInstanceFlavorOutput {
	return o
}

func (o GetSqlserverflexInstanceFlavorOutput) ToGetSqlserverflexInstanceFlavorOutputWithContext(ctx context.Context) GetSqlserverflexInstanceFlavorOutput {
	return o
}

func (o GetSqlserverflexInstanceFlavorOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceFlavor) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o GetSqlserverflexInstanceFlavorOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceFlavor) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetSqlserverflexInstanceFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceFlavor) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlserverflexInstanceFlavorOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceFlavor) int { return v.Ram }).(pulumi.IntOutput)
}

type GetSqlserverflexInstanceOptions struct {
	Edition       string `pulumi:"edition"`
	RetentionDays int    `pulumi:"retentionDays"`
}

// GetSqlserverflexInstanceOptionsInput is an input type that accepts GetSqlserverflexInstanceOptionsArgs and GetSqlserverflexInstanceOptionsOutput values.
// You can construct a concrete instance of `GetSqlserverflexInstanceOptionsInput` via:
//
//	GetSqlserverflexInstanceOptionsArgs{...}
type GetSqlserverflexInstanceOptionsInput interface {
	pulumi.Input

	ToGetSqlserverflexInstanceOptionsOutput() GetSqlserverflexInstanceOptionsOutput
	ToGetSqlserverflexInstanceOptionsOutputWithContext(context.Context) GetSqlserverflexInstanceOptionsOutput
}

type GetSqlserverflexInstanceOptionsArgs struct {
	Edition       pulumi.StringInput `pulumi:"edition"`
	RetentionDays pulumi.IntInput    `pulumi:"retentionDays"`
}

func (GetSqlserverflexInstanceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceOptions)(nil)).Elem()
}

func (i GetSqlserverflexInstanceOptionsArgs) ToGetSqlserverflexInstanceOptionsOutput() GetSqlserverflexInstanceOptionsOutput {
	return i.ToGetSqlserverflexInstanceOptionsOutputWithContext(context.Background())
}

func (i GetSqlserverflexInstanceOptionsArgs) ToGetSqlserverflexInstanceOptionsOutputWithContext(ctx context.Context) GetSqlserverflexInstanceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlserverflexInstanceOptionsOutput)
}

type GetSqlserverflexInstanceOptionsOutput struct{ *pulumi.OutputState }

func (GetSqlserverflexInstanceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceOptions)(nil)).Elem()
}

func (o GetSqlserverflexInstanceOptionsOutput) ToGetSqlserverflexInstanceOptionsOutput() GetSqlserverflexInstanceOptionsOutput {
	return o
}

func (o GetSqlserverflexInstanceOptionsOutput) ToGetSqlserverflexInstanceOptionsOutputWithContext(ctx context.Context) GetSqlserverflexInstanceOptionsOutput {
	return o
}

func (o GetSqlserverflexInstanceOptionsOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceOptions) string { return v.Edition }).(pulumi.StringOutput)
}

func (o GetSqlserverflexInstanceOptionsOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceOptions) int { return v.RetentionDays }).(pulumi.IntOutput)
}

type GetSqlserverflexInstanceStorage struct {
	Class string `pulumi:"class"`
	Size  int    `pulumi:"size"`
}

// GetSqlserverflexInstanceStorageInput is an input type that accepts GetSqlserverflexInstanceStorageArgs and GetSqlserverflexInstanceStorageOutput values.
// You can construct a concrete instance of `GetSqlserverflexInstanceStorageInput` via:
//
//	GetSqlserverflexInstanceStorageArgs{...}
type GetSqlserverflexInstanceStorageInput interface {
	pulumi.Input

	ToGetSqlserverflexInstanceStorageOutput() GetSqlserverflexInstanceStorageOutput
	ToGetSqlserverflexInstanceStorageOutputWithContext(context.Context) GetSqlserverflexInstanceStorageOutput
}

type GetSqlserverflexInstanceStorageArgs struct {
	Class pulumi.StringInput `pulumi:"class"`
	Size  pulumi.IntInput    `pulumi:"size"`
}

func (GetSqlserverflexInstanceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceStorage)(nil)).Elem()
}

func (i GetSqlserverflexInstanceStorageArgs) ToGetSqlserverflexInstanceStorageOutput() GetSqlserverflexInstanceStorageOutput {
	return i.ToGetSqlserverflexInstanceStorageOutputWithContext(context.Background())
}

func (i GetSqlserverflexInstanceStorageArgs) ToGetSqlserverflexInstanceStorageOutputWithContext(ctx context.Context) GetSqlserverflexInstanceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlserverflexInstanceStorageOutput)
}

type GetSqlserverflexInstanceStorageOutput struct{ *pulumi.OutputState }

func (GetSqlserverflexInstanceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlserverflexInstanceStorage)(nil)).Elem()
}

func (o GetSqlserverflexInstanceStorageOutput) ToGetSqlserverflexInstanceStorageOutput() GetSqlserverflexInstanceStorageOutput {
	return o
}

func (o GetSqlserverflexInstanceStorageOutput) ToGetSqlserverflexInstanceStorageOutputWithContext(ctx context.Context) GetSqlserverflexInstanceStorageOutput {
	return o
}

func (o GetSqlserverflexInstanceStorageOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceStorage) string { return v.Class }).(pulumi.StringOutput)
}

func (o GetSqlserverflexInstanceStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlserverflexInstanceStorage) int { return v.Size }).(pulumi.IntOutput)
}

type GetVolumeSource struct {
	// The ID of the source, e.g. image ID
	Id string `pulumi:"id"`
	// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
	Type string `pulumi:"type"`
}

// GetVolumeSourceInput is an input type that accepts GetVolumeSourceArgs and GetVolumeSourceOutput values.
// You can construct a concrete instance of `GetVolumeSourceInput` via:
//
//	GetVolumeSourceArgs{...}
type GetVolumeSourceInput interface {
	pulumi.Input

	ToGetVolumeSourceOutput() GetVolumeSourceOutput
	ToGetVolumeSourceOutputWithContext(context.Context) GetVolumeSourceOutput
}

type GetVolumeSourceArgs struct {
	// The ID of the source, e.g. image ID
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeSource)(nil)).Elem()
}

func (i GetVolumeSourceArgs) ToGetVolumeSourceOutput() GetVolumeSourceOutput {
	return i.ToGetVolumeSourceOutputWithContext(context.Background())
}

func (i GetVolumeSourceArgs) ToGetVolumeSourceOutputWithContext(ctx context.Context) GetVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeSourceOutput)
}

type GetVolumeSourceOutput struct{ *pulumi.OutputState }

func (GetVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeSource)(nil)).Elem()
}

func (o GetVolumeSourceOutput) ToGetVolumeSourceOutput() GetVolumeSourceOutput {
	return o
}

func (o GetVolumeSourceOutput) ToGetVolumeSourceOutputWithContext(ctx context.Context) GetVolumeSourceOutput {
	return o
}

// The ID of the source, e.g. image ID
func (o GetVolumeSourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeSource) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.
func (o GetVolumeSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeSource) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigInput)(nil)).Elem(), CdnDistributionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigPtrInput)(nil)).Elem(), CdnDistributionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigBackendInput)(nil)).Elem(), CdnDistributionConfigBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigBackendPtrInput)(nil)).Elem(), CdnDistributionConfigBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigOptimizerInput)(nil)).Elem(), CdnDistributionConfigOptimizerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionConfigOptimizerPtrInput)(nil)).Elem(), CdnDistributionConfigOptimizerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionDomainInput)(nil)).Elem(), CdnDistributionDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDistributionDomainArrayInput)(nil)).Elem(), CdnDistributionDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageChecksumInput)(nil)).Elem(), ImageChecksumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageChecksumPtrInput)(nil)).Elem(), ImageChecksumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageConfigInput)(nil)).Elem(), ImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageConfigPtrInput)(nil)).Elem(), ImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerInput)(nil)).Elem(), LoadbalancerListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerArrayInput)(nil)).Elem(), LoadbalancerListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerServerNameIndicatorInput)(nil)).Elem(), LoadbalancerListenerServerNameIndicatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerServerNameIndicatorArrayInput)(nil)).Elem(), LoadbalancerListenerServerNameIndicatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerNetworkInput)(nil)).Elem(), LoadbalancerNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerNetworkArrayInput)(nil)).Elem(), LoadbalancerNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsInput)(nil)).Elem(), LoadbalancerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsPtrInput)(nil)).Elem(), LoadbalancerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityInput)(nil)).Elem(), LoadbalancerOptionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityPtrInput)(nil)).Elem(), LoadbalancerOptionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityLogsInput)(nil)).Elem(), LoadbalancerOptionsObservabilityLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityLogsPtrInput)(nil)).Elem(), LoadbalancerOptionsObservabilityLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityMetricsInput)(nil)).Elem(), LoadbalancerOptionsObservabilityMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerOptionsObservabilityMetricsPtrInput)(nil)).Elem(), LoadbalancerOptionsObservabilityMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolInput)(nil)).Elem(), LoadbalancerTargetPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolArrayInput)(nil)).Elem(), LoadbalancerTargetPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolActiveHealthCheckInput)(nil)).Elem(), LoadbalancerTargetPoolActiveHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolActiveHealthCheckPtrInput)(nil)).Elem(), LoadbalancerTargetPoolActiveHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolSessionPersistenceInput)(nil)).Elem(), LoadbalancerTargetPoolSessionPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolSessionPersistencePtrInput)(nil)).Elem(), LoadbalancerTargetPoolSessionPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolTargetInput)(nil)).Elem(), LoadbalancerTargetPoolTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerTargetPoolTargetArrayInput)(nil)).Elem(), LoadbalancerTargetPoolTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogmeInstanceParametersInput)(nil)).Elem(), LogmeInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogmeInstanceParametersPtrInput)(nil)).Elem(), LogmeInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbInstanceParametersInput)(nil)).Elem(), MariadbInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbInstanceParametersPtrInput)(nil)).Elem(), MariadbInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceFlavorInput)(nil)).Elem(), MongodbflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceFlavorPtrInput)(nil)).Elem(), MongodbflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceOptionsInput)(nil)).Elem(), MongodbflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceOptionsPtrInput)(nil)).Elem(), MongodbflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceStorageInput)(nil)).Elem(), MongodbflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceStoragePtrInput)(nil)).Elem(), MongodbflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAreaNetworkRangeInput)(nil)).Elem(), NetworkAreaNetworkRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAreaNetworkRangeArrayInput)(nil)).Elem(), NetworkAreaNetworkRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityAlertgroupRuleInput)(nil)).Elem(), ObservabilityAlertgroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityAlertgroupRuleArrayInput)(nil)).Elem(), ObservabilityAlertgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigInput)(nil)).Elem(), ObservabilityInstanceAlertConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigPtrInput)(nil)).Elem(), ObservabilityInstanceAlertConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigGlobalInput)(nil)).Elem(), ObservabilityInstanceAlertConfigGlobalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigGlobalPtrInput)(nil)).Elem(), ObservabilityInstanceAlertConfigGlobalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverArrayInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverEmailConfigInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverEmailConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverEmailConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverWebhooksConfigInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput)(nil)).Elem(), ObservabilityInstanceAlertConfigReceiverWebhooksConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigRouteInput)(nil)).Elem(), ObservabilityInstanceAlertConfigRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigRoutePtrInput)(nil)).Elem(), ObservabilityInstanceAlertConfigRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigRouteRouteInput)(nil)).Elem(), ObservabilityInstanceAlertConfigRouteRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityInstanceAlertConfigRouteRouteArrayInput)(nil)).Elem(), ObservabilityInstanceAlertConfigRouteRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityLogalertgroupRuleInput)(nil)).Elem(), ObservabilityLogalertgroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityLogalertgroupRuleArrayInput)(nil)).Elem(), ObservabilityLogalertgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigBasicAuthInput)(nil)).Elem(), ObservabilityScrapeconfigBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigBasicAuthPtrInput)(nil)).Elem(), ObservabilityScrapeconfigBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigSaml2Input)(nil)).Elem(), ObservabilityScrapeconfigSaml2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigSaml2PtrInput)(nil)).Elem(), ObservabilityScrapeconfigSaml2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigTargetInput)(nil)).Elem(), ObservabilityScrapeconfigTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityScrapeconfigTargetArrayInput)(nil)).Elem(), ObservabilityScrapeconfigTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchInstanceParametersInput)(nil)).Elem(), OpensearchInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchInstanceParametersPtrInput)(nil)).Elem(), OpensearchInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceFlavorInput)(nil)).Elem(), PostgresflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceFlavorPtrInput)(nil)).Elem(), PostgresflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceStorageInput)(nil)).Elem(), PostgresflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceStoragePtrInput)(nil)).Elem(), PostgresflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceParametersInput)(nil)).Elem(), RabbitmqInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceParametersPtrInput)(nil)).Elem(), RabbitmqInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInstanceParametersInput)(nil)).Elem(), RedisInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInstanceParametersPtrInput)(nil)).Elem(), RedisInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteDestinationInput)(nil)).Elem(), RoutingTableRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteDestinationPtrInput)(nil)).Elem(), RoutingTableRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteNextHopInput)(nil)).Elem(), RoutingTableRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableRouteNextHopPtrInput)(nil)).Elem(), RoutingTableRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleIcmpParametersInput)(nil)).Elem(), SecurityGroupRuleIcmpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleIcmpParametersPtrInput)(nil)).Elem(), SecurityGroupRuleIcmpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulePortRangeInput)(nil)).Elem(), SecurityGroupRulePortRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulePortRangePtrInput)(nil)).Elem(), SecurityGroupRulePortRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleProtocolInput)(nil)).Elem(), SecurityGroupRuleProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleProtocolPtrInput)(nil)).Elem(), SecurityGroupRuleProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBackupScheduleBackupPropertiesInput)(nil)).Elem(), ServerBackupScheduleBackupPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBackupScheduleBackupPropertiesPtrInput)(nil)).Elem(), ServerBackupScheduleBackupPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBootVolumeInput)(nil)).Elem(), ServerBootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBootVolumePtrInput)(nil)).Elem(), ServerBootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsInput)(nil)).Elem(), SkeClusterExtensionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsPtrInput)(nil)).Elem(), SkeClusterExtensionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsAclInput)(nil)).Elem(), SkeClusterExtensionsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsAclPtrInput)(nil)).Elem(), SkeClusterExtensionsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsArgusInput)(nil)).Elem(), SkeClusterExtensionsArgusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsArgusPtrInput)(nil)).Elem(), SkeClusterExtensionsArgusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsDnsInput)(nil)).Elem(), SkeClusterExtensionsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsDnsPtrInput)(nil)).Elem(), SkeClusterExtensionsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsObservabilityInput)(nil)).Elem(), SkeClusterExtensionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterExtensionsObservabilityPtrInput)(nil)).Elem(), SkeClusterExtensionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterHibernationInput)(nil)).Elem(), SkeClusterHibernationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterHibernationArrayInput)(nil)).Elem(), SkeClusterHibernationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterMaintenanceInput)(nil)).Elem(), SkeClusterMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterMaintenancePtrInput)(nil)).Elem(), SkeClusterMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNetworkInput)(nil)).Elem(), SkeClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNetworkPtrInput)(nil)).Elem(), SkeClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNodePoolInput)(nil)).Elem(), SkeClusterNodePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNodePoolArrayInput)(nil)).Elem(), SkeClusterNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNodePoolTaintInput)(nil)).Elem(), SkeClusterNodePoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterNodePoolTaintArrayInput)(nil)).Elem(), SkeClusterNodePoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceFlavorInput)(nil)).Elem(), SqlserverflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceFlavorPtrInput)(nil)).Elem(), SqlserverflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceOptionsInput)(nil)).Elem(), SqlserverflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceOptionsPtrInput)(nil)).Elem(), SqlserverflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceStorageInput)(nil)).Elem(), SqlserverflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceStoragePtrInput)(nil)).Elem(), SqlserverflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSourceInput)(nil)).Elem(), VolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSourcePtrInput)(nil)).Elem(), VolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdnDistributionConfigInput)(nil)).Elem(), GetCdnDistributionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdnDistributionConfigBackendInput)(nil)).Elem(), GetCdnDistributionConfigBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdnDistributionConfigOptimizerInput)(nil)).Elem(), GetCdnDistributionConfigOptimizerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdnDistributionDomainInput)(nil)).Elem(), GetCdnDistributionDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdnDistributionDomainArrayInput)(nil)).Elem(), GetCdnDistributionDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageChecksumInput)(nil)).Elem(), GetImageChecksumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageConfigInput)(nil)).Elem(), GetImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerListenerInput)(nil)).Elem(), GetLoadbalancerListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerListenerArrayInput)(nil)).Elem(), GetLoadbalancerListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerListenerServerNameIndicatorInput)(nil)).Elem(), GetLoadbalancerListenerServerNameIndicatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerListenerServerNameIndicatorArrayInput)(nil)).Elem(), GetLoadbalancerListenerServerNameIndicatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerNetworkInput)(nil)).Elem(), GetLoadbalancerNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerNetworkArrayInput)(nil)).Elem(), GetLoadbalancerNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerOptionsInput)(nil)).Elem(), GetLoadbalancerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerOptionsObservabilityInput)(nil)).Elem(), GetLoadbalancerOptionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerOptionsObservabilityLogsInput)(nil)).Elem(), GetLoadbalancerOptionsObservabilityLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerOptionsObservabilityMetricsInput)(nil)).Elem(), GetLoadbalancerOptionsObservabilityMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolInput)(nil)).Elem(), GetLoadbalancerTargetPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolArrayInput)(nil)).Elem(), GetLoadbalancerTargetPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolActiveHealthCheckInput)(nil)).Elem(), GetLoadbalancerTargetPoolActiveHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolSessionPersistenceInput)(nil)).Elem(), GetLoadbalancerTargetPoolSessionPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolSessionPersistencePtrInput)(nil)).Elem(), GetLoadbalancerTargetPoolSessionPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolTargetInput)(nil)).Elem(), GetLoadbalancerTargetPoolTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadbalancerTargetPoolTargetArrayInput)(nil)).Elem(), GetLoadbalancerTargetPoolTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogmeInstanceParametersInput)(nil)).Elem(), GetLogmeInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMariadbInstanceParametersInput)(nil)).Elem(), GetMariadbInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMongodbflexInstanceFlavorInput)(nil)).Elem(), GetMongodbflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMongodbflexInstanceOptionsInput)(nil)).Elem(), GetMongodbflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMongodbflexInstanceStorageInput)(nil)).Elem(), GetMongodbflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAreaNetworkRangeInput)(nil)).Elem(), GetNetworkAreaNetworkRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAreaNetworkRangeArrayInput)(nil)).Elem(), GetNetworkAreaNetworkRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityAlertgroupRuleInput)(nil)).Elem(), GetObservabilityAlertgroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityAlertgroupRuleArrayInput)(nil)).Elem(), GetObservabilityAlertgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigGlobalInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigGlobalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverArrayInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverEmailConfigInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverEmailConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverEmailConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverWebhooksConfigInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigRouteInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigRouteRouteInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigRouteRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityInstanceAlertConfigRouteRouteArrayInput)(nil)).Elem(), GetObservabilityInstanceAlertConfigRouteRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityLogalertgroupRuleInput)(nil)).Elem(), GetObservabilityLogalertgroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityLogalertgroupRuleArrayInput)(nil)).Elem(), GetObservabilityLogalertgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityScrapeconfigBasicAuthInput)(nil)).Elem(), GetObservabilityScrapeconfigBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityScrapeconfigSaml2Input)(nil)).Elem(), GetObservabilityScrapeconfigSaml2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityScrapeconfigTargetInput)(nil)).Elem(), GetObservabilityScrapeconfigTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObservabilityScrapeconfigTargetArrayInput)(nil)).Elem(), GetObservabilityScrapeconfigTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOpensearchInstanceParametersInput)(nil)).Elem(), GetOpensearchInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPostgresflexInstanceFlavorInput)(nil)).Elem(), GetPostgresflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPostgresflexInstanceStorageInput)(nil)).Elem(), GetPostgresflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicIpRangesPublicIpRangeInput)(nil)).Elem(), GetPublicIpRangesPublicIpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicIpRangesPublicIpRangeArrayInput)(nil)).Elem(), GetPublicIpRangesPublicIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRabbitmqInstanceParametersInput)(nil)).Elem(), GetRabbitmqInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRedisInstanceParametersInput)(nil)).Elem(), GetRedisInstanceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRouteDestinationInput)(nil)).Elem(), GetRoutingTableRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRouteNextHopInput)(nil)).Elem(), GetRoutingTableRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRoutesRouteInput)(nil)).Elem(), GetRoutingTableRoutesRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRoutesRouteArrayInput)(nil)).Elem(), GetRoutingTableRoutesRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRoutesRouteDestinationInput)(nil)).Elem(), GetRoutingTableRoutesRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTableRoutesRouteNextHopInput)(nil)).Elem(), GetRoutingTableRoutesRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTablesItemInput)(nil)).Elem(), GetRoutingTablesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutingTablesItemArrayInput)(nil)).Elem(), GetRoutingTablesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupRuleIcmpParametersInput)(nil)).Elem(), GetSecurityGroupRuleIcmpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupRulePortRangeInput)(nil)).Elem(), GetSecurityGroupRulePortRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupRuleProtocolInput)(nil)).Elem(), GetSecurityGroupRuleProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupScheduleBackupPropertiesInput)(nil)).Elem(), GetServerBackupScheduleBackupPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupSchedulesItemInput)(nil)).Elem(), GetServerBackupSchedulesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupSchedulesItemArrayInput)(nil)).Elem(), GetServerBackupSchedulesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBackupSchedulesItemBackupPropertiesInput)(nil)).Elem(), GetServerBackupSchedulesItemBackupPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerBootVolumeInput)(nil)).Elem(), GetServerBootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerUpdateSchedulesItemInput)(nil)).Elem(), GetServerUpdateSchedulesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerUpdateSchedulesItemArrayInput)(nil)).Elem(), GetServerUpdateSchedulesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterExtensionsInput)(nil)).Elem(), GetSkeClusterExtensionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterExtensionsAclInput)(nil)).Elem(), GetSkeClusterExtensionsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterExtensionsArgusInput)(nil)).Elem(), GetSkeClusterExtensionsArgusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterExtensionsDnsInput)(nil)).Elem(), GetSkeClusterExtensionsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterExtensionsObservabilityInput)(nil)).Elem(), GetSkeClusterExtensionsObservabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterHibernationInput)(nil)).Elem(), GetSkeClusterHibernationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterHibernationArrayInput)(nil)).Elem(), GetSkeClusterHibernationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterMaintenanceInput)(nil)).Elem(), GetSkeClusterMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterNetworkInput)(nil)).Elem(), GetSkeClusterNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterNodePoolInput)(nil)).Elem(), GetSkeClusterNodePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterNodePoolArrayInput)(nil)).Elem(), GetSkeClusterNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterNodePoolTaintInput)(nil)).Elem(), GetSkeClusterNodePoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkeClusterNodePoolTaintArrayInput)(nil)).Elem(), GetSkeClusterNodePoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlserverflexInstanceFlavorInput)(nil)).Elem(), GetSqlserverflexInstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlserverflexInstanceOptionsInput)(nil)).Elem(), GetSqlserverflexInstanceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlserverflexInstanceStorageInput)(nil)).Elem(), GetSqlserverflexInstanceStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeSourceInput)(nil)).Elem(), GetVolumeSourceArgs{})
	pulumi.RegisterOutputType(CdnDistributionConfigOutput{})
	pulumi.RegisterOutputType(CdnDistributionConfigPtrOutput{})
	pulumi.RegisterOutputType(CdnDistributionConfigBackendOutput{})
	pulumi.RegisterOutputType(CdnDistributionConfigBackendPtrOutput{})
	pulumi.RegisterOutputType(CdnDistributionConfigOptimizerOutput{})
	pulumi.RegisterOutputType(CdnDistributionConfigOptimizerPtrOutput{})
	pulumi.RegisterOutputType(CdnDistributionDomainOutput{})
	pulumi.RegisterOutputType(CdnDistributionDomainArrayOutput{})
	pulumi.RegisterOutputType(ImageChecksumOutput{})
	pulumi.RegisterOutputType(ImageChecksumPtrOutput{})
	pulumi.RegisterOutputType(ImageConfigOutput{})
	pulumi.RegisterOutputType(ImageConfigPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerServerNameIndicatorOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerServerNameIndicatorArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerNetworkOutput{})
	pulumi.RegisterOutputType(LoadbalancerNetworkArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityLogsOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityLogsPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityMetricsOutput{})
	pulumi.RegisterOutputType(LoadbalancerOptionsObservabilityMetricsPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolActiveHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolActiveHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolSessionPersistenceOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolSessionPersistencePtrOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolTargetOutput{})
	pulumi.RegisterOutputType(LoadbalancerTargetPoolTargetArrayOutput{})
	pulumi.RegisterOutputType(LogmeInstanceParametersOutput{})
	pulumi.RegisterOutputType(LogmeInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(MariadbInstanceParametersOutput{})
	pulumi.RegisterOutputType(MariadbInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceFlavorPtrOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceOptionsOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceOptionsPtrOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceStoragePtrOutput{})
	pulumi.RegisterOutputType(NetworkAreaNetworkRangeOutput{})
	pulumi.RegisterOutputType(NetworkAreaNetworkRangeArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityAlertgroupRuleOutput{})
	pulumi.RegisterOutputType(ObservabilityAlertgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigPtrOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigGlobalOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigGlobalPtrOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverEmailConfigOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigRouteOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigRoutePtrOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigRouteRouteOutput{})
	pulumi.RegisterOutputType(ObservabilityInstanceAlertConfigRouteRouteArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityLogalertgroupRuleOutput{})
	pulumi.RegisterOutputType(ObservabilityLogalertgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigBasicAuthOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigSaml2Output{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigSaml2PtrOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigTargetOutput{})
	pulumi.RegisterOutputType(ObservabilityScrapeconfigTargetArrayOutput{})
	pulumi.RegisterOutputType(OpensearchInstanceParametersOutput{})
	pulumi.RegisterOutputType(OpensearchInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceFlavorPtrOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceStoragePtrOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceParametersOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(RedisInstanceParametersOutput{})
	pulumi.RegisterOutputType(RedisInstanceParametersPtrOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteDestinationOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteNextHopOutput{})
	pulumi.RegisterOutputType(RoutingTableRouteNextHopPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleIcmpParametersOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleIcmpParametersPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulePortRangeOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulePortRangePtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleProtocolOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleProtocolPtrOutput{})
	pulumi.RegisterOutputType(ServerBackupScheduleBackupPropertiesOutput{})
	pulumi.RegisterOutputType(ServerBackupScheduleBackupPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ServerBootVolumeOutput{})
	pulumi.RegisterOutputType(ServerBootVolumePtrOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsAclOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsAclPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsArgusOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsArgusPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsDnsOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsDnsPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsObservabilityOutput{})
	pulumi.RegisterOutputType(SkeClusterExtensionsObservabilityPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterHibernationOutput{})
	pulumi.RegisterOutputType(SkeClusterHibernationArrayOutput{})
	pulumi.RegisterOutputType(SkeClusterMaintenanceOutput{})
	pulumi.RegisterOutputType(SkeClusterMaintenancePtrOutput{})
	pulumi.RegisterOutputType(SkeClusterNetworkOutput{})
	pulumi.RegisterOutputType(SkeClusterNetworkPtrOutput{})
	pulumi.RegisterOutputType(SkeClusterNodePoolOutput{})
	pulumi.RegisterOutputType(SkeClusterNodePoolArrayOutput{})
	pulumi.RegisterOutputType(SkeClusterNodePoolTaintOutput{})
	pulumi.RegisterOutputType(SkeClusterNodePoolTaintArrayOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceFlavorPtrOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceOptionsOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceOptionsPtrOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceStoragePtrOutput{})
	pulumi.RegisterOutputType(VolumeSourceOutput{})
	pulumi.RegisterOutputType(VolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GetCdnDistributionConfigOutput{})
	pulumi.RegisterOutputType(GetCdnDistributionConfigBackendOutput{})
	pulumi.RegisterOutputType(GetCdnDistributionConfigOptimizerOutput{})
	pulumi.RegisterOutputType(GetCdnDistributionDomainOutput{})
	pulumi.RegisterOutputType(GetCdnDistributionDomainArrayOutput{})
	pulumi.RegisterOutputType(GetImageChecksumOutput{})
	pulumi.RegisterOutputType(GetImageConfigOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerListenerOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerListenerArrayOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerListenerServerNameIndicatorOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerListenerServerNameIndicatorArrayOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerNetworkOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerOptionsOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerOptionsObservabilityOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerOptionsObservabilityLogsOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerOptionsObservabilityMetricsOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolArrayOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolActiveHealthCheckOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolSessionPersistenceOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolSessionPersistencePtrOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolTargetOutput{})
	pulumi.RegisterOutputType(GetLoadbalancerTargetPoolTargetArrayOutput{})
	pulumi.RegisterOutputType(GetLogmeInstanceParametersOutput{})
	pulumi.RegisterOutputType(GetMariadbInstanceParametersOutput{})
	pulumi.RegisterOutputType(GetMongodbflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(GetMongodbflexInstanceOptionsOutput{})
	pulumi.RegisterOutputType(GetMongodbflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(GetNetworkAreaNetworkRangeOutput{})
	pulumi.RegisterOutputType(GetNetworkAreaNetworkRangeArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityAlertgroupRuleOutput{})
	pulumi.RegisterOutputType(GetObservabilityAlertgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigGlobalOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverEmailConfigOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverEmailConfigArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverOpsgenieConfigArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigReceiverWebhooksConfigArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigRouteOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigRouteRouteOutput{})
	pulumi.RegisterOutputType(GetObservabilityInstanceAlertConfigRouteRouteArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityLogalertgroupRuleOutput{})
	pulumi.RegisterOutputType(GetObservabilityLogalertgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(GetObservabilityScrapeconfigBasicAuthOutput{})
	pulumi.RegisterOutputType(GetObservabilityScrapeconfigSaml2Output{})
	pulumi.RegisterOutputType(GetObservabilityScrapeconfigTargetOutput{})
	pulumi.RegisterOutputType(GetObservabilityScrapeconfigTargetArrayOutput{})
	pulumi.RegisterOutputType(GetOpensearchInstanceParametersOutput{})
	pulumi.RegisterOutputType(GetPostgresflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(GetPostgresflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(GetPublicIpRangesPublicIpRangeOutput{})
	pulumi.RegisterOutputType(GetPublicIpRangesPublicIpRangeArrayOutput{})
	pulumi.RegisterOutputType(GetRabbitmqInstanceParametersOutput{})
	pulumi.RegisterOutputType(GetRedisInstanceParametersOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRouteDestinationOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRouteNextHopOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRoutesRouteOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRoutesRouteArrayOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRoutesRouteDestinationOutput{})
	pulumi.RegisterOutputType(GetRoutingTableRoutesRouteNextHopOutput{})
	pulumi.RegisterOutputType(GetRoutingTablesItemOutput{})
	pulumi.RegisterOutputType(GetRoutingTablesItemArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupRuleIcmpParametersOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupRulePortRangeOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupRuleProtocolOutput{})
	pulumi.RegisterOutputType(GetServerBackupScheduleBackupPropertiesOutput{})
	pulumi.RegisterOutputType(GetServerBackupSchedulesItemOutput{})
	pulumi.RegisterOutputType(GetServerBackupSchedulesItemArrayOutput{})
	pulumi.RegisterOutputType(GetServerBackupSchedulesItemBackupPropertiesOutput{})
	pulumi.RegisterOutputType(GetServerBootVolumeOutput{})
	pulumi.RegisterOutputType(GetServerUpdateSchedulesItemOutput{})
	pulumi.RegisterOutputType(GetServerUpdateSchedulesItemArrayOutput{})
	pulumi.RegisterOutputType(GetSkeClusterExtensionsOutput{})
	pulumi.RegisterOutputType(GetSkeClusterExtensionsAclOutput{})
	pulumi.RegisterOutputType(GetSkeClusterExtensionsArgusOutput{})
	pulumi.RegisterOutputType(GetSkeClusterExtensionsDnsOutput{})
	pulumi.RegisterOutputType(GetSkeClusterExtensionsObservabilityOutput{})
	pulumi.RegisterOutputType(GetSkeClusterHibernationOutput{})
	pulumi.RegisterOutputType(GetSkeClusterHibernationArrayOutput{})
	pulumi.RegisterOutputType(GetSkeClusterMaintenanceOutput{})
	pulumi.RegisterOutputType(GetSkeClusterNetworkOutput{})
	pulumi.RegisterOutputType(GetSkeClusterNodePoolOutput{})
	pulumi.RegisterOutputType(GetSkeClusterNodePoolArrayOutput{})
	pulumi.RegisterOutputType(GetSkeClusterNodePoolTaintOutput{})
	pulumi.RegisterOutputType(GetSkeClusterNodePoolTaintArrayOutput{})
	pulumi.RegisterOutputType(GetSqlserverflexInstanceFlavorOutput{})
	pulumi.RegisterOutputType(GetSqlserverflexInstanceOptionsOutput{})
	pulumi.RegisterOutputType(GetSqlserverflexInstanceStorageOutput{})
	pulumi.RegisterOutputType(GetVolumeSourceOutput{})
}
