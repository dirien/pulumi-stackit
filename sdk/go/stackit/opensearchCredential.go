// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OpenSearch credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type OpensearchCredential struct {
	pulumi.CustomResourceState

	// The credential's ID.
	CredentialId pulumi.StringOutput      `pulumi:"credentialId"`
	Host         pulumi.StringOutput      `pulumi:"host"`
	Hosts        pulumi.StringArrayOutput `pulumi:"hosts"`
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Password   pulumi.StringOutput `pulumi:"password"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	Scheme    pulumi.StringOutput `pulumi:"scheme"`
	Uri       pulumi.StringOutput `pulumi:"uri"`
	Username  pulumi.StringOutput `pulumi:"username"`
}

// NewOpensearchCredential registers a new resource with the given unique name, arguments, and options.
func NewOpensearchCredential(ctx *pulumi.Context,
	name string, args *OpensearchCredentialArgs, opts ...pulumi.ResourceOption) (*OpensearchCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpensearchCredential
	err := ctx.RegisterResource("stackit:index/opensearchCredential:OpensearchCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpensearchCredential gets an existing OpensearchCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpensearchCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpensearchCredentialState, opts ...pulumi.ResourceOption) (*OpensearchCredential, error) {
	var resource OpensearchCredential
	err := ctx.ReadResource("stackit:index/opensearchCredential:OpensearchCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpensearchCredential resources.
type opensearchCredentialState struct {
	// The credential's ID.
	CredentialId *string  `pulumi:"credentialId"`
	Host         *string  `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	// ID of the OpenSearch instance.
	InstanceId *string `pulumi:"instanceId"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	Scheme    *string `pulumi:"scheme"`
	Uri       *string `pulumi:"uri"`
	Username  *string `pulumi:"username"`
}

type OpensearchCredentialState struct {
	// The credential's ID.
	CredentialId pulumi.StringPtrInput
	Host         pulumi.StringPtrInput
	Hosts        pulumi.StringArrayInput
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	Scheme    pulumi.StringPtrInput
	Uri       pulumi.StringPtrInput
	Username  pulumi.StringPtrInput
}

func (OpensearchCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchCredentialState)(nil)).Elem()
}

type opensearchCredentialArgs struct {
	// ID of the OpenSearch instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a OpensearchCredential resource.
type OpensearchCredentialArgs struct {
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput
}

func (OpensearchCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchCredentialArgs)(nil)).Elem()
}

type OpensearchCredentialInput interface {
	pulumi.Input

	ToOpensearchCredentialOutput() OpensearchCredentialOutput
	ToOpensearchCredentialOutputWithContext(ctx context.Context) OpensearchCredentialOutput
}

func (*OpensearchCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchCredential)(nil)).Elem()
}

func (i *OpensearchCredential) ToOpensearchCredentialOutput() OpensearchCredentialOutput {
	return i.ToOpensearchCredentialOutputWithContext(context.Background())
}

func (i *OpensearchCredential) ToOpensearchCredentialOutputWithContext(ctx context.Context) OpensearchCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchCredentialOutput)
}

// OpensearchCredentialArrayInput is an input type that accepts OpensearchCredentialArray and OpensearchCredentialArrayOutput values.
// You can construct a concrete instance of `OpensearchCredentialArrayInput` via:
//
//	OpensearchCredentialArray{ OpensearchCredentialArgs{...} }
type OpensearchCredentialArrayInput interface {
	pulumi.Input

	ToOpensearchCredentialArrayOutput() OpensearchCredentialArrayOutput
	ToOpensearchCredentialArrayOutputWithContext(context.Context) OpensearchCredentialArrayOutput
}

type OpensearchCredentialArray []OpensearchCredentialInput

func (OpensearchCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchCredential)(nil)).Elem()
}

func (i OpensearchCredentialArray) ToOpensearchCredentialArrayOutput() OpensearchCredentialArrayOutput {
	return i.ToOpensearchCredentialArrayOutputWithContext(context.Background())
}

func (i OpensearchCredentialArray) ToOpensearchCredentialArrayOutputWithContext(ctx context.Context) OpensearchCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchCredentialArrayOutput)
}

// OpensearchCredentialMapInput is an input type that accepts OpensearchCredentialMap and OpensearchCredentialMapOutput values.
// You can construct a concrete instance of `OpensearchCredentialMapInput` via:
//
//	OpensearchCredentialMap{ "key": OpensearchCredentialArgs{...} }
type OpensearchCredentialMapInput interface {
	pulumi.Input

	ToOpensearchCredentialMapOutput() OpensearchCredentialMapOutput
	ToOpensearchCredentialMapOutputWithContext(context.Context) OpensearchCredentialMapOutput
}

type OpensearchCredentialMap map[string]OpensearchCredentialInput

func (OpensearchCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchCredential)(nil)).Elem()
}

func (i OpensearchCredentialMap) ToOpensearchCredentialMapOutput() OpensearchCredentialMapOutput {
	return i.ToOpensearchCredentialMapOutputWithContext(context.Background())
}

func (i OpensearchCredentialMap) ToOpensearchCredentialMapOutputWithContext(ctx context.Context) OpensearchCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchCredentialMapOutput)
}

type OpensearchCredentialOutput struct{ *pulumi.OutputState }

func (OpensearchCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchCredential)(nil)).Elem()
}

func (o OpensearchCredentialOutput) ToOpensearchCredentialOutput() OpensearchCredentialOutput {
	return o
}

func (o OpensearchCredentialOutput) ToOpensearchCredentialOutputWithContext(ctx context.Context) OpensearchCredentialOutput {
	return o
}

// The credential's ID.
func (o OpensearchCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// ID of the OpenSearch instance.
func (o OpensearchCredentialOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o OpensearchCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.Scheme }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o OpensearchCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type OpensearchCredentialArrayOutput struct{ *pulumi.OutputState }

func (OpensearchCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchCredential)(nil)).Elem()
}

func (o OpensearchCredentialArrayOutput) ToOpensearchCredentialArrayOutput() OpensearchCredentialArrayOutput {
	return o
}

func (o OpensearchCredentialArrayOutput) ToOpensearchCredentialArrayOutputWithContext(ctx context.Context) OpensearchCredentialArrayOutput {
	return o
}

func (o OpensearchCredentialArrayOutput) Index(i pulumi.IntInput) OpensearchCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpensearchCredential {
		return vs[0].([]*OpensearchCredential)[vs[1].(int)]
	}).(OpensearchCredentialOutput)
}

type OpensearchCredentialMapOutput struct{ *pulumi.OutputState }

func (OpensearchCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchCredential)(nil)).Elem()
}

func (o OpensearchCredentialMapOutput) ToOpensearchCredentialMapOutput() OpensearchCredentialMapOutput {
	return o
}

func (o OpensearchCredentialMapOutput) ToOpensearchCredentialMapOutputWithContext(ctx context.Context) OpensearchCredentialMapOutput {
	return o
}

func (o OpensearchCredentialMapOutput) MapIndex(k pulumi.StringInput) OpensearchCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpensearchCredential {
		return vs[0].(map[string]*OpensearchCredential)[vs[1].(string)]
	}).(OpensearchCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchCredentialInput)(nil)).Elem(), &OpensearchCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchCredentialArrayInput)(nil)).Elem(), OpensearchCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchCredentialMapInput)(nil)).Elem(), OpensearchCredentialMap{})
	pulumi.RegisterOutputType(OpensearchCredentialOutput{})
	pulumi.RegisterOutputType(OpensearchCredentialArrayOutput{})
	pulumi.RegisterOutputType(OpensearchCredentialMapOutput{})
}
