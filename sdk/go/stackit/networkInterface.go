// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network interface resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type NetworkInterface struct {
	pulumi.CustomResourceState

	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses pulumi.StringArrayOutput `pulumi:"allowedAddresses"`
	// The device UUID of the network interface.
	Device pulumi.StringOutput `pulumi:"device"`
	// The IPv4 address.
	Ipv4 pulumi.StringOutput `pulumi:"ipv4"`
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The MAC address of network interface.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// The name of the network interface.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network ID to which the network interface is associated.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The network interface ID.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security pulumi.BoolOutput `pulumi:"security"`
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterface
	err := ctx.RegisterResource("stackit:index/networkInterface:NetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceState, opts ...pulumi.ResourceOption) (*NetworkInterface, error) {
	var resource NetworkInterface
	err := ctx.ReadResource("stackit:index/networkInterface:NetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterface resources.
type networkInterfaceState struct {
	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses []string `pulumi:"allowedAddresses"`
	// The device UUID of the network interface.
	Device *string `pulumi:"device"`
	// The IPv4 address.
	Ipv4 *string `pulumi:"ipv4"`
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels map[string]string `pulumi:"labels"`
	// The MAC address of network interface.
	Mac *string `pulumi:"mac"`
	// The name of the network interface.
	Name *string `pulumi:"name"`
	// The network ID to which the network interface is associated.
	NetworkId *string `pulumi:"networkId"`
	// The network interface ID.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network is associated.
	ProjectId *string `pulumi:"projectId"`
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security *bool `pulumi:"security"`
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
	Type *string `pulumi:"type"`
}

type NetworkInterfaceState struct {
	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses pulumi.StringArrayInput
	// The device UUID of the network interface.
	Device pulumi.StringPtrInput
	// The IPv4 address.
	Ipv4 pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels pulumi.StringMapInput
	// The MAC address of network interface.
	Mac pulumi.StringPtrInput
	// The name of the network interface.
	Name pulumi.StringPtrInput
	// The network ID to which the network interface is associated.
	NetworkId pulumi.StringPtrInput
	// The network interface ID.
	NetworkInterfaceId pulumi.StringPtrInput
	// STACKIT project ID to which the network is associated.
	ProjectId pulumi.StringPtrInput
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security pulumi.BoolPtrInput
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds pulumi.StringArrayInput
	// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
	Type pulumi.StringPtrInput
}

func (NetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceState)(nil)).Elem()
}

type networkInterfaceArgs struct {
	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses []string `pulumi:"allowedAddresses"`
	// The IPv4 address.
	Ipv4 *string `pulumi:"ipv4"`
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels map[string]string `pulumi:"labels"`
	// The name of the network interface.
	Name *string `pulumi:"name"`
	// The network ID to which the network interface is associated.
	NetworkId string `pulumi:"networkId"`
	// STACKIT project ID to which the network is associated.
	ProjectId string `pulumi:"projectId"`
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security *bool `pulumi:"security"`
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses pulumi.StringArrayInput
	// The IPv4 address.
	Ipv4 pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels pulumi.StringMapInput
	// The name of the network interface.
	Name pulumi.StringPtrInput
	// The network ID to which the network interface is associated.
	NetworkId pulumi.StringInput
	// STACKIT project ID to which the network is associated.
	ProjectId pulumi.StringInput
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security pulumi.BoolPtrInput
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds pulumi.StringArrayInput
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceArgs)(nil)).Elem()
}

type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput
}

func (*NetworkInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterface)(nil)).Elem()
}

func (i *NetworkInterface) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i *NetworkInterface) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//	NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

// NetworkInterfaceMapInput is an input type that accepts NetworkInterfaceMap and NetworkInterfaceMapOutput values.
// You can construct a concrete instance of `NetworkInterfaceMapInput` via:
//
//	NetworkInterfaceMap{ "key": NetworkInterfaceArgs{...} }
type NetworkInterfaceMapInput interface {
	pulumi.Input

	ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput
	ToNetworkInterfaceMapOutputWithContext(context.Context) NetworkInterfaceMapOutput
}

type NetworkInterfaceMap map[string]NetworkInterfaceInput

func (NetworkInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceMap) ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput {
	return i.ToNetworkInterfaceMapOutputWithContext(context.Background())
}

func (i NetworkInterfaceMap) ToNetworkInterfaceMapOutputWithContext(ctx context.Context) NetworkInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceMapOutput)
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

// The list of CIDR (Classless Inter-Domain Routing) notations.
func (o NetworkInterfaceOutput) AllowedAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringArrayOutput { return v.AllowedAddresses }).(pulumi.StringArrayOutput)
}

// The device UUID of the network interface.
func (o NetworkInterfaceOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// The IPv4 address.
func (o NetworkInterfaceOutput) Ipv4() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Ipv4 }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a network interface.
func (o NetworkInterfaceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The MAC address of network interface.
func (o NetworkInterfaceOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// The name of the network interface.
func (o NetworkInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network ID to which the network interface is associated.
func (o NetworkInterfaceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The network interface ID.
func (o NetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the network is associated.
func (o NetworkInterfaceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
func (o NetworkInterfaceOutput) Security() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.BoolOutput { return v.Security }).(pulumi.BoolOutput)
}

// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
func (o NetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
func (o NetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterface) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterface {
		return vs[0].([]*NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

type NetworkInterfaceMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceMapOutput) ToNetworkInterfaceMapOutput() NetworkInterfaceMapOutput {
	return o
}

func (o NetworkInterfaceMapOutput) ToNetworkInterfaceMapOutputWithContext(ctx context.Context) NetworkInterfaceMapOutput {
	return o
}

func (o NetworkInterfaceMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterface {
		return vs[0].(map[string]*NetworkInterface)[vs[1].(string)]
	}).(NetworkInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), &NetworkInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceMapInput)(nil)).Elem(), NetworkInterfaceMap{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceMapOutput{})
}
