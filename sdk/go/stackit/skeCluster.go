// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SKE Cluster Resource schema. Must have a `region` specified in the provider configuration.
//
// > When updating `nodePools` of a `SkeCluster`, the pulumi preview might appear incorrect as it matches the node pools by index rather than by name. However, the SKE API correctly identifies node pools by name and applies the intended changes. Please review your changes carefully to ensure the correct configuration will be applied.
//
// ## Example Usage
type SkeCluster struct {
	pulumi.CustomResourceState

	// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
	EgressAddressRanges pulumi.StringArrayOutput `pulumi:"egressAddressRanges"`
	// A single extensions block as defined below.
	Extensions SkeClusterExtensionsPtrOutput `pulumi:"extensions"`
	// One or more hibernation block as defined below.
	Hibernations SkeClusterHibernationArrayOutput `pulumi:"hibernations"`
	// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
	KubernetesVersionMin pulumi.StringPtrOutput `pulumi:"kubernetesVersionMin"`
	// Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	KubernetesVersionUsed pulumi.StringOutput `pulumi:"kubernetesVersionUsed"`
	// A single maintenance block as defined below.
	Maintenance SkeClusterMaintenanceOutput `pulumi:"maintenance"`
	// The cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network block as defined below.
	Network SkeClusterNetworkPtrOutput `pulumi:"network"`
	// One or more `nodePool` block as defined below.
	NodePools SkeClusterNodePoolArrayOutput `pulumi:"nodePools"`
	// The network ranges (in CIDR notation) used by pods of the cluster.
	PodAddressRanges pulumi.StringArrayOutput `pulumi:"podAddressRanges"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSkeCluster registers a new resource with the given unique name, arguments, and options.
func NewSkeCluster(ctx *pulumi.Context,
	name string, args *SkeClusterArgs, opts ...pulumi.ResourceOption) (*SkeCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodePools == nil {
		return nil, errors.New("invalid value for required argument 'NodePools'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SkeCluster
	err := ctx.RegisterResource("stackit:index/skeCluster:SkeCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSkeCluster gets an existing SkeCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSkeCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SkeClusterState, opts ...pulumi.ResourceOption) (*SkeCluster, error) {
	var resource SkeCluster
	err := ctx.ReadResource("stackit:index/skeCluster:SkeCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SkeCluster resources.
type skeClusterState struct {
	// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
	EgressAddressRanges []string `pulumi:"egressAddressRanges"`
	// A single extensions block as defined below.
	Extensions *SkeClusterExtensions `pulumi:"extensions"`
	// One or more hibernation block as defined below.
	Hibernations []SkeClusterHibernation `pulumi:"hibernations"`
	// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
	KubernetesVersionMin *string `pulumi:"kubernetesVersionMin"`
	// Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	KubernetesVersionUsed *string `pulumi:"kubernetesVersionUsed"`
	// A single maintenance block as defined below.
	Maintenance *SkeClusterMaintenance `pulumi:"maintenance"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// Network block as defined below.
	Network *SkeClusterNetwork `pulumi:"network"`
	// One or more `nodePool` block as defined below.
	NodePools []SkeClusterNodePool `pulumi:"nodePools"`
	// The network ranges (in CIDR notation) used by pods of the cluster.
	PodAddressRanges []string `pulumi:"podAddressRanges"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

type SkeClusterState struct {
	// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
	EgressAddressRanges pulumi.StringArrayInput
	// A single extensions block as defined below.
	Extensions SkeClusterExtensionsPtrInput
	// One or more hibernation block as defined below.
	Hibernations SkeClusterHibernationArrayInput
	// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
	KubernetesVersionMin pulumi.StringPtrInput
	// Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
	KubernetesVersionUsed pulumi.StringPtrInput
	// A single maintenance block as defined below.
	Maintenance SkeClusterMaintenancePtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// Network block as defined below.
	Network SkeClusterNetworkPtrInput
	// One or more `nodePool` block as defined below.
	NodePools SkeClusterNodePoolArrayInput
	// The network ranges (in CIDR notation) used by pods of the cluster.
	PodAddressRanges pulumi.StringArrayInput
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (SkeClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*skeClusterState)(nil)).Elem()
}

type skeClusterArgs struct {
	// A single extensions block as defined below.
	Extensions *SkeClusterExtensions `pulumi:"extensions"`
	// One or more hibernation block as defined below.
	Hibernations []SkeClusterHibernation `pulumi:"hibernations"`
	// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
	KubernetesVersionMin *string `pulumi:"kubernetesVersionMin"`
	// A single maintenance block as defined below.
	Maintenance *SkeClusterMaintenance `pulumi:"maintenance"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// Network block as defined below.
	Network *SkeClusterNetwork `pulumi:"network"`
	// One or more `nodePool` block as defined below.
	NodePools []SkeClusterNodePool `pulumi:"nodePools"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SkeCluster resource.
type SkeClusterArgs struct {
	// A single extensions block as defined below.
	Extensions SkeClusterExtensionsPtrInput
	// One or more hibernation block as defined below.
	Hibernations SkeClusterHibernationArrayInput
	// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
	KubernetesVersionMin pulumi.StringPtrInput
	// A single maintenance block as defined below.
	Maintenance SkeClusterMaintenancePtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// Network block as defined below.
	Network SkeClusterNetworkPtrInput
	// One or more `nodePool` block as defined below.
	NodePools SkeClusterNodePoolArrayInput
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (SkeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*skeClusterArgs)(nil)).Elem()
}

type SkeClusterInput interface {
	pulumi.Input

	ToSkeClusterOutput() SkeClusterOutput
	ToSkeClusterOutputWithContext(ctx context.Context) SkeClusterOutput
}

func (*SkeCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeCluster)(nil)).Elem()
}

func (i *SkeCluster) ToSkeClusterOutput() SkeClusterOutput {
	return i.ToSkeClusterOutputWithContext(context.Background())
}

func (i *SkeCluster) ToSkeClusterOutputWithContext(ctx context.Context) SkeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterOutput)
}

// SkeClusterArrayInput is an input type that accepts SkeClusterArray and SkeClusterArrayOutput values.
// You can construct a concrete instance of `SkeClusterArrayInput` via:
//
//	SkeClusterArray{ SkeClusterArgs{...} }
type SkeClusterArrayInput interface {
	pulumi.Input

	ToSkeClusterArrayOutput() SkeClusterArrayOutput
	ToSkeClusterArrayOutputWithContext(context.Context) SkeClusterArrayOutput
}

type SkeClusterArray []SkeClusterInput

func (SkeClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SkeCluster)(nil)).Elem()
}

func (i SkeClusterArray) ToSkeClusterArrayOutput() SkeClusterArrayOutput {
	return i.ToSkeClusterArrayOutputWithContext(context.Background())
}

func (i SkeClusterArray) ToSkeClusterArrayOutputWithContext(ctx context.Context) SkeClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterArrayOutput)
}

// SkeClusterMapInput is an input type that accepts SkeClusterMap and SkeClusterMapOutput values.
// You can construct a concrete instance of `SkeClusterMapInput` via:
//
//	SkeClusterMap{ "key": SkeClusterArgs{...} }
type SkeClusterMapInput interface {
	pulumi.Input

	ToSkeClusterMapOutput() SkeClusterMapOutput
	ToSkeClusterMapOutputWithContext(context.Context) SkeClusterMapOutput
}

type SkeClusterMap map[string]SkeClusterInput

func (SkeClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SkeCluster)(nil)).Elem()
}

func (i SkeClusterMap) ToSkeClusterMapOutput() SkeClusterMapOutput {
	return i.ToSkeClusterMapOutputWithContext(context.Background())
}

func (i SkeClusterMap) ToSkeClusterMapOutputWithContext(ctx context.Context) SkeClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeClusterMapOutput)
}

type SkeClusterOutput struct{ *pulumi.OutputState }

func (SkeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeCluster)(nil)).Elem()
}

func (o SkeClusterOutput) ToSkeClusterOutput() SkeClusterOutput {
	return o
}

func (o SkeClusterOutput) ToSkeClusterOutputWithContext(ctx context.Context) SkeClusterOutput {
	return o
}

// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
func (o SkeClusterOutput) EgressAddressRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringArrayOutput { return v.EgressAddressRanges }).(pulumi.StringArrayOutput)
}

// A single extensions block as defined below.
func (o SkeClusterOutput) Extensions() SkeClusterExtensionsPtrOutput {
	return o.ApplyT(func(v *SkeCluster) SkeClusterExtensionsPtrOutput { return v.Extensions }).(SkeClusterExtensionsPtrOutput)
}

// One or more hibernation block as defined below.
func (o SkeClusterOutput) Hibernations() SkeClusterHibernationArrayOutput {
	return o.ApplyT(func(v *SkeCluster) SkeClusterHibernationArrayOutput { return v.Hibernations }).(SkeClusterHibernationArrayOutput)
}

// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetesVersionUsed` field.
func (o SkeClusterOutput) KubernetesVersionMin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringPtrOutput { return v.KubernetesVersionMin }).(pulumi.StringPtrOutput)
}

// Full Kubernetes version used. For example, if 1.22 was set in `kubernetesVersionMin`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
func (o SkeClusterOutput) KubernetesVersionUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringOutput { return v.KubernetesVersionUsed }).(pulumi.StringOutput)
}

// A single maintenance block as defined below.
func (o SkeClusterOutput) Maintenance() SkeClusterMaintenanceOutput {
	return o.ApplyT(func(v *SkeCluster) SkeClusterMaintenanceOutput { return v.Maintenance }).(SkeClusterMaintenanceOutput)
}

// The cluster name.
func (o SkeClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network block as defined below.
func (o SkeClusterOutput) Network() SkeClusterNetworkPtrOutput {
	return o.ApplyT(func(v *SkeCluster) SkeClusterNetworkPtrOutput { return v.Network }).(SkeClusterNetworkPtrOutput)
}

// One or more `nodePool` block as defined below.
func (o SkeClusterOutput) NodePools() SkeClusterNodePoolArrayOutput {
	return o.ApplyT(func(v *SkeCluster) SkeClusterNodePoolArrayOutput { return v.NodePools }).(SkeClusterNodePoolArrayOutput)
}

// The network ranges (in CIDR notation) used by pods of the cluster.
func (o SkeClusterOutput) PodAddressRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringArrayOutput { return v.PodAddressRanges }).(pulumi.StringArrayOutput)
}

// STACKIT project ID to which the cluster is associated.
func (o SkeClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o SkeClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SkeClusterArrayOutput struct{ *pulumi.OutputState }

func (SkeClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SkeCluster)(nil)).Elem()
}

func (o SkeClusterArrayOutput) ToSkeClusterArrayOutput() SkeClusterArrayOutput {
	return o
}

func (o SkeClusterArrayOutput) ToSkeClusterArrayOutputWithContext(ctx context.Context) SkeClusterArrayOutput {
	return o
}

func (o SkeClusterArrayOutput) Index(i pulumi.IntInput) SkeClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SkeCluster {
		return vs[0].([]*SkeCluster)[vs[1].(int)]
	}).(SkeClusterOutput)
}

type SkeClusterMapOutput struct{ *pulumi.OutputState }

func (SkeClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SkeCluster)(nil)).Elem()
}

func (o SkeClusterMapOutput) ToSkeClusterMapOutput() SkeClusterMapOutput {
	return o
}

func (o SkeClusterMapOutput) ToSkeClusterMapOutputWithContext(ctx context.Context) SkeClusterMapOutput {
	return o
}

func (o SkeClusterMapOutput) MapIndex(k pulumi.StringInput) SkeClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SkeCluster {
		return vs[0].(map[string]*SkeCluster)[vs[1].(string)]
	}).(SkeClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterInput)(nil)).Elem(), &SkeCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterArrayInput)(nil)).Elem(), SkeClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeClusterMapInput)(nil)).Elem(), SkeClusterMap{})
	pulumi.RegisterOutputType(SkeClusterOutput{})
	pulumi.RegisterOutputType(SkeClusterArrayOutput{})
	pulumi.RegisterOutputType(SkeClusterMapOutput{})
}
