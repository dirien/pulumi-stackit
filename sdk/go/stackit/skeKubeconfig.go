// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SKE kubeconfig resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SkeKubeconfig struct {
	pulumi.CustomResourceState

	// Name of the SKE cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Date-time when the kubeconfig was created
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
	Expiration pulumi.IntOutput `pulumi:"expiration"`
	// Timestamp when the kubeconfig expires
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Raw short-lived admin kubeconfig.
	KubeConfig   pulumi.StringOutput `pulumi:"kubeConfig"`
	KubeConfigId pulumi.StringOutput `pulumi:"kubeConfigId"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
	Refresh pulumi.BoolPtrOutput `pulumi:"refresh"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSkeKubeconfig registers a new resource with the given unique name, arguments, and options.
func NewSkeKubeconfig(ctx *pulumi.Context,
	name string, args *SkeKubeconfigArgs, opts ...pulumi.ResourceOption) (*SkeKubeconfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeConfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SkeKubeconfig
	err := ctx.RegisterResource("stackit:index/skeKubeconfig:SkeKubeconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSkeKubeconfig gets an existing SkeKubeconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSkeKubeconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SkeKubeconfigState, opts ...pulumi.ResourceOption) (*SkeKubeconfig, error) {
	var resource SkeKubeconfig
	err := ctx.ReadResource("stackit:index/skeKubeconfig:SkeKubeconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SkeKubeconfig resources.
type skeKubeconfigState struct {
	// Name of the SKE cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Date-time when the kubeconfig was created
	CreationTime *string `pulumi:"creationTime"`
	// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
	Expiration *int `pulumi:"expiration"`
	// Timestamp when the kubeconfig expires
	ExpiresAt *string `pulumi:"expiresAt"`
	// Raw short-lived admin kubeconfig.
	KubeConfig   *string `pulumi:"kubeConfig"`
	KubeConfigId *string `pulumi:"kubeConfigId"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId *string `pulumi:"projectId"`
	// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
	Refresh *bool `pulumi:"refresh"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

type SkeKubeconfigState struct {
	// Name of the SKE cluster.
	ClusterName pulumi.StringPtrInput
	// Date-time when the kubeconfig was created
	CreationTime pulumi.StringPtrInput
	// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
	Expiration pulumi.IntPtrInput
	// Timestamp when the kubeconfig expires
	ExpiresAt pulumi.StringPtrInput
	// Raw short-lived admin kubeconfig.
	KubeConfig   pulumi.StringPtrInput
	KubeConfigId pulumi.StringPtrInput
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringPtrInput
	// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
	Refresh pulumi.BoolPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (SkeKubeconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*skeKubeconfigState)(nil)).Elem()
}

type skeKubeconfigArgs struct {
	// Name of the SKE cluster.
	ClusterName string `pulumi:"clusterName"`
	// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
	Expiration *int `pulumi:"expiration"`
	// STACKIT project ID to which the cluster is associated.
	ProjectId string `pulumi:"projectId"`
	// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
	Refresh *bool `pulumi:"refresh"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SkeKubeconfig resource.
type SkeKubeconfigArgs struct {
	// Name of the SKE cluster.
	ClusterName pulumi.StringInput
	// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
	Expiration pulumi.IntPtrInput
	// STACKIT project ID to which the cluster is associated.
	ProjectId pulumi.StringInput
	// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
	Refresh pulumi.BoolPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (SkeKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*skeKubeconfigArgs)(nil)).Elem()
}

type SkeKubeconfigInput interface {
	pulumi.Input

	ToSkeKubeconfigOutput() SkeKubeconfigOutput
	ToSkeKubeconfigOutputWithContext(ctx context.Context) SkeKubeconfigOutput
}

func (*SkeKubeconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeKubeconfig)(nil)).Elem()
}

func (i *SkeKubeconfig) ToSkeKubeconfigOutput() SkeKubeconfigOutput {
	return i.ToSkeKubeconfigOutputWithContext(context.Background())
}

func (i *SkeKubeconfig) ToSkeKubeconfigOutputWithContext(ctx context.Context) SkeKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeKubeconfigOutput)
}

// SkeKubeconfigArrayInput is an input type that accepts SkeKubeconfigArray and SkeKubeconfigArrayOutput values.
// You can construct a concrete instance of `SkeKubeconfigArrayInput` via:
//
//	SkeKubeconfigArray{ SkeKubeconfigArgs{...} }
type SkeKubeconfigArrayInput interface {
	pulumi.Input

	ToSkeKubeconfigArrayOutput() SkeKubeconfigArrayOutput
	ToSkeKubeconfigArrayOutputWithContext(context.Context) SkeKubeconfigArrayOutput
}

type SkeKubeconfigArray []SkeKubeconfigInput

func (SkeKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SkeKubeconfig)(nil)).Elem()
}

func (i SkeKubeconfigArray) ToSkeKubeconfigArrayOutput() SkeKubeconfigArrayOutput {
	return i.ToSkeKubeconfigArrayOutputWithContext(context.Background())
}

func (i SkeKubeconfigArray) ToSkeKubeconfigArrayOutputWithContext(ctx context.Context) SkeKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeKubeconfigArrayOutput)
}

// SkeKubeconfigMapInput is an input type that accepts SkeKubeconfigMap and SkeKubeconfigMapOutput values.
// You can construct a concrete instance of `SkeKubeconfigMapInput` via:
//
//	SkeKubeconfigMap{ "key": SkeKubeconfigArgs{...} }
type SkeKubeconfigMapInput interface {
	pulumi.Input

	ToSkeKubeconfigMapOutput() SkeKubeconfigMapOutput
	ToSkeKubeconfigMapOutputWithContext(context.Context) SkeKubeconfigMapOutput
}

type SkeKubeconfigMap map[string]SkeKubeconfigInput

func (SkeKubeconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SkeKubeconfig)(nil)).Elem()
}

func (i SkeKubeconfigMap) ToSkeKubeconfigMapOutput() SkeKubeconfigMapOutput {
	return i.ToSkeKubeconfigMapOutputWithContext(context.Background())
}

func (i SkeKubeconfigMap) ToSkeKubeconfigMapOutputWithContext(ctx context.Context) SkeKubeconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkeKubeconfigMapOutput)
}

type SkeKubeconfigOutput struct{ *pulumi.OutputState }

func (SkeKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkeKubeconfig)(nil)).Elem()
}

func (o SkeKubeconfigOutput) ToSkeKubeconfigOutput() SkeKubeconfigOutput {
	return o
}

func (o SkeKubeconfigOutput) ToSkeKubeconfigOutputWithContext(ctx context.Context) SkeKubeconfigOutput {
	return o
}

// Name of the SKE cluster.
func (o SkeKubeconfigOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Date-time when the kubeconfig was created
func (o SkeKubeconfigOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Expiration time of the kubeconfig, in seconds. Defaults to `3600`
func (o SkeKubeconfigOutput) Expiration() pulumi.IntOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.IntOutput { return v.Expiration }).(pulumi.IntOutput)
}

// Timestamp when the kubeconfig expires
func (o SkeKubeconfigOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Raw short-lived admin kubeconfig.
func (o SkeKubeconfigOutput) KubeConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.KubeConfig }).(pulumi.StringOutput)
}

func (o SkeKubeconfigOutput) KubeConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.KubeConfigId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the cluster is associated.
func (o SkeKubeconfigOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place
func (o SkeKubeconfigOutput) Refresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.BoolPtrOutput { return v.Refresh }).(pulumi.BoolPtrOutput)
}

// The resource region. If not defined, the provider region is used.
func (o SkeKubeconfigOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SkeKubeconfig) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SkeKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (SkeKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SkeKubeconfig)(nil)).Elem()
}

func (o SkeKubeconfigArrayOutput) ToSkeKubeconfigArrayOutput() SkeKubeconfigArrayOutput {
	return o
}

func (o SkeKubeconfigArrayOutput) ToSkeKubeconfigArrayOutputWithContext(ctx context.Context) SkeKubeconfigArrayOutput {
	return o
}

func (o SkeKubeconfigArrayOutput) Index(i pulumi.IntInput) SkeKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SkeKubeconfig {
		return vs[0].([]*SkeKubeconfig)[vs[1].(int)]
	}).(SkeKubeconfigOutput)
}

type SkeKubeconfigMapOutput struct{ *pulumi.OutputState }

func (SkeKubeconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SkeKubeconfig)(nil)).Elem()
}

func (o SkeKubeconfigMapOutput) ToSkeKubeconfigMapOutput() SkeKubeconfigMapOutput {
	return o
}

func (o SkeKubeconfigMapOutput) ToSkeKubeconfigMapOutputWithContext(ctx context.Context) SkeKubeconfigMapOutput {
	return o
}

func (o SkeKubeconfigMapOutput) MapIndex(k pulumi.StringInput) SkeKubeconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SkeKubeconfig {
		return vs[0].(map[string]*SkeKubeconfig)[vs[1].(string)]
	}).(SkeKubeconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SkeKubeconfigInput)(nil)).Elem(), &SkeKubeconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeKubeconfigArrayInput)(nil)).Elem(), SkeKubeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SkeKubeconfigMapInput)(nil)).Elem(), SkeKubeconfigMap{})
	pulumi.RegisterOutputType(SkeKubeconfigOutput{})
	pulumi.RegisterOutputType(SkeKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(SkeKubeconfigMapOutput{})
}
