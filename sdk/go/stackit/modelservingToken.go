// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AI Model Serving Auth Token Resource schema.
//
// ## Example Usage
//
// ### Automatically rotate AI model serving token
type ModelservingToken struct {
	pulumi.CustomResourceState

	// The description of the AI model serving auth token.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the AI model serving auth token.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the AI model serving auth token is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
	Region pulumi.StringOutput `pulumi:"region"`
	// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
	RotateWhenChanged pulumi.StringMapOutput `pulumi:"rotateWhenChanged"`
	// State of the AI model serving auth token.
	State pulumi.StringOutput `pulumi:"state"`
	// Content of the AI model serving auth token.
	Token pulumi.StringOutput `pulumi:"token"`
	// The AI model serving auth token ID.
	TokenId pulumi.StringOutput `pulumi:"tokenId"`
	// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
	TtlDuration pulumi.StringPtrOutput `pulumi:"ttlDuration"`
	// The time until the AI model serving auth token is valid.
	ValidUntil pulumi.StringOutput `pulumi:"validUntil"`
}

// NewModelservingToken registers a new resource with the given unique name, arguments, and options.
func NewModelservingToken(ctx *pulumi.Context,
	name string, args *ModelservingTokenArgs, opts ...pulumi.ResourceOption) (*ModelservingToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelservingToken
	err := ctx.RegisterResource("stackit:index/modelservingToken:ModelservingToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelservingToken gets an existing ModelservingToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelservingToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelservingTokenState, opts ...pulumi.ResourceOption) (*ModelservingToken, error) {
	var resource ModelservingToken
	err := ctx.ReadResource("stackit:index/modelservingToken:ModelservingToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelservingToken resources.
type modelservingTokenState struct {
	// The description of the AI model serving auth token.
	Description *string `pulumi:"description"`
	// Name of the AI model serving auth token.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the AI model serving auth token is associated.
	ProjectId *string `pulumi:"projectId"`
	// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
	Region *string `pulumi:"region"`
	// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
	RotateWhenChanged map[string]string `pulumi:"rotateWhenChanged"`
	// State of the AI model serving auth token.
	State *string `pulumi:"state"`
	// Content of the AI model serving auth token.
	Token *string `pulumi:"token"`
	// The AI model serving auth token ID.
	TokenId *string `pulumi:"tokenId"`
	// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
	TtlDuration *string `pulumi:"ttlDuration"`
	// The time until the AI model serving auth token is valid.
	ValidUntil *string `pulumi:"validUntil"`
}

type ModelservingTokenState struct {
	// The description of the AI model serving auth token.
	Description pulumi.StringPtrInput
	// Name of the AI model serving auth token.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the AI model serving auth token is associated.
	ProjectId pulumi.StringPtrInput
	// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
	Region pulumi.StringPtrInput
	// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
	RotateWhenChanged pulumi.StringMapInput
	// State of the AI model serving auth token.
	State pulumi.StringPtrInput
	// Content of the AI model serving auth token.
	Token pulumi.StringPtrInput
	// The AI model serving auth token ID.
	TokenId pulumi.StringPtrInput
	// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
	TtlDuration pulumi.StringPtrInput
	// The time until the AI model serving auth token is valid.
	ValidUntil pulumi.StringPtrInput
}

func (ModelservingTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelservingTokenState)(nil)).Elem()
}

type modelservingTokenArgs struct {
	// The description of the AI model serving auth token.
	Description *string `pulumi:"description"`
	// Name of the AI model serving auth token.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the AI model serving auth token is associated.
	ProjectId string `pulumi:"projectId"`
	// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
	Region *string `pulumi:"region"`
	// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
	RotateWhenChanged map[string]string `pulumi:"rotateWhenChanged"`
	// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
	TtlDuration *string `pulumi:"ttlDuration"`
}

// The set of arguments for constructing a ModelservingToken resource.
type ModelservingTokenArgs struct {
	// The description of the AI model serving auth token.
	Description pulumi.StringPtrInput
	// Name of the AI model serving auth token.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the AI model serving auth token is associated.
	ProjectId pulumi.StringInput
	// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
	Region pulumi.StringPtrInput
	// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
	RotateWhenChanged pulumi.StringMapInput
	// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
	TtlDuration pulumi.StringPtrInput
}

func (ModelservingTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelservingTokenArgs)(nil)).Elem()
}

type ModelservingTokenInput interface {
	pulumi.Input

	ToModelservingTokenOutput() ModelservingTokenOutput
	ToModelservingTokenOutputWithContext(ctx context.Context) ModelservingTokenOutput
}

func (*ModelservingToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelservingToken)(nil)).Elem()
}

func (i *ModelservingToken) ToModelservingTokenOutput() ModelservingTokenOutput {
	return i.ToModelservingTokenOutputWithContext(context.Background())
}

func (i *ModelservingToken) ToModelservingTokenOutputWithContext(ctx context.Context) ModelservingTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelservingTokenOutput)
}

// ModelservingTokenArrayInput is an input type that accepts ModelservingTokenArray and ModelservingTokenArrayOutput values.
// You can construct a concrete instance of `ModelservingTokenArrayInput` via:
//
//	ModelservingTokenArray{ ModelservingTokenArgs{...} }
type ModelservingTokenArrayInput interface {
	pulumi.Input

	ToModelservingTokenArrayOutput() ModelservingTokenArrayOutput
	ToModelservingTokenArrayOutputWithContext(context.Context) ModelservingTokenArrayOutput
}

type ModelservingTokenArray []ModelservingTokenInput

func (ModelservingTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelservingToken)(nil)).Elem()
}

func (i ModelservingTokenArray) ToModelservingTokenArrayOutput() ModelservingTokenArrayOutput {
	return i.ToModelservingTokenArrayOutputWithContext(context.Background())
}

func (i ModelservingTokenArray) ToModelservingTokenArrayOutputWithContext(ctx context.Context) ModelservingTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelservingTokenArrayOutput)
}

// ModelservingTokenMapInput is an input type that accepts ModelservingTokenMap and ModelservingTokenMapOutput values.
// You can construct a concrete instance of `ModelservingTokenMapInput` via:
//
//	ModelservingTokenMap{ "key": ModelservingTokenArgs{...} }
type ModelservingTokenMapInput interface {
	pulumi.Input

	ToModelservingTokenMapOutput() ModelservingTokenMapOutput
	ToModelservingTokenMapOutputWithContext(context.Context) ModelservingTokenMapOutput
}

type ModelservingTokenMap map[string]ModelservingTokenInput

func (ModelservingTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelservingToken)(nil)).Elem()
}

func (i ModelservingTokenMap) ToModelservingTokenMapOutput() ModelservingTokenMapOutput {
	return i.ToModelservingTokenMapOutputWithContext(context.Background())
}

func (i ModelservingTokenMap) ToModelservingTokenMapOutputWithContext(ctx context.Context) ModelservingTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelservingTokenMapOutput)
}

type ModelservingTokenOutput struct{ *pulumi.OutputState }

func (ModelservingTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelservingToken)(nil)).Elem()
}

func (o ModelservingTokenOutput) ToModelservingTokenOutput() ModelservingTokenOutput {
	return o
}

func (o ModelservingTokenOutput) ToModelservingTokenOutputWithContext(ctx context.Context) ModelservingTokenOutput {
	return o
}

// The description of the AI model serving auth token.
func (o ModelservingTokenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the AI model serving auth token.
func (o ModelservingTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the AI model serving auth token is associated.
func (o ModelservingTokenOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
func (o ModelservingTokenOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
func (o ModelservingTokenOutput) RotateWhenChanged() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringMapOutput { return v.RotateWhenChanged }).(pulumi.StringMapOutput)
}

// State of the AI model serving auth token.
func (o ModelservingTokenOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Content of the AI model serving auth token.
func (o ModelservingTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The AI model serving auth token ID.
func (o ModelservingTokenOutput) TokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.TokenId }).(pulumi.StringOutput)
}

// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
func (o ModelservingTokenOutput) TtlDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringPtrOutput { return v.TtlDuration }).(pulumi.StringPtrOutput)
}

// The time until the AI model serving auth token is valid.
func (o ModelservingTokenOutput) ValidUntil() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelservingToken) pulumi.StringOutput { return v.ValidUntil }).(pulumi.StringOutput)
}

type ModelservingTokenArrayOutput struct{ *pulumi.OutputState }

func (ModelservingTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelservingToken)(nil)).Elem()
}

func (o ModelservingTokenArrayOutput) ToModelservingTokenArrayOutput() ModelservingTokenArrayOutput {
	return o
}

func (o ModelservingTokenArrayOutput) ToModelservingTokenArrayOutputWithContext(ctx context.Context) ModelservingTokenArrayOutput {
	return o
}

func (o ModelservingTokenArrayOutput) Index(i pulumi.IntInput) ModelservingTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModelservingToken {
		return vs[0].([]*ModelservingToken)[vs[1].(int)]
	}).(ModelservingTokenOutput)
}

type ModelservingTokenMapOutput struct{ *pulumi.OutputState }

func (ModelservingTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelservingToken)(nil)).Elem()
}

func (o ModelservingTokenMapOutput) ToModelservingTokenMapOutput() ModelservingTokenMapOutput {
	return o
}

func (o ModelservingTokenMapOutput) ToModelservingTokenMapOutputWithContext(ctx context.Context) ModelservingTokenMapOutput {
	return o
}

func (o ModelservingTokenMapOutput) MapIndex(k pulumi.StringInput) ModelservingTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModelservingToken {
		return vs[0].(map[string]*ModelservingToken)[vs[1].(string)]
	}).(ModelservingTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelservingTokenInput)(nil)).Elem(), &ModelservingToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelservingTokenArrayInput)(nil)).Elem(), ModelservingTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelservingTokenMapInput)(nil)).Elem(), ModelservingTokenMap{})
	pulumi.RegisterOutputType(ModelservingTokenOutput{})
	pulumi.RegisterOutputType(ModelservingTokenArrayOutput{})
	pulumi.RegisterOutputType(ModelservingTokenMapOutput{})
}
