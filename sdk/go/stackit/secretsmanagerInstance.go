// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Secrets Manager instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SecretsmanagerInstance struct {
	pulumi.CustomResourceState

	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls pulumi.StringArrayOutput `pulumi:"acls"`
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewSecretsmanagerInstance registers a new resource with the given unique name, arguments, and options.
func NewSecretsmanagerInstance(ctx *pulumi.Context,
	name string, args *SecretsmanagerInstanceArgs, opts ...pulumi.ResourceOption) (*SecretsmanagerInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretsmanagerInstance
	err := ctx.RegisterResource("stackit:index/secretsmanagerInstance:SecretsmanagerInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsmanagerInstance gets an existing SecretsmanagerInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsmanagerInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsmanagerInstanceState, opts ...pulumi.ResourceOption) (*SecretsmanagerInstance, error) {
	var resource SecretsmanagerInstance
	err := ctx.ReadResource("stackit:index/secretsmanagerInstance:SecretsmanagerInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsmanagerInstance resources.
type secretsmanagerInstanceState struct {
	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls []string `pulumi:"acls"`
	// ID of the Secrets Manager instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
}

type SecretsmanagerInstanceState struct {
	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls pulumi.StringArrayInput
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
}

func (SecretsmanagerInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsmanagerInstanceState)(nil)).Elem()
}

type secretsmanagerInstanceArgs struct {
	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls []string `pulumi:"acls"`
	// Instance name.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a SecretsmanagerInstance resource.
type SecretsmanagerInstanceArgs struct {
	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls pulumi.StringArrayInput
	// Instance name.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
}

func (SecretsmanagerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsmanagerInstanceArgs)(nil)).Elem()
}

type SecretsmanagerInstanceInput interface {
	pulumi.Input

	ToSecretsmanagerInstanceOutput() SecretsmanagerInstanceOutput
	ToSecretsmanagerInstanceOutputWithContext(ctx context.Context) SecretsmanagerInstanceOutput
}

func (*SecretsmanagerInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsmanagerInstance)(nil)).Elem()
}

func (i *SecretsmanagerInstance) ToSecretsmanagerInstanceOutput() SecretsmanagerInstanceOutput {
	return i.ToSecretsmanagerInstanceOutputWithContext(context.Background())
}

func (i *SecretsmanagerInstance) ToSecretsmanagerInstanceOutputWithContext(ctx context.Context) SecretsmanagerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerInstanceOutput)
}

// SecretsmanagerInstanceArrayInput is an input type that accepts SecretsmanagerInstanceArray and SecretsmanagerInstanceArrayOutput values.
// You can construct a concrete instance of `SecretsmanagerInstanceArrayInput` via:
//
//	SecretsmanagerInstanceArray{ SecretsmanagerInstanceArgs{...} }
type SecretsmanagerInstanceArrayInput interface {
	pulumi.Input

	ToSecretsmanagerInstanceArrayOutput() SecretsmanagerInstanceArrayOutput
	ToSecretsmanagerInstanceArrayOutputWithContext(context.Context) SecretsmanagerInstanceArrayOutput
}

type SecretsmanagerInstanceArray []SecretsmanagerInstanceInput

func (SecretsmanagerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsmanagerInstance)(nil)).Elem()
}

func (i SecretsmanagerInstanceArray) ToSecretsmanagerInstanceArrayOutput() SecretsmanagerInstanceArrayOutput {
	return i.ToSecretsmanagerInstanceArrayOutputWithContext(context.Background())
}

func (i SecretsmanagerInstanceArray) ToSecretsmanagerInstanceArrayOutputWithContext(ctx context.Context) SecretsmanagerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerInstanceArrayOutput)
}

// SecretsmanagerInstanceMapInput is an input type that accepts SecretsmanagerInstanceMap and SecretsmanagerInstanceMapOutput values.
// You can construct a concrete instance of `SecretsmanagerInstanceMapInput` via:
//
//	SecretsmanagerInstanceMap{ "key": SecretsmanagerInstanceArgs{...} }
type SecretsmanagerInstanceMapInput interface {
	pulumi.Input

	ToSecretsmanagerInstanceMapOutput() SecretsmanagerInstanceMapOutput
	ToSecretsmanagerInstanceMapOutputWithContext(context.Context) SecretsmanagerInstanceMapOutput
}

type SecretsmanagerInstanceMap map[string]SecretsmanagerInstanceInput

func (SecretsmanagerInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsmanagerInstance)(nil)).Elem()
}

func (i SecretsmanagerInstanceMap) ToSecretsmanagerInstanceMapOutput() SecretsmanagerInstanceMapOutput {
	return i.ToSecretsmanagerInstanceMapOutputWithContext(context.Background())
}

func (i SecretsmanagerInstanceMap) ToSecretsmanagerInstanceMapOutputWithContext(ctx context.Context) SecretsmanagerInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsmanagerInstanceMapOutput)
}

type SecretsmanagerInstanceOutput struct{ *pulumi.OutputState }

func (SecretsmanagerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsmanagerInstance)(nil)).Elem()
}

func (o SecretsmanagerInstanceOutput) ToSecretsmanagerInstanceOutput() SecretsmanagerInstanceOutput {
	return o
}

func (o SecretsmanagerInstanceOutput) ToSecretsmanagerInstanceOutputWithContext(ctx context.Context) SecretsmanagerInstanceOutput {
	return o
}

// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
func (o SecretsmanagerInstanceOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsmanagerInstance) pulumi.StringArrayOutput { return v.Acls }).(pulumi.StringArrayOutput)
}

// ID of the Secrets Manager instance.
func (o SecretsmanagerInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o SecretsmanagerInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o SecretsmanagerInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsmanagerInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type SecretsmanagerInstanceArrayOutput struct{ *pulumi.OutputState }

func (SecretsmanagerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsmanagerInstance)(nil)).Elem()
}

func (o SecretsmanagerInstanceArrayOutput) ToSecretsmanagerInstanceArrayOutput() SecretsmanagerInstanceArrayOutput {
	return o
}

func (o SecretsmanagerInstanceArrayOutput) ToSecretsmanagerInstanceArrayOutputWithContext(ctx context.Context) SecretsmanagerInstanceArrayOutput {
	return o
}

func (o SecretsmanagerInstanceArrayOutput) Index(i pulumi.IntInput) SecretsmanagerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretsmanagerInstance {
		return vs[0].([]*SecretsmanagerInstance)[vs[1].(int)]
	}).(SecretsmanagerInstanceOutput)
}

type SecretsmanagerInstanceMapOutput struct{ *pulumi.OutputState }

func (SecretsmanagerInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsmanagerInstance)(nil)).Elem()
}

func (o SecretsmanagerInstanceMapOutput) ToSecretsmanagerInstanceMapOutput() SecretsmanagerInstanceMapOutput {
	return o
}

func (o SecretsmanagerInstanceMapOutput) ToSecretsmanagerInstanceMapOutputWithContext(ctx context.Context) SecretsmanagerInstanceMapOutput {
	return o
}

func (o SecretsmanagerInstanceMapOutput) MapIndex(k pulumi.StringInput) SecretsmanagerInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretsmanagerInstance {
		return vs[0].(map[string]*SecretsmanagerInstance)[vs[1].(string)]
	}).(SecretsmanagerInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerInstanceInput)(nil)).Elem(), &SecretsmanagerInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerInstanceArrayInput)(nil)).Elem(), SecretsmanagerInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsmanagerInstanceMapInput)(nil)).Elem(), SecretsmanagerInstanceMap{})
	pulumi.RegisterOutputType(SecretsmanagerInstanceOutput{})
	pulumi.RegisterOutputType(SecretsmanagerInstanceArrayOutput{})
	pulumi.RegisterOutputType(SecretsmanagerInstanceMapOutput{})
}
