// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Secrets Manager instance data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupSecretsmanagerInstance(ctx *pulumi.Context, args *LookupSecretsmanagerInstanceArgs, opts ...pulumi.InvokeOption) (*LookupSecretsmanagerInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretsmanagerInstanceResult
	err := ctx.Invoke("stackit:index/getSecretsmanagerInstance:getSecretsmanagerInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretsmanagerInstance.
type LookupSecretsmanagerInstanceArgs struct {
	// ID of the Secrets Manager instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getSecretsmanagerInstance.
type LookupSecretsmanagerInstanceResult struct {
	// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
	Acls []string `pulumi:"acls"`
	Id   string   `pulumi:"id"`
	// ID of the Secrets Manager instance.
	InstanceId string `pulumi:"instanceId"`
	// Instance name.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

func LookupSecretsmanagerInstanceOutput(ctx *pulumi.Context, args LookupSecretsmanagerInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupSecretsmanagerInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecretsmanagerInstanceResultOutput, error) {
			args := v.(LookupSecretsmanagerInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getSecretsmanagerInstance:getSecretsmanagerInstance", args, LookupSecretsmanagerInstanceResultOutput{}, options).(LookupSecretsmanagerInstanceResultOutput), nil
		}).(LookupSecretsmanagerInstanceResultOutput)
}

// A collection of arguments for invoking getSecretsmanagerInstance.
type LookupSecretsmanagerInstanceOutputArgs struct {
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupSecretsmanagerInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretsmanagerInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getSecretsmanagerInstance.
type LookupSecretsmanagerInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupSecretsmanagerInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretsmanagerInstanceResult)(nil)).Elem()
}

func (o LookupSecretsmanagerInstanceResultOutput) ToLookupSecretsmanagerInstanceResultOutput() LookupSecretsmanagerInstanceResultOutput {
	return o
}

func (o LookupSecretsmanagerInstanceResultOutput) ToLookupSecretsmanagerInstanceResultOutputWithContext(ctx context.Context) LookupSecretsmanagerInstanceResultOutput {
	return o
}

// The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation
func (o LookupSecretsmanagerInstanceResultOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecretsmanagerInstanceResult) []string { return v.Acls }).(pulumi.StringArrayOutput)
}

func (o LookupSecretsmanagerInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the Secrets Manager instance.
func (o LookupSecretsmanagerInstanceResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerInstanceResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o LookupSecretsmanagerInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupSecretsmanagerInstanceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerInstanceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecretsmanagerInstanceResultOutput{})
}
