// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Volume resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("stackit:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// STACKIT project ID to which the volume is associated.
	ProjectId string `pulumi:"projectId"`
	// The volume ID.
	VolumeId string `pulumi:"volumeId"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// The availability zone of the volume.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The description of the volume.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass string `pulumi:"performanceClass"`
	// STACKIT project ID to which the volume is associated.
	ProjectId string `pulumi:"projectId"`
	// The server ID of the server to which the volume is attached to.
	ServerId string `pulumi:"serverId"`
	// The size of the volume in GB. It can only be updated to a larger value than the current size
	Size int `pulumi:"size"`
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup
	Source GetVolumeSource `pulumi:"source"`
	// The volume ID.
	VolumeId string `pulumi:"volumeId"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVolumeResultOutput, error) {
			args := v.(LookupVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getVolume:getVolume", args, LookupVolumeResultOutput{}, options).(LookupVolumeResultOutput), nil
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// STACKIT project ID to which the volume is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The volume ID.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// The availability zone of the volume.
func (o LookupVolumeResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The description of the volume.
func (o LookupVolumeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o LookupVolumeResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVolumeResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the volume.
func (o LookupVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
func (o LookupVolumeResultOutput) PerformanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.PerformanceClass }).(pulumi.StringOutput)
}

// STACKIT project ID to which the volume is associated.
func (o LookupVolumeResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID of the server to which the volume is attached to.
func (o LookupVolumeResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.ServerId }).(pulumi.StringOutput)
}

// The size of the volume in GB. It can only be updated to a larger value than the current size
func (o LookupVolumeResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Size }).(pulumi.IntOutput)
}

// The source of the volume. It can be either a volume, an image, a snapshot or a backup
func (o LookupVolumeResultOutput) Source() GetVolumeSourceOutput {
	return o.ApplyT(func(v LookupVolumeResult) GetVolumeSource { return v.Source }).(GetVolumeSourceOutput)
}

// The volume ID.
func (o LookupVolumeResultOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.VolumeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
