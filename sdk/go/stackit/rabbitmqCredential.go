// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitMQ credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type RabbitmqCredential struct {
	pulumi.CustomResourceState

	// The credential's ID.
	CredentialId pulumi.StringOutput      `pulumi:"credentialId"`
	Host         pulumi.StringOutput      `pulumi:"host"`
	Hosts        pulumi.StringArrayOutput `pulumi:"hosts"`
	HttpApiUri   pulumi.StringOutput      `pulumi:"httpApiUri"`
	HttpApiUris  pulumi.StringArrayOutput `pulumi:"httpApiUris"`
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Management pulumi.StringOutput `pulumi:"management"`
	Password   pulumi.StringOutput `pulumi:"password"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringOutput      `pulumi:"projectId"`
	Uri       pulumi.StringOutput      `pulumi:"uri"`
	Uris      pulumi.StringArrayOutput `pulumi:"uris"`
	Username  pulumi.StringOutput      `pulumi:"username"`
}

// NewRabbitmqCredential registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqCredential(ctx *pulumi.Context,
	name string, args *RabbitmqCredentialArgs, opts ...pulumi.ResourceOption) (*RabbitmqCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RabbitmqCredential
	err := ctx.RegisterResource("stackit:index/rabbitmqCredential:RabbitmqCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqCredential gets an existing RabbitmqCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqCredentialState, opts ...pulumi.ResourceOption) (*RabbitmqCredential, error) {
	var resource RabbitmqCredential
	err := ctx.ReadResource("stackit:index/rabbitmqCredential:RabbitmqCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqCredential resources.
type rabbitmqCredentialState struct {
	// The credential's ID.
	CredentialId *string  `pulumi:"credentialId"`
	Host         *string  `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	HttpApiUri   *string  `pulumi:"httpApiUri"`
	HttpApiUris  []string `pulumi:"httpApiUris"`
	// ID of the RabbitMQ instance.
	InstanceId *string `pulumi:"instanceId"`
	Management *string `pulumi:"management"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId *string  `pulumi:"projectId"`
	Uri       *string  `pulumi:"uri"`
	Uris      []string `pulumi:"uris"`
	Username  *string  `pulumi:"username"`
}

type RabbitmqCredentialState struct {
	// The credential's ID.
	CredentialId pulumi.StringPtrInput
	Host         pulumi.StringPtrInput
	Hosts        pulumi.StringArrayInput
	HttpApiUri   pulumi.StringPtrInput
	HttpApiUris  pulumi.StringArrayInput
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringPtrInput
	Management pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	Uri       pulumi.StringPtrInput
	Uris      pulumi.StringArrayInput
	Username  pulumi.StringPtrInput
}

func (RabbitmqCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqCredentialState)(nil)).Elem()
}

type rabbitmqCredentialArgs struct {
	// ID of the RabbitMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a RabbitmqCredential resource.
type RabbitmqCredentialArgs struct {
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringInput
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput
}

func (RabbitmqCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqCredentialArgs)(nil)).Elem()
}

type RabbitmqCredentialInput interface {
	pulumi.Input

	ToRabbitmqCredentialOutput() RabbitmqCredentialOutput
	ToRabbitmqCredentialOutputWithContext(ctx context.Context) RabbitmqCredentialOutput
}

func (*RabbitmqCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqCredential)(nil)).Elem()
}

func (i *RabbitmqCredential) ToRabbitmqCredentialOutput() RabbitmqCredentialOutput {
	return i.ToRabbitmqCredentialOutputWithContext(context.Background())
}

func (i *RabbitmqCredential) ToRabbitmqCredentialOutputWithContext(ctx context.Context) RabbitmqCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqCredentialOutput)
}

// RabbitmqCredentialArrayInput is an input type that accepts RabbitmqCredentialArray and RabbitmqCredentialArrayOutput values.
// You can construct a concrete instance of `RabbitmqCredentialArrayInput` via:
//
//	RabbitmqCredentialArray{ RabbitmqCredentialArgs{...} }
type RabbitmqCredentialArrayInput interface {
	pulumi.Input

	ToRabbitmqCredentialArrayOutput() RabbitmqCredentialArrayOutput
	ToRabbitmqCredentialArrayOutputWithContext(context.Context) RabbitmqCredentialArrayOutput
}

type RabbitmqCredentialArray []RabbitmqCredentialInput

func (RabbitmqCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqCredential)(nil)).Elem()
}

func (i RabbitmqCredentialArray) ToRabbitmqCredentialArrayOutput() RabbitmqCredentialArrayOutput {
	return i.ToRabbitmqCredentialArrayOutputWithContext(context.Background())
}

func (i RabbitmqCredentialArray) ToRabbitmqCredentialArrayOutputWithContext(ctx context.Context) RabbitmqCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqCredentialArrayOutput)
}

// RabbitmqCredentialMapInput is an input type that accepts RabbitmqCredentialMap and RabbitmqCredentialMapOutput values.
// You can construct a concrete instance of `RabbitmqCredentialMapInput` via:
//
//	RabbitmqCredentialMap{ "key": RabbitmqCredentialArgs{...} }
type RabbitmqCredentialMapInput interface {
	pulumi.Input

	ToRabbitmqCredentialMapOutput() RabbitmqCredentialMapOutput
	ToRabbitmqCredentialMapOutputWithContext(context.Context) RabbitmqCredentialMapOutput
}

type RabbitmqCredentialMap map[string]RabbitmqCredentialInput

func (RabbitmqCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqCredential)(nil)).Elem()
}

func (i RabbitmqCredentialMap) ToRabbitmqCredentialMapOutput() RabbitmqCredentialMapOutput {
	return i.ToRabbitmqCredentialMapOutputWithContext(context.Background())
}

func (i RabbitmqCredentialMap) ToRabbitmqCredentialMapOutputWithContext(ctx context.Context) RabbitmqCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqCredentialMapOutput)
}

type RabbitmqCredentialOutput struct{ *pulumi.OutputState }

func (RabbitmqCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqCredential)(nil)).Elem()
}

func (o RabbitmqCredentialOutput) ToRabbitmqCredentialOutput() RabbitmqCredentialOutput {
	return o
}

func (o RabbitmqCredentialOutput) ToRabbitmqCredentialOutputWithContext(ctx context.Context) RabbitmqCredentialOutput {
	return o
}

// The credential's ID.
func (o RabbitmqCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o RabbitmqCredentialOutput) HttpApiUri() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.HttpApiUri }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) HttpApiUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringArrayOutput { return v.HttpApiUris }).(pulumi.StringArrayOutput)
}

// ID of the RabbitMQ instance.
func (o RabbitmqCredentialOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Management() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.Management }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o RabbitmqCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func (o RabbitmqCredentialOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringArrayOutput { return v.Uris }).(pulumi.StringArrayOutput)
}

func (o RabbitmqCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type RabbitmqCredentialArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqCredential)(nil)).Elem()
}

func (o RabbitmqCredentialArrayOutput) ToRabbitmqCredentialArrayOutput() RabbitmqCredentialArrayOutput {
	return o
}

func (o RabbitmqCredentialArrayOutput) ToRabbitmqCredentialArrayOutputWithContext(ctx context.Context) RabbitmqCredentialArrayOutput {
	return o
}

func (o RabbitmqCredentialArrayOutput) Index(i pulumi.IntInput) RabbitmqCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqCredential {
		return vs[0].([]*RabbitmqCredential)[vs[1].(int)]
	}).(RabbitmqCredentialOutput)
}

type RabbitmqCredentialMapOutput struct{ *pulumi.OutputState }

func (RabbitmqCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqCredential)(nil)).Elem()
}

func (o RabbitmqCredentialMapOutput) ToRabbitmqCredentialMapOutput() RabbitmqCredentialMapOutput {
	return o
}

func (o RabbitmqCredentialMapOutput) ToRabbitmqCredentialMapOutputWithContext(ctx context.Context) RabbitmqCredentialMapOutput {
	return o
}

func (o RabbitmqCredentialMapOutput) MapIndex(k pulumi.StringInput) RabbitmqCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqCredential {
		return vs[0].(map[string]*RabbitmqCredential)[vs[1].(string)]
	}).(RabbitmqCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqCredentialInput)(nil)).Elem(), &RabbitmqCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqCredentialArrayInput)(nil)).Elem(), RabbitmqCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqCredentialMapInput)(nil)).Elem(), RabbitmqCredentialMap{})
	pulumi.RegisterOutputType(RabbitmqCredentialOutput{})
	pulumi.RegisterOutputType(RabbitmqCredentialArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqCredentialMapOutput{})
}
