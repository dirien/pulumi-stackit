// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS Zone resource schema.
//
// ## Example Usage
type DnsZone struct {
	pulumi.CustomResourceState

	// The access control list. E.g. `0.0.0.0/0,::/0`
	Acl    pulumi.StringOutput `pulumi:"acl"`
	Active pulumi.BoolOutput   `pulumi:"active"`
	// A contact e-mail for the zone.
	ContactEmail pulumi.StringOutput `pulumi:"contactEmail"`
	// Default time to live. E.g. 3600.
	DefaultTtl pulumi.IntOutput `pulumi:"defaultTtl"`
	// Description of the zone.
	Description pulumi.StringOutput `pulumi:"description"`
	// The zone name. E.g. `example.com`
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Expire time. E.g. 1209600.
	ExpireTime pulumi.IntOutput `pulumi:"expireTime"`
	// Specifies, if the zone is a reverse zone or not. Defaults to `false`
	IsReverseZone pulumi.BoolOutput `pulumi:"isReverseZone"`
	// The user given name of the zone.
	Name pulumi.StringOutput `pulumi:"name"`
	// Negative caching. E.g. 60
	NegativeCache pulumi.IntOutput `pulumi:"negativeCache"`
	// Primary name server for secondary zone. E.g. ["1.2.3.4"]
	Primaries pulumi.StringArrayOutput `pulumi:"primaries"`
	// Primary name server. FQDN.
	PrimaryNameServer pulumi.StringOutput `pulumi:"primaryNameServer"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Record count how many records are in the zone.
	RecordCount pulumi.IntOutput `pulumi:"recordCount"`
	// Refresh time. E.g. 3600
	RefreshTime pulumi.IntOutput `pulumi:"refreshTime"`
	// Retry time. E.g. 600
	RetryTime pulumi.IntOutput `pulumi:"retryTime"`
	// Serial number. E.g. `2022111400`.
	SerialNumber pulumi.IntOutput `pulumi:"serialNumber"`
	// Zone state. E.g. `CREATE_SUCCEEDED`.
	State pulumi.StringOutput `pulumi:"state"`
	// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Visibility of the zone. E.g. `public`.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// The zone ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsName == nil {
		return nil, errors.New("invalid value for required argument 'DnsName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZone
	err := ctx.RegisterResource("stackit:index/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("stackit:index/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	// The access control list. E.g. `0.0.0.0/0,::/0`
	Acl    *string `pulumi:"acl"`
	Active *bool   `pulumi:"active"`
	// A contact e-mail for the zone.
	ContactEmail *string `pulumi:"contactEmail"`
	// Default time to live. E.g. 3600.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Description of the zone.
	Description *string `pulumi:"description"`
	// The zone name. E.g. `example.com`
	DnsName *string `pulumi:"dnsName"`
	// Expire time. E.g. 1209600.
	ExpireTime *int `pulumi:"expireTime"`
	// Specifies, if the zone is a reverse zone or not. Defaults to `false`
	IsReverseZone *bool `pulumi:"isReverseZone"`
	// The user given name of the zone.
	Name *string `pulumi:"name"`
	// Negative caching. E.g. 60
	NegativeCache *int `pulumi:"negativeCache"`
	// Primary name server for secondary zone. E.g. ["1.2.3.4"]
	Primaries []string `pulumi:"primaries"`
	// Primary name server. FQDN.
	PrimaryNameServer *string `pulumi:"primaryNameServer"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId *string `pulumi:"projectId"`
	// Record count how many records are in the zone.
	RecordCount *int `pulumi:"recordCount"`
	// Refresh time. E.g. 3600
	RefreshTime *int `pulumi:"refreshTime"`
	// Retry time. E.g. 600
	RetryTime *int `pulumi:"retryTime"`
	// Serial number. E.g. `2022111400`.
	SerialNumber *int `pulumi:"serialNumber"`
	// Zone state. E.g. `CREATE_SUCCEEDED`.
	State *string `pulumi:"state"`
	// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
	Type *string `pulumi:"type"`
	// Visibility of the zone. E.g. `public`.
	Visibility *string `pulumi:"visibility"`
	// The zone ID.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsZoneState struct {
	// The access control list. E.g. `0.0.0.0/0,::/0`
	Acl    pulumi.StringPtrInput
	Active pulumi.BoolPtrInput
	// A contact e-mail for the zone.
	ContactEmail pulumi.StringPtrInput
	// Default time to live. E.g. 3600.
	DefaultTtl pulumi.IntPtrInput
	// Description of the zone.
	Description pulumi.StringPtrInput
	// The zone name. E.g. `example.com`
	DnsName pulumi.StringPtrInput
	// Expire time. E.g. 1209600.
	ExpireTime pulumi.IntPtrInput
	// Specifies, if the zone is a reverse zone or not. Defaults to `false`
	IsReverseZone pulumi.BoolPtrInput
	// The user given name of the zone.
	Name pulumi.StringPtrInput
	// Negative caching. E.g. 60
	NegativeCache pulumi.IntPtrInput
	// Primary name server for secondary zone. E.g. ["1.2.3.4"]
	Primaries pulumi.StringArrayInput
	// Primary name server. FQDN.
	PrimaryNameServer pulumi.StringPtrInput
	// STACKIT project ID to which the dns zone is associated.
	ProjectId pulumi.StringPtrInput
	// Record count how many records are in the zone.
	RecordCount pulumi.IntPtrInput
	// Refresh time. E.g. 3600
	RefreshTime pulumi.IntPtrInput
	// Retry time. E.g. 600
	RetryTime pulumi.IntPtrInput
	// Serial number. E.g. `2022111400`.
	SerialNumber pulumi.IntPtrInput
	// Zone state. E.g. `CREATE_SUCCEEDED`.
	State pulumi.StringPtrInput
	// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
	Type pulumi.StringPtrInput
	// Visibility of the zone. E.g. `public`.
	Visibility pulumi.StringPtrInput
	// The zone ID.
	ZoneId pulumi.StringPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// The access control list. E.g. `0.0.0.0/0,::/0`
	Acl    *string `pulumi:"acl"`
	Active *bool   `pulumi:"active"`
	// A contact e-mail for the zone.
	ContactEmail *string `pulumi:"contactEmail"`
	// Default time to live. E.g. 3600.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Description of the zone.
	Description *string `pulumi:"description"`
	// The zone name. E.g. `example.com`
	DnsName string `pulumi:"dnsName"`
	// Expire time. E.g. 1209600.
	ExpireTime *int `pulumi:"expireTime"`
	// Specifies, if the zone is a reverse zone or not. Defaults to `false`
	IsReverseZone *bool `pulumi:"isReverseZone"`
	// The user given name of the zone.
	Name *string `pulumi:"name"`
	// Negative caching. E.g. 60
	NegativeCache *int `pulumi:"negativeCache"`
	// Primary name server for secondary zone. E.g. ["1.2.3.4"]
	Primaries []string `pulumi:"primaries"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId string `pulumi:"projectId"`
	// Refresh time. E.g. 3600
	RefreshTime *int `pulumi:"refreshTime"`
	// Retry time. E.g. 600
	RetryTime *int `pulumi:"retryTime"`
	// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// The access control list. E.g. `0.0.0.0/0,::/0`
	Acl    pulumi.StringPtrInput
	Active pulumi.BoolPtrInput
	// A contact e-mail for the zone.
	ContactEmail pulumi.StringPtrInput
	// Default time to live. E.g. 3600.
	DefaultTtl pulumi.IntPtrInput
	// Description of the zone.
	Description pulumi.StringPtrInput
	// The zone name. E.g. `example.com`
	DnsName pulumi.StringInput
	// Expire time. E.g. 1209600.
	ExpireTime pulumi.IntPtrInput
	// Specifies, if the zone is a reverse zone or not. Defaults to `false`
	IsReverseZone pulumi.BoolPtrInput
	// The user given name of the zone.
	Name pulumi.StringPtrInput
	// Negative caching. E.g. 60
	NegativeCache pulumi.IntPtrInput
	// Primary name server for secondary zone. E.g. ["1.2.3.4"]
	Primaries pulumi.StringArrayInput
	// STACKIT project ID to which the dns zone is associated.
	ProjectId pulumi.StringInput
	// Refresh time. E.g. 3600
	RefreshTime pulumi.IntPtrInput
	// Retry time. E.g. 600
	RetryTime pulumi.IntPtrInput
	// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
	Type pulumi.StringPtrInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}

type DnsZoneInput interface {
	pulumi.Input

	ToDnsZoneOutput() DnsZoneOutput
	ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput
}

func (*DnsZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (i *DnsZone) ToDnsZoneOutput() DnsZoneOutput {
	return i.ToDnsZoneOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneOutput)
}

// DnsZoneArrayInput is an input type that accepts DnsZoneArray and DnsZoneArrayOutput values.
// You can construct a concrete instance of `DnsZoneArrayInput` via:
//
//	DnsZoneArray{ DnsZoneArgs{...} }
type DnsZoneArrayInput interface {
	pulumi.Input

	ToDnsZoneArrayOutput() DnsZoneArrayOutput
	ToDnsZoneArrayOutputWithContext(context.Context) DnsZoneArrayOutput
}

type DnsZoneArray []DnsZoneInput

func (DnsZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (i DnsZoneArray) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return i.ToDnsZoneArrayOutputWithContext(context.Background())
}

func (i DnsZoneArray) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneArrayOutput)
}

// DnsZoneMapInput is an input type that accepts DnsZoneMap and DnsZoneMapOutput values.
// You can construct a concrete instance of `DnsZoneMapInput` via:
//
//	DnsZoneMap{ "key": DnsZoneArgs{...} }
type DnsZoneMapInput interface {
	pulumi.Input

	ToDnsZoneMapOutput() DnsZoneMapOutput
	ToDnsZoneMapOutputWithContext(context.Context) DnsZoneMapOutput
}

type DnsZoneMap map[string]DnsZoneInput

func (DnsZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (i DnsZoneMap) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return i.ToDnsZoneMapOutputWithContext(context.Background())
}

func (i DnsZoneMap) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneMapOutput)
}

type DnsZoneOutput struct{ *pulumi.OutputState }

func (DnsZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (o DnsZoneOutput) ToDnsZoneOutput() DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return o
}

// The access control list. E.g. `0.0.0.0/0,::/0`
func (o DnsZoneOutput) Acl() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Acl }).(pulumi.StringOutput)
}

func (o DnsZoneOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// A contact e-mail for the zone.
func (o DnsZoneOutput) ContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.ContactEmail }).(pulumi.StringOutput)
}

// Default time to live. E.g. 3600.
func (o DnsZoneOutput) DefaultTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.DefaultTtl }).(pulumi.IntOutput)
}

// Description of the zone.
func (o DnsZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The zone name. E.g. `example.com`
func (o DnsZoneOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Expire time. E.g. 1209600.
func (o DnsZoneOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.ExpireTime }).(pulumi.IntOutput)
}

// Specifies, if the zone is a reverse zone or not. Defaults to `false`
func (o DnsZoneOutput) IsReverseZone() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.BoolOutput { return v.IsReverseZone }).(pulumi.BoolOutput)
}

// The user given name of the zone.
func (o DnsZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Negative caching. E.g. 60
func (o DnsZoneOutput) NegativeCache() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.NegativeCache }).(pulumi.IntOutput)
}

// Primary name server for secondary zone. E.g. ["1.2.3.4"]
func (o DnsZoneOutput) Primaries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringArrayOutput { return v.Primaries }).(pulumi.StringArrayOutput)
}

// Primary name server. FQDN.
func (o DnsZoneOutput) PrimaryNameServer() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.PrimaryNameServer }).(pulumi.StringOutput)
}

// STACKIT project ID to which the dns zone is associated.
func (o DnsZoneOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Record count how many records are in the zone.
func (o DnsZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.RecordCount }).(pulumi.IntOutput)
}

// Refresh time. E.g. 3600
func (o DnsZoneOutput) RefreshTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.RefreshTime }).(pulumi.IntOutput)
}

// Retry time. E.g. 600
func (o DnsZoneOutput) RetryTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.RetryTime }).(pulumi.IntOutput)
}

// Serial number. E.g. `2022111400`.
func (o DnsZoneOutput) SerialNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntOutput { return v.SerialNumber }).(pulumi.IntOutput)
}

// Zone state. E.g. `CREATE_SUCCEEDED`.
func (o DnsZoneOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
func (o DnsZoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Visibility of the zone. E.g. `public`.
func (o DnsZoneOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// The zone ID.
func (o DnsZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) Index(i pulumi.IntInput) DnsZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].([]*DnsZone)[vs[1].(int)]
	}).(DnsZoneOutput)
}

type DnsZoneMapOutput struct{ *pulumi.OutputState }

func (DnsZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) MapIndex(k pulumi.StringInput) DnsZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].(map[string]*DnsZone)[vs[1].(string)]
	}).(DnsZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneInput)(nil)).Elem(), &DnsZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneArrayInput)(nil)).Elem(), DnsZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneMapInput)(nil)).Elem(), DnsZoneMap{})
	pulumi.RegisterOutputType(DnsZoneOutput{})
	pulumi.RegisterOutputType(DnsZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneMapOutput{})
}
