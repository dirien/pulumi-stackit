// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ObjectStorage bucket resource schema. Must have a `region` specified in the provider configuration. If you are creating `credentialsgroup` and `bucket` resources simultaneously, please include the `dependsOn` field so that they are created sequentially. This prevents errors from concurrent calls to the service enablement that is done in the background.
//
// ## Example Usage
type ObjectstorageBucket struct {
	pulumi.CustomResourceState

	// The bucket name. It must be DNS conform.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT Project ID to which the bucket is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region                pulumi.StringOutput `pulumi:"region"`
	UrlPathStyle          pulumi.StringOutput `pulumi:"urlPathStyle"`
	UrlVirtualHostedStyle pulumi.StringOutput `pulumi:"urlVirtualHostedStyle"`
}

// NewObjectstorageBucket registers a new resource with the given unique name, arguments, and options.
func NewObjectstorageBucket(ctx *pulumi.Context,
	name string, args *ObjectstorageBucketArgs, opts ...pulumi.ResourceOption) (*ObjectstorageBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectstorageBucket
	err := ctx.RegisterResource("stackit:index/objectstorageBucket:ObjectstorageBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectstorageBucket gets an existing ObjectstorageBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectstorageBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectstorageBucketState, opts ...pulumi.ResourceOption) (*ObjectstorageBucket, error) {
	var resource ObjectstorageBucket
	err := ctx.ReadResource("stackit:index/objectstorageBucket:ObjectstorageBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectstorageBucket resources.
type objectstorageBucketState struct {
	// The bucket name. It must be DNS conform.
	Name *string `pulumi:"name"`
	// STACKIT Project ID to which the bucket is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region                *string `pulumi:"region"`
	UrlPathStyle          *string `pulumi:"urlPathStyle"`
	UrlVirtualHostedStyle *string `pulumi:"urlVirtualHostedStyle"`
}

type ObjectstorageBucketState struct {
	// The bucket name. It must be DNS conform.
	Name pulumi.StringPtrInput
	// STACKIT Project ID to which the bucket is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region                pulumi.StringPtrInput
	UrlPathStyle          pulumi.StringPtrInput
	UrlVirtualHostedStyle pulumi.StringPtrInput
}

func (ObjectstorageBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageBucketState)(nil)).Elem()
}

type objectstorageBucketArgs struct {
	// The bucket name. It must be DNS conform.
	Name *string `pulumi:"name"`
	// STACKIT Project ID to which the bucket is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ObjectstorageBucket resource.
type ObjectstorageBucketArgs struct {
	// The bucket name. It must be DNS conform.
	Name pulumi.StringPtrInput
	// STACKIT Project ID to which the bucket is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (ObjectstorageBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageBucketArgs)(nil)).Elem()
}

type ObjectstorageBucketInput interface {
	pulumi.Input

	ToObjectstorageBucketOutput() ObjectstorageBucketOutput
	ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput
}

func (*ObjectstorageBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageBucket)(nil)).Elem()
}

func (i *ObjectstorageBucket) ToObjectstorageBucketOutput() ObjectstorageBucketOutput {
	return i.ToObjectstorageBucketOutputWithContext(context.Background())
}

func (i *ObjectstorageBucket) ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketOutput)
}

// ObjectstorageBucketArrayInput is an input type that accepts ObjectstorageBucketArray and ObjectstorageBucketArrayOutput values.
// You can construct a concrete instance of `ObjectstorageBucketArrayInput` via:
//
//	ObjectstorageBucketArray{ ObjectstorageBucketArgs{...} }
type ObjectstorageBucketArrayInput interface {
	pulumi.Input

	ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput
	ToObjectstorageBucketArrayOutputWithContext(context.Context) ObjectstorageBucketArrayOutput
}

type ObjectstorageBucketArray []ObjectstorageBucketInput

func (ObjectstorageBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageBucket)(nil)).Elem()
}

func (i ObjectstorageBucketArray) ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput {
	return i.ToObjectstorageBucketArrayOutputWithContext(context.Background())
}

func (i ObjectstorageBucketArray) ToObjectstorageBucketArrayOutputWithContext(ctx context.Context) ObjectstorageBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketArrayOutput)
}

// ObjectstorageBucketMapInput is an input type that accepts ObjectstorageBucketMap and ObjectstorageBucketMapOutput values.
// You can construct a concrete instance of `ObjectstorageBucketMapInput` via:
//
//	ObjectstorageBucketMap{ "key": ObjectstorageBucketArgs{...} }
type ObjectstorageBucketMapInput interface {
	pulumi.Input

	ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput
	ToObjectstorageBucketMapOutputWithContext(context.Context) ObjectstorageBucketMapOutput
}

type ObjectstorageBucketMap map[string]ObjectstorageBucketInput

func (ObjectstorageBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageBucket)(nil)).Elem()
}

func (i ObjectstorageBucketMap) ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput {
	return i.ToObjectstorageBucketMapOutputWithContext(context.Background())
}

func (i ObjectstorageBucketMap) ToObjectstorageBucketMapOutputWithContext(ctx context.Context) ObjectstorageBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketMapOutput)
}

type ObjectstorageBucketOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketOutput) ToObjectstorageBucketOutput() ObjectstorageBucketOutput {
	return o
}

func (o ObjectstorageBucketOutput) ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput {
	return o
}

// The bucket name. It must be DNS conform.
func (o ObjectstorageBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the bucket is associated.
func (o ObjectstorageBucketOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o ObjectstorageBucketOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ObjectstorageBucketOutput) UrlPathStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.UrlPathStyle }).(pulumi.StringOutput)
}

func (o ObjectstorageBucketOutput) UrlVirtualHostedStyle() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.UrlVirtualHostedStyle }).(pulumi.StringOutput)
}

type ObjectstorageBucketArrayOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketArrayOutput) ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput {
	return o
}

func (o ObjectstorageBucketArrayOutput) ToObjectstorageBucketArrayOutputWithContext(ctx context.Context) ObjectstorageBucketArrayOutput {
	return o
}

func (o ObjectstorageBucketArrayOutput) Index(i pulumi.IntInput) ObjectstorageBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectstorageBucket {
		return vs[0].([]*ObjectstorageBucket)[vs[1].(int)]
	}).(ObjectstorageBucketOutput)
}

type ObjectstorageBucketMapOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketMapOutput) ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput {
	return o
}

func (o ObjectstorageBucketMapOutput) ToObjectstorageBucketMapOutputWithContext(ctx context.Context) ObjectstorageBucketMapOutput {
	return o
}

func (o ObjectstorageBucketMapOutput) MapIndex(k pulumi.StringInput) ObjectstorageBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectstorageBucket {
		return vs[0].(map[string]*ObjectstorageBucket)[vs[1].(string)]
	}).(ObjectstorageBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketInput)(nil)).Elem(), &ObjectstorageBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketArrayInput)(nil)).Elem(), ObjectstorageBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketMapInput)(nil)).Elem(), ObjectstorageBucketMap{})
	pulumi.RegisterOutputType(ObjectstorageBucketOutput{})
	pulumi.RegisterOutputType(ObjectstorageBucketArrayOutput{})
	pulumi.RegisterOutputType(ObjectstorageBucketMapOutput{})
}
