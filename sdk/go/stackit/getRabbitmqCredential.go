// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitMQ credential data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupRabbitmqCredential(ctx *pulumi.Context, args *LookupRabbitmqCredentialArgs, opts ...pulumi.InvokeOption) (*LookupRabbitmqCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRabbitmqCredentialResult
	err := ctx.Invoke("stackit:index/getRabbitmqCredential:getRabbitmqCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRabbitmqCredential.
type LookupRabbitmqCredentialArgs struct {
	// The credential's ID.
	CredentialId string `pulumi:"credentialId"`
	// ID of the RabbitMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getRabbitmqCredential.
type LookupRabbitmqCredentialResult struct {
	// The credential's ID.
	CredentialId string   `pulumi:"credentialId"`
	Host         string   `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	HttpApiUri   string   `pulumi:"httpApiUri"`
	HttpApiUris  []string `pulumi:"httpApiUris"`
	Id           string   `pulumi:"id"`
	// ID of the RabbitMQ instance.
	InstanceId string `pulumi:"instanceId"`
	Management string `pulumi:"management"`
	Password   string `pulumi:"password"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string   `pulumi:"projectId"`
	Uri       string   `pulumi:"uri"`
	Uris      []string `pulumi:"uris"`
	Username  string   `pulumi:"username"`
}

func LookupRabbitmqCredentialOutput(ctx *pulumi.Context, args LookupRabbitmqCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupRabbitmqCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRabbitmqCredentialResultOutput, error) {
			args := v.(LookupRabbitmqCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getRabbitmqCredential:getRabbitmqCredential", args, LookupRabbitmqCredentialResultOutput{}, options).(LookupRabbitmqCredentialResultOutput), nil
		}).(LookupRabbitmqCredentialResultOutput)
}

// A collection of arguments for invoking getRabbitmqCredential.
type LookupRabbitmqCredentialOutputArgs struct {
	// The credential's ID.
	CredentialId pulumi.StringInput `pulumi:"credentialId"`
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupRabbitmqCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRabbitmqCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getRabbitmqCredential.
type LookupRabbitmqCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupRabbitmqCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRabbitmqCredentialResult)(nil)).Elem()
}

func (o LookupRabbitmqCredentialResultOutput) ToLookupRabbitmqCredentialResultOutput() LookupRabbitmqCredentialResultOutput {
	return o
}

func (o LookupRabbitmqCredentialResultOutput) ToLookupRabbitmqCredentialResultOutputWithContext(ctx context.Context) LookupRabbitmqCredentialResultOutput {
	return o
}

// The credential's ID.
func (o LookupRabbitmqCredentialResultOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.CredentialId }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o LookupRabbitmqCredentialResultOutput) HttpApiUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.HttpApiUri }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) HttpApiUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) []string { return v.HttpApiUris }).(pulumi.StringArrayOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the RabbitMQ instance.
func (o LookupRabbitmqCredentialResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Management() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Management }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupRabbitmqCredentialResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Uri }).(pulumi.StringOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

func (o LookupRabbitmqCredentialResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRabbitmqCredentialResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRabbitmqCredentialResultOutput{})
}
