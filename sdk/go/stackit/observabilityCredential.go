// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ObservabilityCredential struct {
	pulumi.CustomResourceState

	// The Observability Instance ID the credential belongs to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Credential password
	Password pulumi.StringOutput `pulumi:"password"`
	// STACKIT project ID to which the credential is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Credential username
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewObservabilityCredential registers a new resource with the given unique name, arguments, and options.
func NewObservabilityCredential(ctx *pulumi.Context,
	name string, args *ObservabilityCredentialArgs, opts ...pulumi.ResourceOption) (*ObservabilityCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityCredential
	err := ctx.RegisterResource("stackit:index/observabilityCredential:ObservabilityCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityCredential gets an existing ObservabilityCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityCredentialState, opts ...pulumi.ResourceOption) (*ObservabilityCredential, error) {
	var resource ObservabilityCredential
	err := ctx.ReadResource("stackit:index/observabilityCredential:ObservabilityCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityCredential resources.
type observabilityCredentialState struct {
	// The Observability Instance ID the credential belongs to.
	InstanceId *string `pulumi:"instanceId"`
	// Credential password
	Password *string `pulumi:"password"`
	// STACKIT project ID to which the credential is associated.
	ProjectId *string `pulumi:"projectId"`
	// Credential username
	Username *string `pulumi:"username"`
}

type ObservabilityCredentialState struct {
	// The Observability Instance ID the credential belongs to.
	InstanceId pulumi.StringPtrInput
	// Credential password
	Password pulumi.StringPtrInput
	// STACKIT project ID to which the credential is associated.
	ProjectId pulumi.StringPtrInput
	// Credential username
	Username pulumi.StringPtrInput
}

func (ObservabilityCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityCredentialState)(nil)).Elem()
}

type observabilityCredentialArgs struct {
	// The Observability Instance ID the credential belongs to.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the credential is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a ObservabilityCredential resource.
type ObservabilityCredentialArgs struct {
	// The Observability Instance ID the credential belongs to.
	InstanceId pulumi.StringInput
	// STACKIT project ID to which the credential is associated.
	ProjectId pulumi.StringInput
}

func (ObservabilityCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityCredentialArgs)(nil)).Elem()
}

type ObservabilityCredentialInput interface {
	pulumi.Input

	ToObservabilityCredentialOutput() ObservabilityCredentialOutput
	ToObservabilityCredentialOutputWithContext(ctx context.Context) ObservabilityCredentialOutput
}

func (*ObservabilityCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityCredential)(nil)).Elem()
}

func (i *ObservabilityCredential) ToObservabilityCredentialOutput() ObservabilityCredentialOutput {
	return i.ToObservabilityCredentialOutputWithContext(context.Background())
}

func (i *ObservabilityCredential) ToObservabilityCredentialOutputWithContext(ctx context.Context) ObservabilityCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityCredentialOutput)
}

// ObservabilityCredentialArrayInput is an input type that accepts ObservabilityCredentialArray and ObservabilityCredentialArrayOutput values.
// You can construct a concrete instance of `ObservabilityCredentialArrayInput` via:
//
//	ObservabilityCredentialArray{ ObservabilityCredentialArgs{...} }
type ObservabilityCredentialArrayInput interface {
	pulumi.Input

	ToObservabilityCredentialArrayOutput() ObservabilityCredentialArrayOutput
	ToObservabilityCredentialArrayOutputWithContext(context.Context) ObservabilityCredentialArrayOutput
}

type ObservabilityCredentialArray []ObservabilityCredentialInput

func (ObservabilityCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityCredential)(nil)).Elem()
}

func (i ObservabilityCredentialArray) ToObservabilityCredentialArrayOutput() ObservabilityCredentialArrayOutput {
	return i.ToObservabilityCredentialArrayOutputWithContext(context.Background())
}

func (i ObservabilityCredentialArray) ToObservabilityCredentialArrayOutputWithContext(ctx context.Context) ObservabilityCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityCredentialArrayOutput)
}

// ObservabilityCredentialMapInput is an input type that accepts ObservabilityCredentialMap and ObservabilityCredentialMapOutput values.
// You can construct a concrete instance of `ObservabilityCredentialMapInput` via:
//
//	ObservabilityCredentialMap{ "key": ObservabilityCredentialArgs{...} }
type ObservabilityCredentialMapInput interface {
	pulumi.Input

	ToObservabilityCredentialMapOutput() ObservabilityCredentialMapOutput
	ToObservabilityCredentialMapOutputWithContext(context.Context) ObservabilityCredentialMapOutput
}

type ObservabilityCredentialMap map[string]ObservabilityCredentialInput

func (ObservabilityCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityCredential)(nil)).Elem()
}

func (i ObservabilityCredentialMap) ToObservabilityCredentialMapOutput() ObservabilityCredentialMapOutput {
	return i.ToObservabilityCredentialMapOutputWithContext(context.Background())
}

func (i ObservabilityCredentialMap) ToObservabilityCredentialMapOutputWithContext(ctx context.Context) ObservabilityCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityCredentialMapOutput)
}

type ObservabilityCredentialOutput struct{ *pulumi.OutputState }

func (ObservabilityCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityCredential)(nil)).Elem()
}

func (o ObservabilityCredentialOutput) ToObservabilityCredentialOutput() ObservabilityCredentialOutput {
	return o
}

func (o ObservabilityCredentialOutput) ToObservabilityCredentialOutputWithContext(ctx context.Context) ObservabilityCredentialOutput {
	return o
}

// The Observability Instance ID the credential belongs to.
func (o ObservabilityCredentialOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityCredential) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Credential password
func (o ObservabilityCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// STACKIT project ID to which the credential is associated.
func (o ObservabilityCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Credential username
func (o ObservabilityCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ObservabilityCredentialArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityCredential)(nil)).Elem()
}

func (o ObservabilityCredentialArrayOutput) ToObservabilityCredentialArrayOutput() ObservabilityCredentialArrayOutput {
	return o
}

func (o ObservabilityCredentialArrayOutput) ToObservabilityCredentialArrayOutputWithContext(ctx context.Context) ObservabilityCredentialArrayOutput {
	return o
}

func (o ObservabilityCredentialArrayOutput) Index(i pulumi.IntInput) ObservabilityCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityCredential {
		return vs[0].([]*ObservabilityCredential)[vs[1].(int)]
	}).(ObservabilityCredentialOutput)
}

type ObservabilityCredentialMapOutput struct{ *pulumi.OutputState }

func (ObservabilityCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityCredential)(nil)).Elem()
}

func (o ObservabilityCredentialMapOutput) ToObservabilityCredentialMapOutput() ObservabilityCredentialMapOutput {
	return o
}

func (o ObservabilityCredentialMapOutput) ToObservabilityCredentialMapOutputWithContext(ctx context.Context) ObservabilityCredentialMapOutput {
	return o
}

func (o ObservabilityCredentialMapOutput) MapIndex(k pulumi.StringInput) ObservabilityCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityCredential {
		return vs[0].(map[string]*ObservabilityCredential)[vs[1].(string)]
	}).(ObservabilityCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityCredentialInput)(nil)).Elem(), &ObservabilityCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityCredentialArrayInput)(nil)).Elem(), ObservabilityCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityCredentialMapInput)(nil)).Elem(), ObservabilityCredentialMap{})
	pulumi.RegisterOutputType(ObservabilityCredentialOutput{})
	pulumi.RegisterOutputType(ObservabilityCredentialArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityCredentialMapOutput{})
}
