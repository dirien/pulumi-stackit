// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupNetwork(ctx *pulumi.Context, args *LookupNetworkArgs, opts ...pulumi.InvokeOption) (*LookupNetworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkResult
	err := ctx.Invoke("stackit:index/getNetwork:getNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetwork.
type LookupNetworkArgs struct {
	// The network ID.
	NetworkId string `pulumi:"networkId"`
	// STACKIT project ID to which the network is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getNetwork.
type LookupNetworkResult struct {
	Id string `pulumi:"id"`
	// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
	Ipv4Gateway string `pulumi:"ipv4Gateway"`
	// The IPv4 nameservers of the network.
	Ipv4Nameservers []string `pulumi:"ipv4Nameservers"`
	// The IPv4 prefix of the network (CIDR).
	//
	// Deprecated: The API supports reading multiple prefixes. So using the attribute 'ipv4_prefixes` should be preferred. This attribute will be populated with the first element from the list
	Ipv4Prefix string `pulumi:"ipv4Prefix"`
	// The IPv4 prefix length of the network.
	Ipv4PrefixLength int `pulumi:"ipv4PrefixLength"`
	// The IPv4 prefixes of the network.
	Ipv4Prefixes []string `pulumi:"ipv4Prefixes"`
	// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
	Ipv6Gateway string `pulumi:"ipv6Gateway"`
	// The IPv6 nameservers of the network.
	Ipv6Nameservers []string `pulumi:"ipv6Nameservers"`
	// The IPv6 prefix of the network (CIDR).
	//
	// Deprecated: The API supports reading multiple prefixes. So using the attribute 'ipv6_prefixes` should be preferred. This attribute will be populated with the first element from the list
	Ipv6Prefix string `pulumi:"ipv6Prefix"`
	// The IPv6 prefix length of the network.
	Ipv6PrefixLength int `pulumi:"ipv6PrefixLength"`
	// The IPv6 prefixes of the network.
	Ipv6Prefixes []string `pulumi:"ipv6Prefixes"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the network.
	Name string `pulumi:"name"`
	// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4Nameservers` to configure the nameservers for IPv4.
	//
	// Deprecated: Use `ipv4Nameservers` to configure the nameservers for IPv4.
	Nameservers []string `pulumi:"nameservers"`
	// The network ID.
	NetworkId string `pulumi:"networkId"`
	// The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4Prefixes` to read the prefixes of the IPv4 networks.
	//
	// Deprecated: Use `ipv4Prefixes` to read the prefixes of the IPv4 networks.
	Prefixes []string `pulumi:"prefixes"`
	// STACKIT project ID to which the network is associated.
	ProjectId string `pulumi:"projectId"`
	// The public IP of the network.
	PublicIp string `pulumi:"publicIp"`
	// Shows if the network is routed and therefore accessible from other networks.
	Routed bool `pulumi:"routed"`
}

func LookupNetworkOutput(ctx *pulumi.Context, args LookupNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkResultOutput, error) {
			args := v.(LookupNetworkArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getNetwork:getNetwork", args, LookupNetworkResultOutput{}, options).(LookupNetworkResultOutput), nil
		}).(LookupNetworkResultOutput)
}

// A collection of arguments for invoking getNetwork.
type LookupNetworkOutputArgs struct {
	// The network ID.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// STACKIT project ID to which the network is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkArgs)(nil)).Elem()
}

// A collection of values returned by getNetwork.
type LookupNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkResult)(nil)).Elem()
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutput() LookupNetworkResultOutput {
	return o
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutputWithContext(ctx context.Context) LookupNetworkResultOutput {
	return o
}

func (o LookupNetworkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
func (o LookupNetworkResultOutput) Ipv4Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Ipv4Gateway }).(pulumi.StringOutput)
}

// The IPv4 nameservers of the network.
func (o LookupNetworkResultOutput) Ipv4Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Ipv4Nameservers }).(pulumi.StringArrayOutput)
}

// The IPv4 prefix of the network (CIDR).
//
// Deprecated: The API supports reading multiple prefixes. So using the attribute 'ipv4_prefixes` should be preferred. This attribute will be populated with the first element from the list
func (o LookupNetworkResultOutput) Ipv4Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Ipv4Prefix }).(pulumi.StringOutput)
}

// The IPv4 prefix length of the network.
func (o LookupNetworkResultOutput) Ipv4PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkResult) int { return v.Ipv4PrefixLength }).(pulumi.IntOutput)
}

// The IPv4 prefixes of the network.
func (o LookupNetworkResultOutput) Ipv4Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Ipv4Prefixes }).(pulumi.StringArrayOutput)
}

// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
func (o LookupNetworkResultOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

// The IPv6 nameservers of the network.
func (o LookupNetworkResultOutput) Ipv6Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Ipv6Nameservers }).(pulumi.StringArrayOutput)
}

// The IPv6 prefix of the network (CIDR).
//
// Deprecated: The API supports reading multiple prefixes. So using the attribute 'ipv6_prefixes` should be preferred. This attribute will be populated with the first element from the list
func (o LookupNetworkResultOutput) Ipv6Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Ipv6Prefix }).(pulumi.StringOutput)
}

// The IPv6 prefix length of the network.
func (o LookupNetworkResultOutput) Ipv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkResult) int { return v.Ipv6PrefixLength }).(pulumi.IntOutput)
}

// The IPv6 prefixes of the network.
func (o LookupNetworkResultOutput) Ipv6Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Ipv6Prefixes }).(pulumi.StringArrayOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o LookupNetworkResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the network.
func (o LookupNetworkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.Name }).(pulumi.StringOutput)
}

// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4Nameservers` to configure the nameservers for IPv4.
//
// Deprecated: Use `ipv4Nameservers` to configure the nameservers for IPv4.
func (o LookupNetworkResultOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

// The network ID.
func (o LookupNetworkResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4Prefixes` to read the prefixes of the IPv4 networks.
//
// Deprecated: Use `ipv4Prefixes` to read the prefixes of the IPv4 networks.
func (o LookupNetworkResultOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.Prefixes }).(pulumi.StringArrayOutput)
}

// STACKIT project ID to which the network is associated.
func (o LookupNetworkResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP of the network.
func (o LookupNetworkResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

// Shows if the network is routed and therefore accessible from other networks.
func (o LookupNetworkResultOutput) Routed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkResult) bool { return v.Routed }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkResultOutput{})
}
