// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Volume resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type Volume struct {
	pulumi.CustomResourceState

	// The availability zone of the volume.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The description of the volume.
	Description pulumi.StringOutput `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass pulumi.StringOutput `pulumi:"performanceClass"`
	// STACKIT project ID to which the volume is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server ID of the server to which the volume is attached to.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
	Size pulumi.IntOutput `pulumi:"size"`
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
	Source VolumeSourcePtrOutput `pulumi:"source"`
	// The volume ID.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("stackit:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("stackit:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// The availability zone of the volume.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The description of the volume.
	Description *string `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the volume.
	Name *string `pulumi:"name"`
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass *string `pulumi:"performanceClass"`
	// STACKIT project ID to which the volume is associated.
	ProjectId *string `pulumi:"projectId"`
	// The server ID of the server to which the volume is attached to.
	ServerId *string `pulumi:"serverId"`
	// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
	Size *int `pulumi:"size"`
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
	Source *VolumeSource `pulumi:"source"`
	// The volume ID.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumeState struct {
	// The availability zone of the volume.
	AvailabilityZone pulumi.StringPtrInput
	// The description of the volume.
	Description pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The name of the volume.
	Name pulumi.StringPtrInput
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass pulumi.StringPtrInput
	// STACKIT project ID to which the volume is associated.
	ProjectId pulumi.StringPtrInput
	// The server ID of the server to which the volume is attached to.
	ServerId pulumi.StringPtrInput
	// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
	Size pulumi.IntPtrInput
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
	Source VolumeSourcePtrInput
	// The volume ID.
	VolumeId pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The availability zone of the volume.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The description of the volume.
	Description *string `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the volume.
	Name *string `pulumi:"name"`
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass *string `pulumi:"performanceClass"`
	// STACKIT project ID to which the volume is associated.
	ProjectId string `pulumi:"projectId"`
	// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
	Size *int `pulumi:"size"`
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
	Source *VolumeSource `pulumi:"source"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The availability zone of the volume.
	AvailabilityZone pulumi.StringInput
	// The description of the volume.
	Description pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The name of the volume.
	Name pulumi.StringPtrInput
	// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
	PerformanceClass pulumi.StringPtrInput
	// STACKIT project ID to which the volume is associated.
	ProjectId pulumi.StringInput
	// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
	Size pulumi.IntPtrInput
	// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
	Source VolumeSourcePtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The availability zone of the volume.
func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The description of the volume.
func (o VolumeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o VolumeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the volume.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
func (o VolumeOutput) PerformanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.PerformanceClass }).(pulumi.StringOutput)
}

// STACKIT project ID to which the volume is associated.
func (o VolumeOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID of the server to which the volume is attached to.
func (o VolumeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided
func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided
func (o VolumeOutput) Source() VolumeSourcePtrOutput {
	return o.ApplyT(func(v *Volume) VolumeSourcePtrOutput { return v.Source }).(VolumeSourcePtrOutput)
}

// The volume ID.
func (o VolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
