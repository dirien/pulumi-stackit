// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OpenSearch instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type OpensearchInstance struct {
	pulumi.CustomResourceState

	CfGuid             pulumi.StringOutput `pulumi:"cfGuid"`
	CfOrganizationGuid pulumi.StringOutput `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        pulumi.StringOutput `pulumi:"cfSpaceGuid"`
	DashboardUrl       pulumi.StringOutput `pulumi:"dashboardUrl"`
	ImageUrl           pulumi.StringOutput `pulumi:"imageUrl"`
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name       pulumi.StringOutput                `pulumi:"name"`
	Parameters OpensearchInstanceParametersOutput `pulumi:"parameters"`
	// The selected plan ID.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The selected plan name.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The service version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewOpensearchInstance registers a new resource with the given unique name, arguments, and options.
func NewOpensearchInstance(ctx *pulumi.Context,
	name string, args *OpensearchInstanceArgs, opts ...pulumi.ResourceOption) (*OpensearchInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpensearchInstance
	err := ctx.RegisterResource("stackit:index/opensearchInstance:OpensearchInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpensearchInstance gets an existing OpensearchInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpensearchInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpensearchInstanceState, opts ...pulumi.ResourceOption) (*OpensearchInstance, error) {
	var resource OpensearchInstance
	err := ctx.ReadResource("stackit:index/opensearchInstance:OpensearchInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpensearchInstance resources.
type opensearchInstanceState struct {
	CfGuid             *string `pulumi:"cfGuid"`
	CfOrganizationGuid *string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        *string `pulumi:"cfSpaceGuid"`
	DashboardUrl       *string `pulumi:"dashboardUrl"`
	ImageUrl           *string `pulumi:"imageUrl"`
	// ID of the OpenSearch instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name       *string                       `pulumi:"name"`
	Parameters *OpensearchInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId *string `pulumi:"planId"`
	// The selected plan name.
	PlanName *string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The service version.
	Version *string `pulumi:"version"`
}

type OpensearchInstanceState struct {
	CfGuid             pulumi.StringPtrInput
	CfOrganizationGuid pulumi.StringPtrInput
	CfSpaceGuid        pulumi.StringPtrInput
	DashboardUrl       pulumi.StringPtrInput
	ImageUrl           pulumi.StringPtrInput
	// ID of the OpenSearch instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters OpensearchInstanceParametersPtrInput
	// The selected plan ID.
	PlanId pulumi.StringPtrInput
	// The selected plan name.
	PlanName pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The service version.
	Version pulumi.StringPtrInput
}

func (OpensearchInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchInstanceState)(nil)).Elem()
}

type opensearchInstanceArgs struct {
	// Instance name.
	Name       *string                       `pulumi:"name"`
	Parameters *OpensearchInstanceParameters `pulumi:"parameters"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a OpensearchInstance resource.
type OpensearchInstanceArgs struct {
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters OpensearchInstanceParametersPtrInput
	// The selected plan name.
	PlanName pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The service version.
	Version pulumi.StringInput
}

func (OpensearchInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchInstanceArgs)(nil)).Elem()
}

type OpensearchInstanceInput interface {
	pulumi.Input

	ToOpensearchInstanceOutput() OpensearchInstanceOutput
	ToOpensearchInstanceOutputWithContext(ctx context.Context) OpensearchInstanceOutput
}

func (*OpensearchInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchInstance)(nil)).Elem()
}

func (i *OpensearchInstance) ToOpensearchInstanceOutput() OpensearchInstanceOutput {
	return i.ToOpensearchInstanceOutputWithContext(context.Background())
}

func (i *OpensearchInstance) ToOpensearchInstanceOutputWithContext(ctx context.Context) OpensearchInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceOutput)
}

// OpensearchInstanceArrayInput is an input type that accepts OpensearchInstanceArray and OpensearchInstanceArrayOutput values.
// You can construct a concrete instance of `OpensearchInstanceArrayInput` via:
//
//	OpensearchInstanceArray{ OpensearchInstanceArgs{...} }
type OpensearchInstanceArrayInput interface {
	pulumi.Input

	ToOpensearchInstanceArrayOutput() OpensearchInstanceArrayOutput
	ToOpensearchInstanceArrayOutputWithContext(context.Context) OpensearchInstanceArrayOutput
}

type OpensearchInstanceArray []OpensearchInstanceInput

func (OpensearchInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchInstance)(nil)).Elem()
}

func (i OpensearchInstanceArray) ToOpensearchInstanceArrayOutput() OpensearchInstanceArrayOutput {
	return i.ToOpensearchInstanceArrayOutputWithContext(context.Background())
}

func (i OpensearchInstanceArray) ToOpensearchInstanceArrayOutputWithContext(ctx context.Context) OpensearchInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceArrayOutput)
}

// OpensearchInstanceMapInput is an input type that accepts OpensearchInstanceMap and OpensearchInstanceMapOutput values.
// You can construct a concrete instance of `OpensearchInstanceMapInput` via:
//
//	OpensearchInstanceMap{ "key": OpensearchInstanceArgs{...} }
type OpensearchInstanceMapInput interface {
	pulumi.Input

	ToOpensearchInstanceMapOutput() OpensearchInstanceMapOutput
	ToOpensearchInstanceMapOutputWithContext(context.Context) OpensearchInstanceMapOutput
}

type OpensearchInstanceMap map[string]OpensearchInstanceInput

func (OpensearchInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchInstance)(nil)).Elem()
}

func (i OpensearchInstanceMap) ToOpensearchInstanceMapOutput() OpensearchInstanceMapOutput {
	return i.ToOpensearchInstanceMapOutputWithContext(context.Background())
}

func (i OpensearchInstanceMap) ToOpensearchInstanceMapOutputWithContext(ctx context.Context) OpensearchInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchInstanceMapOutput)
}

type OpensearchInstanceOutput struct{ *pulumi.OutputState }

func (OpensearchInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchInstance)(nil)).Elem()
}

func (o OpensearchInstanceOutput) ToOpensearchInstanceOutput() OpensearchInstanceOutput {
	return o
}

func (o OpensearchInstanceOutput) ToOpensearchInstanceOutputWithContext(ctx context.Context) OpensearchInstanceOutput {
	return o
}

func (o OpensearchInstanceOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.CfGuid }).(pulumi.StringOutput)
}

func (o OpensearchInstanceOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o OpensearchInstanceOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o OpensearchInstanceOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o OpensearchInstanceOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the OpenSearch instance.
func (o OpensearchInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o OpensearchInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OpensearchInstanceOutput) Parameters() OpensearchInstanceParametersOutput {
	return o.ApplyT(func(v *OpensearchInstance) OpensearchInstanceParametersOutput { return v.Parameters }).(OpensearchInstanceParametersOutput)
}

// The selected plan ID.
func (o OpensearchInstanceOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o OpensearchInstanceOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o OpensearchInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o OpensearchInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type OpensearchInstanceArrayOutput struct{ *pulumi.OutputState }

func (OpensearchInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchInstance)(nil)).Elem()
}

func (o OpensearchInstanceArrayOutput) ToOpensearchInstanceArrayOutput() OpensearchInstanceArrayOutput {
	return o
}

func (o OpensearchInstanceArrayOutput) ToOpensearchInstanceArrayOutputWithContext(ctx context.Context) OpensearchInstanceArrayOutput {
	return o
}

func (o OpensearchInstanceArrayOutput) Index(i pulumi.IntInput) OpensearchInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpensearchInstance {
		return vs[0].([]*OpensearchInstance)[vs[1].(int)]
	}).(OpensearchInstanceOutput)
}

type OpensearchInstanceMapOutput struct{ *pulumi.OutputState }

func (OpensearchInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchInstance)(nil)).Elem()
}

func (o OpensearchInstanceMapOutput) ToOpensearchInstanceMapOutput() OpensearchInstanceMapOutput {
	return o
}

func (o OpensearchInstanceMapOutput) ToOpensearchInstanceMapOutputWithContext(ctx context.Context) OpensearchInstanceMapOutput {
	return o
}

func (o OpensearchInstanceMapOutput) MapIndex(k pulumi.StringInput) OpensearchInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpensearchInstance {
		return vs[0].(map[string]*OpensearchInstance)[vs[1].(string)]
	}).(OpensearchInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchInstanceInput)(nil)).Elem(), &OpensearchInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchInstanceArrayInput)(nil)).Elem(), OpensearchInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchInstanceMapInput)(nil)).Elem(), OpensearchInstanceMap{})
	pulumi.RegisterOutputType(OpensearchInstanceOutput{})
	pulumi.RegisterOutputType(OpensearchInstanceArrayOutput{})
	pulumi.RegisterOutputType(OpensearchInstanceMapOutput{})
}
