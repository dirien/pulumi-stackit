// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Loadbalancer struct {
	pulumi.CustomResourceState

	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress pulumi.StringPtrOutput `pulumi:"externalAddress"`
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners LoadbalancerListenerArrayOutput `pulumi:"listeners"`
	// Load balancer name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of networks that listeners and targets reside in.
	Networks LoadbalancerNetworkArrayOutput `pulumi:"networks"`
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options LoadbalancerOptionsOutput `pulumi:"options"`
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// Transient private Load Balancer IP address. It can change any time.
	PrivateAddress pulumi.StringOutput `pulumi:"privateAddress"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools LoadbalancerTargetPoolArrayOutput `pulumi:"targetPools"`
}

// NewLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancer(ctx *pulumi.Context,
	name string, args *LoadbalancerArgs, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Listeners == nil {
		return nil, errors.New("invalid value for required argument 'Listeners'")
	}
	if args.Networks == nil {
		return nil, errors.New("invalid value for required argument 'Networks'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TargetPools == nil {
		return nil, errors.New("invalid value for required argument 'TargetPools'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Loadbalancer
	err := ctx.RegisterResource("stackit:index/loadbalancer:Loadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancer gets an existing Loadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerState, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	var resource Loadbalancer
	err := ctx.ReadResource("stackit:index/loadbalancer:Loadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Loadbalancer resources.
type loadbalancerState struct {
	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress *string `pulumi:"externalAddress"`
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners []LoadbalancerListener `pulumi:"listeners"`
	// Load balancer name.
	Name *string `pulumi:"name"`
	// List of networks that listeners and targets reside in.
	Networks []LoadbalancerNetwork `pulumi:"networks"`
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options *LoadbalancerOptions `pulumi:"options"`
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId *string `pulumi:"planId"`
	// Transient private Load Balancer IP address. It can change any time.
	PrivateAddress *string `pulumi:"privateAddress"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools []LoadbalancerTargetPool `pulumi:"targetPools"`
}

type LoadbalancerState struct {
	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress pulumi.StringPtrInput
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners LoadbalancerListenerArrayInput
	// Load balancer name.
	Name pulumi.StringPtrInput
	// List of networks that listeners and targets reside in.
	Networks LoadbalancerNetworkArrayInput
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options LoadbalancerOptionsPtrInput
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId pulumi.StringPtrInput
	// Transient private Load Balancer IP address. It can change any time.
	PrivateAddress pulumi.StringPtrInput
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools LoadbalancerTargetPoolArrayInput
}

func (LoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerState)(nil)).Elem()
}

type loadbalancerArgs struct {
	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress *string `pulumi:"externalAddress"`
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners []LoadbalancerListener `pulumi:"listeners"`
	// Load balancer name.
	Name *string `pulumi:"name"`
	// List of networks that listeners and targets reside in.
	Networks []LoadbalancerNetwork `pulumi:"networks"`
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options *LoadbalancerOptions `pulumi:"options"`
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId *string `pulumi:"planId"`
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools []LoadbalancerTargetPool `pulumi:"targetPools"`
}

// The set of arguments for constructing a Loadbalancer resource.
type LoadbalancerArgs struct {
	// External Load Balancer IP address where this Load Balancer is exposed.
	ExternalAddress pulumi.StringPtrInput
	// List of all listeners which will accept traffic. Limited to 20.
	Listeners LoadbalancerListenerArrayInput
	// Load balancer name.
	Name pulumi.StringPtrInput
	// List of networks that listeners and targets reside in.
	Networks LoadbalancerNetworkArrayInput
	// Defines any optional functionality you want to have enabled on your load balancer.
	Options LoadbalancerOptionsPtrInput
	// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
	PlanId pulumi.StringPtrInput
	// STACKIT project ID to which the Load Balancer is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// List of all target pools which will be used in the Load Balancer. Limited to 20.
	TargetPools LoadbalancerTargetPoolArrayInput
}

func (LoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerArgs)(nil)).Elem()
}

type LoadbalancerInput interface {
	pulumi.Input

	ToLoadbalancerOutput() LoadbalancerOutput
	ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput
}

func (*Loadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (i *Loadbalancer) ToLoadbalancerOutput() LoadbalancerOutput {
	return i.ToLoadbalancerOutputWithContext(context.Background())
}

func (i *Loadbalancer) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOutput)
}

// LoadbalancerArrayInput is an input type that accepts LoadbalancerArray and LoadbalancerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerArrayInput` via:
//
//	LoadbalancerArray{ LoadbalancerArgs{...} }
type LoadbalancerArrayInput interface {
	pulumi.Input

	ToLoadbalancerArrayOutput() LoadbalancerArrayOutput
	ToLoadbalancerArrayOutputWithContext(context.Context) LoadbalancerArrayOutput
}

type LoadbalancerArray []LoadbalancerInput

func (LoadbalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return i.ToLoadbalancerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerArrayOutput)
}

// LoadbalancerMapInput is an input type that accepts LoadbalancerMap and LoadbalancerMapOutput values.
// You can construct a concrete instance of `LoadbalancerMapInput` via:
//
//	LoadbalancerMap{ "key": LoadbalancerArgs{...} }
type LoadbalancerMapInput interface {
	pulumi.Input

	ToLoadbalancerMapOutput() LoadbalancerMapOutput
	ToLoadbalancerMapOutputWithContext(context.Context) LoadbalancerMapOutput
}

type LoadbalancerMap map[string]LoadbalancerInput

func (LoadbalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerMap) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return i.ToLoadbalancerMapOutputWithContext(context.Background())
}

func (i LoadbalancerMap) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerMapOutput)
}

type LoadbalancerOutput struct{ *pulumi.OutputState }

func (LoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerOutput) ToLoadbalancerOutput() LoadbalancerOutput {
	return o
}

func (o LoadbalancerOutput) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return o
}

// External Load Balancer IP address where this Load Balancer is exposed.
func (o LoadbalancerOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.ExternalAddress }).(pulumi.StringPtrOutput)
}

// List of all listeners which will accept traffic. Limited to 20.
func (o LoadbalancerOutput) Listeners() LoadbalancerListenerArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerListenerArrayOutput { return v.Listeners }).(LoadbalancerListenerArrayOutput)
}

// Load balancer name.
func (o LoadbalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of networks that listeners and targets reside in.
func (o LoadbalancerOutput) Networks() LoadbalancerNetworkArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerNetworkArrayOutput { return v.Networks }).(LoadbalancerNetworkArrayOutput)
}

// Defines any optional functionality you want to have enabled on your load balancer.
func (o LoadbalancerOutput) Options() LoadbalancerOptionsOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerOptionsOutput { return v.Options }).(LoadbalancerOptionsOutput)
}

// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
func (o LoadbalancerOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// Transient private Load Balancer IP address. It can change any time.
func (o LoadbalancerOutput) PrivateAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.PrivateAddress }).(pulumi.StringOutput)
}

// STACKIT project ID to which the Load Balancer is associated.
func (o LoadbalancerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LoadbalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// List of all target pools which will be used in the Load Balancer. Limited to 20.
func (o LoadbalancerOutput) TargetPools() LoadbalancerTargetPoolArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerTargetPoolArrayOutput { return v.TargetPools }).(LoadbalancerTargetPoolArrayOutput)
}

type LoadbalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) Index(i pulumi.IntInput) LoadbalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].([]*Loadbalancer)[vs[1].(int)]
	}).(LoadbalancerOutput)
}

type LoadbalancerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].(map[string]*Loadbalancer)[vs[1].(string)]
	}).(LoadbalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerInput)(nil)).Elem(), &Loadbalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerArrayInput)(nil)).Elem(), LoadbalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerMapInput)(nil)).Elem(), LoadbalancerMap{})
	pulumi.RegisterOutputType(LoadbalancerOutput{})
	pulumi.RegisterOutputType(LoadbalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerMapOutput{})
}
