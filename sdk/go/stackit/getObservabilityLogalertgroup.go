// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Observability log alert group datasource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupObservabilityLogalertgroup(ctx *pulumi.Context, args *LookupObservabilityLogalertgroupArgs, opts ...pulumi.InvokeOption) (*LookupObservabilityLogalertgroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupObservabilityLogalertgroupResult
	err := ctx.Invoke("stackit:index/getObservabilityLogalertgroup:getObservabilityLogalertgroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getObservabilityLogalertgroup.
type LookupObservabilityLogalertgroupArgs struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId string `pulumi:"instanceId"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getObservabilityLogalertgroup.
type LookupObservabilityLogalertgroupResult struct {
	Id string `pulumi:"id"`
	// Observability instance ID to which the log alert group is associated.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
	Interval string `pulumi:"interval"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId string                              `pulumi:"projectId"`
	Rules     []GetObservabilityLogalertgroupRule `pulumi:"rules"`
}

func LookupObservabilityLogalertgroupOutput(ctx *pulumi.Context, args LookupObservabilityLogalertgroupOutputArgs, opts ...pulumi.InvokeOption) LookupObservabilityLogalertgroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupObservabilityLogalertgroupResultOutput, error) {
			args := v.(LookupObservabilityLogalertgroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getObservabilityLogalertgroup:getObservabilityLogalertgroup", args, LookupObservabilityLogalertgroupResultOutput{}, options).(LookupObservabilityLogalertgroupResultOutput), nil
		}).(LookupObservabilityLogalertgroupResultOutput)
}

// A collection of arguments for invoking getObservabilityLogalertgroup.
type LookupObservabilityLogalertgroupOutputArgs struct {
	// Observability instance ID to which the log alert group is associated.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the log alert group. Is the identifier and must be unique in the group.
	Name pulumi.StringInput `pulumi:"name"`
	// STACKIT project ID to which the log alert group is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupObservabilityLogalertgroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservabilityLogalertgroupArgs)(nil)).Elem()
}

// A collection of values returned by getObservabilityLogalertgroup.
type LookupObservabilityLogalertgroupResultOutput struct{ *pulumi.OutputState }

func (LookupObservabilityLogalertgroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservabilityLogalertgroupResult)(nil)).Elem()
}

func (o LookupObservabilityLogalertgroupResultOutput) ToLookupObservabilityLogalertgroupResultOutput() LookupObservabilityLogalertgroupResultOutput {
	return o
}

func (o LookupObservabilityLogalertgroupResultOutput) ToLookupObservabilityLogalertgroupResultOutputWithContext(ctx context.Context) LookupObservabilityLogalertgroupResultOutput {
	return o
}

func (o LookupObservabilityLogalertgroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Observability instance ID to which the log alert group is associated.
func (o LookupObservabilityLogalertgroupResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
func (o LookupObservabilityLogalertgroupResultOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) string { return v.Interval }).(pulumi.StringOutput)
}

// The name of the log alert group. Is the identifier and must be unique in the group.
func (o LookupObservabilityLogalertgroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the log alert group is associated.
func (o LookupObservabilityLogalertgroupResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupObservabilityLogalertgroupResultOutput) Rules() GetObservabilityLogalertgroupRuleArrayOutput {
	return o.ApplyT(func(v LookupObservabilityLogalertgroupResult) []GetObservabilityLogalertgroupRule { return v.Rules }).(GetObservabilityLogalertgroupRuleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupObservabilityLogalertgroupResultOutput{})
}
