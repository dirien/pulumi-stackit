// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Affinity Group schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupAffinityGroup(ctx *pulumi.Context, args *LookupAffinityGroupArgs, opts ...pulumi.InvokeOption) (*LookupAffinityGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAffinityGroupResult
	err := ctx.Invoke("stackit:index/getAffinityGroup:getAffinityGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAffinityGroup.
type LookupAffinityGroupArgs struct {
	// The affinity group ID.
	AffinityGroupId string `pulumi:"affinityGroupId"`
	// STACKIT Project ID to which the affinity group is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getAffinityGroup.
type LookupAffinityGroupResult struct {
	// The affinity group ID.
	AffinityGroupId string `pulumi:"affinityGroupId"`
	Id              string `pulumi:"id"`
	// Affinity Group schema. Must have a `region` specified in the provider configuration.
	Members []string `pulumi:"members"`
	// The name of the affinity group.
	Name string `pulumi:"name"`
	// The policy of the affinity group.
	Policy string `pulumi:"policy"`
	// STACKIT Project ID to which the affinity group is associated.
	ProjectId string `pulumi:"projectId"`
}

func LookupAffinityGroupOutput(ctx *pulumi.Context, args LookupAffinityGroupOutputArgs, opts ...pulumi.InvokeOption) LookupAffinityGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAffinityGroupResultOutput, error) {
			args := v.(LookupAffinityGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getAffinityGroup:getAffinityGroup", args, LookupAffinityGroupResultOutput{}, options).(LookupAffinityGroupResultOutput), nil
		}).(LookupAffinityGroupResultOutput)
}

// A collection of arguments for invoking getAffinityGroup.
type LookupAffinityGroupOutputArgs struct {
	// The affinity group ID.
	AffinityGroupId pulumi.StringInput `pulumi:"affinityGroupId"`
	// STACKIT Project ID to which the affinity group is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupAffinityGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAffinityGroupArgs)(nil)).Elem()
}

// A collection of values returned by getAffinityGroup.
type LookupAffinityGroupResultOutput struct{ *pulumi.OutputState }

func (LookupAffinityGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAffinityGroupResult)(nil)).Elem()
}

func (o LookupAffinityGroupResultOutput) ToLookupAffinityGroupResultOutput() LookupAffinityGroupResultOutput {
	return o
}

func (o LookupAffinityGroupResultOutput) ToLookupAffinityGroupResultOutputWithContext(ctx context.Context) LookupAffinityGroupResultOutput {
	return o
}

// The affinity group ID.
func (o LookupAffinityGroupResultOutput) AffinityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) string { return v.AffinityGroupId }).(pulumi.StringOutput)
}

func (o LookupAffinityGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Affinity Group schema. Must have a `region` specified in the provider configuration.
func (o LookupAffinityGroupResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// The name of the affinity group.
func (o LookupAffinityGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The policy of the affinity group.
func (o LookupAffinityGroupResultOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) string { return v.Policy }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the affinity group is associated.
func (o LookupAffinityGroupResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAffinityGroupResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAffinityGroupResultOutput{})
}
