// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Key pair resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupKeyPair(ctx *pulumi.Context, args *LookupKeyPairArgs, opts ...pulumi.InvokeOption) (*LookupKeyPairResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyPairResult
	err := ctx.Invoke("stackit:index/getKeyPair:getKeyPair", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyPair.
type LookupKeyPairArgs struct {
	// The name of the SSH key pair.
	Name string `pulumi:"name"`
}

// A collection of values returned by getKeyPair.
type LookupKeyPairResult struct {
	// The fingerprint of the public SSH key.
	Fingerprint string `pulumi:"fingerprint"`
	Id          string `pulumi:"id"`
	// Labels are key-value string pairs which can be attached to a resource container.
	Labels map[string]string `pulumi:"labels"`
	// The name of the SSH key pair.
	Name string `pulumi:"name"`
	// A string representation of the public SSH key. E.g., `ssh-rsa <key_data>` or `ssh-ed25519 <key-data>`.
	PublicKey string `pulumi:"publicKey"`
}

func LookupKeyPairOutput(ctx *pulumi.Context, args LookupKeyPairOutputArgs, opts ...pulumi.InvokeOption) LookupKeyPairResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKeyPairResultOutput, error) {
			args := v.(LookupKeyPairArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getKeyPair:getKeyPair", args, LookupKeyPairResultOutput{}, options).(LookupKeyPairResultOutput), nil
		}).(LookupKeyPairResultOutput)
}

// A collection of arguments for invoking getKeyPair.
type LookupKeyPairOutputArgs struct {
	// The name of the SSH key pair.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupKeyPairOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPairArgs)(nil)).Elem()
}

// A collection of values returned by getKeyPair.
type LookupKeyPairResultOutput struct{ *pulumi.OutputState }

func (LookupKeyPairResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPairResult)(nil)).Elem()
}

func (o LookupKeyPairResultOutput) ToLookupKeyPairResultOutput() LookupKeyPairResultOutput {
	return o
}

func (o LookupKeyPairResultOutput) ToLookupKeyPairResultOutputWithContext(ctx context.Context) LookupKeyPairResultOutput {
	return o
}

// The fingerprint of the public SSH key.
func (o LookupKeyPairResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPairResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o LookupKeyPairResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPairResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container.
func (o LookupKeyPairResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeyPairResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the SSH key pair.
func (o LookupKeyPairResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPairResult) string { return v.Name }).(pulumi.StringOutput)
}

// A string representation of the public SSH key. E.g., `ssh-rsa <key_data>` or `ssh-ed25519 <key-data>`.
func (o LookupKeyPairResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyPairResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyPairResultOutput{})
}
