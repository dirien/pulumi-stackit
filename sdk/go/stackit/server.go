// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Server resource schema. Must have a region specified in the provider configuration.
//
// ## Example Usage
//
// ### With key pair
//
// ### Boot from volume
//
// ### Boot from existing volume
//
// ### Network setup
//
// ### Server with attached volume
//
// ### Server with user data (cloud-init)
//
// ### Additional Examples
type Server struct {
	pulumi.CustomResourceState

	// The affinity group the server is assigned to.
	AffinityGroup pulumi.StringPtrOutput `pulumi:"affinityGroup"`
	// The availability zone of the server.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The boot volume for the server
	BootVolume ServerBootVolumePtrOutput `pulumi:"bootVolume"`
	// Date-time when the server was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
	DesiredStatus pulumi.StringPtrOutput `pulumi:"desiredStatus"`
	// The image ID to be used for an ephemeral disk on the server.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// The name of the keypair used during server creation.
	KeypairName pulumi.StringPtrOutput `pulumi:"keypairName"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Date-time when the server was launched
	LaunchedAt pulumi.StringOutput `pulumi:"launchedAt"`
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces pulumi.StringArrayOutput `pulumi:"networkInterfaces"`
	// STACKIT project ID to which the server is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server ID.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Date-time when the server was updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// User data that is passed via cloud-init to the server.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("stackit:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("stackit:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The affinity group the server is assigned to.
	AffinityGroup *string `pulumi:"affinityGroup"`
	// The availability zone of the server.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The boot volume for the server
	BootVolume *ServerBootVolume `pulumi:"bootVolume"`
	// Date-time when the server was created
	CreatedAt *string `pulumi:"createdAt"`
	// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
	DesiredStatus *string `pulumi:"desiredStatus"`
	// The image ID to be used for an ephemeral disk on the server.
	ImageId *string `pulumi:"imageId"`
	// The name of the keypair used during server creation.
	KeypairName *string `pulumi:"keypairName"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// Date-time when the server was launched
	LaunchedAt *string `pulumi:"launchedAt"`
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType *string `pulumi:"machineType"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces []string `pulumi:"networkInterfaces"`
	// STACKIT project ID to which the server is associated.
	ProjectId *string `pulumi:"projectId"`
	// The server ID.
	ServerId *string `pulumi:"serverId"`
	// Date-time when the server was updated
	UpdatedAt *string `pulumi:"updatedAt"`
	// User data that is passed via cloud-init to the server.
	UserData *string `pulumi:"userData"`
}

type ServerState struct {
	// The affinity group the server is assigned to.
	AffinityGroup pulumi.StringPtrInput
	// The availability zone of the server.
	AvailabilityZone pulumi.StringPtrInput
	// The boot volume for the server
	BootVolume ServerBootVolumePtrInput
	// Date-time when the server was created
	CreatedAt pulumi.StringPtrInput
	// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
	DesiredStatus pulumi.StringPtrInput
	// The image ID to be used for an ephemeral disk on the server.
	ImageId pulumi.StringPtrInput
	// The name of the keypair used during server creation.
	KeypairName pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// Date-time when the server was launched
	LaunchedAt pulumi.StringPtrInput
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType pulumi.StringPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces pulumi.StringArrayInput
	// STACKIT project ID to which the server is associated.
	ProjectId pulumi.StringPtrInput
	// The server ID.
	ServerId pulumi.StringPtrInput
	// Date-time when the server was updated
	UpdatedAt pulumi.StringPtrInput
	// User data that is passed via cloud-init to the server.
	UserData pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The affinity group the server is assigned to.
	AffinityGroup *string `pulumi:"affinityGroup"`
	// The availability zone of the server.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The boot volume for the server
	BootVolume *ServerBootVolume `pulumi:"bootVolume"`
	// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
	DesiredStatus *string `pulumi:"desiredStatus"`
	// The image ID to be used for an ephemeral disk on the server.
	ImageId *string `pulumi:"imageId"`
	// The name of the keypair used during server creation.
	KeypairName *string `pulumi:"keypairName"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType string `pulumi:"machineType"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces []string `pulumi:"networkInterfaces"`
	// STACKIT project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// User data that is passed via cloud-init to the server.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The affinity group the server is assigned to.
	AffinityGroup pulumi.StringPtrInput
	// The availability zone of the server.
	AvailabilityZone pulumi.StringPtrInput
	// The boot volume for the server
	BootVolume ServerBootVolumePtrInput
	// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
	DesiredStatus pulumi.StringPtrInput
	// The image ID to be used for an ephemeral disk on the server.
	ImageId pulumi.StringPtrInput
	// The name of the keypair used during server creation.
	KeypairName pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType pulumi.StringInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces pulumi.StringArrayInput
	// STACKIT project ID to which the server is associated.
	ProjectId pulumi.StringInput
	// User data that is passed via cloud-init to the server.
	UserData pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// The affinity group the server is assigned to.
func (o ServerOutput) AffinityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.AffinityGroup }).(pulumi.StringPtrOutput)
}

// The availability zone of the server.
func (o ServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The boot volume for the server
func (o ServerOutput) BootVolume() ServerBootVolumePtrOutput {
	return o.ApplyT(func(v *Server) ServerBootVolumePtrOutput { return v.BootVolume }).(ServerBootVolumePtrOutput)
}

// Date-time when the server was created
func (o ServerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
func (o ServerOutput) DesiredStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.DesiredStatus }).(pulumi.StringPtrOutput)
}

// The image ID to be used for an ephemeral disk on the server.
func (o ServerOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The name of the keypair used during server creation.
func (o ServerOutput) KeypairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.KeypairName }).(pulumi.StringPtrOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o ServerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Server) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Date-time when the server was launched
func (o ServerOutput) LaunchedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.LaunchedAt }).(pulumi.StringOutput)
}

// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
func (o ServerOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// The name of the server.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
func (o ServerOutput) NetworkInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.NetworkInterfaces }).(pulumi.StringArrayOutput)
}

// STACKIT project ID to which the server is associated.
func (o ServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID.
func (o ServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Date-time when the server was updated
func (o ServerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// User data that is passed via cloud-init to the server.
func (o ServerOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
