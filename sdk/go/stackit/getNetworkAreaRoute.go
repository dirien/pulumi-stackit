// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network area route data resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupNetworkAreaRoute(ctx *pulumi.Context, args *LookupNetworkAreaRouteArgs, opts ...pulumi.InvokeOption) (*LookupNetworkAreaRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkAreaRouteResult
	err := ctx.Invoke("stackit:index/getNetworkAreaRoute:getNetworkAreaRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkAreaRoute.
type LookupNetworkAreaRouteArgs struct {
	// The network area ID to which the network area route is associated.
	NetworkAreaId string `pulumi:"networkAreaId"`
	// The network area route ID.
	NetworkAreaRouteId string `pulumi:"networkAreaRouteId"`
	// STACKIT organization ID to which the network area is associated.
	OrganizationId string `pulumi:"organizationId"`
}

// A collection of values returned by getNetworkAreaRoute.
type LookupNetworkAreaRouteResult struct {
	Id string `pulumi:"id"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The network area ID to which the network area route is associated.
	NetworkAreaId string `pulumi:"networkAreaId"`
	// The network area route ID.
	NetworkAreaRouteId string `pulumi:"networkAreaRouteId"`
	// The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
	NextHop string `pulumi:"nextHop"`
	// STACKIT organization ID to which the network area is associated.
	OrganizationId string `pulumi:"organizationId"`
	// The network, that is reachable though the Next Hop. Should use CIDR notation.
	Prefix string `pulumi:"prefix"`
}

func LookupNetworkAreaRouteOutput(ctx *pulumi.Context, args LookupNetworkAreaRouteOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkAreaRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkAreaRouteResultOutput, error) {
			args := v.(LookupNetworkAreaRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getNetworkAreaRoute:getNetworkAreaRoute", args, LookupNetworkAreaRouteResultOutput{}, options).(LookupNetworkAreaRouteResultOutput), nil
		}).(LookupNetworkAreaRouteResultOutput)
}

// A collection of arguments for invoking getNetworkAreaRoute.
type LookupNetworkAreaRouteOutputArgs struct {
	// The network area ID to which the network area route is associated.
	NetworkAreaId pulumi.StringInput `pulumi:"networkAreaId"`
	// The network area route ID.
	NetworkAreaRouteId pulumi.StringInput `pulumi:"networkAreaRouteId"`
	// STACKIT organization ID to which the network area is associated.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupNetworkAreaRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAreaRouteArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkAreaRoute.
type LookupNetworkAreaRouteResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkAreaRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAreaRouteResult)(nil)).Elem()
}

func (o LookupNetworkAreaRouteResultOutput) ToLookupNetworkAreaRouteResultOutput() LookupNetworkAreaRouteResultOutput {
	return o
}

func (o LookupNetworkAreaRouteResultOutput) ToLookupNetworkAreaRouteResultOutputWithContext(ctx context.Context) LookupNetworkAreaRouteResultOutput {
	return o
}

func (o LookupNetworkAreaRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o LookupNetworkAreaRouteResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The network area ID to which the network area route is associated.
func (o LookupNetworkAreaRouteResultOutput) NetworkAreaId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.NetworkAreaId }).(pulumi.StringOutput)
}

// The network area route ID.
func (o LookupNetworkAreaRouteResultOutput) NetworkAreaRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.NetworkAreaRouteId }).(pulumi.StringOutput)
}

// The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
func (o LookupNetworkAreaRouteResultOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.NextHop }).(pulumi.StringOutput)
}

// STACKIT organization ID to which the network area is associated.
func (o LookupNetworkAreaRouteResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The network, that is reachable though the Next Hop. Should use CIDR notation.
func (o LookupNetworkAreaRouteResultOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAreaRouteResult) string { return v.Prefix }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkAreaRouteResultOutput{})
}
