// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Server update schedule resource schema. Must have a `region` specified in the provider configuration.
//
// > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
type ServerUpdateSchedule struct {
	pulumi.CustomResourceState

	// Is the update schedule enabled or disabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Maintenance window [1..24].
	MaintenanceWindow pulumi.IntOutput `pulumi:"maintenanceWindow"`
	// The schedule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT Project ID to which the server is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule pulumi.StringOutput `pulumi:"rrule"`
	// Server ID for the update schedule.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Update schedule ID.
	UpdateScheduleId pulumi.IntOutput `pulumi:"updateScheduleId"`
}

// NewServerUpdateSchedule registers a new resource with the given unique name, arguments, and options.
func NewServerUpdateSchedule(ctx *pulumi.Context,
	name string, args *ServerUpdateScheduleArgs, opts ...pulumi.ResourceOption) (*ServerUpdateSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.MaintenanceWindow == nil {
		return nil, errors.New("invalid value for required argument 'MaintenanceWindow'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Rrule == nil {
		return nil, errors.New("invalid value for required argument 'Rrule'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerUpdateSchedule
	err := ctx.RegisterResource("stackit:index/serverUpdateSchedule:ServerUpdateSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerUpdateSchedule gets an existing ServerUpdateSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerUpdateSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerUpdateScheduleState, opts ...pulumi.ResourceOption) (*ServerUpdateSchedule, error) {
	var resource ServerUpdateSchedule
	err := ctx.ReadResource("stackit:index/serverUpdateSchedule:ServerUpdateSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerUpdateSchedule resources.
type serverUpdateScheduleState struct {
	// Is the update schedule enabled or disabled.
	Enabled *bool `pulumi:"enabled"`
	// Maintenance window [1..24].
	MaintenanceWindow *int `pulumi:"maintenanceWindow"`
	// The schedule name.
	Name *string `pulumi:"name"`
	// STACKIT Project ID to which the server is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule *string `pulumi:"rrule"`
	// Server ID for the update schedule.
	ServerId *string `pulumi:"serverId"`
	// Update schedule ID.
	UpdateScheduleId *int `pulumi:"updateScheduleId"`
}

type ServerUpdateScheduleState struct {
	// Is the update schedule enabled or disabled.
	Enabled pulumi.BoolPtrInput
	// Maintenance window [1..24].
	MaintenanceWindow pulumi.IntPtrInput
	// The schedule name.
	Name pulumi.StringPtrInput
	// STACKIT Project ID to which the server is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule pulumi.StringPtrInput
	// Server ID for the update schedule.
	ServerId pulumi.StringPtrInput
	// Update schedule ID.
	UpdateScheduleId pulumi.IntPtrInput
}

func (ServerUpdateScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverUpdateScheduleState)(nil)).Elem()
}

type serverUpdateScheduleArgs struct {
	// Is the update schedule enabled or disabled.
	Enabled bool `pulumi:"enabled"`
	// Maintenance window [1..24].
	MaintenanceWindow int `pulumi:"maintenanceWindow"`
	// The schedule name.
	Name *string `pulumi:"name"`
	// STACKIT Project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule string `pulumi:"rrule"`
	// Server ID for the update schedule.
	ServerId string `pulumi:"serverId"`
}

// The set of arguments for constructing a ServerUpdateSchedule resource.
type ServerUpdateScheduleArgs struct {
	// Is the update schedule enabled or disabled.
	Enabled pulumi.BoolInput
	// Maintenance window [1..24].
	MaintenanceWindow pulumi.IntInput
	// The schedule name.
	Name pulumi.StringPtrInput
	// STACKIT Project ID to which the server is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule pulumi.StringInput
	// Server ID for the update schedule.
	ServerId pulumi.StringInput
}

func (ServerUpdateScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverUpdateScheduleArgs)(nil)).Elem()
}

type ServerUpdateScheduleInput interface {
	pulumi.Input

	ToServerUpdateScheduleOutput() ServerUpdateScheduleOutput
	ToServerUpdateScheduleOutputWithContext(ctx context.Context) ServerUpdateScheduleOutput
}

func (*ServerUpdateSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerUpdateSchedule)(nil)).Elem()
}

func (i *ServerUpdateSchedule) ToServerUpdateScheduleOutput() ServerUpdateScheduleOutput {
	return i.ToServerUpdateScheduleOutputWithContext(context.Background())
}

func (i *ServerUpdateSchedule) ToServerUpdateScheduleOutputWithContext(ctx context.Context) ServerUpdateScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerUpdateScheduleOutput)
}

// ServerUpdateScheduleArrayInput is an input type that accepts ServerUpdateScheduleArray and ServerUpdateScheduleArrayOutput values.
// You can construct a concrete instance of `ServerUpdateScheduleArrayInput` via:
//
//	ServerUpdateScheduleArray{ ServerUpdateScheduleArgs{...} }
type ServerUpdateScheduleArrayInput interface {
	pulumi.Input

	ToServerUpdateScheduleArrayOutput() ServerUpdateScheduleArrayOutput
	ToServerUpdateScheduleArrayOutputWithContext(context.Context) ServerUpdateScheduleArrayOutput
}

type ServerUpdateScheduleArray []ServerUpdateScheduleInput

func (ServerUpdateScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerUpdateSchedule)(nil)).Elem()
}

func (i ServerUpdateScheduleArray) ToServerUpdateScheduleArrayOutput() ServerUpdateScheduleArrayOutput {
	return i.ToServerUpdateScheduleArrayOutputWithContext(context.Background())
}

func (i ServerUpdateScheduleArray) ToServerUpdateScheduleArrayOutputWithContext(ctx context.Context) ServerUpdateScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerUpdateScheduleArrayOutput)
}

// ServerUpdateScheduleMapInput is an input type that accepts ServerUpdateScheduleMap and ServerUpdateScheduleMapOutput values.
// You can construct a concrete instance of `ServerUpdateScheduleMapInput` via:
//
//	ServerUpdateScheduleMap{ "key": ServerUpdateScheduleArgs{...} }
type ServerUpdateScheduleMapInput interface {
	pulumi.Input

	ToServerUpdateScheduleMapOutput() ServerUpdateScheduleMapOutput
	ToServerUpdateScheduleMapOutputWithContext(context.Context) ServerUpdateScheduleMapOutput
}

type ServerUpdateScheduleMap map[string]ServerUpdateScheduleInput

func (ServerUpdateScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerUpdateSchedule)(nil)).Elem()
}

func (i ServerUpdateScheduleMap) ToServerUpdateScheduleMapOutput() ServerUpdateScheduleMapOutput {
	return i.ToServerUpdateScheduleMapOutputWithContext(context.Background())
}

func (i ServerUpdateScheduleMap) ToServerUpdateScheduleMapOutputWithContext(ctx context.Context) ServerUpdateScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerUpdateScheduleMapOutput)
}

type ServerUpdateScheduleOutput struct{ *pulumi.OutputState }

func (ServerUpdateScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerUpdateSchedule)(nil)).Elem()
}

func (o ServerUpdateScheduleOutput) ToServerUpdateScheduleOutput() ServerUpdateScheduleOutput {
	return o
}

func (o ServerUpdateScheduleOutput) ToServerUpdateScheduleOutputWithContext(ctx context.Context) ServerUpdateScheduleOutput {
	return o
}

// Is the update schedule enabled or disabled.
func (o ServerUpdateScheduleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Maintenance window [1..24].
func (o ServerUpdateScheduleOutput) MaintenanceWindow() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.IntOutput { return v.MaintenanceWindow }).(pulumi.IntOutput)
}

// The schedule name.
func (o ServerUpdateScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the server is associated.
func (o ServerUpdateScheduleOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o ServerUpdateScheduleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Update schedule described in `rrule` (recurrence rule) format.
func (o ServerUpdateScheduleOutput) Rrule() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.StringOutput { return v.Rrule }).(pulumi.StringOutput)
}

// Server ID for the update schedule.
func (o ServerUpdateScheduleOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Update schedule ID.
func (o ServerUpdateScheduleOutput) UpdateScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerUpdateSchedule) pulumi.IntOutput { return v.UpdateScheduleId }).(pulumi.IntOutput)
}

type ServerUpdateScheduleArrayOutput struct{ *pulumi.OutputState }

func (ServerUpdateScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerUpdateSchedule)(nil)).Elem()
}

func (o ServerUpdateScheduleArrayOutput) ToServerUpdateScheduleArrayOutput() ServerUpdateScheduleArrayOutput {
	return o
}

func (o ServerUpdateScheduleArrayOutput) ToServerUpdateScheduleArrayOutputWithContext(ctx context.Context) ServerUpdateScheduleArrayOutput {
	return o
}

func (o ServerUpdateScheduleArrayOutput) Index(i pulumi.IntInput) ServerUpdateScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerUpdateSchedule {
		return vs[0].([]*ServerUpdateSchedule)[vs[1].(int)]
	}).(ServerUpdateScheduleOutput)
}

type ServerUpdateScheduleMapOutput struct{ *pulumi.OutputState }

func (ServerUpdateScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerUpdateSchedule)(nil)).Elem()
}

func (o ServerUpdateScheduleMapOutput) ToServerUpdateScheduleMapOutput() ServerUpdateScheduleMapOutput {
	return o
}

func (o ServerUpdateScheduleMapOutput) ToServerUpdateScheduleMapOutputWithContext(ctx context.Context) ServerUpdateScheduleMapOutput {
	return o
}

func (o ServerUpdateScheduleMapOutput) MapIndex(k pulumi.StringInput) ServerUpdateScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerUpdateSchedule {
		return vs[0].(map[string]*ServerUpdateSchedule)[vs[1].(string)]
	}).(ServerUpdateScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerUpdateScheduleInput)(nil)).Elem(), &ServerUpdateSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerUpdateScheduleArrayInput)(nil)).Elem(), ServerUpdateScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerUpdateScheduleMapInput)(nil)).Elem(), ServerUpdateScheduleMap{})
	pulumi.RegisterOutputType(ServerUpdateScheduleOutput{})
	pulumi.RegisterOutputType(ServerUpdateScheduleArrayOutput{})
	pulumi.RegisterOutputType(ServerUpdateScheduleMapOutput{})
}
