// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network interface datasource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupNetworkInterface(ctx *pulumi.Context, args *LookupNetworkInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupNetworkInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkInterfaceResult
	err := ctx.Invoke("stackit:index/getNetworkInterface:getNetworkInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkInterface.
type LookupNetworkInterfaceArgs struct {
	// The network ID to which the network interface is associated.
	NetworkId string `pulumi:"networkId"`
	// The network interface ID.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getNetworkInterface.
type LookupNetworkInterfaceResult struct {
	// The list of CIDR (Classless Inter-Domain Routing) notations.
	AllowedAddresses []string `pulumi:"allowedAddresses"`
	// The device UUID of the network interface.
	Device string `pulumi:"device"`
	Id     string `pulumi:"id"`
	// The IPv4 address.
	Ipv4 string `pulumi:"ipv4"`
	// Labels are key-value string pairs which can be attached to a network interface.
	Labels map[string]string `pulumi:"labels"`
	// The MAC address of network interface.
	Mac string `pulumi:"mac"`
	// The name of the network interface.
	Name string `pulumi:"name"`
	// The network ID to which the network interface is associated.
	NetworkId string `pulumi:"networkId"`
	// The network interface ID.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface is associated.
	ProjectId string `pulumi:"projectId"`
	// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
	Security bool `pulumi:"security"`
	// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
	Type string `pulumi:"type"`
}

func LookupNetworkInterfaceOutput(ctx *pulumi.Context, args LookupNetworkInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkInterfaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkInterfaceResultOutput, error) {
			args := v.(LookupNetworkInterfaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getNetworkInterface:getNetworkInterface", args, LookupNetworkInterfaceResultOutput{}, options).(LookupNetworkInterfaceResultOutput), nil
		}).(LookupNetworkInterfaceResultOutput)
}

// A collection of arguments for invoking getNetworkInterface.
type LookupNetworkInterfaceOutputArgs struct {
	// The network ID to which the network interface is associated.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The network interface ID.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// STACKIT project ID to which the network interface is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupNetworkInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkInterface.
type LookupNetworkInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInterfaceResult)(nil)).Elem()
}

func (o LookupNetworkInterfaceResultOutput) ToLookupNetworkInterfaceResultOutput() LookupNetworkInterfaceResultOutput {
	return o
}

func (o LookupNetworkInterfaceResultOutput) ToLookupNetworkInterfaceResultOutputWithContext(ctx context.Context) LookupNetworkInterfaceResultOutput {
	return o
}

// The list of CIDR (Classless Inter-Domain Routing) notations.
func (o LookupNetworkInterfaceResultOutput) AllowedAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) []string { return v.AllowedAddresses }).(pulumi.StringArrayOutput)
}

// The device UUID of the network interface.
func (o LookupNetworkInterfaceResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Device }).(pulumi.StringOutput)
}

func (o LookupNetworkInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IPv4 address.
func (o LookupNetworkInterfaceResultOutput) Ipv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Ipv4 }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a network interface.
func (o LookupNetworkInterfaceResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The MAC address of network interface.
func (o LookupNetworkInterfaceResultOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Mac }).(pulumi.StringOutput)
}

// The name of the network interface.
func (o LookupNetworkInterfaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The network ID to which the network interface is associated.
func (o LookupNetworkInterfaceResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The network interface ID.
func (o LookupNetworkInterfaceResultOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// STACKIT project ID to which the network interface is associated.
func (o LookupNetworkInterfaceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
func (o LookupNetworkInterfaceResultOutput) Security() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) bool { return v.Security }).(pulumi.BoolOutput)
}

// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
func (o LookupNetworkInterfaceResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
func (o LookupNetworkInterfaceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkInterfaceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkInterfaceResultOutput{})
}
