// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Postgres Flex instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type PostgresflexInstance struct {
	pulumi.CustomResourceState

	// The Access Control List (ACL) for the PostgresFlex instance.
	Acls           pulumi.StringArrayOutput         `pulumi:"acls"`
	BackupSchedule pulumi.StringOutput              `pulumi:"backupSchedule"`
	Flavor         PostgresflexInstanceFlavorOutput `pulumi:"flavor"`
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringOutput               `pulumi:"region"`
	Replicas pulumi.IntOutput                  `pulumi:"replicas"`
	Storage  PostgresflexInstanceStorageOutput `pulumi:"storage"`
	Version  pulumi.StringOutput               `pulumi:"version"`
}

// NewPostgresflexInstance registers a new resource with the given unique name, arguments, and options.
func NewPostgresflexInstance(ctx *pulumi.Context,
	name string, args *PostgresflexInstanceArgs, opts ...pulumi.ResourceOption) (*PostgresflexInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Acls == nil {
		return nil, errors.New("invalid value for required argument 'Acls'")
	}
	if args.BackupSchedule == nil {
		return nil, errors.New("invalid value for required argument 'BackupSchedule'")
	}
	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresflexInstance
	err := ctx.RegisterResource("stackit:index/postgresflexInstance:PostgresflexInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresflexInstance gets an existing PostgresflexInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresflexInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresflexInstanceState, opts ...pulumi.ResourceOption) (*PostgresflexInstance, error) {
	var resource PostgresflexInstance
	err := ctx.ReadResource("stackit:index/postgresflexInstance:PostgresflexInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresflexInstance resources.
type postgresflexInstanceState struct {
	// The Access Control List (ACL) for the PostgresFlex instance.
	Acls           []string                    `pulumi:"acls"`
	BackupSchedule *string                     `pulumi:"backupSchedule"`
	Flavor         *PostgresflexInstanceFlavor `pulumi:"flavor"`
	// ID of the PostgresFlex instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   *string                      `pulumi:"region"`
	Replicas *int                         `pulumi:"replicas"`
	Storage  *PostgresflexInstanceStorage `pulumi:"storage"`
	Version  *string                      `pulumi:"version"`
}

type PostgresflexInstanceState struct {
	// The Access Control List (ACL) for the PostgresFlex instance.
	Acls           pulumi.StringArrayInput
	BackupSchedule pulumi.StringPtrInput
	Flavor         PostgresflexInstanceFlavorPtrInput
	// ID of the PostgresFlex instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringPtrInput
	Replicas pulumi.IntPtrInput
	Storage  PostgresflexInstanceStoragePtrInput
	Version  pulumi.StringPtrInput
}

func (PostgresflexInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexInstanceState)(nil)).Elem()
}

type postgresflexInstanceArgs struct {
	// The Access Control List (ACL) for the PostgresFlex instance.
	Acls           []string                   `pulumi:"acls"`
	BackupSchedule string                     `pulumi:"backupSchedule"`
	Flavor         PostgresflexInstanceFlavor `pulumi:"flavor"`
	// Instance name.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   *string                     `pulumi:"region"`
	Replicas int                         `pulumi:"replicas"`
	Storage  PostgresflexInstanceStorage `pulumi:"storage"`
	Version  string                      `pulumi:"version"`
}

// The set of arguments for constructing a PostgresflexInstance resource.
type PostgresflexInstanceArgs struct {
	// The Access Control List (ACL) for the PostgresFlex instance.
	Acls           pulumi.StringArrayInput
	BackupSchedule pulumi.StringInput
	Flavor         PostgresflexInstanceFlavorInput
	// Instance name.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringPtrInput
	Replicas pulumi.IntInput
	Storage  PostgresflexInstanceStorageInput
	Version  pulumi.StringInput
}

func (PostgresflexInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresflexInstanceArgs)(nil)).Elem()
}

type PostgresflexInstanceInput interface {
	pulumi.Input

	ToPostgresflexInstanceOutput() PostgresflexInstanceOutput
	ToPostgresflexInstanceOutputWithContext(ctx context.Context) PostgresflexInstanceOutput
}

func (*PostgresflexInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstance)(nil)).Elem()
}

func (i *PostgresflexInstance) ToPostgresflexInstanceOutput() PostgresflexInstanceOutput {
	return i.ToPostgresflexInstanceOutputWithContext(context.Background())
}

func (i *PostgresflexInstance) ToPostgresflexInstanceOutputWithContext(ctx context.Context) PostgresflexInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceOutput)
}

// PostgresflexInstanceArrayInput is an input type that accepts PostgresflexInstanceArray and PostgresflexInstanceArrayOutput values.
// You can construct a concrete instance of `PostgresflexInstanceArrayInput` via:
//
//	PostgresflexInstanceArray{ PostgresflexInstanceArgs{...} }
type PostgresflexInstanceArrayInput interface {
	pulumi.Input

	ToPostgresflexInstanceArrayOutput() PostgresflexInstanceArrayOutput
	ToPostgresflexInstanceArrayOutputWithContext(context.Context) PostgresflexInstanceArrayOutput
}

type PostgresflexInstanceArray []PostgresflexInstanceInput

func (PostgresflexInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexInstance)(nil)).Elem()
}

func (i PostgresflexInstanceArray) ToPostgresflexInstanceArrayOutput() PostgresflexInstanceArrayOutput {
	return i.ToPostgresflexInstanceArrayOutputWithContext(context.Background())
}

func (i PostgresflexInstanceArray) ToPostgresflexInstanceArrayOutputWithContext(ctx context.Context) PostgresflexInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceArrayOutput)
}

// PostgresflexInstanceMapInput is an input type that accepts PostgresflexInstanceMap and PostgresflexInstanceMapOutput values.
// You can construct a concrete instance of `PostgresflexInstanceMapInput` via:
//
//	PostgresflexInstanceMap{ "key": PostgresflexInstanceArgs{...} }
type PostgresflexInstanceMapInput interface {
	pulumi.Input

	ToPostgresflexInstanceMapOutput() PostgresflexInstanceMapOutput
	ToPostgresflexInstanceMapOutputWithContext(context.Context) PostgresflexInstanceMapOutput
}

type PostgresflexInstanceMap map[string]PostgresflexInstanceInput

func (PostgresflexInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexInstance)(nil)).Elem()
}

func (i PostgresflexInstanceMap) ToPostgresflexInstanceMapOutput() PostgresflexInstanceMapOutput {
	return i.ToPostgresflexInstanceMapOutputWithContext(context.Background())
}

func (i PostgresflexInstanceMap) ToPostgresflexInstanceMapOutputWithContext(ctx context.Context) PostgresflexInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresflexInstanceMapOutput)
}

type PostgresflexInstanceOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresflexInstance)(nil)).Elem()
}

func (o PostgresflexInstanceOutput) ToPostgresflexInstanceOutput() PostgresflexInstanceOutput {
	return o
}

func (o PostgresflexInstanceOutput) ToPostgresflexInstanceOutputWithContext(ctx context.Context) PostgresflexInstanceOutput {
	return o
}

// The Access Control List (ACL) for the PostgresFlex instance.
func (o PostgresflexInstanceOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringArrayOutput { return v.Acls }).(pulumi.StringArrayOutput)
}

func (o PostgresflexInstanceOutput) BackupSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.BackupSchedule }).(pulumi.StringOutput)
}

func (o PostgresflexInstanceOutput) Flavor() PostgresflexInstanceFlavorOutput {
	return o.ApplyT(func(v *PostgresflexInstance) PostgresflexInstanceFlavorOutput { return v.Flavor }).(PostgresflexInstanceFlavorOutput)
}

// ID of the PostgresFlex instance.
func (o PostgresflexInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o PostgresflexInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o PostgresflexInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o PostgresflexInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PostgresflexInstanceOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o PostgresflexInstanceOutput) Storage() PostgresflexInstanceStorageOutput {
	return o.ApplyT(func(v *PostgresflexInstance) PostgresflexInstanceStorageOutput { return v.Storage }).(PostgresflexInstanceStorageOutput)
}

func (o PostgresflexInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresflexInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type PostgresflexInstanceArrayOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresflexInstance)(nil)).Elem()
}

func (o PostgresflexInstanceArrayOutput) ToPostgresflexInstanceArrayOutput() PostgresflexInstanceArrayOutput {
	return o
}

func (o PostgresflexInstanceArrayOutput) ToPostgresflexInstanceArrayOutputWithContext(ctx context.Context) PostgresflexInstanceArrayOutput {
	return o
}

func (o PostgresflexInstanceArrayOutput) Index(i pulumi.IntInput) PostgresflexInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresflexInstance {
		return vs[0].([]*PostgresflexInstance)[vs[1].(int)]
	}).(PostgresflexInstanceOutput)
}

type PostgresflexInstanceMapOutput struct{ *pulumi.OutputState }

func (PostgresflexInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresflexInstance)(nil)).Elem()
}

func (o PostgresflexInstanceMapOutput) ToPostgresflexInstanceMapOutput() PostgresflexInstanceMapOutput {
	return o
}

func (o PostgresflexInstanceMapOutput) ToPostgresflexInstanceMapOutputWithContext(ctx context.Context) PostgresflexInstanceMapOutput {
	return o
}

func (o PostgresflexInstanceMapOutput) MapIndex(k pulumi.StringInput) PostgresflexInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresflexInstance {
		return vs[0].(map[string]*PostgresflexInstance)[vs[1].(string)]
	}).(PostgresflexInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceInput)(nil)).Elem(), &PostgresflexInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceArrayInput)(nil)).Elem(), PostgresflexInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresflexInstanceMapInput)(nil)).Elem(), PostgresflexInstanceMap{})
	pulumi.RegisterOutputType(PostgresflexInstanceOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceArrayOutput{})
	pulumi.RegisterOutputType(PostgresflexInstanceMapOutput{})
}
