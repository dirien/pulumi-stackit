// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Git Instance resource schema.
//
// > This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
type Git struct {
	pulumi.CustomResourceState

	// ID linked to the git instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Unique name linked to the git instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Url linked to the git instance.
	Url pulumi.StringOutput `pulumi:"url"`
	// Version linked to the git instance.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewGit registers a new resource with the given unique name, arguments, and options.
func NewGit(ctx *pulumi.Context,
	name string, args *GitArgs, opts ...pulumi.ResourceOption) (*Git, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Git
	err := ctx.RegisterResource("stackit:index/git:Git", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGit gets an existing Git resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitState, opts ...pulumi.ResourceOption) (*Git, error) {
	var resource Git
	err := ctx.ReadResource("stackit:index/git:Git", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Git resources.
type gitState struct {
	// ID linked to the git instance.
	InstanceId *string `pulumi:"instanceId"`
	// Unique name linked to the git instance.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// Url linked to the git instance.
	Url *string `pulumi:"url"`
	// Version linked to the git instance.
	Version *string `pulumi:"version"`
}

type GitState struct {
	// ID linked to the git instance.
	InstanceId pulumi.StringPtrInput
	// Unique name linked to the git instance.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the git instance is associated.
	ProjectId pulumi.StringPtrInput
	// Url linked to the git instance.
	Url pulumi.StringPtrInput
	// Version linked to the git instance.
	Version pulumi.StringPtrInput
}

func (GitState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitState)(nil)).Elem()
}

type gitArgs struct {
	// Unique name linked to the git instance.
	Name *string `pulumi:"name"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a Git resource.
type GitArgs struct {
	// Unique name linked to the git instance.
	Name pulumi.StringPtrInput
	// STACKIT project ID to which the git instance is associated.
	ProjectId pulumi.StringInput
}

func (GitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitArgs)(nil)).Elem()
}

type GitInput interface {
	pulumi.Input

	ToGitOutput() GitOutput
	ToGitOutputWithContext(ctx context.Context) GitOutput
}

func (*Git) ElementType() reflect.Type {
	return reflect.TypeOf((**Git)(nil)).Elem()
}

func (i *Git) ToGitOutput() GitOutput {
	return i.ToGitOutputWithContext(context.Background())
}

func (i *Git) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOutput)
}

// GitArrayInput is an input type that accepts GitArray and GitArrayOutput values.
// You can construct a concrete instance of `GitArrayInput` via:
//
//	GitArray{ GitArgs{...} }
type GitArrayInput interface {
	pulumi.Input

	ToGitArrayOutput() GitArrayOutput
	ToGitArrayOutputWithContext(context.Context) GitArrayOutput
}

type GitArray []GitInput

func (GitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Git)(nil)).Elem()
}

func (i GitArray) ToGitArrayOutput() GitArrayOutput {
	return i.ToGitArrayOutputWithContext(context.Background())
}

func (i GitArray) ToGitArrayOutputWithContext(ctx context.Context) GitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitArrayOutput)
}

// GitMapInput is an input type that accepts GitMap and GitMapOutput values.
// You can construct a concrete instance of `GitMapInput` via:
//
//	GitMap{ "key": GitArgs{...} }
type GitMapInput interface {
	pulumi.Input

	ToGitMapOutput() GitMapOutput
	ToGitMapOutputWithContext(context.Context) GitMapOutput
}

type GitMap map[string]GitInput

func (GitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Git)(nil)).Elem()
}

func (i GitMap) ToGitMapOutput() GitMapOutput {
	return i.ToGitMapOutputWithContext(context.Background())
}

func (i GitMap) ToGitMapOutputWithContext(ctx context.Context) GitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitMapOutput)
}

type GitOutput struct{ *pulumi.OutputState }

func (GitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Git)(nil)).Elem()
}

func (o GitOutput) ToGitOutput() GitOutput {
	return o
}

func (o GitOutput) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return o
}

// ID linked to the git instance.
func (o GitOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Unique name linked to the git instance.
func (o GitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the git instance is associated.
func (o GitOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Url linked to the git instance.
func (o GitOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Version linked to the git instance.
func (o GitOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type GitArrayOutput struct{ *pulumi.OutputState }

func (GitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Git)(nil)).Elem()
}

func (o GitArrayOutput) ToGitArrayOutput() GitArrayOutput {
	return o
}

func (o GitArrayOutput) ToGitArrayOutputWithContext(ctx context.Context) GitArrayOutput {
	return o
}

func (o GitArrayOutput) Index(i pulumi.IntInput) GitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Git {
		return vs[0].([]*Git)[vs[1].(int)]
	}).(GitOutput)
}

type GitMapOutput struct{ *pulumi.OutputState }

func (GitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Git)(nil)).Elem()
}

func (o GitMapOutput) ToGitMapOutput() GitMapOutput {
	return o
}

func (o GitMapOutput) ToGitMapOutputWithContext(ctx context.Context) GitMapOutput {
	return o
}

func (o GitMapOutput) MapIndex(k pulumi.StringInput) GitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Git {
		return vs[0].(map[string]*Git)[vs[1].(string)]
	}).(GitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitInput)(nil)).Elem(), &Git{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitArrayInput)(nil)).Elem(), GitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitMapInput)(nil)).Elem(), GitMap{})
	pulumi.RegisterOutputType(GitOutput{})
	pulumi.RegisterOutputType(GitArrayOutput{})
	pulumi.RegisterOutputType(GitMapOutput{})
}
