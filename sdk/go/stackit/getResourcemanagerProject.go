// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Manager project data source schema. To identify the project, you need to provider either projectId or container_id. If you provide both, projectId will be used.
//
// ## Example Usage
func LookupResourcemanagerProject(ctx *pulumi.Context, args *LookupResourcemanagerProjectArgs, opts ...pulumi.InvokeOption) (*LookupResourcemanagerProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourcemanagerProjectResult
	err := ctx.Invoke("stackit:index/getResourcemanagerProject:getResourcemanagerProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourcemanagerProject.
type LookupResourcemanagerProjectArgs struct {
	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId *string `pulumi:"containerId"`
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getResourcemanagerProject.
type LookupResourcemanagerProjectResult struct {
	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId *string `pulumi:"containerId"`
	Id          string  `pulumi:"id"`
	// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}
	Labels map[string]string `pulumi:"labels"`
	// Project name.
	Name string `pulumi:"name"`
	// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
	ParentContainerId string `pulumi:"parentContainerId"`
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId *string `pulumi:"projectId"`
}

func LookupResourcemanagerProjectOutput(ctx *pulumi.Context, args LookupResourcemanagerProjectOutputArgs, opts ...pulumi.InvokeOption) LookupResourcemanagerProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResourcemanagerProjectResultOutput, error) {
			args := v.(LookupResourcemanagerProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getResourcemanagerProject:getResourcemanagerProject", args, LookupResourcemanagerProjectResultOutput{}, options).(LookupResourcemanagerProjectResultOutput), nil
		}).(LookupResourcemanagerProjectResultOutput)
}

// A collection of arguments for invoking getResourcemanagerProject.
type LookupResourcemanagerProjectOutputArgs struct {
	// Project container ID. Globally unique, user-friendly identifier.
	ContainerId pulumi.StringPtrInput `pulumi:"containerId"`
	// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupResourcemanagerProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourcemanagerProjectArgs)(nil)).Elem()
}

// A collection of values returned by getResourcemanagerProject.
type LookupResourcemanagerProjectResultOutput struct{ *pulumi.OutputState }

func (LookupResourcemanagerProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourcemanagerProjectResult)(nil)).Elem()
}

func (o LookupResourcemanagerProjectResultOutput) ToLookupResourcemanagerProjectResultOutput() LookupResourcemanagerProjectResultOutput {
	return o
}

func (o LookupResourcemanagerProjectResultOutput) ToLookupResourcemanagerProjectResultOutputWithContext(ctx context.Context) LookupResourcemanagerProjectResultOutput {
	return o
}

// Project container ID. Globally unique, user-friendly identifier.
func (o LookupResourcemanagerProjectResultOutput) ContainerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) *string { return v.ContainerId }).(pulumi.StringPtrOutput)
}

func (o LookupResourcemanagerProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}
func (o LookupResourcemanagerProjectResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Project name.
func (o LookupResourcemanagerProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
func (o LookupResourcemanagerProjectResultOutput) ParentContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) string { return v.ParentContainerId }).(pulumi.StringOutput)
}

// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
func (o LookupResourcemanagerProjectResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourcemanagerProjectResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResourcemanagerProjectResultOutput{})
}
