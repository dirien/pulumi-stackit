// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Redis credential data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupRedisCredential(ctx *pulumi.Context, args *LookupRedisCredentialArgs, opts ...pulumi.InvokeOption) (*LookupRedisCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRedisCredentialResult
	err := ctx.Invoke("stackit:index/getRedisCredential:getRedisCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRedisCredential.
type LookupRedisCredentialArgs struct {
	// The credential's ID.
	CredentialId string `pulumi:"credentialId"`
	// ID of the Redis instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getRedisCredential.
type LookupRedisCredentialResult struct {
	// The credential's ID.
	CredentialId string   `pulumi:"credentialId"`
	Host         string   `pulumi:"host"`
	Hosts        []string `pulumi:"hosts"`
	Id           string   `pulumi:"id"`
	// ID of the Redis instance.
	InstanceId       string `pulumi:"instanceId"`
	LoadBalancedHost string `pulumi:"loadBalancedHost"`
	Password         string `pulumi:"password"`
	Port             int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// Connection URI.
	Uri      string `pulumi:"uri"`
	Username string `pulumi:"username"`
}

func LookupRedisCredentialOutput(ctx *pulumi.Context, args LookupRedisCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupRedisCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRedisCredentialResultOutput, error) {
			args := v.(LookupRedisCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getRedisCredential:getRedisCredential", args, LookupRedisCredentialResultOutput{}, options).(LookupRedisCredentialResultOutput), nil
		}).(LookupRedisCredentialResultOutput)
}

// A collection of arguments for invoking getRedisCredential.
type LookupRedisCredentialOutputArgs struct {
	// The credential's ID.
	CredentialId pulumi.StringInput `pulumi:"credentialId"`
	// ID of the Redis instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupRedisCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getRedisCredential.
type LookupRedisCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupRedisCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRedisCredentialResult)(nil)).Elem()
}

func (o LookupRedisCredentialResultOutput) ToLookupRedisCredentialResultOutput() LookupRedisCredentialResultOutput {
	return o
}

func (o LookupRedisCredentialResultOutput) ToLookupRedisCredentialResultOutputWithContext(ctx context.Context) LookupRedisCredentialResultOutput {
	return o
}

// The credential's ID.
func (o LookupRedisCredentialResultOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.CredentialId }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o LookupRedisCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the Redis instance.
func (o LookupRedisCredentialResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) LoadBalancedHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.LoadBalancedHost }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupRedisCredentialResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Connection URI.
func (o LookupRedisCredentialResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.Uri }).(pulumi.StringOutput)
}

func (o LookupRedisCredentialResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRedisCredentialResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRedisCredentialResultOutput{})
}
