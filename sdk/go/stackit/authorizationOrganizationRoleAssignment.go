// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// organization Role Assignment resource schema.
//
// > This resource is part of the iam experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
//
// ## Example Usage
type AuthorizationOrganizationRoleAssignment struct {
	pulumi.CustomResourceState

	// organization Resource to assign the role to.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Role to be assigned
	Role pulumi.StringOutput `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringOutput `pulumi:"subject"`
}

// NewAuthorizationOrganizationRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationOrganizationRoleAssignment(ctx *pulumi.Context,
	name string, args *AuthorizationOrganizationRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*AuthorizationOrganizationRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationOrganizationRoleAssignment
	err := ctx.RegisterResource("stackit:index/authorizationOrganizationRoleAssignment:AuthorizationOrganizationRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationOrganizationRoleAssignment gets an existing AuthorizationOrganizationRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationOrganizationRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationOrganizationRoleAssignmentState, opts ...pulumi.ResourceOption) (*AuthorizationOrganizationRoleAssignment, error) {
	var resource AuthorizationOrganizationRoleAssignment
	err := ctx.ReadResource("stackit:index/authorizationOrganizationRoleAssignment:AuthorizationOrganizationRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationOrganizationRoleAssignment resources.
type authorizationOrganizationRoleAssignmentState struct {
	// organization Resource to assign the role to.
	ResourceId *string `pulumi:"resourceId"`
	// Role to be assigned
	Role *string `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject *string `pulumi:"subject"`
}

type AuthorizationOrganizationRoleAssignmentState struct {
	// organization Resource to assign the role to.
	ResourceId pulumi.StringPtrInput
	// Role to be assigned
	Role pulumi.StringPtrInput
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringPtrInput
}

func (AuthorizationOrganizationRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationOrganizationRoleAssignmentState)(nil)).Elem()
}

type authorizationOrganizationRoleAssignmentArgs struct {
	// organization Resource to assign the role to.
	ResourceId string `pulumi:"resourceId"`
	// Role to be assigned
	Role string `pulumi:"role"`
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject string `pulumi:"subject"`
}

// The set of arguments for constructing a AuthorizationOrganizationRoleAssignment resource.
type AuthorizationOrganizationRoleAssignmentArgs struct {
	// organization Resource to assign the role to.
	ResourceId pulumi.StringInput
	// Role to be assigned
	Role pulumi.StringInput
	// Identifier of user, service account or client. Usually email address or name in case of clients
	Subject pulumi.StringInput
}

func (AuthorizationOrganizationRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationOrganizationRoleAssignmentArgs)(nil)).Elem()
}

type AuthorizationOrganizationRoleAssignmentInput interface {
	pulumi.Input

	ToAuthorizationOrganizationRoleAssignmentOutput() AuthorizationOrganizationRoleAssignmentOutput
	ToAuthorizationOrganizationRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentOutput
}

func (*AuthorizationOrganizationRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (i *AuthorizationOrganizationRoleAssignment) ToAuthorizationOrganizationRoleAssignmentOutput() AuthorizationOrganizationRoleAssignmentOutput {
	return i.ToAuthorizationOrganizationRoleAssignmentOutputWithContext(context.Background())
}

func (i *AuthorizationOrganizationRoleAssignment) ToAuthorizationOrganizationRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOrganizationRoleAssignmentOutput)
}

// AuthorizationOrganizationRoleAssignmentArrayInput is an input type that accepts AuthorizationOrganizationRoleAssignmentArray and AuthorizationOrganizationRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `AuthorizationOrganizationRoleAssignmentArrayInput` via:
//
//	AuthorizationOrganizationRoleAssignmentArray{ AuthorizationOrganizationRoleAssignmentArgs{...} }
type AuthorizationOrganizationRoleAssignmentArrayInput interface {
	pulumi.Input

	ToAuthorizationOrganizationRoleAssignmentArrayOutput() AuthorizationOrganizationRoleAssignmentArrayOutput
	ToAuthorizationOrganizationRoleAssignmentArrayOutputWithContext(context.Context) AuthorizationOrganizationRoleAssignmentArrayOutput
}

type AuthorizationOrganizationRoleAssignmentArray []AuthorizationOrganizationRoleAssignmentInput

func (AuthorizationOrganizationRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (i AuthorizationOrganizationRoleAssignmentArray) ToAuthorizationOrganizationRoleAssignmentArrayOutput() AuthorizationOrganizationRoleAssignmentArrayOutput {
	return i.ToAuthorizationOrganizationRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i AuthorizationOrganizationRoleAssignmentArray) ToAuthorizationOrganizationRoleAssignmentArrayOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOrganizationRoleAssignmentArrayOutput)
}

// AuthorizationOrganizationRoleAssignmentMapInput is an input type that accepts AuthorizationOrganizationRoleAssignmentMap and AuthorizationOrganizationRoleAssignmentMapOutput values.
// You can construct a concrete instance of `AuthorizationOrganizationRoleAssignmentMapInput` via:
//
//	AuthorizationOrganizationRoleAssignmentMap{ "key": AuthorizationOrganizationRoleAssignmentArgs{...} }
type AuthorizationOrganizationRoleAssignmentMapInput interface {
	pulumi.Input

	ToAuthorizationOrganizationRoleAssignmentMapOutput() AuthorizationOrganizationRoleAssignmentMapOutput
	ToAuthorizationOrganizationRoleAssignmentMapOutputWithContext(context.Context) AuthorizationOrganizationRoleAssignmentMapOutput
}

type AuthorizationOrganizationRoleAssignmentMap map[string]AuthorizationOrganizationRoleAssignmentInput

func (AuthorizationOrganizationRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (i AuthorizationOrganizationRoleAssignmentMap) ToAuthorizationOrganizationRoleAssignmentMapOutput() AuthorizationOrganizationRoleAssignmentMapOutput {
	return i.ToAuthorizationOrganizationRoleAssignmentMapOutputWithContext(context.Background())
}

func (i AuthorizationOrganizationRoleAssignmentMap) ToAuthorizationOrganizationRoleAssignmentMapOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOrganizationRoleAssignmentMapOutput)
}

type AuthorizationOrganizationRoleAssignmentOutput struct{ *pulumi.OutputState }

func (AuthorizationOrganizationRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (o AuthorizationOrganizationRoleAssignmentOutput) ToAuthorizationOrganizationRoleAssignmentOutput() AuthorizationOrganizationRoleAssignmentOutput {
	return o
}

func (o AuthorizationOrganizationRoleAssignmentOutput) ToAuthorizationOrganizationRoleAssignmentOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentOutput {
	return o
}

// organization Resource to assign the role to.
func (o AuthorizationOrganizationRoleAssignmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationOrganizationRoleAssignment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Role to be assigned
func (o AuthorizationOrganizationRoleAssignmentOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationOrganizationRoleAssignment) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Identifier of user, service account or client. Usually email address or name in case of clients
func (o AuthorizationOrganizationRoleAssignmentOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationOrganizationRoleAssignment) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

type AuthorizationOrganizationRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationOrganizationRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (o AuthorizationOrganizationRoleAssignmentArrayOutput) ToAuthorizationOrganizationRoleAssignmentArrayOutput() AuthorizationOrganizationRoleAssignmentArrayOutput {
	return o
}

func (o AuthorizationOrganizationRoleAssignmentArrayOutput) ToAuthorizationOrganizationRoleAssignmentArrayOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentArrayOutput {
	return o
}

func (o AuthorizationOrganizationRoleAssignmentArrayOutput) Index(i pulumi.IntInput) AuthorizationOrganizationRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationOrganizationRoleAssignment {
		return vs[0].([]*AuthorizationOrganizationRoleAssignment)[vs[1].(int)]
	}).(AuthorizationOrganizationRoleAssignmentOutput)
}

type AuthorizationOrganizationRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (AuthorizationOrganizationRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationOrganizationRoleAssignment)(nil)).Elem()
}

func (o AuthorizationOrganizationRoleAssignmentMapOutput) ToAuthorizationOrganizationRoleAssignmentMapOutput() AuthorizationOrganizationRoleAssignmentMapOutput {
	return o
}

func (o AuthorizationOrganizationRoleAssignmentMapOutput) ToAuthorizationOrganizationRoleAssignmentMapOutputWithContext(ctx context.Context) AuthorizationOrganizationRoleAssignmentMapOutput {
	return o
}

func (o AuthorizationOrganizationRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) AuthorizationOrganizationRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationOrganizationRoleAssignment {
		return vs[0].(map[string]*AuthorizationOrganizationRoleAssignment)[vs[1].(string)]
	}).(AuthorizationOrganizationRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationOrganizationRoleAssignmentInput)(nil)).Elem(), &AuthorizationOrganizationRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationOrganizationRoleAssignmentArrayInput)(nil)).Elem(), AuthorizationOrganizationRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationOrganizationRoleAssignmentMapInput)(nil)).Elem(), AuthorizationOrganizationRoleAssignmentMap{})
	pulumi.RegisterOutputType(AuthorizationOrganizationRoleAssignmentOutput{})
	pulumi.RegisterOutputType(AuthorizationOrganizationRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationOrganizationRoleAssignmentMapOutput{})
}
