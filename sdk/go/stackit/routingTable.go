// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Routing table resource schema. Must have a `region` specified in the provider configuration.
//
// > This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
//
// ## Example Usage
type RoutingTable struct {
	pulumi.CustomResourceState

	// Date-time when the routing table was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the routing table.
	Description pulumi.StringOutput `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the routing table.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringOutput `pulumi:"networkAreaId"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// The routing tables ID.
	RoutingTableId pulumi.StringOutput `pulumi:"routingTableId"`
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes pulumi.BoolOutput `pulumi:"systemRoutes"`
	// Date-time when the routing table was updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewRoutingTable registers a new resource with the given unique name, arguments, and options.
func NewRoutingTable(ctx *pulumi.Context,
	name string, args *RoutingTableArgs, opts ...pulumi.ResourceOption) (*RoutingTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAreaId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAreaId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingTable
	err := ctx.RegisterResource("stackit:index/routingTable:RoutingTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingTable gets an existing RoutingTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingTableState, opts ...pulumi.ResourceOption) (*RoutingTable, error) {
	var resource RoutingTable
	err := ctx.ReadResource("stackit:index/routingTable:RoutingTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingTable resources.
type routingTableState struct {
	// Date-time when the routing table was created
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the routing table.
	Description *string `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the routing table.
	Name *string `pulumi:"name"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId *string `pulumi:"networkAreaId"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId *string `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// The routing tables ID.
	RoutingTableId *string `pulumi:"routingTableId"`
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes *bool `pulumi:"systemRoutes"`
	// Date-time when the routing table was updated
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RoutingTableState struct {
	// Date-time when the routing table was created
	CreatedAt pulumi.StringPtrInput
	// Description of the routing table.
	Description pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The name of the routing table.
	Name pulumi.StringPtrInput
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringPtrInput
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// The routing tables ID.
	RoutingTableId pulumi.StringPtrInput
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes pulumi.BoolPtrInput
	// Date-time when the routing table was updated
	UpdatedAt pulumi.StringPtrInput
}

func (RoutingTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingTableState)(nil)).Elem()
}

type routingTableArgs struct {
	// Description of the routing table.
	Description *string `pulumi:"description"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The name of the routing table.
	Name *string `pulumi:"name"`
	// The network area ID to which the routing table is associated.
	NetworkAreaId string `pulumi:"networkAreaId"`
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId string `pulumi:"organizationId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes *bool `pulumi:"systemRoutes"`
}

// The set of arguments for constructing a RoutingTable resource.
type RoutingTableArgs struct {
	// Description of the routing table.
	Description pulumi.StringPtrInput
	// Labels are key-value string pairs which can be attached to a resource container
	Labels pulumi.StringMapInput
	// The name of the routing table.
	Name pulumi.StringPtrInput
	// The network area ID to which the routing table is associated.
	NetworkAreaId pulumi.StringInput
	// STACKIT organization ID to which the routing table is associated.
	OrganizationId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// This controls whether the routes for project-to-project communication are created automatically or not.
	SystemRoutes pulumi.BoolPtrInput
}

func (RoutingTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingTableArgs)(nil)).Elem()
}

type RoutingTableInput interface {
	pulumi.Input

	ToRoutingTableOutput() RoutingTableOutput
	ToRoutingTableOutputWithContext(ctx context.Context) RoutingTableOutput
}

func (*RoutingTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTable)(nil)).Elem()
}

func (i *RoutingTable) ToRoutingTableOutput() RoutingTableOutput {
	return i.ToRoutingTableOutputWithContext(context.Background())
}

func (i *RoutingTable) ToRoutingTableOutputWithContext(ctx context.Context) RoutingTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableOutput)
}

// RoutingTableArrayInput is an input type that accepts RoutingTableArray and RoutingTableArrayOutput values.
// You can construct a concrete instance of `RoutingTableArrayInput` via:
//
//	RoutingTableArray{ RoutingTableArgs{...} }
type RoutingTableArrayInput interface {
	pulumi.Input

	ToRoutingTableArrayOutput() RoutingTableArrayOutput
	ToRoutingTableArrayOutputWithContext(context.Context) RoutingTableArrayOutput
}

type RoutingTableArray []RoutingTableInput

func (RoutingTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingTable)(nil)).Elem()
}

func (i RoutingTableArray) ToRoutingTableArrayOutput() RoutingTableArrayOutput {
	return i.ToRoutingTableArrayOutputWithContext(context.Background())
}

func (i RoutingTableArray) ToRoutingTableArrayOutputWithContext(ctx context.Context) RoutingTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableArrayOutput)
}

// RoutingTableMapInput is an input type that accepts RoutingTableMap and RoutingTableMapOutput values.
// You can construct a concrete instance of `RoutingTableMapInput` via:
//
//	RoutingTableMap{ "key": RoutingTableArgs{...} }
type RoutingTableMapInput interface {
	pulumi.Input

	ToRoutingTableMapOutput() RoutingTableMapOutput
	ToRoutingTableMapOutputWithContext(context.Context) RoutingTableMapOutput
}

type RoutingTableMap map[string]RoutingTableInput

func (RoutingTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingTable)(nil)).Elem()
}

func (i RoutingTableMap) ToRoutingTableMapOutput() RoutingTableMapOutput {
	return i.ToRoutingTableMapOutputWithContext(context.Background())
}

func (i RoutingTableMap) ToRoutingTableMapOutputWithContext(ctx context.Context) RoutingTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingTableMapOutput)
}

type RoutingTableOutput struct{ *pulumi.OutputState }

func (RoutingTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingTable)(nil)).Elem()
}

func (o RoutingTableOutput) ToRoutingTableOutput() RoutingTableOutput {
	return o
}

func (o RoutingTableOutput) ToRoutingTableOutputWithContext(ctx context.Context) RoutingTableOutput {
	return o
}

// Date-time when the routing table was created
func (o RoutingTableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the routing table.
func (o RoutingTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o RoutingTableOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the routing table.
func (o RoutingTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network area ID to which the routing table is associated.
func (o RoutingTableOutput) NetworkAreaId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.NetworkAreaId }).(pulumi.StringOutput)
}

// STACKIT organization ID to which the routing table is associated.
func (o RoutingTableOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o RoutingTableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The routing tables ID.
func (o RoutingTableOutput) RoutingTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.RoutingTableId }).(pulumi.StringOutput)
}

// This controls whether the routes for project-to-project communication are created automatically or not.
func (o RoutingTableOutput) SystemRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.BoolOutput { return v.SystemRoutes }).(pulumi.BoolOutput)
}

// Date-time when the routing table was updated
func (o RoutingTableOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingTable) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RoutingTableArrayOutput struct{ *pulumi.OutputState }

func (RoutingTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingTable)(nil)).Elem()
}

func (o RoutingTableArrayOutput) ToRoutingTableArrayOutput() RoutingTableArrayOutput {
	return o
}

func (o RoutingTableArrayOutput) ToRoutingTableArrayOutputWithContext(ctx context.Context) RoutingTableArrayOutput {
	return o
}

func (o RoutingTableArrayOutput) Index(i pulumi.IntInput) RoutingTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutingTable {
		return vs[0].([]*RoutingTable)[vs[1].(int)]
	}).(RoutingTableOutput)
}

type RoutingTableMapOutput struct{ *pulumi.OutputState }

func (RoutingTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingTable)(nil)).Elem()
}

func (o RoutingTableMapOutput) ToRoutingTableMapOutput() RoutingTableMapOutput {
	return o
}

func (o RoutingTableMapOutput) ToRoutingTableMapOutputWithContext(ctx context.Context) RoutingTableMapOutput {
	return o
}

func (o RoutingTableMapOutput) MapIndex(k pulumi.StringInput) RoutingTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutingTable {
		return vs[0].(map[string]*RoutingTable)[vs[1].(string)]
	}).(RoutingTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableInput)(nil)).Elem(), &RoutingTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableArrayInput)(nil)).Elem(), RoutingTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingTableMapInput)(nil)).Elem(), RoutingTableMap{})
	pulumi.RegisterOutputType(RoutingTableOutput{})
	pulumi.RegisterOutputType(RoutingTableArrayOutput{})
	pulumi.RegisterOutputType(RoutingTableMapOutput{})
}
