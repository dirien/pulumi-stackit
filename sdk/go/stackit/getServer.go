// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Server datasource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupServer(ctx *pulumi.Context, args *LookupServerArgs, opts ...pulumi.InvokeOption) (*LookupServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerResult
	err := ctx.Invoke("stackit:index/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type LookupServerArgs struct {
	// STACKIT project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// The server ID.
	ServerId string `pulumi:"serverId"`
}

// A collection of values returned by getServer.
type LookupServerResult struct {
	// The affinity group the server is assigned to.
	AffinityGroup string `pulumi:"affinityGroup"`
	// The availability zone of the server.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The boot volume for the server
	BootVolume GetServerBootVolume `pulumi:"bootVolume"`
	// Date-time when the server was created
	CreatedAt string `pulumi:"createdAt"`
	Id        string `pulumi:"id"`
	// The image ID to be used for an ephemeral disk on the server.
	ImageId string `pulumi:"imageId"`
	// The name of the keypair used during server creation.
	KeypairName string `pulumi:"keypairName"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// Date-time when the server was launched
	LaunchedAt string `pulumi:"launchedAt"`
	// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
	MachineType string `pulumi:"machineType"`
	// The name of the server.
	Name string `pulumi:"name"`
	// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
	NetworkInterfaces []string `pulumi:"networkInterfaces"`
	// STACKIT project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// The server ID.
	ServerId string `pulumi:"serverId"`
	// Date-time when the server was updated
	UpdatedAt string `pulumi:"updatedAt"`
	// User data that is passed via cloud-init to the server.
	UserData string `pulumi:"userData"`
}

func LookupServerOutput(ctx *pulumi.Context, args LookupServerOutputArgs, opts ...pulumi.InvokeOption) LookupServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerResultOutput, error) {
			args := v.(LookupServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getServer:getServer", args, LookupServerResultOutput{}, options).(LookupServerResultOutput), nil
		}).(LookupServerResultOutput)
}

// A collection of arguments for invoking getServer.
type LookupServerOutputArgs struct {
	// STACKIT project ID to which the server is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The server ID.
	ServerId pulumi.StringInput `pulumi:"serverId"`
}

func (LookupServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerArgs)(nil)).Elem()
}

// A collection of values returned by getServer.
type LookupServerResultOutput struct{ *pulumi.OutputState }

func (LookupServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerResult)(nil)).Elem()
}

func (o LookupServerResultOutput) ToLookupServerResultOutput() LookupServerResultOutput {
	return o
}

func (o LookupServerResultOutput) ToLookupServerResultOutputWithContext(ctx context.Context) LookupServerResultOutput {
	return o
}

// The affinity group the server is assigned to.
func (o LookupServerResultOutput) AffinityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.AffinityGroup }).(pulumi.StringOutput)
}

// The availability zone of the server.
func (o LookupServerResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The boot volume for the server
func (o LookupServerResultOutput) BootVolume() GetServerBootVolumeOutput {
	return o.ApplyT(func(v LookupServerResult) GetServerBootVolume { return v.BootVolume }).(GetServerBootVolumeOutput)
}

// Date-time when the server was created
func (o LookupServerResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image ID to be used for an ephemeral disk on the server.
func (o LookupServerResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// The name of the keypair used during server creation.
func (o LookupServerResultOutput) KeypairName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.KeypairName }).(pulumi.StringOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o LookupServerResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServerResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Date-time when the server was launched
func (o LookupServerResultOutput) LaunchedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.LaunchedAt }).(pulumi.StringOutput)
}

// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
func (o LookupServerResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.MachineType }).(pulumi.StringOutput)
}

// The name of the server.
func (o LookupServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
func (o LookupServerResultOutput) NetworkInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServerResult) []string { return v.NetworkInterfaces }).(pulumi.StringArrayOutput)
}

// STACKIT project ID to which the server is associated.
func (o LookupServerResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID.
func (o LookupServerResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.ServerId }).(pulumi.StringOutput)
}

// Date-time when the server was updated
func (o LookupServerResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// User data that is passed via cloud-init to the server.
func (o LookupServerResultOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerResult) string { return v.UserData }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerResultOutput{})
}
