// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SQLServer Flex instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SqlserverflexInstance struct {
	pulumi.CustomResourceState

	// The Access Control List (ACL) for the SQLServer Flex instance.
	Acls pulumi.StringArrayOutput `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
	BackupSchedule pulumi.StringOutput               `pulumi:"backupSchedule"`
	Flavor         SqlserverflexInstanceFlavorOutput `pulumi:"flavor"`
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name    pulumi.StringOutput                `pulumi:"name"`
	Options SqlserverflexInstanceOptionsOutput `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringOutput                `pulumi:"region"`
	Replicas pulumi.IntOutput                   `pulumi:"replicas"`
	Storage  SqlserverflexInstanceStorageOutput `pulumi:"storage"`
	Version  pulumi.StringOutput                `pulumi:"version"`
}

// NewSqlserverflexInstance registers a new resource with the given unique name, arguments, and options.
func NewSqlserverflexInstance(ctx *pulumi.Context,
	name string, args *SqlserverflexInstanceArgs, opts ...pulumi.ResourceOption) (*SqlserverflexInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlserverflexInstance
	err := ctx.RegisterResource("stackit:index/sqlserverflexInstance:SqlserverflexInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlserverflexInstance gets an existing SqlserverflexInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlserverflexInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlserverflexInstanceState, opts ...pulumi.ResourceOption) (*SqlserverflexInstance, error) {
	var resource SqlserverflexInstance
	err := ctx.ReadResource("stackit:index/sqlserverflexInstance:SqlserverflexInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlserverflexInstance resources.
type sqlserverflexInstanceState struct {
	// The Access Control List (ACL) for the SQLServer Flex instance.
	Acls []string `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
	BackupSchedule *string                      `pulumi:"backupSchedule"`
	Flavor         *SqlserverflexInstanceFlavor `pulumi:"flavor"`
	// ID of the SQLServer Flex instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name    *string                       `pulumi:"name"`
	Options *SqlserverflexInstanceOptions `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   *string                       `pulumi:"region"`
	Replicas *int                          `pulumi:"replicas"`
	Storage  *SqlserverflexInstanceStorage `pulumi:"storage"`
	Version  *string                       `pulumi:"version"`
}

type SqlserverflexInstanceState struct {
	// The Access Control List (ACL) for the SQLServer Flex instance.
	Acls pulumi.StringArrayInput
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
	BackupSchedule pulumi.StringPtrInput
	Flavor         SqlserverflexInstanceFlavorPtrInput
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name    pulumi.StringPtrInput
	Options SqlserverflexInstanceOptionsPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringPtrInput
	Replicas pulumi.IntPtrInput
	Storage  SqlserverflexInstanceStoragePtrInput
	Version  pulumi.StringPtrInput
}

func (SqlserverflexInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverflexInstanceState)(nil)).Elem()
}

type sqlserverflexInstanceArgs struct {
	// The Access Control List (ACL) for the SQLServer Flex instance.
	Acls []string `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
	BackupSchedule *string                     `pulumi:"backupSchedule"`
	Flavor         SqlserverflexInstanceFlavor `pulumi:"flavor"`
	// Instance name.
	Name    *string                       `pulumi:"name"`
	Options *SqlserverflexInstanceOptions `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region  *string                       `pulumi:"region"`
	Storage *SqlserverflexInstanceStorage `pulumi:"storage"`
	Version *string                       `pulumi:"version"`
}

// The set of arguments for constructing a SqlserverflexInstance resource.
type SqlserverflexInstanceArgs struct {
	// The Access Control List (ACL) for the SQLServer Flex instance.
	Acls pulumi.StringArrayInput
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
	BackupSchedule pulumi.StringPtrInput
	Flavor         SqlserverflexInstanceFlavorInput
	// Instance name.
	Name    pulumi.StringPtrInput
	Options SqlserverflexInstanceOptionsPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region  pulumi.StringPtrInput
	Storage SqlserverflexInstanceStoragePtrInput
	Version pulumi.StringPtrInput
}

func (SqlserverflexInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverflexInstanceArgs)(nil)).Elem()
}

type SqlserverflexInstanceInput interface {
	pulumi.Input

	ToSqlserverflexInstanceOutput() SqlserverflexInstanceOutput
	ToSqlserverflexInstanceOutputWithContext(ctx context.Context) SqlserverflexInstanceOutput
}

func (*SqlserverflexInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstance)(nil)).Elem()
}

func (i *SqlserverflexInstance) ToSqlserverflexInstanceOutput() SqlserverflexInstanceOutput {
	return i.ToSqlserverflexInstanceOutputWithContext(context.Background())
}

func (i *SqlserverflexInstance) ToSqlserverflexInstanceOutputWithContext(ctx context.Context) SqlserverflexInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceOutput)
}

// SqlserverflexInstanceArrayInput is an input type that accepts SqlserverflexInstanceArray and SqlserverflexInstanceArrayOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceArrayInput` via:
//
//	SqlserverflexInstanceArray{ SqlserverflexInstanceArgs{...} }
type SqlserverflexInstanceArrayInput interface {
	pulumi.Input

	ToSqlserverflexInstanceArrayOutput() SqlserverflexInstanceArrayOutput
	ToSqlserverflexInstanceArrayOutputWithContext(context.Context) SqlserverflexInstanceArrayOutput
}

type SqlserverflexInstanceArray []SqlserverflexInstanceInput

func (SqlserverflexInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverflexInstance)(nil)).Elem()
}

func (i SqlserverflexInstanceArray) ToSqlserverflexInstanceArrayOutput() SqlserverflexInstanceArrayOutput {
	return i.ToSqlserverflexInstanceArrayOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceArray) ToSqlserverflexInstanceArrayOutputWithContext(ctx context.Context) SqlserverflexInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceArrayOutput)
}

// SqlserverflexInstanceMapInput is an input type that accepts SqlserverflexInstanceMap and SqlserverflexInstanceMapOutput values.
// You can construct a concrete instance of `SqlserverflexInstanceMapInput` via:
//
//	SqlserverflexInstanceMap{ "key": SqlserverflexInstanceArgs{...} }
type SqlserverflexInstanceMapInput interface {
	pulumi.Input

	ToSqlserverflexInstanceMapOutput() SqlserverflexInstanceMapOutput
	ToSqlserverflexInstanceMapOutputWithContext(context.Context) SqlserverflexInstanceMapOutput
}

type SqlserverflexInstanceMap map[string]SqlserverflexInstanceInput

func (SqlserverflexInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverflexInstance)(nil)).Elem()
}

func (i SqlserverflexInstanceMap) ToSqlserverflexInstanceMapOutput() SqlserverflexInstanceMapOutput {
	return i.ToSqlserverflexInstanceMapOutputWithContext(context.Background())
}

func (i SqlserverflexInstanceMap) ToSqlserverflexInstanceMapOutputWithContext(ctx context.Context) SqlserverflexInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexInstanceMapOutput)
}

type SqlserverflexInstanceOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexInstance)(nil)).Elem()
}

func (o SqlserverflexInstanceOutput) ToSqlserverflexInstanceOutput() SqlserverflexInstanceOutput {
	return o
}

func (o SqlserverflexInstanceOutput) ToSqlserverflexInstanceOutputWithContext(ctx context.Context) SqlserverflexInstanceOutput {
	return o
}

// The Access Control List (ACL) for the SQLServer Flex instance.
func (o SqlserverflexInstanceOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringArrayOutput { return v.Acls }).(pulumi.StringArrayOutput)
}

// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *")
func (o SqlserverflexInstanceOutput) BackupSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.BackupSchedule }).(pulumi.StringOutput)
}

func (o SqlserverflexInstanceOutput) Flavor() SqlserverflexInstanceFlavorOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) SqlserverflexInstanceFlavorOutput { return v.Flavor }).(SqlserverflexInstanceFlavorOutput)
}

// ID of the SQLServer Flex instance.
func (o SqlserverflexInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o SqlserverflexInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SqlserverflexInstanceOutput) Options() SqlserverflexInstanceOptionsOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) SqlserverflexInstanceOptionsOutput { return v.Options }).(SqlserverflexInstanceOptionsOutput)
}

// STACKIT project ID to which the instance is associated.
func (o SqlserverflexInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o SqlserverflexInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SqlserverflexInstanceOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o SqlserverflexInstanceOutput) Storage() SqlserverflexInstanceStorageOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) SqlserverflexInstanceStorageOutput { return v.Storage }).(SqlserverflexInstanceStorageOutput)
}

func (o SqlserverflexInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type SqlserverflexInstanceArrayOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverflexInstance)(nil)).Elem()
}

func (o SqlserverflexInstanceArrayOutput) ToSqlserverflexInstanceArrayOutput() SqlserverflexInstanceArrayOutput {
	return o
}

func (o SqlserverflexInstanceArrayOutput) ToSqlserverflexInstanceArrayOutputWithContext(ctx context.Context) SqlserverflexInstanceArrayOutput {
	return o
}

func (o SqlserverflexInstanceArrayOutput) Index(i pulumi.IntInput) SqlserverflexInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlserverflexInstance {
		return vs[0].([]*SqlserverflexInstance)[vs[1].(int)]
	}).(SqlserverflexInstanceOutput)
}

type SqlserverflexInstanceMapOutput struct{ *pulumi.OutputState }

func (SqlserverflexInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverflexInstance)(nil)).Elem()
}

func (o SqlserverflexInstanceMapOutput) ToSqlserverflexInstanceMapOutput() SqlserverflexInstanceMapOutput {
	return o
}

func (o SqlserverflexInstanceMapOutput) ToSqlserverflexInstanceMapOutputWithContext(ctx context.Context) SqlserverflexInstanceMapOutput {
	return o
}

func (o SqlserverflexInstanceMapOutput) MapIndex(k pulumi.StringInput) SqlserverflexInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlserverflexInstance {
		return vs[0].(map[string]*SqlserverflexInstance)[vs[1].(string)]
	}).(SqlserverflexInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceInput)(nil)).Elem(), &SqlserverflexInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceArrayInput)(nil)).Elem(), SqlserverflexInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexInstanceMapInput)(nil)).Elem(), SqlserverflexInstanceMap{})
	pulumi.RegisterOutputType(SqlserverflexInstanceOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceArrayOutput{})
	pulumi.RegisterOutputType(SqlserverflexInstanceMapOutput{})
}
