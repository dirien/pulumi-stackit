// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Server update schedule datasource schema. Must have a `region` specified in the provider configuration.
//
// > This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
func LookupServerUpdateSchedule(ctx *pulumi.Context, args *LookupServerUpdateScheduleArgs, opts ...pulumi.InvokeOption) (*LookupServerUpdateScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerUpdateScheduleResult
	err := ctx.Invoke("stackit:index/getServerUpdateSchedule:getServerUpdateSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerUpdateSchedule.
type LookupServerUpdateScheduleArgs struct {
	// STACKIT Project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Server ID for the update schedule.
	ServerId string `pulumi:"serverId"`
	// Update schedule ID.
	UpdateScheduleId int `pulumi:"updateScheduleId"`
}

// A collection of values returned by getServerUpdateSchedule.
type LookupServerUpdateScheduleResult struct {
	// Is the update schedule enabled or disabled.
	Enabled bool   `pulumi:"enabled"`
	Id      string `pulumi:"id"`
	// Maintenance window [1..24].
	MaintenanceWindow int `pulumi:"maintenanceWindow"`
	// The schedule name.
	Name string `pulumi:"name"`
	// STACKIT Project ID to which the server is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Update schedule described in `rrule` (recurrence rule) format.
	Rrule string `pulumi:"rrule"`
	// Server ID for the update schedule.
	ServerId string `pulumi:"serverId"`
	// Update schedule ID.
	UpdateScheduleId int `pulumi:"updateScheduleId"`
}

func LookupServerUpdateScheduleOutput(ctx *pulumi.Context, args LookupServerUpdateScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupServerUpdateScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerUpdateScheduleResultOutput, error) {
			args := v.(LookupServerUpdateScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getServerUpdateSchedule:getServerUpdateSchedule", args, LookupServerUpdateScheduleResultOutput{}, options).(LookupServerUpdateScheduleResultOutput), nil
		}).(LookupServerUpdateScheduleResultOutput)
}

// A collection of arguments for invoking getServerUpdateSchedule.
type LookupServerUpdateScheduleOutputArgs struct {
	// STACKIT Project ID to which the server is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Server ID for the update schedule.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// Update schedule ID.
	UpdateScheduleId pulumi.IntInput `pulumi:"updateScheduleId"`
}

func (LookupServerUpdateScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerUpdateScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getServerUpdateSchedule.
type LookupServerUpdateScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupServerUpdateScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerUpdateScheduleResult)(nil)).Elem()
}

func (o LookupServerUpdateScheduleResultOutput) ToLookupServerUpdateScheduleResultOutput() LookupServerUpdateScheduleResultOutput {
	return o
}

func (o LookupServerUpdateScheduleResultOutput) ToLookupServerUpdateScheduleResultOutputWithContext(ctx context.Context) LookupServerUpdateScheduleResultOutput {
	return o
}

// Is the update schedule enabled or disabled.
func (o LookupServerUpdateScheduleResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LookupServerUpdateScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Maintenance window [1..24].
func (o LookupServerUpdateScheduleResultOutput) MaintenanceWindow() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) int { return v.MaintenanceWindow }).(pulumi.IntOutput)
}

// The schedule name.
func (o LookupServerUpdateScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the server is associated.
func (o LookupServerUpdateScheduleResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupServerUpdateScheduleResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Update schedule described in `rrule` (recurrence rule) format.
func (o LookupServerUpdateScheduleResultOutput) Rrule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) string { return v.Rrule }).(pulumi.StringOutput)
}

// Server ID for the update schedule.
func (o LookupServerUpdateScheduleResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) string { return v.ServerId }).(pulumi.StringOutput)
}

// Update schedule ID.
func (o LookupServerUpdateScheduleResultOutput) UpdateScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerUpdateScheduleResult) int { return v.UpdateScheduleId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerUpdateScheduleResultOutput{})
}
