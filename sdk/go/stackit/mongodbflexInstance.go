// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MongoDB Flex instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type MongodbflexInstance struct {
	pulumi.CustomResourceState

	// The Access Control List (ACL) for the MongoDB Flex instance.
	Acls pulumi.StringArrayOutput `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
	BackupSchedule pulumi.StringOutput             `pulumi:"backupSchedule"`
	Flavor         MongodbflexInstanceFlavorOutput `pulumi:"flavor"`
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name    pulumi.StringOutput              `pulumi:"name"`
	Options MongodbflexInstanceOptionsOutput `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringOutput              `pulumi:"region"`
	Replicas pulumi.IntOutput                 `pulumi:"replicas"`
	Storage  MongodbflexInstanceStorageOutput `pulumi:"storage"`
	Version  pulumi.StringOutput              `pulumi:"version"`
}

// NewMongodbflexInstance registers a new resource with the given unique name, arguments, and options.
func NewMongodbflexInstance(ctx *pulumi.Context,
	name string, args *MongodbflexInstanceArgs, opts ...pulumi.ResourceOption) (*MongodbflexInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Acls == nil {
		return nil, errors.New("invalid value for required argument 'Acls'")
	}
	if args.BackupSchedule == nil {
		return nil, errors.New("invalid value for required argument 'BackupSchedule'")
	}
	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.Options == nil {
		return nil, errors.New("invalid value for required argument 'Options'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbflexInstance
	err := ctx.RegisterResource("stackit:index/mongodbflexInstance:MongodbflexInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbflexInstance gets an existing MongodbflexInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbflexInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbflexInstanceState, opts ...pulumi.ResourceOption) (*MongodbflexInstance, error) {
	var resource MongodbflexInstance
	err := ctx.ReadResource("stackit:index/mongodbflexInstance:MongodbflexInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbflexInstance resources.
type mongodbflexInstanceState struct {
	// The Access Control List (ACL) for the MongoDB Flex instance.
	Acls []string `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
	BackupSchedule *string                    `pulumi:"backupSchedule"`
	Flavor         *MongodbflexInstanceFlavor `pulumi:"flavor"`
	// ID of the MongoDB Flex instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name    *string                     `pulumi:"name"`
	Options *MongodbflexInstanceOptions `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   *string                     `pulumi:"region"`
	Replicas *int                        `pulumi:"replicas"`
	Storage  *MongodbflexInstanceStorage `pulumi:"storage"`
	Version  *string                     `pulumi:"version"`
}

type MongodbflexInstanceState struct {
	// The Access Control List (ACL) for the MongoDB Flex instance.
	Acls pulumi.StringArrayInput
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
	BackupSchedule pulumi.StringPtrInput
	Flavor         MongodbflexInstanceFlavorPtrInput
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name    pulumi.StringPtrInput
	Options MongodbflexInstanceOptionsPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringPtrInput
	Replicas pulumi.IntPtrInput
	Storage  MongodbflexInstanceStoragePtrInput
	Version  pulumi.StringPtrInput
}

func (MongodbflexInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbflexInstanceState)(nil)).Elem()
}

type mongodbflexInstanceArgs struct {
	// The Access Control List (ACL) for the MongoDB Flex instance.
	Acls []string `pulumi:"acls"`
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
	BackupSchedule string                    `pulumi:"backupSchedule"`
	Flavor         MongodbflexInstanceFlavor `pulumi:"flavor"`
	// Instance name.
	Name    *string                    `pulumi:"name"`
	Options MongodbflexInstanceOptions `pulumi:"options"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region   *string                    `pulumi:"region"`
	Replicas int                        `pulumi:"replicas"`
	Storage  MongodbflexInstanceStorage `pulumi:"storage"`
	Version  string                     `pulumi:"version"`
}

// The set of arguments for constructing a MongodbflexInstance resource.
type MongodbflexInstanceArgs struct {
	// The Access Control List (ACL) for the MongoDB Flex instance.
	Acls pulumi.StringArrayInput
	// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
	BackupSchedule pulumi.StringInput
	Flavor         MongodbflexInstanceFlavorInput
	// Instance name.
	Name    pulumi.StringPtrInput
	Options MongodbflexInstanceOptionsInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region   pulumi.StringPtrInput
	Replicas pulumi.IntInput
	Storage  MongodbflexInstanceStorageInput
	Version  pulumi.StringInput
}

func (MongodbflexInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbflexInstanceArgs)(nil)).Elem()
}

type MongodbflexInstanceInput interface {
	pulumi.Input

	ToMongodbflexInstanceOutput() MongodbflexInstanceOutput
	ToMongodbflexInstanceOutputWithContext(ctx context.Context) MongodbflexInstanceOutput
}

func (*MongodbflexInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstance)(nil)).Elem()
}

func (i *MongodbflexInstance) ToMongodbflexInstanceOutput() MongodbflexInstanceOutput {
	return i.ToMongodbflexInstanceOutputWithContext(context.Background())
}

func (i *MongodbflexInstance) ToMongodbflexInstanceOutputWithContext(ctx context.Context) MongodbflexInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceOutput)
}

// MongodbflexInstanceArrayInput is an input type that accepts MongodbflexInstanceArray and MongodbflexInstanceArrayOutput values.
// You can construct a concrete instance of `MongodbflexInstanceArrayInput` via:
//
//	MongodbflexInstanceArray{ MongodbflexInstanceArgs{...} }
type MongodbflexInstanceArrayInput interface {
	pulumi.Input

	ToMongodbflexInstanceArrayOutput() MongodbflexInstanceArrayOutput
	ToMongodbflexInstanceArrayOutputWithContext(context.Context) MongodbflexInstanceArrayOutput
}

type MongodbflexInstanceArray []MongodbflexInstanceInput

func (MongodbflexInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbflexInstance)(nil)).Elem()
}

func (i MongodbflexInstanceArray) ToMongodbflexInstanceArrayOutput() MongodbflexInstanceArrayOutput {
	return i.ToMongodbflexInstanceArrayOutputWithContext(context.Background())
}

func (i MongodbflexInstanceArray) ToMongodbflexInstanceArrayOutputWithContext(ctx context.Context) MongodbflexInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceArrayOutput)
}

// MongodbflexInstanceMapInput is an input type that accepts MongodbflexInstanceMap and MongodbflexInstanceMapOutput values.
// You can construct a concrete instance of `MongodbflexInstanceMapInput` via:
//
//	MongodbflexInstanceMap{ "key": MongodbflexInstanceArgs{...} }
type MongodbflexInstanceMapInput interface {
	pulumi.Input

	ToMongodbflexInstanceMapOutput() MongodbflexInstanceMapOutput
	ToMongodbflexInstanceMapOutputWithContext(context.Context) MongodbflexInstanceMapOutput
}

type MongodbflexInstanceMap map[string]MongodbflexInstanceInput

func (MongodbflexInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbflexInstance)(nil)).Elem()
}

func (i MongodbflexInstanceMap) ToMongodbflexInstanceMapOutput() MongodbflexInstanceMapOutput {
	return i.ToMongodbflexInstanceMapOutputWithContext(context.Background())
}

func (i MongodbflexInstanceMap) ToMongodbflexInstanceMapOutputWithContext(ctx context.Context) MongodbflexInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexInstanceMapOutput)
}

type MongodbflexInstanceOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexInstance)(nil)).Elem()
}

func (o MongodbflexInstanceOutput) ToMongodbflexInstanceOutput() MongodbflexInstanceOutput {
	return o
}

func (o MongodbflexInstanceOutput) ToMongodbflexInstanceOutputWithContext(ctx context.Context) MongodbflexInstanceOutput {
	return o
}

// The Access Control List (ACL) for the MongoDB Flex instance.
func (o MongodbflexInstanceOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringArrayOutput { return v.Acls }).(pulumi.StringArrayOutput)
}

// The backup schedule. Should follow the cron scheduling system format (e.g. "0 0 * * *").
func (o MongodbflexInstanceOutput) BackupSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.BackupSchedule }).(pulumi.StringOutput)
}

func (o MongodbflexInstanceOutput) Flavor() MongodbflexInstanceFlavorOutput {
	return o.ApplyT(func(v *MongodbflexInstance) MongodbflexInstanceFlavorOutput { return v.Flavor }).(MongodbflexInstanceFlavorOutput)
}

// ID of the MongoDB Flex instance.
func (o MongodbflexInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o MongodbflexInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MongodbflexInstanceOutput) Options() MongodbflexInstanceOptionsOutput {
	return o.ApplyT(func(v *MongodbflexInstance) MongodbflexInstanceOptionsOutput { return v.Options }).(MongodbflexInstanceOptionsOutput)
}

// STACKIT project ID to which the instance is associated.
func (o MongodbflexInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o MongodbflexInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o MongodbflexInstanceOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o MongodbflexInstanceOutput) Storage() MongodbflexInstanceStorageOutput {
	return o.ApplyT(func(v *MongodbflexInstance) MongodbflexInstanceStorageOutput { return v.Storage }).(MongodbflexInstanceStorageOutput)
}

func (o MongodbflexInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MongodbflexInstanceArrayOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbflexInstance)(nil)).Elem()
}

func (o MongodbflexInstanceArrayOutput) ToMongodbflexInstanceArrayOutput() MongodbflexInstanceArrayOutput {
	return o
}

func (o MongodbflexInstanceArrayOutput) ToMongodbflexInstanceArrayOutputWithContext(ctx context.Context) MongodbflexInstanceArrayOutput {
	return o
}

func (o MongodbflexInstanceArrayOutput) Index(i pulumi.IntInput) MongodbflexInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbflexInstance {
		return vs[0].([]*MongodbflexInstance)[vs[1].(int)]
	}).(MongodbflexInstanceOutput)
}

type MongodbflexInstanceMapOutput struct{ *pulumi.OutputState }

func (MongodbflexInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbflexInstance)(nil)).Elem()
}

func (o MongodbflexInstanceMapOutput) ToMongodbflexInstanceMapOutput() MongodbflexInstanceMapOutput {
	return o
}

func (o MongodbflexInstanceMapOutput) ToMongodbflexInstanceMapOutputWithContext(ctx context.Context) MongodbflexInstanceMapOutput {
	return o
}

func (o MongodbflexInstanceMapOutput) MapIndex(k pulumi.StringInput) MongodbflexInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbflexInstance {
		return vs[0].(map[string]*MongodbflexInstance)[vs[1].(string)]
	}).(MongodbflexInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceInput)(nil)).Elem(), &MongodbflexInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceArrayInput)(nil)).Elem(), MongodbflexInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexInstanceMapInput)(nil)).Elem(), MongodbflexInstanceMap{})
	pulumi.RegisterOutputType(MongodbflexInstanceOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceArrayOutput{})
	pulumi.RegisterOutputType(MongodbflexInstanceMapOutput{})
}
