// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SQLServer Flex user resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SqlserverflexUser struct {
	pulumi.CustomResourceState

	Host pulumi.StringOutput `pulumi:"host"`
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Password of the user account.
	Password pulumi.StringOutput `pulumi:"password"`
	Port     pulumi.IntOutput    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	Region    pulumi.StringOutput `pulumi:"region"`
	// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// User ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Username of the SQLServer Flex instance.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSqlserverflexUser registers a new resource with the given unique name, arguments, and options.
func NewSqlserverflexUser(ctx *pulumi.Context,
	name string, args *SqlserverflexUserArgs, opts ...pulumi.ResourceOption) (*SqlserverflexUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlserverflexUser
	err := ctx.RegisterResource("stackit:index/sqlserverflexUser:SqlserverflexUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlserverflexUser gets an existing SqlserverflexUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlserverflexUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlserverflexUserState, opts ...pulumi.ResourceOption) (*SqlserverflexUser, error) {
	var resource SqlserverflexUser
	err := ctx.ReadResource("stackit:index/sqlserverflexUser:SqlserverflexUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlserverflexUser resources.
type sqlserverflexUserState struct {
	Host *string `pulumi:"host"`
	// ID of the SQLServer Flex instance.
	InstanceId *string `pulumi:"instanceId"`
	// Password of the user account.
	Password *string `pulumi:"password"`
	Port     *int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	Region    *string `pulumi:"region"`
	// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
	Roles []string `pulumi:"roles"`
	// User ID.
	UserId *string `pulumi:"userId"`
	// Username of the SQLServer Flex instance.
	Username *string `pulumi:"username"`
}

type SqlserverflexUserState struct {
	Host pulumi.StringPtrInput
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringPtrInput
	// Password of the user account.
	Password pulumi.StringPtrInput
	Port     pulumi.IntPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
	Roles pulumi.StringArrayInput
	// User ID.
	UserId pulumi.StringPtrInput
	// Username of the SQLServer Flex instance.
	Username pulumi.StringPtrInput
}

func (SqlserverflexUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverflexUserState)(nil)).Elem()
}

type sqlserverflexUserArgs struct {
	// ID of the SQLServer Flex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string  `pulumi:"projectId"`
	Region    *string `pulumi:"region"`
	// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
	Roles []string `pulumi:"roles"`
	// Username of the SQLServer Flex instance.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SqlserverflexUser resource.
type SqlserverflexUserArgs struct {
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	Region    pulumi.StringPtrInput
	// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
	Roles pulumi.StringArrayInput
	// Username of the SQLServer Flex instance.
	Username pulumi.StringInput
}

func (SqlserverflexUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverflexUserArgs)(nil)).Elem()
}

type SqlserverflexUserInput interface {
	pulumi.Input

	ToSqlserverflexUserOutput() SqlserverflexUserOutput
	ToSqlserverflexUserOutputWithContext(ctx context.Context) SqlserverflexUserOutput
}

func (*SqlserverflexUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexUser)(nil)).Elem()
}

func (i *SqlserverflexUser) ToSqlserverflexUserOutput() SqlserverflexUserOutput {
	return i.ToSqlserverflexUserOutputWithContext(context.Background())
}

func (i *SqlserverflexUser) ToSqlserverflexUserOutputWithContext(ctx context.Context) SqlserverflexUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexUserOutput)
}

// SqlserverflexUserArrayInput is an input type that accepts SqlserverflexUserArray and SqlserverflexUserArrayOutput values.
// You can construct a concrete instance of `SqlserverflexUserArrayInput` via:
//
//	SqlserverflexUserArray{ SqlserverflexUserArgs{...} }
type SqlserverflexUserArrayInput interface {
	pulumi.Input

	ToSqlserverflexUserArrayOutput() SqlserverflexUserArrayOutput
	ToSqlserverflexUserArrayOutputWithContext(context.Context) SqlserverflexUserArrayOutput
}

type SqlserverflexUserArray []SqlserverflexUserInput

func (SqlserverflexUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverflexUser)(nil)).Elem()
}

func (i SqlserverflexUserArray) ToSqlserverflexUserArrayOutput() SqlserverflexUserArrayOutput {
	return i.ToSqlserverflexUserArrayOutputWithContext(context.Background())
}

func (i SqlserverflexUserArray) ToSqlserverflexUserArrayOutputWithContext(ctx context.Context) SqlserverflexUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexUserArrayOutput)
}

// SqlserverflexUserMapInput is an input type that accepts SqlserverflexUserMap and SqlserverflexUserMapOutput values.
// You can construct a concrete instance of `SqlserverflexUserMapInput` via:
//
//	SqlserverflexUserMap{ "key": SqlserverflexUserArgs{...} }
type SqlserverflexUserMapInput interface {
	pulumi.Input

	ToSqlserverflexUserMapOutput() SqlserverflexUserMapOutput
	ToSqlserverflexUserMapOutputWithContext(context.Context) SqlserverflexUserMapOutput
}

type SqlserverflexUserMap map[string]SqlserverflexUserInput

func (SqlserverflexUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverflexUser)(nil)).Elem()
}

func (i SqlserverflexUserMap) ToSqlserverflexUserMapOutput() SqlserverflexUserMapOutput {
	return i.ToSqlserverflexUserMapOutputWithContext(context.Background())
}

func (i SqlserverflexUserMap) ToSqlserverflexUserMapOutputWithContext(ctx context.Context) SqlserverflexUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverflexUserMapOutput)
}

type SqlserverflexUserOutput struct{ *pulumi.OutputState }

func (SqlserverflexUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverflexUser)(nil)).Elem()
}

func (o SqlserverflexUserOutput) ToSqlserverflexUserOutput() SqlserverflexUserOutput {
	return o
}

func (o SqlserverflexUserOutput) ToSqlserverflexUserOutputWithContext(ctx context.Context) SqlserverflexUserOutput {
	return o
}

func (o SqlserverflexUserOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// ID of the SQLServer Flex instance.
func (o SqlserverflexUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Password of the user account.
func (o SqlserverflexUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o SqlserverflexUserOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o SqlserverflexUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o SqlserverflexUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`
func (o SqlserverflexUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// User ID.
func (o SqlserverflexUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Username of the SQLServer Flex instance.
func (o SqlserverflexUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverflexUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type SqlserverflexUserArrayOutput struct{ *pulumi.OutputState }

func (SqlserverflexUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverflexUser)(nil)).Elem()
}

func (o SqlserverflexUserArrayOutput) ToSqlserverflexUserArrayOutput() SqlserverflexUserArrayOutput {
	return o
}

func (o SqlserverflexUserArrayOutput) ToSqlserverflexUserArrayOutputWithContext(ctx context.Context) SqlserverflexUserArrayOutput {
	return o
}

func (o SqlserverflexUserArrayOutput) Index(i pulumi.IntInput) SqlserverflexUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlserverflexUser {
		return vs[0].([]*SqlserverflexUser)[vs[1].(int)]
	}).(SqlserverflexUserOutput)
}

type SqlserverflexUserMapOutput struct{ *pulumi.OutputState }

func (SqlserverflexUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverflexUser)(nil)).Elem()
}

func (o SqlserverflexUserMapOutput) ToSqlserverflexUserMapOutput() SqlserverflexUserMapOutput {
	return o
}

func (o SqlserverflexUserMapOutput) ToSqlserverflexUserMapOutputWithContext(ctx context.Context) SqlserverflexUserMapOutput {
	return o
}

func (o SqlserverflexUserMapOutput) MapIndex(k pulumi.StringInput) SqlserverflexUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlserverflexUser {
		return vs[0].(map[string]*SqlserverflexUser)[vs[1].(string)]
	}).(SqlserverflexUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexUserInput)(nil)).Elem(), &SqlserverflexUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexUserArrayInput)(nil)).Elem(), SqlserverflexUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverflexUserMapInput)(nil)).Elem(), SqlserverflexUserMap{})
	pulumi.RegisterOutputType(SqlserverflexUserOutput{})
	pulumi.RegisterOutputType(SqlserverflexUserArrayOutput{})
	pulumi.RegisterOutputType(SqlserverflexUserMapOutput{})
}
