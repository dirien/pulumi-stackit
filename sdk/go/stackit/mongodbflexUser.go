// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MongoDB Flex user resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type MongodbflexUser struct {
	pulumi.CustomResourceState

	Database pulumi.StringOutput `pulumi:"database"`
	Host     pulumi.StringOutput `pulumi:"host"`
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Password   pulumi.StringOutput `pulumi:"password"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringOutput `pulumi:"region"`
	// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	Uri   pulumi.StringOutput      `pulumi:"uri"`
	// User ID.
	UserId   pulumi.StringOutput `pulumi:"userId"`
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewMongodbflexUser registers a new resource with the given unique name, arguments, and options.
func NewMongodbflexUser(ctx *pulumi.Context,
	name string, args *MongodbflexUserArgs, opts ...pulumi.ResourceOption) (*MongodbflexUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbflexUser
	err := ctx.RegisterResource("stackit:index/mongodbflexUser:MongodbflexUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbflexUser gets an existing MongodbflexUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbflexUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbflexUserState, opts ...pulumi.ResourceOption) (*MongodbflexUser, error) {
	var resource MongodbflexUser
	err := ctx.ReadResource("stackit:index/mongodbflexUser:MongodbflexUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbflexUser resources.
type mongodbflexUserState struct {
	Database *string `pulumi:"database"`
	Host     *string `pulumi:"host"`
	// ID of the MongoDB Flex instance.
	InstanceId *string `pulumi:"instanceId"`
	Password   *string `pulumi:"password"`
	Port       *int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
	Roles []string `pulumi:"roles"`
	Uri   *string  `pulumi:"uri"`
	// User ID.
	UserId   *string `pulumi:"userId"`
	Username *string `pulumi:"username"`
}

type MongodbflexUserState struct {
	Database pulumi.StringPtrInput
	Host     pulumi.StringPtrInput
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringPtrInput
	Password   pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
	Roles pulumi.StringArrayInput
	Uri   pulumi.StringPtrInput
	// User ID.
	UserId   pulumi.StringPtrInput
	Username pulumi.StringPtrInput
}

func (MongodbflexUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbflexUserState)(nil)).Elem()
}

type mongodbflexUserArgs struct {
	Database string `pulumi:"database"`
	// ID of the MongoDB Flex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
	Roles    []string `pulumi:"roles"`
	Username *string  `pulumi:"username"`
}

// The set of arguments for constructing a MongodbflexUser resource.
type MongodbflexUserArgs struct {
	Database pulumi.StringInput
	// ID of the MongoDB Flex instance.
	InstanceId pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
	// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
	Roles    pulumi.StringArrayInput
	Username pulumi.StringPtrInput
}

func (MongodbflexUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbflexUserArgs)(nil)).Elem()
}

type MongodbflexUserInput interface {
	pulumi.Input

	ToMongodbflexUserOutput() MongodbflexUserOutput
	ToMongodbflexUserOutputWithContext(ctx context.Context) MongodbflexUserOutput
}

func (*MongodbflexUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexUser)(nil)).Elem()
}

func (i *MongodbflexUser) ToMongodbflexUserOutput() MongodbflexUserOutput {
	return i.ToMongodbflexUserOutputWithContext(context.Background())
}

func (i *MongodbflexUser) ToMongodbflexUserOutputWithContext(ctx context.Context) MongodbflexUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexUserOutput)
}

// MongodbflexUserArrayInput is an input type that accepts MongodbflexUserArray and MongodbflexUserArrayOutput values.
// You can construct a concrete instance of `MongodbflexUserArrayInput` via:
//
//	MongodbflexUserArray{ MongodbflexUserArgs{...} }
type MongodbflexUserArrayInput interface {
	pulumi.Input

	ToMongodbflexUserArrayOutput() MongodbflexUserArrayOutput
	ToMongodbflexUserArrayOutputWithContext(context.Context) MongodbflexUserArrayOutput
}

type MongodbflexUserArray []MongodbflexUserInput

func (MongodbflexUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbflexUser)(nil)).Elem()
}

func (i MongodbflexUserArray) ToMongodbflexUserArrayOutput() MongodbflexUserArrayOutput {
	return i.ToMongodbflexUserArrayOutputWithContext(context.Background())
}

func (i MongodbflexUserArray) ToMongodbflexUserArrayOutputWithContext(ctx context.Context) MongodbflexUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexUserArrayOutput)
}

// MongodbflexUserMapInput is an input type that accepts MongodbflexUserMap and MongodbflexUserMapOutput values.
// You can construct a concrete instance of `MongodbflexUserMapInput` via:
//
//	MongodbflexUserMap{ "key": MongodbflexUserArgs{...} }
type MongodbflexUserMapInput interface {
	pulumi.Input

	ToMongodbflexUserMapOutput() MongodbflexUserMapOutput
	ToMongodbflexUserMapOutputWithContext(context.Context) MongodbflexUserMapOutput
}

type MongodbflexUserMap map[string]MongodbflexUserInput

func (MongodbflexUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbflexUser)(nil)).Elem()
}

func (i MongodbflexUserMap) ToMongodbflexUserMapOutput() MongodbflexUserMapOutput {
	return i.ToMongodbflexUserMapOutputWithContext(context.Background())
}

func (i MongodbflexUserMap) ToMongodbflexUserMapOutputWithContext(ctx context.Context) MongodbflexUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbflexUserMapOutput)
}

type MongodbflexUserOutput struct{ *pulumi.OutputState }

func (MongodbflexUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbflexUser)(nil)).Elem()
}

func (o MongodbflexUserOutput) ToMongodbflexUserOutput() MongodbflexUserOutput {
	return o
}

func (o MongodbflexUserOutput) ToMongodbflexUserOutputWithContext(ctx context.Context) MongodbflexUserOutput {
	return o
}

func (o MongodbflexUserOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o MongodbflexUserOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// ID of the MongoDB Flex instance.
func (o MongodbflexUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o MongodbflexUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o MongodbflexUserOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o MongodbflexUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o MongodbflexUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]
func (o MongodbflexUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

func (o MongodbflexUserOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

// User ID.
func (o MongodbflexUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func (o MongodbflexUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbflexUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type MongodbflexUserArrayOutput struct{ *pulumi.OutputState }

func (MongodbflexUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbflexUser)(nil)).Elem()
}

func (o MongodbflexUserArrayOutput) ToMongodbflexUserArrayOutput() MongodbflexUserArrayOutput {
	return o
}

func (o MongodbflexUserArrayOutput) ToMongodbflexUserArrayOutputWithContext(ctx context.Context) MongodbflexUserArrayOutput {
	return o
}

func (o MongodbflexUserArrayOutput) Index(i pulumi.IntInput) MongodbflexUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbflexUser {
		return vs[0].([]*MongodbflexUser)[vs[1].(int)]
	}).(MongodbflexUserOutput)
}

type MongodbflexUserMapOutput struct{ *pulumi.OutputState }

func (MongodbflexUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbflexUser)(nil)).Elem()
}

func (o MongodbflexUserMapOutput) ToMongodbflexUserMapOutput() MongodbflexUserMapOutput {
	return o
}

func (o MongodbflexUserMapOutput) ToMongodbflexUserMapOutputWithContext(ctx context.Context) MongodbflexUserMapOutput {
	return o
}

func (o MongodbflexUserMapOutput) MapIndex(k pulumi.StringInput) MongodbflexUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbflexUser {
		return vs[0].(map[string]*MongodbflexUser)[vs[1].(string)]
	}).(MongodbflexUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexUserInput)(nil)).Elem(), &MongodbflexUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexUserArrayInput)(nil)).Elem(), MongodbflexUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbflexUserMapInput)(nil)).Elem(), MongodbflexUserMap{})
	pulumi.RegisterOutputType(MongodbflexUserOutput{})
	pulumi.RegisterOutputType(MongodbflexUserArrayOutput{})
	pulumi.RegisterOutputType(MongodbflexUserMapOutput{})
}
