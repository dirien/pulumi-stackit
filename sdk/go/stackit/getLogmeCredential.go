// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LogMe credential data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupLogmeCredential(ctx *pulumi.Context, args *LookupLogmeCredentialArgs, opts ...pulumi.InvokeOption) (*LookupLogmeCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogmeCredentialResult
	err := ctx.Invoke("stackit:index/getLogmeCredential:getLogmeCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogmeCredential.
type LookupLogmeCredentialArgs struct {
	// The credential's ID.
	CredentialId string `pulumi:"credentialId"`
	// ID of the LogMe instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getLogmeCredential.
type LookupLogmeCredentialResult struct {
	// The credential's ID.
	CredentialId string `pulumi:"credentialId"`
	Host         string `pulumi:"host"`
	Id           string `pulumi:"id"`
	// ID of the LogMe instance.
	InstanceId string `pulumi:"instanceId"`
	Password   string `pulumi:"password"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	Uri       string `pulumi:"uri"`
	Username  string `pulumi:"username"`
}

func LookupLogmeCredentialOutput(ctx *pulumi.Context, args LookupLogmeCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupLogmeCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLogmeCredentialResultOutput, error) {
			args := v.(LookupLogmeCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getLogmeCredential:getLogmeCredential", args, LookupLogmeCredentialResultOutput{}, options).(LookupLogmeCredentialResultOutput), nil
		}).(LookupLogmeCredentialResultOutput)
}

// A collection of arguments for invoking getLogmeCredential.
type LookupLogmeCredentialOutputArgs struct {
	// The credential's ID.
	CredentialId pulumi.StringInput `pulumi:"credentialId"`
	// ID of the LogMe instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupLogmeCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogmeCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getLogmeCredential.
type LookupLogmeCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupLogmeCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogmeCredentialResult)(nil)).Elem()
}

func (o LookupLogmeCredentialResultOutput) ToLookupLogmeCredentialResultOutput() LookupLogmeCredentialResultOutput {
	return o
}

func (o LookupLogmeCredentialResultOutput) ToLookupLogmeCredentialResultOutputWithContext(ctx context.Context) LookupLogmeCredentialResultOutput {
	return o
}

// The credential's ID.
func (o LookupLogmeCredentialResultOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.CredentialId }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the LogMe instance.
func (o LookupLogmeCredentialResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupLogmeCredentialResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.Uri }).(pulumi.StringOutput)
}

func (o LookupLogmeCredentialResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogmeCredentialResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogmeCredentialResultOutput{})
}
