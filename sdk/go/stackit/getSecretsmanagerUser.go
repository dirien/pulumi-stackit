// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Secrets Manager user data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupSecretsmanagerUser(ctx *pulumi.Context, args *LookupSecretsmanagerUserArgs, opts ...pulumi.InvokeOption) (*LookupSecretsmanagerUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretsmanagerUserResult
	err := ctx.Invoke("stackit:index/getSecretsmanagerUser:getSecretsmanagerUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretsmanagerUser.
type LookupSecretsmanagerUserArgs struct {
	// ID of the Secrets Manager instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The user's ID.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getSecretsmanagerUser.
type LookupSecretsmanagerUserResult struct {
	// A user chosen description to differentiate between multiple users. Can't be changed after creation.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// ID of the Secrets Manager instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The user's ID.
	UserId string `pulumi:"userId"`
	// An auto-generated user name.
	Username string `pulumi:"username"`
	// If true, the user has writeaccess to the secrets engine.
	WriteEnabled bool `pulumi:"writeEnabled"`
}

func LookupSecretsmanagerUserOutput(ctx *pulumi.Context, args LookupSecretsmanagerUserOutputArgs, opts ...pulumi.InvokeOption) LookupSecretsmanagerUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecretsmanagerUserResultOutput, error) {
			args := v.(LookupSecretsmanagerUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getSecretsmanagerUser:getSecretsmanagerUser", args, LookupSecretsmanagerUserResultOutput{}, options).(LookupSecretsmanagerUserResultOutput), nil
		}).(LookupSecretsmanagerUserResultOutput)
}

// A collection of arguments for invoking getSecretsmanagerUser.
type LookupSecretsmanagerUserOutputArgs struct {
	// ID of the Secrets Manager instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT Project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The user's ID.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupSecretsmanagerUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretsmanagerUserArgs)(nil)).Elem()
}

// A collection of values returned by getSecretsmanagerUser.
type LookupSecretsmanagerUserResultOutput struct{ *pulumi.OutputState }

func (LookupSecretsmanagerUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretsmanagerUserResult)(nil)).Elem()
}

func (o LookupSecretsmanagerUserResultOutput) ToLookupSecretsmanagerUserResultOutput() LookupSecretsmanagerUserResultOutput {
	return o
}

func (o LookupSecretsmanagerUserResultOutput) ToLookupSecretsmanagerUserResultOutputWithContext(ctx context.Context) LookupSecretsmanagerUserResultOutput {
	return o
}

// A user chosen description to differentiate between multiple users. Can't be changed after creation.
func (o LookupSecretsmanagerUserResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSecretsmanagerUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the Secrets Manager instance.
func (o LookupSecretsmanagerUserResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the instance is associated.
func (o LookupSecretsmanagerUserResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The user's ID.
func (o LookupSecretsmanagerUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

// An auto-generated user name.
func (o LookupSecretsmanagerUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) string { return v.Username }).(pulumi.StringOutput)
}

// If true, the user has writeaccess to the secrets engine.
func (o LookupSecretsmanagerUserResultOutput) WriteEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecretsmanagerUserResult) bool { return v.WriteEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecretsmanagerUserResultOutput{})
}
