// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func GetImageV2(ctx *pulumi.Context, args *GetImageV2Args, opts ...pulumi.InvokeOption) (*GetImageV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageV2Result
	err := ctx.Invoke("stackit:index/getImageV2:getImageV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImageV2.
type GetImageV2Args struct {
	// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
	Filter *GetImageV2Filter `pulumi:"filter"`
	// Image ID to fetch directly
	ImageId *string `pulumi:"imageId"`
	// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
	Name *string `pulumi:"name"`
	// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
	NameRegex *string `pulumi:"nameRegex"`
	// STACKIT project ID to which the image is associated.
	ProjectId string `pulumi:"projectId"`
	// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
	SortAscending *bool `pulumi:"sortAscending"`
}

// A collection of values returned by getImageV2.
type GetImageV2Result struct {
	// Representation of an image checksum.
	Checksum GetImageV2Checksum `pulumi:"checksum"`
	// Properties to set hardware and scheduling settings for an image.
	Config GetImageV2Config `pulumi:"config"`
	// The disk format of the image.
	DiskFormat string `pulumi:"diskFormat"`
	// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
	Filter *GetImageV2Filter `pulumi:"filter"`
	Id     string            `pulumi:"id"`
	// Image ID to fetch directly
	ImageId *string `pulumi:"imageId"`
	// Labels are key-value string pairs which can be attached to a resource container
	Labels map[string]string `pulumi:"labels"`
	// The minimum disk size of the image in GB.
	MinDiskSize int `pulumi:"minDiskSize"`
	// The minimum RAM of the image in MB.
	MinRam int `pulumi:"minRam"`
	// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
	Name *string `pulumi:"name"`
	// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
	NameRegex *string `pulumi:"nameRegex"`
	// STACKIT project ID to which the image is associated.
	ProjectId string `pulumi:"projectId"`
	// Whether the image is protected.
	Protected bool `pulumi:"protected"`
	// The scope of the image.
	Scope string `pulumi:"scope"`
	// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
	SortAscending *bool `pulumi:"sortAscending"`
}

func GetImageV2Output(ctx *pulumi.Context, args GetImageV2OutputArgs, opts ...pulumi.InvokeOption) GetImageV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetImageV2ResultOutput, error) {
			args := v.(GetImageV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getImageV2:getImageV2", args, GetImageV2ResultOutput{}, options).(GetImageV2ResultOutput), nil
		}).(GetImageV2ResultOutput)
}

// A collection of arguments for invoking getImageV2.
type GetImageV2OutputArgs struct {
	// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
	Filter GetImageV2FilterPtrInput `pulumi:"filter"`
	// Image ID to fetch directly
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// STACKIT project ID to which the image is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
	SortAscending pulumi.BoolPtrInput `pulumi:"sortAscending"`
}

func (GetImageV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageV2Args)(nil)).Elem()
}

// A collection of values returned by getImageV2.
type GetImageV2ResultOutput struct{ *pulumi.OutputState }

func (GetImageV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageV2Result)(nil)).Elem()
}

func (o GetImageV2ResultOutput) ToGetImageV2ResultOutput() GetImageV2ResultOutput {
	return o
}

func (o GetImageV2ResultOutput) ToGetImageV2ResultOutputWithContext(ctx context.Context) GetImageV2ResultOutput {
	return o
}

// Representation of an image checksum.
func (o GetImageV2ResultOutput) Checksum() GetImageV2ChecksumOutput {
	return o.ApplyT(func(v GetImageV2Result) GetImageV2Checksum { return v.Checksum }).(GetImageV2ChecksumOutput)
}

// Properties to set hardware and scheduling settings for an image.
func (o GetImageV2ResultOutput) Config() GetImageV2ConfigOutput {
	return o.ApplyT(func(v GetImageV2Result) GetImageV2Config { return v.Config }).(GetImageV2ConfigOutput)
}

// The disk format of the image.
func (o GetImageV2ResultOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageV2Result) string { return v.DiskFormat }).(pulumi.StringOutput)
}

// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `nameRegex`.
func (o GetImageV2ResultOutput) Filter() GetImageV2FilterPtrOutput {
	return o.ApplyT(func(v GetImageV2Result) *GetImageV2Filter { return v.Filter }).(GetImageV2FilterPtrOutput)
}

func (o GetImageV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// Image ID to fetch directly
func (o GetImageV2ResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageV2Result) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Labels are key-value string pairs which can be attached to a resource container
func (o GetImageV2ResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetImageV2Result) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The minimum disk size of the image in GB.
func (o GetImageV2ResultOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageV2Result) int { return v.MinDiskSize }).(pulumi.IntOutput)
}

// The minimum RAM of the image in MB.
func (o GetImageV2ResultOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageV2Result) int { return v.MinRam }).(pulumi.IntOutput)
}

// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `nameRegex`.
func (o GetImageV2ResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageV2Result) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
func (o GetImageV2ResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageV2Result) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// STACKIT project ID to which the image is associated.
func (o GetImageV2ResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageV2Result) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the image is protected.
func (o GetImageV2ResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageV2Result) bool { return v.Protected }).(pulumi.BoolOutput)
}

// The scope of the image.
func (o GetImageV2ResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageV2Result) string { return v.Scope }).(pulumi.StringOutput)
}

// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
func (o GetImageV2ResultOutput) SortAscending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetImageV2Result) *bool { return v.SortAscending }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageV2ResultOutput{})
}
