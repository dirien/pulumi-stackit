// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ObjectStorage credential resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ObjectstorageCredential struct {
	pulumi.CustomResourceState

	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The credential ID.
	CredentialId pulumi.StringOutput `pulumi:"credentialId"`
	// The credential group ID.
	CredentialsGroupId pulumi.StringOutput `pulumi:"credentialsGroupId"`
	// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
	ExpirationTimestamp pulumi.StringOutput `pulumi:"expirationTimestamp"`
	Name                pulumi.StringOutput `pulumi:"name"`
	// STACKIT Project ID to which the credential group is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region          pulumi.StringOutput `pulumi:"region"`
	SecretAccessKey pulumi.StringOutput `pulumi:"secretAccessKey"`
}

// NewObjectstorageCredential registers a new resource with the given unique name, arguments, and options.
func NewObjectstorageCredential(ctx *pulumi.Context,
	name string, args *ObjectstorageCredentialArgs, opts ...pulumi.ResourceOption) (*ObjectstorageCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialsGroupId == nil {
		return nil, errors.New("invalid value for required argument 'CredentialsGroupId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectstorageCredential
	err := ctx.RegisterResource("stackit:index/objectstorageCredential:ObjectstorageCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectstorageCredential gets an existing ObjectstorageCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectstorageCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectstorageCredentialState, opts ...pulumi.ResourceOption) (*ObjectstorageCredential, error) {
	var resource ObjectstorageCredential
	err := ctx.ReadResource("stackit:index/objectstorageCredential:ObjectstorageCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectstorageCredential resources.
type objectstorageCredentialState struct {
	AccessKey *string `pulumi:"accessKey"`
	// The credential ID.
	CredentialId *string `pulumi:"credentialId"`
	// The credential group ID.
	CredentialsGroupId *string `pulumi:"credentialsGroupId"`
	// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
	ExpirationTimestamp *string `pulumi:"expirationTimestamp"`
	Name                *string `pulumi:"name"`
	// STACKIT Project ID to which the credential group is associated.
	ProjectId *string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region          *string `pulumi:"region"`
	SecretAccessKey *string `pulumi:"secretAccessKey"`
}

type ObjectstorageCredentialState struct {
	AccessKey pulumi.StringPtrInput
	// The credential ID.
	CredentialId pulumi.StringPtrInput
	// The credential group ID.
	CredentialsGroupId pulumi.StringPtrInput
	// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
	ExpirationTimestamp pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	// STACKIT Project ID to which the credential group is associated.
	ProjectId pulumi.StringPtrInput
	// The resource region. If not defined, the provider region is used.
	Region          pulumi.StringPtrInput
	SecretAccessKey pulumi.StringPtrInput
}

func (ObjectstorageCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageCredentialState)(nil)).Elem()
}

type objectstorageCredentialArgs struct {
	// The credential group ID.
	CredentialsGroupId string `pulumi:"credentialsGroupId"`
	// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
	ExpirationTimestamp *string `pulumi:"expirationTimestamp"`
	// STACKIT Project ID to which the credential group is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ObjectstorageCredential resource.
type ObjectstorageCredentialArgs struct {
	// The credential group ID.
	CredentialsGroupId pulumi.StringInput
	// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
	ExpirationTimestamp pulumi.StringPtrInput
	// STACKIT Project ID to which the credential group is associated.
	ProjectId pulumi.StringInput
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput
}

func (ObjectstorageCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageCredentialArgs)(nil)).Elem()
}

type ObjectstorageCredentialInput interface {
	pulumi.Input

	ToObjectstorageCredentialOutput() ObjectstorageCredentialOutput
	ToObjectstorageCredentialOutputWithContext(ctx context.Context) ObjectstorageCredentialOutput
}

func (*ObjectstorageCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageCredential)(nil)).Elem()
}

func (i *ObjectstorageCredential) ToObjectstorageCredentialOutput() ObjectstorageCredentialOutput {
	return i.ToObjectstorageCredentialOutputWithContext(context.Background())
}

func (i *ObjectstorageCredential) ToObjectstorageCredentialOutputWithContext(ctx context.Context) ObjectstorageCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageCredentialOutput)
}

// ObjectstorageCredentialArrayInput is an input type that accepts ObjectstorageCredentialArray and ObjectstorageCredentialArrayOutput values.
// You can construct a concrete instance of `ObjectstorageCredentialArrayInput` via:
//
//	ObjectstorageCredentialArray{ ObjectstorageCredentialArgs{...} }
type ObjectstorageCredentialArrayInput interface {
	pulumi.Input

	ToObjectstorageCredentialArrayOutput() ObjectstorageCredentialArrayOutput
	ToObjectstorageCredentialArrayOutputWithContext(context.Context) ObjectstorageCredentialArrayOutput
}

type ObjectstorageCredentialArray []ObjectstorageCredentialInput

func (ObjectstorageCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageCredential)(nil)).Elem()
}

func (i ObjectstorageCredentialArray) ToObjectstorageCredentialArrayOutput() ObjectstorageCredentialArrayOutput {
	return i.ToObjectstorageCredentialArrayOutputWithContext(context.Background())
}

func (i ObjectstorageCredentialArray) ToObjectstorageCredentialArrayOutputWithContext(ctx context.Context) ObjectstorageCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageCredentialArrayOutput)
}

// ObjectstorageCredentialMapInput is an input type that accepts ObjectstorageCredentialMap and ObjectstorageCredentialMapOutput values.
// You can construct a concrete instance of `ObjectstorageCredentialMapInput` via:
//
//	ObjectstorageCredentialMap{ "key": ObjectstorageCredentialArgs{...} }
type ObjectstorageCredentialMapInput interface {
	pulumi.Input

	ToObjectstorageCredentialMapOutput() ObjectstorageCredentialMapOutput
	ToObjectstorageCredentialMapOutputWithContext(context.Context) ObjectstorageCredentialMapOutput
}

type ObjectstorageCredentialMap map[string]ObjectstorageCredentialInput

func (ObjectstorageCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageCredential)(nil)).Elem()
}

func (i ObjectstorageCredentialMap) ToObjectstorageCredentialMapOutput() ObjectstorageCredentialMapOutput {
	return i.ToObjectstorageCredentialMapOutputWithContext(context.Background())
}

func (i ObjectstorageCredentialMap) ToObjectstorageCredentialMapOutputWithContext(ctx context.Context) ObjectstorageCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageCredentialMapOutput)
}

type ObjectstorageCredentialOutput struct{ *pulumi.OutputState }

func (ObjectstorageCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageCredential)(nil)).Elem()
}

func (o ObjectstorageCredentialOutput) ToObjectstorageCredentialOutput() ObjectstorageCredentialOutput {
	return o
}

func (o ObjectstorageCredentialOutput) ToObjectstorageCredentialOutputWithContext(ctx context.Context) ObjectstorageCredentialOutput {
	return o
}

func (o ObjectstorageCredentialOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The credential ID.
func (o ObjectstorageCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

// The credential group ID.
func (o ObjectstorageCredentialOutput) CredentialsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.CredentialsGroupId }).(pulumi.StringOutput)
}

// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
func (o ObjectstorageCredentialOutput) ExpirationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.ExpirationTimestamp }).(pulumi.StringOutput)
}

func (o ObjectstorageCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// STACKIT Project ID to which the credential group is associated.
func (o ObjectstorageCredentialOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o ObjectstorageCredentialOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ObjectstorageCredentialOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageCredential) pulumi.StringOutput { return v.SecretAccessKey }).(pulumi.StringOutput)
}

type ObjectstorageCredentialArrayOutput struct{ *pulumi.OutputState }

func (ObjectstorageCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageCredential)(nil)).Elem()
}

func (o ObjectstorageCredentialArrayOutput) ToObjectstorageCredentialArrayOutput() ObjectstorageCredentialArrayOutput {
	return o
}

func (o ObjectstorageCredentialArrayOutput) ToObjectstorageCredentialArrayOutputWithContext(ctx context.Context) ObjectstorageCredentialArrayOutput {
	return o
}

func (o ObjectstorageCredentialArrayOutput) Index(i pulumi.IntInput) ObjectstorageCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectstorageCredential {
		return vs[0].([]*ObjectstorageCredential)[vs[1].(int)]
	}).(ObjectstorageCredentialOutput)
}

type ObjectstorageCredentialMapOutput struct{ *pulumi.OutputState }

func (ObjectstorageCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageCredential)(nil)).Elem()
}

func (o ObjectstorageCredentialMapOutput) ToObjectstorageCredentialMapOutput() ObjectstorageCredentialMapOutput {
	return o
}

func (o ObjectstorageCredentialMapOutput) ToObjectstorageCredentialMapOutputWithContext(ctx context.Context) ObjectstorageCredentialMapOutput {
	return o
}

func (o ObjectstorageCredentialMapOutput) MapIndex(k pulumi.StringInput) ObjectstorageCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectstorageCredential {
		return vs[0].(map[string]*ObjectstorageCredential)[vs[1].(string)]
	}).(ObjectstorageCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageCredentialInput)(nil)).Elem(), &ObjectstorageCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageCredentialArrayInput)(nil)).Elem(), ObjectstorageCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageCredentialMapInput)(nil)).Elem(), ObjectstorageCredentialMap{})
	pulumi.RegisterOutputType(ObjectstorageCredentialOutput{})
	pulumi.RegisterOutputType(ObjectstorageCredentialArrayOutput{})
	pulumi.RegisterOutputType(ObjectstorageCredentialMapOutput{})
}
