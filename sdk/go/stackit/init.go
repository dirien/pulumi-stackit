// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "stackit:index/affinityGroup:AffinityGroup":
		r = &AffinityGroup{}
	case "stackit:index/authorizationOrganizationRoleAssignment:AuthorizationOrganizationRoleAssignment":
		r = &AuthorizationOrganizationRoleAssignment{}
	case "stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment":
		r = &AuthorizationProjectRoleAssignment{}
	case "stackit:index/cdnCustomDomain:CdnCustomDomain":
		r = &CdnCustomDomain{}
	case "stackit:index/cdnDistribution:CdnDistribution":
		r = &CdnDistribution{}
	case "stackit:index/dnsRecordSet:DnsRecordSet":
		r = &DnsRecordSet{}
	case "stackit:index/dnsZone:DnsZone":
		r = &DnsZone{}
	case "stackit:index/git:Git":
		r = &Git{}
	case "stackit:index/image:Image":
		r = &Image{}
	case "stackit:index/keyPair:KeyPair":
		r = &KeyPair{}
	case "stackit:index/loadbalancer:Loadbalancer":
		r = &Loadbalancer{}
	case "stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential":
		r = &LoadbalancerObservabilityCredential{}
	case "stackit:index/logmeCredential:LogmeCredential":
		r = &LogmeCredential{}
	case "stackit:index/logmeInstance:LogmeInstance":
		r = &LogmeInstance{}
	case "stackit:index/mariadbCredential:MariadbCredential":
		r = &MariadbCredential{}
	case "stackit:index/mariadbInstance:MariadbInstance":
		r = &MariadbInstance{}
	case "stackit:index/modelservingToken:ModelservingToken":
		r = &ModelservingToken{}
	case "stackit:index/mongodbflexInstance:MongodbflexInstance":
		r = &MongodbflexInstance{}
	case "stackit:index/mongodbflexUser:MongodbflexUser":
		r = &MongodbflexUser{}
	case "stackit:index/network:Network":
		r = &Network{}
	case "stackit:index/networkArea:NetworkArea":
		r = &NetworkArea{}
	case "stackit:index/networkAreaRoute:NetworkAreaRoute":
		r = &NetworkAreaRoute{}
	case "stackit:index/networkInterface:NetworkInterface":
		r = &NetworkInterface{}
	case "stackit:index/objectstorageBucket:ObjectstorageBucket":
		r = &ObjectstorageBucket{}
	case "stackit:index/objectstorageCredential:ObjectstorageCredential":
		r = &ObjectstorageCredential{}
	case "stackit:index/objectstorageCredentialsGroup:ObjectstorageCredentialsGroup":
		r = &ObjectstorageCredentialsGroup{}
	case "stackit:index/observabilityAlertgroup:ObservabilityAlertgroup":
		r = &ObservabilityAlertgroup{}
	case "stackit:index/observabilityCredential:ObservabilityCredential":
		r = &ObservabilityCredential{}
	case "stackit:index/observabilityInstance:ObservabilityInstance":
		r = &ObservabilityInstance{}
	case "stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup":
		r = &ObservabilityLogalertgroup{}
	case "stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig":
		r = &ObservabilityScrapeconfig{}
	case "stackit:index/opensearchCredential:OpensearchCredential":
		r = &OpensearchCredential{}
	case "stackit:index/opensearchInstance:OpensearchInstance":
		r = &OpensearchInstance{}
	case "stackit:index/postgresflexDatabase:PostgresflexDatabase":
		r = &PostgresflexDatabase{}
	case "stackit:index/postgresflexInstance:PostgresflexInstance":
		r = &PostgresflexInstance{}
	case "stackit:index/postgresflexUser:PostgresflexUser":
		r = &PostgresflexUser{}
	case "stackit:index/publicIp:PublicIp":
		r = &PublicIp{}
	case "stackit:index/publicIpAssociate:PublicIpAssociate":
		r = &PublicIpAssociate{}
	case "stackit:index/rabbitmqCredential:RabbitmqCredential":
		r = &RabbitmqCredential{}
	case "stackit:index/rabbitmqInstance:RabbitmqInstance":
		r = &RabbitmqInstance{}
	case "stackit:index/redisCredential:RedisCredential":
		r = &RedisCredential{}
	case "stackit:index/redisInstance:RedisInstance":
		r = &RedisInstance{}
	case "stackit:index/resourcemanagerProject:ResourcemanagerProject":
		r = &ResourcemanagerProject{}
	case "stackit:index/secretsmanagerInstance:SecretsmanagerInstance":
		r = &SecretsmanagerInstance{}
	case "stackit:index/secretsmanagerUser:SecretsmanagerUser":
		r = &SecretsmanagerUser{}
	case "stackit:index/securityGroup:SecurityGroup":
		r = &SecurityGroup{}
	case "stackit:index/securityGroupRule:SecurityGroupRule":
		r = &SecurityGroupRule{}
	case "stackit:index/server:Server":
		r = &Server{}
	case "stackit:index/serverBackupSchedule:ServerBackupSchedule":
		r = &ServerBackupSchedule{}
	case "stackit:index/serverNetworkInterfaceAttach:ServerNetworkInterfaceAttach":
		r = &ServerNetworkInterfaceAttach{}
	case "stackit:index/serverServiceAccountAttach:ServerServiceAccountAttach":
		r = &ServerServiceAccountAttach{}
	case "stackit:index/serverUpdateSchedule:ServerUpdateSchedule":
		r = &ServerUpdateSchedule{}
	case "stackit:index/serverVolumeAttach:ServerVolumeAttach":
		r = &ServerVolumeAttach{}
	case "stackit:index/serviceAccount:ServiceAccount":
		r = &ServiceAccount{}
	case "stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken":
		r = &ServiceAccountAccessToken{}
	case "stackit:index/serviceAccountKey:ServiceAccountKey":
		r = &ServiceAccountKey{}
	case "stackit:index/skeCluster:SkeCluster":
		r = &SkeCluster{}
	case "stackit:index/skeKubeconfig:SkeKubeconfig":
		r = &SkeKubeconfig{}
	case "stackit:index/sqlserverflexInstance:SqlserverflexInstance":
		r = &SqlserverflexInstance{}
	case "stackit:index/sqlserverflexUser:SqlserverflexUser":
		r = &SqlserverflexUser{}
	case "stackit:index/volume:Volume":
		r = &Volume{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:stackit" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"stackit",
		"index/affinityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/authorizationOrganizationRoleAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/authorizationProjectRoleAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/cdnCustomDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/cdnDistribution",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/dnsRecordSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/dnsZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/git",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/image",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/keyPair",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/loadbalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/loadbalancerObservabilityCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/logmeCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/logmeInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/mariadbCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/mariadbInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/modelservingToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/mongodbflexInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/mongodbflexUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/networkArea",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/networkAreaRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/networkInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/objectstorageBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/objectstorageCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/objectstorageCredentialsGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/observabilityAlertgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/observabilityCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/observabilityInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/observabilityLogalertgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/observabilityScrapeconfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/opensearchCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/opensearchInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/postgresflexDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/postgresflexInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/postgresflexUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/publicIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/publicIpAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/rabbitmqCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/rabbitmqInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/redisCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/redisInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/resourcemanagerProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/secretsmanagerInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/secretsmanagerUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/securityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/securityGroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serverBackupSchedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serverNetworkInterfaceAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serverServiceAccountAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serverUpdateSchedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serverVolumeAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serviceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serviceAccountAccessToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/serviceAccountKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/skeCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/skeKubeconfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/sqlserverflexInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/sqlserverflexUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"stackit",
		"index/volume",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"stackit",
		&pkg{version},
	)
}
