// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LogMe instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type LogmeInstance struct {
	pulumi.CustomResourceState

	CfGuid             pulumi.StringOutput `pulumi:"cfGuid"`
	CfOrganizationGuid pulumi.StringOutput `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        pulumi.StringOutput `pulumi:"cfSpaceGuid"`
	DashboardUrl       pulumi.StringOutput `pulumi:"dashboardUrl"`
	ImageUrl           pulumi.StringOutput `pulumi:"imageUrl"`
	// ID of the LogMe instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name       pulumi.StringOutput           `pulumi:"name"`
	Parameters LogmeInstanceParametersOutput `pulumi:"parameters"`
	// The selected plan ID.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The selected plan name.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The service version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewLogmeInstance registers a new resource with the given unique name, arguments, and options.
func NewLogmeInstance(ctx *pulumi.Context,
	name string, args *LogmeInstanceArgs, opts ...pulumi.ResourceOption) (*LogmeInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogmeInstance
	err := ctx.RegisterResource("stackit:index/logmeInstance:LogmeInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogmeInstance gets an existing LogmeInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogmeInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogmeInstanceState, opts ...pulumi.ResourceOption) (*LogmeInstance, error) {
	var resource LogmeInstance
	err := ctx.ReadResource("stackit:index/logmeInstance:LogmeInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogmeInstance resources.
type logmeInstanceState struct {
	CfGuid             *string `pulumi:"cfGuid"`
	CfOrganizationGuid *string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        *string `pulumi:"cfSpaceGuid"`
	DashboardUrl       *string `pulumi:"dashboardUrl"`
	ImageUrl           *string `pulumi:"imageUrl"`
	// ID of the LogMe instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name       *string                  `pulumi:"name"`
	Parameters *LogmeInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId *string `pulumi:"planId"`
	// The selected plan name.
	PlanName *string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The service version.
	Version *string `pulumi:"version"`
}

type LogmeInstanceState struct {
	CfGuid             pulumi.StringPtrInput
	CfOrganizationGuid pulumi.StringPtrInput
	CfSpaceGuid        pulumi.StringPtrInput
	DashboardUrl       pulumi.StringPtrInput
	ImageUrl           pulumi.StringPtrInput
	// ID of the LogMe instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters LogmeInstanceParametersPtrInput
	// The selected plan ID.
	PlanId pulumi.StringPtrInput
	// The selected plan name.
	PlanName pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The service version.
	Version pulumi.StringPtrInput
}

func (LogmeInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*logmeInstanceState)(nil)).Elem()
}

type logmeInstanceArgs struct {
	// Instance name.
	Name       *string                  `pulumi:"name"`
	Parameters *LogmeInstanceParameters `pulumi:"parameters"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a LogmeInstance resource.
type LogmeInstanceArgs struct {
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters LogmeInstanceParametersPtrInput
	// The selected plan name.
	PlanName pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The service version.
	Version pulumi.StringInput
}

func (LogmeInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logmeInstanceArgs)(nil)).Elem()
}

type LogmeInstanceInput interface {
	pulumi.Input

	ToLogmeInstanceOutput() LogmeInstanceOutput
	ToLogmeInstanceOutputWithContext(ctx context.Context) LogmeInstanceOutput
}

func (*LogmeInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**LogmeInstance)(nil)).Elem()
}

func (i *LogmeInstance) ToLogmeInstanceOutput() LogmeInstanceOutput {
	return i.ToLogmeInstanceOutputWithContext(context.Background())
}

func (i *LogmeInstance) ToLogmeInstanceOutputWithContext(ctx context.Context) LogmeInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceOutput)
}

// LogmeInstanceArrayInput is an input type that accepts LogmeInstanceArray and LogmeInstanceArrayOutput values.
// You can construct a concrete instance of `LogmeInstanceArrayInput` via:
//
//	LogmeInstanceArray{ LogmeInstanceArgs{...} }
type LogmeInstanceArrayInput interface {
	pulumi.Input

	ToLogmeInstanceArrayOutput() LogmeInstanceArrayOutput
	ToLogmeInstanceArrayOutputWithContext(context.Context) LogmeInstanceArrayOutput
}

type LogmeInstanceArray []LogmeInstanceInput

func (LogmeInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogmeInstance)(nil)).Elem()
}

func (i LogmeInstanceArray) ToLogmeInstanceArrayOutput() LogmeInstanceArrayOutput {
	return i.ToLogmeInstanceArrayOutputWithContext(context.Background())
}

func (i LogmeInstanceArray) ToLogmeInstanceArrayOutputWithContext(ctx context.Context) LogmeInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceArrayOutput)
}

// LogmeInstanceMapInput is an input type that accepts LogmeInstanceMap and LogmeInstanceMapOutput values.
// You can construct a concrete instance of `LogmeInstanceMapInput` via:
//
//	LogmeInstanceMap{ "key": LogmeInstanceArgs{...} }
type LogmeInstanceMapInput interface {
	pulumi.Input

	ToLogmeInstanceMapOutput() LogmeInstanceMapOutput
	ToLogmeInstanceMapOutputWithContext(context.Context) LogmeInstanceMapOutput
}

type LogmeInstanceMap map[string]LogmeInstanceInput

func (LogmeInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogmeInstance)(nil)).Elem()
}

func (i LogmeInstanceMap) ToLogmeInstanceMapOutput() LogmeInstanceMapOutput {
	return i.ToLogmeInstanceMapOutputWithContext(context.Background())
}

func (i LogmeInstanceMap) ToLogmeInstanceMapOutputWithContext(ctx context.Context) LogmeInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogmeInstanceMapOutput)
}

type LogmeInstanceOutput struct{ *pulumi.OutputState }

func (LogmeInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogmeInstance)(nil)).Elem()
}

func (o LogmeInstanceOutput) ToLogmeInstanceOutput() LogmeInstanceOutput {
	return o
}

func (o LogmeInstanceOutput) ToLogmeInstanceOutputWithContext(ctx context.Context) LogmeInstanceOutput {
	return o
}

func (o LogmeInstanceOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.CfGuid }).(pulumi.StringOutput)
}

func (o LogmeInstanceOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o LogmeInstanceOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o LogmeInstanceOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o LogmeInstanceOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the LogMe instance.
func (o LogmeInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o LogmeInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LogmeInstanceOutput) Parameters() LogmeInstanceParametersOutput {
	return o.ApplyT(func(v *LogmeInstance) LogmeInstanceParametersOutput { return v.Parameters }).(LogmeInstanceParametersOutput)
}

// The selected plan ID.
func (o LogmeInstanceOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o LogmeInstanceOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LogmeInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o LogmeInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *LogmeInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type LogmeInstanceArrayOutput struct{ *pulumi.OutputState }

func (LogmeInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogmeInstance)(nil)).Elem()
}

func (o LogmeInstanceArrayOutput) ToLogmeInstanceArrayOutput() LogmeInstanceArrayOutput {
	return o
}

func (o LogmeInstanceArrayOutput) ToLogmeInstanceArrayOutputWithContext(ctx context.Context) LogmeInstanceArrayOutput {
	return o
}

func (o LogmeInstanceArrayOutput) Index(i pulumi.IntInput) LogmeInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogmeInstance {
		return vs[0].([]*LogmeInstance)[vs[1].(int)]
	}).(LogmeInstanceOutput)
}

type LogmeInstanceMapOutput struct{ *pulumi.OutputState }

func (LogmeInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogmeInstance)(nil)).Elem()
}

func (o LogmeInstanceMapOutput) ToLogmeInstanceMapOutput() LogmeInstanceMapOutput {
	return o
}

func (o LogmeInstanceMapOutput) ToLogmeInstanceMapOutputWithContext(ctx context.Context) LogmeInstanceMapOutput {
	return o
}

func (o LogmeInstanceMapOutput) MapIndex(k pulumi.StringInput) LogmeInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogmeInstance {
		return vs[0].(map[string]*LogmeInstance)[vs[1].(string)]
	}).(LogmeInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogmeInstanceInput)(nil)).Elem(), &LogmeInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogmeInstanceArrayInput)(nil)).Elem(), LogmeInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogmeInstanceMapInput)(nil)).Elem(), LogmeInstanceMap{})
	pulumi.RegisterOutputType(LogmeInstanceOutput{})
	pulumi.RegisterOutputType(LogmeInstanceArrayOutput{})
	pulumi.RegisterOutputType(LogmeInstanceMapOutput{})
}
