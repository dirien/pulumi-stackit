// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Security group rule resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type SecurityGroupRule struct {
	pulumi.CustomResourceState

	// The rule description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// The ethertype which the rule should match.
	EtherType pulumi.StringOutput `pulumi:"etherType"`
	// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
	IcmpParameters SecurityGroupRuleIcmpParametersOutput `pulumi:"icmpParameters"`
	// The remote IP range which the rule should match.
	IpRange pulumi.StringPtrOutput `pulumi:"ipRange"`
	// The range of ports. This should only be provided if the protocol is not ICMP.
	PortRange SecurityGroupRulePortRangeOutput `pulumi:"portRange"`
	// STACKIT project ID to which the security group rule is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The internet protocol which the rule should match.
	Protocol SecurityGroupRuleProtocolOutput `pulumi:"protocol"`
	// The remote security group which the rule should match.
	RemoteSecurityGroupId pulumi.StringPtrOutput `pulumi:"remoteSecurityGroupId"`
	// The security group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The security group rule ID.
	SecurityGroupRuleId pulumi.StringOutput `pulumi:"securityGroupRuleId"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupRule
	err := ctx.RegisterResource("stackit:index/securityGroupRule:SecurityGroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupRule, error) {
	var resource SecurityGroupRule
	err := ctx.ReadResource("stackit:index/securityGroupRule:SecurityGroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupRule resources.
type securityGroupRuleState struct {
	// The rule description.
	Description *string `pulumi:"description"`
	// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
	Direction *string `pulumi:"direction"`
	// The ethertype which the rule should match.
	EtherType *string `pulumi:"etherType"`
	// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
	IcmpParameters *SecurityGroupRuleIcmpParameters `pulumi:"icmpParameters"`
	// The remote IP range which the rule should match.
	IpRange *string `pulumi:"ipRange"`
	// The range of ports. This should only be provided if the protocol is not ICMP.
	PortRange *SecurityGroupRulePortRange `pulumi:"portRange"`
	// STACKIT project ID to which the security group rule is associated.
	ProjectId *string `pulumi:"projectId"`
	// The internet protocol which the rule should match.
	Protocol *SecurityGroupRuleProtocol `pulumi:"protocol"`
	// The remote security group which the rule should match.
	RemoteSecurityGroupId *string `pulumi:"remoteSecurityGroupId"`
	// The security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The security group rule ID.
	SecurityGroupRuleId *string `pulumi:"securityGroupRuleId"`
}

type SecurityGroupRuleState struct {
	// The rule description.
	Description pulumi.StringPtrInput
	// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
	Direction pulumi.StringPtrInput
	// The ethertype which the rule should match.
	EtherType pulumi.StringPtrInput
	// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
	IcmpParameters SecurityGroupRuleIcmpParametersPtrInput
	// The remote IP range which the rule should match.
	IpRange pulumi.StringPtrInput
	// The range of ports. This should only be provided if the protocol is not ICMP.
	PortRange SecurityGroupRulePortRangePtrInput
	// STACKIT project ID to which the security group rule is associated.
	ProjectId pulumi.StringPtrInput
	// The internet protocol which the rule should match.
	Protocol SecurityGroupRuleProtocolPtrInput
	// The remote security group which the rule should match.
	RemoteSecurityGroupId pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// The security group rule ID.
	SecurityGroupRuleId pulumi.StringPtrInput
}

func (SecurityGroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleState)(nil)).Elem()
}

type securityGroupRuleArgs struct {
	// The rule description.
	Description *string `pulumi:"description"`
	// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
	Direction string `pulumi:"direction"`
	// The ethertype which the rule should match.
	EtherType *string `pulumi:"etherType"`
	// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
	IcmpParameters *SecurityGroupRuleIcmpParameters `pulumi:"icmpParameters"`
	// The remote IP range which the rule should match.
	IpRange *string `pulumi:"ipRange"`
	// The range of ports. This should only be provided if the protocol is not ICMP.
	PortRange *SecurityGroupRulePortRange `pulumi:"portRange"`
	// STACKIT project ID to which the security group rule is associated.
	ProjectId string `pulumi:"projectId"`
	// The internet protocol which the rule should match.
	Protocol *SecurityGroupRuleProtocol `pulumi:"protocol"`
	// The remote security group which the rule should match.
	RemoteSecurityGroupId *string `pulumi:"remoteSecurityGroupId"`
	// The security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// The rule description.
	Description pulumi.StringPtrInput
	// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
	Direction pulumi.StringInput
	// The ethertype which the rule should match.
	EtherType pulumi.StringPtrInput
	// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
	IcmpParameters SecurityGroupRuleIcmpParametersPtrInput
	// The remote IP range which the rule should match.
	IpRange pulumi.StringPtrInput
	// The range of ports. This should only be provided if the protocol is not ICMP.
	PortRange SecurityGroupRulePortRangePtrInput
	// STACKIT project ID to which the security group rule is associated.
	ProjectId pulumi.StringInput
	// The internet protocol which the rule should match.
	Protocol SecurityGroupRuleProtocolPtrInput
	// The remote security group which the rule should match.
	RemoteSecurityGroupId pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringInput
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupRuleArgs)(nil)).Elem()
}

type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput
}

func (*SecurityGroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i *SecurityGroupRule) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

// SecurityGroupRuleArrayInput is an input type that accepts SecurityGroupRuleArray and SecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRuleArrayInput` via:
//
//	SecurityGroupRuleArray{ SecurityGroupRuleArgs{...} }
type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

// SecurityGroupRuleMapInput is an input type that accepts SecurityGroupRuleMap and SecurityGroupRuleMapOutput values.
// You can construct a concrete instance of `SecurityGroupRuleMapInput` via:
//
//	SecurityGroupRuleMap{ "key": SecurityGroupRuleArgs{...} }
type SecurityGroupRuleMapInput interface {
	pulumi.Input

	ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput
	ToSecurityGroupRuleMapOutputWithContext(context.Context) SecurityGroupRuleMapOutput
}

type SecurityGroupRuleMap map[string]SecurityGroupRuleInput

func (SecurityGroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return i.ToSecurityGroupRuleMapOutputWithContext(context.Background())
}

func (i SecurityGroupRuleMap) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleMapOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

// The rule description.
func (o SecurityGroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
func (o SecurityGroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// The ethertype which the rule should match.
func (o SecurityGroupRuleOutput) EtherType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.EtherType }).(pulumi.StringOutput)
}

// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
func (o SecurityGroupRuleOutput) IcmpParameters() SecurityGroupRuleIcmpParametersOutput {
	return o.ApplyT(func(v *SecurityGroupRule) SecurityGroupRuleIcmpParametersOutput { return v.IcmpParameters }).(SecurityGroupRuleIcmpParametersOutput)
}

// The remote IP range which the rule should match.
func (o SecurityGroupRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The range of ports. This should only be provided if the protocol is not ICMP.
func (o SecurityGroupRuleOutput) PortRange() SecurityGroupRulePortRangeOutput {
	return o.ApplyT(func(v *SecurityGroupRule) SecurityGroupRulePortRangeOutput { return v.PortRange }).(SecurityGroupRulePortRangeOutput)
}

// STACKIT project ID to which the security group rule is associated.
func (o SecurityGroupRuleOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The internet protocol which the rule should match.
func (o SecurityGroupRuleOutput) Protocol() SecurityGroupRuleProtocolOutput {
	return o.ApplyT(func(v *SecurityGroupRule) SecurityGroupRuleProtocolOutput { return v.Protocol }).(SecurityGroupRuleProtocolOutput)
}

// The remote security group which the rule should match.
func (o SecurityGroupRuleOutput) RemoteSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringPtrOutput { return v.RemoteSecurityGroupId }).(pulumi.StringPtrOutput)
}

// The security group ID.
func (o SecurityGroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The security group rule ID.
func (o SecurityGroupRuleOutput) SecurityGroupRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupRule) pulumi.StringOutput { return v.SecurityGroupRuleId }).(pulumi.StringOutput)
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].([]*SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type SecurityGroupRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutput() SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) ToSecurityGroupRuleMapOutputWithContext(ctx context.Context) SecurityGroupRuleMapOutput {
	return o
}

func (o SecurityGroupRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroupRule {
		return vs[0].(map[string]*SecurityGroupRule)[vs[1].(string)]
	}).(SecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleInput)(nil)).Elem(), &SecurityGroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleArrayInput)(nil)).Elem(), SecurityGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRuleMapInput)(nil)).Elem(), SecurityGroupRuleMap{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleMapOutput{})
}
