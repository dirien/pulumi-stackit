// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Volume attachment resource schema. Attaches a volume to a server. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type ServerVolumeAttach struct {
	pulumi.CustomResourceState

	// STACKIT project ID to which the volume attachment is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server ID.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The volume ID.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewServerVolumeAttach registers a new resource with the given unique name, arguments, and options.
func NewServerVolumeAttach(ctx *pulumi.Context,
	name string, args *ServerVolumeAttachArgs, opts ...pulumi.ResourceOption) (*ServerVolumeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerVolumeAttach
	err := ctx.RegisterResource("stackit:index/serverVolumeAttach:ServerVolumeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerVolumeAttach gets an existing ServerVolumeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVolumeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerVolumeAttachState, opts ...pulumi.ResourceOption) (*ServerVolumeAttach, error) {
	var resource ServerVolumeAttach
	err := ctx.ReadResource("stackit:index/serverVolumeAttach:ServerVolumeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerVolumeAttach resources.
type serverVolumeAttachState struct {
	// STACKIT project ID to which the volume attachment is associated.
	ProjectId *string `pulumi:"projectId"`
	// The server ID.
	ServerId *string `pulumi:"serverId"`
	// The volume ID.
	VolumeId *string `pulumi:"volumeId"`
}

type ServerVolumeAttachState struct {
	// STACKIT project ID to which the volume attachment is associated.
	ProjectId pulumi.StringPtrInput
	// The server ID.
	ServerId pulumi.StringPtrInput
	// The volume ID.
	VolumeId pulumi.StringPtrInput
}

func (ServerVolumeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVolumeAttachState)(nil)).Elem()
}

type serverVolumeAttachArgs struct {
	// STACKIT project ID to which the volume attachment is associated.
	ProjectId string `pulumi:"projectId"`
	// The server ID.
	ServerId string `pulumi:"serverId"`
	// The volume ID.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a ServerVolumeAttach resource.
type ServerVolumeAttachArgs struct {
	// STACKIT project ID to which the volume attachment is associated.
	ProjectId pulumi.StringInput
	// The server ID.
	ServerId pulumi.StringInput
	// The volume ID.
	VolumeId pulumi.StringInput
}

func (ServerVolumeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVolumeAttachArgs)(nil)).Elem()
}

type ServerVolumeAttachInput interface {
	pulumi.Input

	ToServerVolumeAttachOutput() ServerVolumeAttachOutput
	ToServerVolumeAttachOutputWithContext(ctx context.Context) ServerVolumeAttachOutput
}

func (*ServerVolumeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVolumeAttach)(nil)).Elem()
}

func (i *ServerVolumeAttach) ToServerVolumeAttachOutput() ServerVolumeAttachOutput {
	return i.ToServerVolumeAttachOutputWithContext(context.Background())
}

func (i *ServerVolumeAttach) ToServerVolumeAttachOutputWithContext(ctx context.Context) ServerVolumeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeAttachOutput)
}

// ServerVolumeAttachArrayInput is an input type that accepts ServerVolumeAttachArray and ServerVolumeAttachArrayOutput values.
// You can construct a concrete instance of `ServerVolumeAttachArrayInput` via:
//
//	ServerVolumeAttachArray{ ServerVolumeAttachArgs{...} }
type ServerVolumeAttachArrayInput interface {
	pulumi.Input

	ToServerVolumeAttachArrayOutput() ServerVolumeAttachArrayOutput
	ToServerVolumeAttachArrayOutputWithContext(context.Context) ServerVolumeAttachArrayOutput
}

type ServerVolumeAttachArray []ServerVolumeAttachInput

func (ServerVolumeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerVolumeAttach)(nil)).Elem()
}

func (i ServerVolumeAttachArray) ToServerVolumeAttachArrayOutput() ServerVolumeAttachArrayOutput {
	return i.ToServerVolumeAttachArrayOutputWithContext(context.Background())
}

func (i ServerVolumeAttachArray) ToServerVolumeAttachArrayOutputWithContext(ctx context.Context) ServerVolumeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeAttachArrayOutput)
}

// ServerVolumeAttachMapInput is an input type that accepts ServerVolumeAttachMap and ServerVolumeAttachMapOutput values.
// You can construct a concrete instance of `ServerVolumeAttachMapInput` via:
//
//	ServerVolumeAttachMap{ "key": ServerVolumeAttachArgs{...} }
type ServerVolumeAttachMapInput interface {
	pulumi.Input

	ToServerVolumeAttachMapOutput() ServerVolumeAttachMapOutput
	ToServerVolumeAttachMapOutputWithContext(context.Context) ServerVolumeAttachMapOutput
}

type ServerVolumeAttachMap map[string]ServerVolumeAttachInput

func (ServerVolumeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerVolumeAttach)(nil)).Elem()
}

func (i ServerVolumeAttachMap) ToServerVolumeAttachMapOutput() ServerVolumeAttachMapOutput {
	return i.ToServerVolumeAttachMapOutputWithContext(context.Background())
}

func (i ServerVolumeAttachMap) ToServerVolumeAttachMapOutputWithContext(ctx context.Context) ServerVolumeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeAttachMapOutput)
}

type ServerVolumeAttachOutput struct{ *pulumi.OutputState }

func (ServerVolumeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVolumeAttach)(nil)).Elem()
}

func (o ServerVolumeAttachOutput) ToServerVolumeAttachOutput() ServerVolumeAttachOutput {
	return o
}

func (o ServerVolumeAttachOutput) ToServerVolumeAttachOutputWithContext(ctx context.Context) ServerVolumeAttachOutput {
	return o
}

// STACKIT project ID to which the volume attachment is associated.
func (o ServerVolumeAttachOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerVolumeAttach) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The server ID.
func (o ServerVolumeAttachOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerVolumeAttach) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The volume ID.
func (o ServerVolumeAttachOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerVolumeAttach) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type ServerVolumeAttachArrayOutput struct{ *pulumi.OutputState }

func (ServerVolumeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerVolumeAttach)(nil)).Elem()
}

func (o ServerVolumeAttachArrayOutput) ToServerVolumeAttachArrayOutput() ServerVolumeAttachArrayOutput {
	return o
}

func (o ServerVolumeAttachArrayOutput) ToServerVolumeAttachArrayOutputWithContext(ctx context.Context) ServerVolumeAttachArrayOutput {
	return o
}

func (o ServerVolumeAttachArrayOutput) Index(i pulumi.IntInput) ServerVolumeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerVolumeAttach {
		return vs[0].([]*ServerVolumeAttach)[vs[1].(int)]
	}).(ServerVolumeAttachOutput)
}

type ServerVolumeAttachMapOutput struct{ *pulumi.OutputState }

func (ServerVolumeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerVolumeAttach)(nil)).Elem()
}

func (o ServerVolumeAttachMapOutput) ToServerVolumeAttachMapOutput() ServerVolumeAttachMapOutput {
	return o
}

func (o ServerVolumeAttachMapOutput) ToServerVolumeAttachMapOutputWithContext(ctx context.Context) ServerVolumeAttachMapOutput {
	return o
}

func (o ServerVolumeAttachMapOutput) MapIndex(k pulumi.StringInput) ServerVolumeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerVolumeAttach {
		return vs[0].(map[string]*ServerVolumeAttach)[vs[1].(string)]
	}).(ServerVolumeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeAttachInput)(nil)).Elem(), &ServerVolumeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeAttachArrayInput)(nil)).Elem(), ServerVolumeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeAttachMapInput)(nil)).Elem(), ServerVolumeAttachMap{})
	pulumi.RegisterOutputType(ServerVolumeAttachOutput{})
	pulumi.RegisterOutputType(ServerVolumeAttachArrayOutput{})
	pulumi.RegisterOutputType(ServerVolumeAttachMapOutput{})
}
