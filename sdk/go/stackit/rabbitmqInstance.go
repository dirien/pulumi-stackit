// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitMQ instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type RabbitmqInstance struct {
	pulumi.CustomResourceState

	CfGuid             pulumi.StringOutput `pulumi:"cfGuid"`
	CfOrganizationGuid pulumi.StringOutput `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        pulumi.StringOutput `pulumi:"cfSpaceGuid"`
	DashboardUrl       pulumi.StringOutput `pulumi:"dashboardUrl"`
	ImageUrl           pulumi.StringOutput `pulumi:"imageUrl"`
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name       pulumi.StringOutput              `pulumi:"name"`
	Parameters RabbitmqInstanceParametersOutput `pulumi:"parameters"`
	// The selected plan ID.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The selected plan name.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The service version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRabbitmqInstance registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqInstance(ctx *pulumi.Context,
	name string, args *RabbitmqInstanceArgs, opts ...pulumi.ResourceOption) (*RabbitmqInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RabbitmqInstance
	err := ctx.RegisterResource("stackit:index/rabbitmqInstance:RabbitmqInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqInstance gets an existing RabbitmqInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqInstanceState, opts ...pulumi.ResourceOption) (*RabbitmqInstance, error) {
	var resource RabbitmqInstance
	err := ctx.ReadResource("stackit:index/rabbitmqInstance:RabbitmqInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqInstance resources.
type rabbitmqInstanceState struct {
	CfGuid             *string `pulumi:"cfGuid"`
	CfOrganizationGuid *string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        *string `pulumi:"cfSpaceGuid"`
	DashboardUrl       *string `pulumi:"dashboardUrl"`
	ImageUrl           *string `pulumi:"imageUrl"`
	// ID of the RabbitMQ instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name       *string                     `pulumi:"name"`
	Parameters *RabbitmqInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId *string `pulumi:"planId"`
	// The selected plan name.
	PlanName *string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The service version.
	Version *string `pulumi:"version"`
}

type RabbitmqInstanceState struct {
	CfGuid             pulumi.StringPtrInput
	CfOrganizationGuid pulumi.StringPtrInput
	CfSpaceGuid        pulumi.StringPtrInput
	DashboardUrl       pulumi.StringPtrInput
	ImageUrl           pulumi.StringPtrInput
	// ID of the RabbitMQ instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters RabbitmqInstanceParametersPtrInput
	// The selected plan ID.
	PlanId pulumi.StringPtrInput
	// The selected plan name.
	PlanName pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The service version.
	Version pulumi.StringPtrInput
}

func (RabbitmqInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqInstanceState)(nil)).Elem()
}

type rabbitmqInstanceArgs struct {
	// Instance name.
	Name       *string                     `pulumi:"name"`
	Parameters *RabbitmqInstanceParameters `pulumi:"parameters"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a RabbitmqInstance resource.
type RabbitmqInstanceArgs struct {
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters RabbitmqInstanceParametersPtrInput
	// The selected plan name.
	PlanName pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The service version.
	Version pulumi.StringInput
}

func (RabbitmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqInstanceArgs)(nil)).Elem()
}

type RabbitmqInstanceInput interface {
	pulumi.Input

	ToRabbitmqInstanceOutput() RabbitmqInstanceOutput
	ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput
}

func (*RabbitmqInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstance)(nil)).Elem()
}

func (i *RabbitmqInstance) ToRabbitmqInstanceOutput() RabbitmqInstanceOutput {
	return i.ToRabbitmqInstanceOutputWithContext(context.Background())
}

func (i *RabbitmqInstance) ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceOutput)
}

// RabbitmqInstanceArrayInput is an input type that accepts RabbitmqInstanceArray and RabbitmqInstanceArrayOutput values.
// You can construct a concrete instance of `RabbitmqInstanceArrayInput` via:
//
//	RabbitmqInstanceArray{ RabbitmqInstanceArgs{...} }
type RabbitmqInstanceArrayInput interface {
	pulumi.Input

	ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput
	ToRabbitmqInstanceArrayOutputWithContext(context.Context) RabbitmqInstanceArrayOutput
}

type RabbitmqInstanceArray []RabbitmqInstanceInput

func (RabbitmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqInstance)(nil)).Elem()
}

func (i RabbitmqInstanceArray) ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput {
	return i.ToRabbitmqInstanceArrayOutputWithContext(context.Background())
}

func (i RabbitmqInstanceArray) ToRabbitmqInstanceArrayOutputWithContext(ctx context.Context) RabbitmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceArrayOutput)
}

// RabbitmqInstanceMapInput is an input type that accepts RabbitmqInstanceMap and RabbitmqInstanceMapOutput values.
// You can construct a concrete instance of `RabbitmqInstanceMapInput` via:
//
//	RabbitmqInstanceMap{ "key": RabbitmqInstanceArgs{...} }
type RabbitmqInstanceMapInput interface {
	pulumi.Input

	ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput
	ToRabbitmqInstanceMapOutputWithContext(context.Context) RabbitmqInstanceMapOutput
}

type RabbitmqInstanceMap map[string]RabbitmqInstanceInput

func (RabbitmqInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqInstance)(nil)).Elem()
}

func (i RabbitmqInstanceMap) ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput {
	return i.ToRabbitmqInstanceMapOutputWithContext(context.Background())
}

func (i RabbitmqInstanceMap) ToRabbitmqInstanceMapOutputWithContext(ctx context.Context) RabbitmqInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceMapOutput)
}

type RabbitmqInstanceOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceOutput) ToRabbitmqInstanceOutput() RabbitmqInstanceOutput {
	return o
}

func (o RabbitmqInstanceOutput) ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput {
	return o
}

func (o RabbitmqInstanceOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.CfGuid }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the RabbitMQ instance.
func (o RabbitmqInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o RabbitmqInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) Parameters() RabbitmqInstanceParametersOutput {
	return o.ApplyT(func(v *RabbitmqInstance) RabbitmqInstanceParametersOutput { return v.Parameters }).(RabbitmqInstanceParametersOutput)
}

// The selected plan ID.
func (o RabbitmqInstanceOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o RabbitmqInstanceOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o RabbitmqInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o RabbitmqInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type RabbitmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceArrayOutput) ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput {
	return o
}

func (o RabbitmqInstanceArrayOutput) ToRabbitmqInstanceArrayOutputWithContext(ctx context.Context) RabbitmqInstanceArrayOutput {
	return o
}

func (o RabbitmqInstanceArrayOutput) Index(i pulumi.IntInput) RabbitmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqInstance {
		return vs[0].([]*RabbitmqInstance)[vs[1].(int)]
	}).(RabbitmqInstanceOutput)
}

type RabbitmqInstanceMapOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceMapOutput) ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput {
	return o
}

func (o RabbitmqInstanceMapOutput) ToRabbitmqInstanceMapOutputWithContext(ctx context.Context) RabbitmqInstanceMapOutput {
	return o
}

func (o RabbitmqInstanceMapOutput) MapIndex(k pulumi.StringInput) RabbitmqInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqInstance {
		return vs[0].(map[string]*RabbitmqInstance)[vs[1].(string)]
	}).(RabbitmqInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceInput)(nil)).Elem(), &RabbitmqInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceArrayInput)(nil)).Elem(), RabbitmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceMapInput)(nil)).Elem(), RabbitmqInstanceMap{})
	pulumi.RegisterOutputType(RabbitmqInstanceOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceMapOutput{})
}
