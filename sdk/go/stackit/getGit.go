// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Git Instance datasource schema.
//
// > This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
//
// ## Example Usage
func LookupGit(ctx *pulumi.Context, args *LookupGitArgs, opts ...pulumi.InvokeOption) (*LookupGitResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitResult
	err := ctx.Invoke("stackit:index/getGit:getGit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGit.
type LookupGitArgs struct {
	// ID linked to the git instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getGit.
type LookupGitResult struct {
	// Restricted ACL for instance access.
	Acls []string `pulumi:"acls"`
	// How many bytes of disk space is consumed.
	ConsumedDisk string `pulumi:"consumedDisk"`
	// How many bytes of Object Storage is consumed.
	ConsumedObjectStorage string `pulumi:"consumedObjectStorage"`
	// Instance creation timestamp in RFC3339 format.
	Created string `pulumi:"created"`
	// Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`
	Flavor string `pulumi:"flavor"`
	Id     string `pulumi:"id"`
	// ID linked to the git instance.
	InstanceId string `pulumi:"instanceId"`
	// Unique name linked to the git instance.
	Name string `pulumi:"name"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId string `pulumi:"projectId"`
	// Url linked to the git instance.
	Url string `pulumi:"url"`
	// Version linked to the git instance.
	Version string `pulumi:"version"`
}

func LookupGitOutput(ctx *pulumi.Context, args LookupGitOutputArgs, opts ...pulumi.InvokeOption) LookupGitResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitResultOutput, error) {
			args := v.(LookupGitArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getGit:getGit", args, LookupGitResultOutput{}, options).(LookupGitResultOutput), nil
		}).(LookupGitResultOutput)
}

// A collection of arguments for invoking getGit.
type LookupGitOutputArgs struct {
	// ID linked to the git instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the git instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupGitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitArgs)(nil)).Elem()
}

// A collection of values returned by getGit.
type LookupGitResultOutput struct{ *pulumi.OutputState }

func (LookupGitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitResult)(nil)).Elem()
}

func (o LookupGitResultOutput) ToLookupGitResultOutput() LookupGitResultOutput {
	return o
}

func (o LookupGitResultOutput) ToLookupGitResultOutputWithContext(ctx context.Context) LookupGitResultOutput {
	return o
}

// Restricted ACL for instance access.
func (o LookupGitResultOutput) Acls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitResult) []string { return v.Acls }).(pulumi.StringArrayOutput)
}

// How many bytes of disk space is consumed.
func (o LookupGitResultOutput) ConsumedDisk() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.ConsumedDisk }).(pulumi.StringOutput)
}

// How many bytes of Object Storage is consumed.
func (o LookupGitResultOutput) ConsumedObjectStorage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.ConsumedObjectStorage }).(pulumi.StringOutput)
}

// Instance creation timestamp in RFC3339 format.
func (o LookupGitResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Created }).(pulumi.StringOutput)
}

// Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`
func (o LookupGitResultOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Flavor }).(pulumi.StringOutput)
}

func (o LookupGitResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID linked to the git instance.
func (o LookupGitResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Unique name linked to the git instance.
func (o LookupGitResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Name }).(pulumi.StringOutput)
}

// STACKIT project ID to which the git instance is associated.
func (o LookupGitResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Url linked to the git instance.
func (o LookupGitResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Url }).(pulumi.StringOutput)
}

// Version linked to the git instance.
func (o LookupGitResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitResultOutput{})
}
