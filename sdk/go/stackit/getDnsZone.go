// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS Zone resource schema.
//
// ## Example Usage
func LookupDnsZone(ctx *pulumi.Context, args *LookupDnsZoneArgs, opts ...pulumi.InvokeOption) (*LookupDnsZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsZoneResult
	err := ctx.Invoke("stackit:index/getDnsZone:getDnsZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsZone.
type LookupDnsZoneArgs struct {
	// The zone name. E.g. `example.com`
	DnsName *string `pulumi:"dnsName"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId string `pulumi:"projectId"`
	// The zone ID.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getDnsZone.
type LookupDnsZoneResult struct {
	// The access control list.
	Acl    string `pulumi:"acl"`
	Active bool   `pulumi:"active"`
	// A contact e-mail for the zone.
	ContactEmail string `pulumi:"contactEmail"`
	// Default time to live.
	DefaultTtl int `pulumi:"defaultTtl"`
	// Description of the zone.
	Description string `pulumi:"description"`
	// The zone name. E.g. `example.com`
	DnsName *string `pulumi:"dnsName"`
	// Expire time.
	ExpireTime int    `pulumi:"expireTime"`
	Id         string `pulumi:"id"`
	// Specifies, if the zone is a reverse zone or not.
	IsReverseZone bool `pulumi:"isReverseZone"`
	// The user given name of the zone.
	Name string `pulumi:"name"`
	// Negative caching.
	NegativeCache int `pulumi:"negativeCache"`
	// Primary name server for secondary zone.
	Primaries []string `pulumi:"primaries"`
	// Primary name server. FQDN.
	PrimaryNameServer string `pulumi:"primaryNameServer"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId string `pulumi:"projectId"`
	// Record count how many records are in the zone.
	RecordCount int `pulumi:"recordCount"`
	// Refresh time.
	RefreshTime int `pulumi:"refreshTime"`
	// Retry time.
	RetryTime int `pulumi:"retryTime"`
	// Serial number.
	SerialNumber int `pulumi:"serialNumber"`
	// Zone state.
	State string `pulumi:"state"`
	// Zone type.
	Type string `pulumi:"type"`
	// Visibility of the zone.
	Visibility string `pulumi:"visibility"`
	// The zone ID.
	ZoneId *string `pulumi:"zoneId"`
}

func LookupDnsZoneOutput(ctx *pulumi.Context, args LookupDnsZoneOutputArgs, opts ...pulumi.InvokeOption) LookupDnsZoneResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsZoneResultOutput, error) {
			args := v.(LookupDnsZoneArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getDnsZone:getDnsZone", args, LookupDnsZoneResultOutput{}, options).(LookupDnsZoneResultOutput), nil
		}).(LookupDnsZoneResultOutput)
}

// A collection of arguments for invoking getDnsZone.
type LookupDnsZoneOutputArgs struct {
	// The zone name. E.g. `example.com`
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// STACKIT project ID to which the dns zone is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The zone ID.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (LookupDnsZoneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneArgs)(nil)).Elem()
}

// A collection of values returned by getDnsZone.
type LookupDnsZoneResultOutput struct{ *pulumi.OutputState }

func (LookupDnsZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneResult)(nil)).Elem()
}

func (o LookupDnsZoneResultOutput) ToLookupDnsZoneResultOutput() LookupDnsZoneResultOutput {
	return o
}

func (o LookupDnsZoneResultOutput) ToLookupDnsZoneResultOutputWithContext(ctx context.Context) LookupDnsZoneResultOutput {
	return o
}

// The access control list.
func (o LookupDnsZoneResultOutput) Acl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Acl }).(pulumi.StringOutput)
}

func (o LookupDnsZoneResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// A contact e-mail for the zone.
func (o LookupDnsZoneResultOutput) ContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.ContactEmail }).(pulumi.StringOutput)
}

// Default time to live.
func (o LookupDnsZoneResultOutput) DefaultTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.DefaultTtl }).(pulumi.IntOutput)
}

// Description of the zone.
func (o LookupDnsZoneResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Description }).(pulumi.StringOutput)
}

// The zone name. E.g. `example.com`
func (o LookupDnsZoneResultOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Expire time.
func (o LookupDnsZoneResultOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.ExpireTime }).(pulumi.IntOutput)
}

func (o LookupDnsZoneResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies, if the zone is a reverse zone or not.
func (o LookupDnsZoneResultOutput) IsReverseZone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) bool { return v.IsReverseZone }).(pulumi.BoolOutput)
}

// The user given name of the zone.
func (o LookupDnsZoneResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Name }).(pulumi.StringOutput)
}

// Negative caching.
func (o LookupDnsZoneResultOutput) NegativeCache() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.NegativeCache }).(pulumi.IntOutput)
}

// Primary name server for secondary zone.
func (o LookupDnsZoneResultOutput) Primaries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) []string { return v.Primaries }).(pulumi.StringArrayOutput)
}

// Primary name server. FQDN.
func (o LookupDnsZoneResultOutput) PrimaryNameServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.PrimaryNameServer }).(pulumi.StringOutput)
}

// STACKIT project ID to which the dns zone is associated.
func (o LookupDnsZoneResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Record count how many records are in the zone.
func (o LookupDnsZoneResultOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.RecordCount }).(pulumi.IntOutput)
}

// Refresh time.
func (o LookupDnsZoneResultOutput) RefreshTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.RefreshTime }).(pulumi.IntOutput)
}

// Retry time.
func (o LookupDnsZoneResultOutput) RetryTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.RetryTime }).(pulumi.IntOutput)
}

// Serial number.
func (o LookupDnsZoneResultOutput) SerialNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) int { return v.SerialNumber }).(pulumi.IntOutput)
}

// Zone state.
func (o LookupDnsZoneResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.State }).(pulumi.StringOutput)
}

// Zone type.
func (o LookupDnsZoneResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Type }).(pulumi.StringOutput)
}

// Visibility of the zone.
func (o LookupDnsZoneResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) string { return v.Visibility }).(pulumi.StringOutput)
}

// The zone ID.
func (o LookupDnsZoneResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsZoneResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsZoneResultOutput{})
}
