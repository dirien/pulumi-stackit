// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SQLServer Flex user data source schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
func LookupSqlserverflexUser(ctx *pulumi.Context, args *LookupSqlserverflexUserArgs, opts ...pulumi.InvokeOption) (*LookupSqlserverflexUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSqlserverflexUserResult
	err := ctx.Invoke("stackit:index/getSqlserverflexUser:getSqlserverflexUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlserverflexUser.
type LookupSqlserverflexUserArgs struct {
	// ID of the SQLServer Flex instance.
	InstanceId string `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// User ID.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getSqlserverflexUser.
type LookupSqlserverflexUserResult struct {
	Host string `pulumi:"host"`
	Id   string `pulumi:"id"`
	// ID of the SQLServer Flex instance.
	InstanceId string `pulumi:"instanceId"`
	Port       int    `pulumi:"port"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region *string `pulumi:"region"`
	// Database access levels for the user.
	Roles []string `pulumi:"roles"`
	// User ID.
	UserId string `pulumi:"userId"`
	// Username of the SQLServer Flex instance.
	Username string `pulumi:"username"`
}

func LookupSqlserverflexUserOutput(ctx *pulumi.Context, args LookupSqlserverflexUserOutputArgs, opts ...pulumi.InvokeOption) LookupSqlserverflexUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSqlserverflexUserResultOutput, error) {
			args := v.(LookupSqlserverflexUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("stackit:index/getSqlserverflexUser:getSqlserverflexUser", args, LookupSqlserverflexUserResultOutput{}, options).(LookupSqlserverflexUserResultOutput), nil
		}).(LookupSqlserverflexUserResultOutput)
}

// A collection of arguments for invoking getSqlserverflexUser.
type LookupSqlserverflexUserOutputArgs struct {
	// ID of the SQLServer Flex instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The resource region. If not defined, the provider region is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// User ID.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupSqlserverflexUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlserverflexUserArgs)(nil)).Elem()
}

// A collection of values returned by getSqlserverflexUser.
type LookupSqlserverflexUserResultOutput struct{ *pulumi.OutputState }

func (LookupSqlserverflexUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlserverflexUserResult)(nil)).Elem()
}

func (o LookupSqlserverflexUserResultOutput) ToLookupSqlserverflexUserResultOutput() LookupSqlserverflexUserResultOutput {
	return o
}

func (o LookupSqlserverflexUserResultOutput) ToLookupSqlserverflexUserResultOutputWithContext(ctx context.Context) LookupSqlserverflexUserResultOutput {
	return o
}

func (o LookupSqlserverflexUserResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.Host }).(pulumi.StringOutput)
}

func (o LookupSqlserverflexUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the SQLServer Flex instance.
func (o LookupSqlserverflexUserResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupSqlserverflexUserResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) int { return v.Port }).(pulumi.IntOutput)
}

// STACKIT project ID to which the instance is associated.
func (o LookupSqlserverflexUserResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The resource region. If not defined, the provider region is used.
func (o LookupSqlserverflexUserResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Database access levels for the user.
func (o LookupSqlserverflexUserResultOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// User ID.
func (o LookupSqlserverflexUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

// Username of the SQLServer Flex instance.
func (o LookupSqlserverflexUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlserverflexUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlserverflexUserResultOutput{})
}
