// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stackit

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-stackit/sdk/go/stackit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MariaDB instance resource schema. Must have a `region` specified in the provider configuration.
//
// ## Example Usage
type MariadbInstance struct {
	pulumi.CustomResourceState

	CfGuid             pulumi.StringOutput `pulumi:"cfGuid"`
	CfOrganizationGuid pulumi.StringOutput `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        pulumi.StringOutput `pulumi:"cfSpaceGuid"`
	DashboardUrl       pulumi.StringOutput `pulumi:"dashboardUrl"`
	ImageUrl           pulumi.StringOutput `pulumi:"imageUrl"`
	// ID of the MariaDB instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name.
	Name       pulumi.StringOutput             `pulumi:"name"`
	Parameters MariadbInstanceParametersOutput `pulumi:"parameters"`
	// The selected plan ID.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The selected plan name.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The service version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewMariadbInstance registers a new resource with the given unique name, arguments, and options.
func NewMariadbInstance(ctx *pulumi.Context,
	name string, args *MariadbInstanceArgs, opts ...pulumi.ResourceOption) (*MariadbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MariadbInstance
	err := ctx.RegisterResource("stackit:index/mariadbInstance:MariadbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMariadbInstance gets an existing MariadbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMariadbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MariadbInstanceState, opts ...pulumi.ResourceOption) (*MariadbInstance, error) {
	var resource MariadbInstance
	err := ctx.ReadResource("stackit:index/mariadbInstance:MariadbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MariadbInstance resources.
type mariadbInstanceState struct {
	CfGuid             *string `pulumi:"cfGuid"`
	CfOrganizationGuid *string `pulumi:"cfOrganizationGuid"`
	CfSpaceGuid        *string `pulumi:"cfSpaceGuid"`
	DashboardUrl       *string `pulumi:"dashboardUrl"`
	ImageUrl           *string `pulumi:"imageUrl"`
	// ID of the MariaDB instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name.
	Name       *string                    `pulumi:"name"`
	Parameters *MariadbInstanceParameters `pulumi:"parameters"`
	// The selected plan ID.
	PlanId *string `pulumi:"planId"`
	// The selected plan name.
	PlanName *string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId *string `pulumi:"projectId"`
	// The service version.
	Version *string `pulumi:"version"`
}

type MariadbInstanceState struct {
	CfGuid             pulumi.StringPtrInput
	CfOrganizationGuid pulumi.StringPtrInput
	CfSpaceGuid        pulumi.StringPtrInput
	DashboardUrl       pulumi.StringPtrInput
	ImageUrl           pulumi.StringPtrInput
	// ID of the MariaDB instance.
	InstanceId pulumi.StringPtrInput
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters MariadbInstanceParametersPtrInput
	// The selected plan ID.
	PlanId pulumi.StringPtrInput
	// The selected plan name.
	PlanName pulumi.StringPtrInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringPtrInput
	// The service version.
	Version pulumi.StringPtrInput
}

func (MariadbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*mariadbInstanceState)(nil)).Elem()
}

type mariadbInstanceArgs struct {
	// Instance name.
	Name       *string                    `pulumi:"name"`
	Parameters *MariadbInstanceParameters `pulumi:"parameters"`
	// The selected plan name.
	PlanName string `pulumi:"planName"`
	// STACKIT project ID to which the instance is associated.
	ProjectId string `pulumi:"projectId"`
	// The service version.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a MariadbInstance resource.
type MariadbInstanceArgs struct {
	// Instance name.
	Name       pulumi.StringPtrInput
	Parameters MariadbInstanceParametersPtrInput
	// The selected plan name.
	PlanName pulumi.StringInput
	// STACKIT project ID to which the instance is associated.
	ProjectId pulumi.StringInput
	// The service version.
	Version pulumi.StringInput
}

func (MariadbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mariadbInstanceArgs)(nil)).Elem()
}

type MariadbInstanceInput interface {
	pulumi.Input

	ToMariadbInstanceOutput() MariadbInstanceOutput
	ToMariadbInstanceOutputWithContext(ctx context.Context) MariadbInstanceOutput
}

func (*MariadbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbInstance)(nil)).Elem()
}

func (i *MariadbInstance) ToMariadbInstanceOutput() MariadbInstanceOutput {
	return i.ToMariadbInstanceOutputWithContext(context.Background())
}

func (i *MariadbInstance) ToMariadbInstanceOutputWithContext(ctx context.Context) MariadbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceOutput)
}

// MariadbInstanceArrayInput is an input type that accepts MariadbInstanceArray and MariadbInstanceArrayOutput values.
// You can construct a concrete instance of `MariadbInstanceArrayInput` via:
//
//	MariadbInstanceArray{ MariadbInstanceArgs{...} }
type MariadbInstanceArrayInput interface {
	pulumi.Input

	ToMariadbInstanceArrayOutput() MariadbInstanceArrayOutput
	ToMariadbInstanceArrayOutputWithContext(context.Context) MariadbInstanceArrayOutput
}

type MariadbInstanceArray []MariadbInstanceInput

func (MariadbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariadbInstance)(nil)).Elem()
}

func (i MariadbInstanceArray) ToMariadbInstanceArrayOutput() MariadbInstanceArrayOutput {
	return i.ToMariadbInstanceArrayOutputWithContext(context.Background())
}

func (i MariadbInstanceArray) ToMariadbInstanceArrayOutputWithContext(ctx context.Context) MariadbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceArrayOutput)
}

// MariadbInstanceMapInput is an input type that accepts MariadbInstanceMap and MariadbInstanceMapOutput values.
// You can construct a concrete instance of `MariadbInstanceMapInput` via:
//
//	MariadbInstanceMap{ "key": MariadbInstanceArgs{...} }
type MariadbInstanceMapInput interface {
	pulumi.Input

	ToMariadbInstanceMapOutput() MariadbInstanceMapOutput
	ToMariadbInstanceMapOutputWithContext(context.Context) MariadbInstanceMapOutput
}

type MariadbInstanceMap map[string]MariadbInstanceInput

func (MariadbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariadbInstance)(nil)).Elem()
}

func (i MariadbInstanceMap) ToMariadbInstanceMapOutput() MariadbInstanceMapOutput {
	return i.ToMariadbInstanceMapOutputWithContext(context.Background())
}

func (i MariadbInstanceMap) ToMariadbInstanceMapOutputWithContext(ctx context.Context) MariadbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariadbInstanceMapOutput)
}

type MariadbInstanceOutput struct{ *pulumi.OutputState }

func (MariadbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariadbInstance)(nil)).Elem()
}

func (o MariadbInstanceOutput) ToMariadbInstanceOutput() MariadbInstanceOutput {
	return o
}

func (o MariadbInstanceOutput) ToMariadbInstanceOutputWithContext(ctx context.Context) MariadbInstanceOutput {
	return o
}

func (o MariadbInstanceOutput) CfGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.CfGuid }).(pulumi.StringOutput)
}

func (o MariadbInstanceOutput) CfOrganizationGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.CfOrganizationGuid }).(pulumi.StringOutput)
}

func (o MariadbInstanceOutput) CfSpaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.CfSpaceGuid }).(pulumi.StringOutput)
}

func (o MariadbInstanceOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o MariadbInstanceOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// ID of the MariaDB instance.
func (o MariadbInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name.
func (o MariadbInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MariadbInstanceOutput) Parameters() MariadbInstanceParametersOutput {
	return o.ApplyT(func(v *MariadbInstance) MariadbInstanceParametersOutput { return v.Parameters }).(MariadbInstanceParametersOutput)
}

// The selected plan ID.
func (o MariadbInstanceOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The selected plan name.
func (o MariadbInstanceOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// STACKIT project ID to which the instance is associated.
func (o MariadbInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The service version.
func (o MariadbInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MariadbInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MariadbInstanceArrayOutput struct{ *pulumi.OutputState }

func (MariadbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariadbInstance)(nil)).Elem()
}

func (o MariadbInstanceArrayOutput) ToMariadbInstanceArrayOutput() MariadbInstanceArrayOutput {
	return o
}

func (o MariadbInstanceArrayOutput) ToMariadbInstanceArrayOutputWithContext(ctx context.Context) MariadbInstanceArrayOutput {
	return o
}

func (o MariadbInstanceArrayOutput) Index(i pulumi.IntInput) MariadbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MariadbInstance {
		return vs[0].([]*MariadbInstance)[vs[1].(int)]
	}).(MariadbInstanceOutput)
}

type MariadbInstanceMapOutput struct{ *pulumi.OutputState }

func (MariadbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariadbInstance)(nil)).Elem()
}

func (o MariadbInstanceMapOutput) ToMariadbInstanceMapOutput() MariadbInstanceMapOutput {
	return o
}

func (o MariadbInstanceMapOutput) ToMariadbInstanceMapOutputWithContext(ctx context.Context) MariadbInstanceMapOutput {
	return o
}

func (o MariadbInstanceMapOutput) MapIndex(k pulumi.StringInput) MariadbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MariadbInstance {
		return vs[0].(map[string]*MariadbInstance)[vs[1].(string)]
	}).(MariadbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbInstanceInput)(nil)).Elem(), &MariadbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbInstanceArrayInput)(nil)).Elem(), MariadbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariadbInstanceMapInput)(nil)).Elem(), MariadbInstanceMap{})
	pulumi.RegisterOutputType(MariadbInstanceOutput{})
	pulumi.RegisterOutputType(MariadbInstanceArrayOutput{})
	pulumi.RegisterOutputType(MariadbInstanceMapOutput{})
}
