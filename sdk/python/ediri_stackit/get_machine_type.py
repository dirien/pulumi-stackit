# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMachineTypeResult',
    'AwaitableGetMachineTypeResult',
    'get_machine_type',
    'get_machine_type_output',
]

@pulumi.output_type
class GetMachineTypeResult:
    """
    A collection of values returned by getMachineType.
    """
    def __init__(__self__, description=None, disk=None, extra_specs=None, filter=None, id=None, name=None, project_id=None, ram=None, sort_ascending=None, vcpus=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disk and not isinstance(disk, int):
            raise TypeError("Expected argument 'disk' to be a int")
        pulumi.set(__self__, "disk", disk)
        if extra_specs and not isinstance(extra_specs, dict):
            raise TypeError("Expected argument 'extra_specs' to be a dict")
        pulumi.set(__self__, "extra_specs", extra_specs)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if ram and not isinstance(ram, int):
            raise TypeError("Expected argument 'ram' to be a int")
        pulumi.set(__self__, "ram", ram)
        if sort_ascending and not isinstance(sort_ascending, bool):
            raise TypeError("Expected argument 'sort_ascending' to be a bool")
        pulumi.set(__self__, "sort_ascending", sort_ascending)
        if vcpus and not isinstance(vcpus, int):
            raise TypeError("Expected argument 'vcpus' to be a int")
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def disk(self) -> _builtins.int:
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter(name="extraSpecs")
    def extra_specs(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "extra_specs")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        """
        Expr-lang filter for filtering machine types.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def ram(self) -> _builtins.int:
        return pulumi.get(self, "ram")

    @_builtins.property
    @pulumi.getter(name="sortAscending")
    def sort_ascending(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "sort_ascending")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        return pulumi.get(self, "vcpus")


class AwaitableGetMachineTypeResult(GetMachineTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMachineTypeResult(
            description=self.description,
            disk=self.disk,
            extra_specs=self.extra_specs,
            filter=self.filter,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            ram=self.ram,
            sort_ascending=self.sort_ascending,
            vcpus=self.vcpus)


def get_machine_type(filter: Optional[_builtins.str] = None,
                     project_id: Optional[_builtins.str] = None,
                     sort_ascending: Optional[_builtins.bool] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMachineTypeResult:
    """
    Machine type data source.

    > This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.

    ## Example Usage


    :param _builtins.str filter: Expr-lang filter for filtering machine types.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['projectId'] = project_id
    __args__['sortAscending'] = sort_ascending
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getMachineType:getMachineType', __args__, opts=opts, typ=GetMachineTypeResult).value

    return AwaitableGetMachineTypeResult(
        description=pulumi.get(__ret__, 'description'),
        disk=pulumi.get(__ret__, 'disk'),
        extra_specs=pulumi.get(__ret__, 'extra_specs'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        ram=pulumi.get(__ret__, 'ram'),
        sort_ascending=pulumi.get(__ret__, 'sort_ascending'),
        vcpus=pulumi.get(__ret__, 'vcpus'))
def get_machine_type_output(filter: Optional[pulumi.Input[_builtins.str]] = None,
                            project_id: Optional[pulumi.Input[_builtins.str]] = None,
                            sort_ascending: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMachineTypeResult]:
    """
    Machine type data source.

    > This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.

    ## Example Usage


    :param _builtins.str filter: Expr-lang filter for filtering machine types.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['projectId'] = project_id
    __args__['sortAscending'] = sort_ascending
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getMachineType:getMachineType', __args__, opts=opts, typ=GetMachineTypeResult)
    return __ret__.apply(lambda __response__: GetMachineTypeResult(
        description=pulumi.get(__response__, 'description'),
        disk=pulumi.get(__response__, 'disk'),
        extra_specs=pulumi.get(__response__, 'extra_specs'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        ram=pulumi.get(__response__, 'ram'),
        sort_ascending=pulumi.get(__response__, 'sort_ascending'),
        vcpus=pulumi.get(__response__, 'vcpus')))
