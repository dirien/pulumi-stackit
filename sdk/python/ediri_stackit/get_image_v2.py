# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetImageV2Result',
    'AwaitableGetImageV2Result',
    'get_image_v2',
    'get_image_v2_output',
]

@pulumi.output_type
class GetImageV2Result:
    """
    A collection of values returned by getImageV2.
    """
    def __init__(__self__, checksum=None, config=None, disk_format=None, filter=None, id=None, image_id=None, labels=None, min_disk_size=None, min_ram=None, name=None, name_regex=None, project_id=None, protected=None, scope=None, sort_ascending=None):
        if checksum and not isinstance(checksum, dict):
            raise TypeError("Expected argument 'checksum' to be a dict")
        pulumi.set(__self__, "checksum", checksum)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if disk_format and not isinstance(disk_format, str):
            raise TypeError("Expected argument 'disk_format' to be a str")
        pulumi.set(__self__, "disk_format", disk_format)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if min_disk_size and not isinstance(min_disk_size, int):
            raise TypeError("Expected argument 'min_disk_size' to be a int")
        pulumi.set(__self__, "min_disk_size", min_disk_size)
        if min_ram and not isinstance(min_ram, int):
            raise TypeError("Expected argument 'min_ram' to be a int")
        pulumi.set(__self__, "min_ram", min_ram)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if protected and not isinstance(protected, bool):
            raise TypeError("Expected argument 'protected' to be a bool")
        pulumi.set(__self__, "protected", protected)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if sort_ascending and not isinstance(sort_ascending, bool):
            raise TypeError("Expected argument 'sort_ascending' to be a bool")
        pulumi.set(__self__, "sort_ascending", sort_ascending)

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> 'outputs.GetImageV2ChecksumResult':
        """
        Representation of an image checksum.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter
    def config(self) -> 'outputs.GetImageV2ConfigResult':
        """
        Properties to set hardware and scheduling settings for an image.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="diskFormat")
    def disk_format(self) -> _builtins.str:
        """
        The disk format of the image.
        """
        return pulumi.get(self, "disk_format")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetImageV2FilterResult']:
        """
        Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        Image ID to fetch directly
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        Labels are key-value string pairs which can be attached to a resource container
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> _builtins.int:
        """
        The minimum disk size of the image in GB.
        """
        return pulumi.get(self, "min_disk_size")

    @_builtins.property
    @pulumi.getter(name="minRam")
    def min_ram(self) -> _builtins.int:
        """
        The minimum RAM of the image in MB.
        """
        return pulumi.get(self, "min_ram")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[_builtins.str]:
        """
        Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
        """
        return pulumi.get(self, "name_regex")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the image is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def protected(self) -> _builtins.bool:
        """
        Whether the image is protected.
        """
        return pulumi.get(self, "protected")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        The scope of the image.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="sortAscending")
    def sort_ascending(self) -> Optional[_builtins.bool]:
        """
        If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
        """
        return pulumi.get(self, "sort_ascending")


class AwaitableGetImageV2Result(GetImageV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageV2Result(
            checksum=self.checksum,
            config=self.config,
            disk_format=self.disk_format,
            filter=self.filter,
            id=self.id,
            image_id=self.image_id,
            labels=self.labels,
            min_disk_size=self.min_disk_size,
            min_ram=self.min_ram,
            name=self.name,
            name_regex=self.name_regex,
            project_id=self.project_id,
            protected=self.protected,
            scope=self.scope,
            sort_ascending=self.sort_ascending)


def get_image_v2(filter: Optional[Union['GetImageV2FilterArgs', 'GetImageV2FilterArgsDict']] = None,
                 image_id: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_regex: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 sort_ascending: Optional[_builtins.bool] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageV2Result:
    """
    ## Example Usage


    :param Union['GetImageV2FilterArgs', 'GetImageV2FilterArgsDict'] filter: Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
    :param _builtins.str image_id: Image ID to fetch directly
    :param _builtins.str name: Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
    :param _builtins.str name_regex: Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
    :param _builtins.str project_id: STACKIT project ID to which the image is associated.
    :param _builtins.bool sort_ascending: If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['imageId'] = image_id
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['projectId'] = project_id
    __args__['sortAscending'] = sort_ascending
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getImageV2:getImageV2', __args__, opts=opts, typ=GetImageV2Result).value

    return AwaitableGetImageV2Result(
        checksum=pulumi.get(__ret__, 'checksum'),
        config=pulumi.get(__ret__, 'config'),
        disk_format=pulumi.get(__ret__, 'disk_format'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        labels=pulumi.get(__ret__, 'labels'),
        min_disk_size=pulumi.get(__ret__, 'min_disk_size'),
        min_ram=pulumi.get(__ret__, 'min_ram'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        project_id=pulumi.get(__ret__, 'project_id'),
        protected=pulumi.get(__ret__, 'protected'),
        scope=pulumi.get(__ret__, 'scope'),
        sort_ascending=pulumi.get(__ret__, 'sort_ascending'))
def get_image_v2_output(filter: Optional[pulumi.Input[Optional[Union['GetImageV2FilterArgs', 'GetImageV2FilterArgsDict']]]] = None,
                        image_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name_regex: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        project_id: Optional[pulumi.Input[_builtins.str]] = None,
                        sort_ascending: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetImageV2Result]:
    """
    ## Example Usage


    :param Union['GetImageV2FilterArgs', 'GetImageV2FilterArgsDict'] filter: Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
    :param _builtins.str image_id: Image ID to fetch directly
    :param _builtins.str name: Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
    :param _builtins.str name_regex: Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
    :param _builtins.str project_id: STACKIT project ID to which the image is associated.
    :param _builtins.bool sort_ascending: If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['imageId'] = image_id
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['projectId'] = project_id
    __args__['sortAscending'] = sort_ascending
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getImageV2:getImageV2', __args__, opts=opts, typ=GetImageV2Result)
    return __ret__.apply(lambda __response__: GetImageV2Result(
        checksum=pulumi.get(__response__, 'checksum'),
        config=pulumi.get(__response__, 'config'),
        disk_format=pulumi.get(__response__, 'disk_format'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        image_id=pulumi.get(__response__, 'image_id'),
        labels=pulumi.get(__response__, 'labels'),
        min_disk_size=pulumi.get(__response__, 'min_disk_size'),
        min_ram=pulumi.get(__response__, 'min_ram'),
        name=pulumi.get(__response__, 'name'),
        name_regex=pulumi.get(__response__, 'name_regex'),
        project_id=pulumi.get(__response__, 'project_id'),
        protected=pulumi.get(__response__, 'protected'),
        scope=pulumi.get(__response__, 'scope'),
        sort_ascending=pulumi.get(__response__, 'sort_ascending')))
