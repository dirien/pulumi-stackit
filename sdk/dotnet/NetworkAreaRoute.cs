// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Network area route resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/networkAreaRoute:NetworkAreaRoute")]
    public partial class NetworkAreaRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The network area ID to which the network area route is associated.
        /// </summary>
        [Output("networkAreaId")]
        public Output<string> NetworkAreaId { get; private set; } = null!;

        /// <summary>
        /// The network area route ID.
        /// </summary>
        [Output("networkAreaRouteId")]
        public Output<string> NetworkAreaRouteId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
        /// </summary>
        [Output("nextHop")]
        public Output<string> NextHop { get; private set; } = null!;

        /// <summary>
        /// STACKIT organization ID to which the network area is associated.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The network, that is reachable though the Next Hop. Should use CIDR notation.
        /// </summary>
        [Output("prefix")]
        public Output<string> Prefix { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkAreaRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkAreaRoute(string name, NetworkAreaRouteArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/networkAreaRoute:NetworkAreaRoute", name, args ?? new NetworkAreaRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkAreaRoute(string name, Input<string> id, NetworkAreaRouteState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/networkAreaRoute:NetworkAreaRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkAreaRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkAreaRoute Get(string name, Input<string> id, NetworkAreaRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkAreaRoute(name, id, state, options);
        }
    }

    public sealed class NetworkAreaRouteArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network area ID to which the network area route is associated.
        /// </summary>
        [Input("networkAreaId", required: true)]
        public Input<string> NetworkAreaId { get; set; } = null!;

        /// <summary>
        /// The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// STACKIT organization ID to which the network area is associated.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// The network, that is reachable though the Next Hop. Should use CIDR notation.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public NetworkAreaRouteArgs()
        {
        }
        public static new NetworkAreaRouteArgs Empty => new NetworkAreaRouteArgs();
    }

    public sealed class NetworkAreaRouteState : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network area ID to which the network area route is associated.
        /// </summary>
        [Input("networkAreaId")]
        public Input<string>? NetworkAreaId { get; set; }

        /// <summary>
        /// The network area route ID.
        /// </summary>
        [Input("networkAreaRouteId")]
        public Input<string>? NetworkAreaRouteId { get; set; }

        /// <summary>
        /// The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// STACKIT organization ID to which the network area is associated.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The network, that is reachable though the Next Hop. Should use CIDR notation.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public NetworkAreaRouteState()
        {
        }
        public static new NetworkAreaRouteState Empty => new NetworkAreaRouteState();
    }
}
