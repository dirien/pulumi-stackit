// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// DNS Zone resource schema.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/dnsZone:DnsZone")]
    public partial class DnsZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access control list. E.g. `0.0.0.0/0,::/0`
        /// </summary>
        [Output("acl")]
        public Output<string> Acl { get; private set; } = null!;

        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// A contact e-mail for the zone.
        /// </summary>
        [Output("contactEmail")]
        public Output<string> ContactEmail { get; private set; } = null!;

        /// <summary>
        /// Default time to live. E.g. 3600.
        /// </summary>
        [Output("defaultTtl")]
        public Output<int> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// Description of the zone.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// Expire time. E.g. 1209600.
        /// </summary>
        [Output("expireTime")]
        public Output<int> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// Specifies, if the zone is a reverse zone or not. Defaults to `false`
        /// </summary>
        [Output("isReverseZone")]
        public Output<bool> IsReverseZone { get; private set; } = null!;

        /// <summary>
        /// The user given name of the zone.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Negative caching. E.g. 60
        /// </summary>
        [Output("negativeCache")]
        public Output<int> NegativeCache { get; private set; } = null!;

        /// <summary>
        /// Primary name server for secondary zone. E.g. ["1.2.3.4"]
        /// </summary>
        [Output("primaries")]
        public Output<ImmutableArray<string>> Primaries { get; private set; } = null!;

        /// <summary>
        /// Primary name server. FQDN.
        /// </summary>
        [Output("primaryNameServer")]
        public Output<string> PrimaryNameServer { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Record count how many records are in the zone.
        /// </summary>
        [Output("recordCount")]
        public Output<int> RecordCount { get; private set; } = null!;

        /// <summary>
        /// Refresh time. E.g. 3600
        /// </summary>
        [Output("refreshTime")]
        public Output<int> RefreshTime { get; private set; } = null!;

        /// <summary>
        /// Retry time. E.g. 600
        /// </summary>
        [Output("retryTime")]
        public Output<int> RetryTime { get; private set; } = null!;

        /// <summary>
        /// Serial number. E.g. `2022111400`.
        /// </summary>
        [Output("serialNumber")]
        public Output<int> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// Zone state. E.g. `CREATE_SUCCEEDED`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Visibility of the zone. E.g. `public`.
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;

        /// <summary>
        /// The zone ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZone(string name, DnsZoneArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/dnsZone:DnsZone", name, args ?? new DnsZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZone(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/dnsZone:DnsZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZone Get(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZone(name, id, state, options);
        }
    }

    public sealed class DnsZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access control list. E.g. `0.0.0.0/0,::/0`
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// A contact e-mail for the zone.
        /// </summary>
        [Input("contactEmail")]
        public Input<string>? ContactEmail { get; set; }

        /// <summary>
        /// Default time to live. E.g. 3600.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        /// <summary>
        /// Description of the zone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        [Input("dnsName", required: true)]
        public Input<string> DnsName { get; set; } = null!;

        /// <summary>
        /// Expire time. E.g. 1209600.
        /// </summary>
        [Input("expireTime")]
        public Input<int>? ExpireTime { get; set; }

        /// <summary>
        /// Specifies, if the zone is a reverse zone or not. Defaults to `false`
        /// </summary>
        [Input("isReverseZone")]
        public Input<bool>? IsReverseZone { get; set; }

        /// <summary>
        /// The user given name of the zone.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Negative caching. E.g. 60
        /// </summary>
        [Input("negativeCache")]
        public Input<int>? NegativeCache { get; set; }

        [Input("primaries")]
        private InputList<string>? _primaries;

        /// <summary>
        /// Primary name server for secondary zone. E.g. ["1.2.3.4"]
        /// </summary>
        public InputList<string> Primaries
        {
            get => _primaries ?? (_primaries = new InputList<string>());
            set => _primaries = value;
        }

        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Refresh time. E.g. 3600
        /// </summary>
        [Input("refreshTime")]
        public Input<int>? RefreshTime { get; set; }

        /// <summary>
        /// Retry time. E.g. 600
        /// </summary>
        [Input("retryTime")]
        public Input<int>? RetryTime { get; set; }

        /// <summary>
        /// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DnsZoneArgs()
        {
        }
        public static new DnsZoneArgs Empty => new DnsZoneArgs();
    }

    public sealed class DnsZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access control list. E.g. `0.0.0.0/0,::/0`
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// A contact e-mail for the zone.
        /// </summary>
        [Input("contactEmail")]
        public Input<string>? ContactEmail { get; set; }

        /// <summary>
        /// Default time to live. E.g. 3600.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        /// <summary>
        /// Description of the zone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// Expire time. E.g. 1209600.
        /// </summary>
        [Input("expireTime")]
        public Input<int>? ExpireTime { get; set; }

        /// <summary>
        /// Specifies, if the zone is a reverse zone or not. Defaults to `false`
        /// </summary>
        [Input("isReverseZone")]
        public Input<bool>? IsReverseZone { get; set; }

        /// <summary>
        /// The user given name of the zone.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Negative caching. E.g. 60
        /// </summary>
        [Input("negativeCache")]
        public Input<int>? NegativeCache { get; set; }

        [Input("primaries")]
        private InputList<string>? _primaries;

        /// <summary>
        /// Primary name server for secondary zone. E.g. ["1.2.3.4"]
        /// </summary>
        public InputList<string> Primaries
        {
            get => _primaries ?? (_primaries = new InputList<string>());
            set => _primaries = value;
        }

        /// <summary>
        /// Primary name server. FQDN.
        /// </summary>
        [Input("primaryNameServer")]
        public Input<string>? PrimaryNameServer { get; set; }

        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Record count how many records are in the zone.
        /// </summary>
        [Input("recordCount")]
        public Input<int>? RecordCount { get; set; }

        /// <summary>
        /// Refresh time. E.g. 3600
        /// </summary>
        [Input("refreshTime")]
        public Input<int>? RefreshTime { get; set; }

        /// <summary>
        /// Retry time. E.g. 600
        /// </summary>
        [Input("retryTime")]
        public Input<int>? RetryTime { get; set; }

        /// <summary>
        /// Serial number. E.g. `2022111400`.
        /// </summary>
        [Input("serialNumber")]
        public Input<int>? SerialNumber { get; set; }

        /// <summary>
        /// Zone state. E.g. `CREATE_SUCCEEDED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Visibility of the zone. E.g. `public`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        /// <summary>
        /// The zone ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public DnsZoneState()
        {
        }
        public static new DnsZoneState Empty => new DnsZoneState();
    }
}
