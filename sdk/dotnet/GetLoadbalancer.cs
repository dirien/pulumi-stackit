// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetLoadbalancer
    {
        /// <summary>
        /// Load Balancer data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_loadbalancer" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-load-balancer"
        /// }
        /// ```
        /// </summary>
        public static Task<GetLoadbalancerResult> InvokeAsync(GetLoadbalancerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadbalancerResult>("stackit:index/getLoadbalancer:getLoadbalancer", args ?? new GetLoadbalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Load Balancer data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_loadbalancer" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-load-balancer"
        /// }
        /// ```
        /// </summary>
        public static Output<GetLoadbalancerResult> Invoke(GetLoadbalancerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadbalancerResult>("stackit:index/getLoadbalancer:getLoadbalancer", args ?? new GetLoadbalancerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Load Balancer data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_loadbalancer" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-load-balancer"
        /// }
        /// ```
        /// </summary>
        public static Output<GetLoadbalancerResult> Invoke(GetLoadbalancerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadbalancerResult>("stackit:index/getLoadbalancer:getLoadbalancer", args ?? new GetLoadbalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadbalancerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Load balancer name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetLoadbalancerArgs()
        {
        }
        public static new GetLoadbalancerArgs Empty => new GetLoadbalancerArgs();
    }

    public sealed class GetLoadbalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Load balancer name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetLoadbalancerInvokeArgs()
        {
        }
        public static new GetLoadbalancerInvokeArgs Empty => new GetLoadbalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadbalancerResult
    {
        /// <summary>
        /// External Load Balancer IP address where this Load Balancer is exposed.
        /// </summary>
        public readonly string ExternalAddress;
        public readonly string Id;
        /// <summary>
        /// List of all listeners which will accept traffic. Limited to 20.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadbalancerListenerResult> Listeners;
        /// <summary>
        /// Load balancer name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of networks that listeners and targets reside in.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadbalancerNetworkResult> Networks;
        /// <summary>
        /// Defines any optional functionality you want to have enabled on your load balancer.
        /// </summary>
        public readonly Outputs.GetLoadbalancerOptionsResult Options;
        /// <summary>
        /// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
        /// </summary>
        public readonly string PlanId;
        /// <summary>
        /// Transient private Load Balancer IP address. It can change any time.
        /// </summary>
        public readonly string PrivateAddress;
        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// List of all target pools which will be used in the Load Balancer. Limited to 20.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadbalancerTargetPoolResult> TargetPools;

        [OutputConstructor]
        private GetLoadbalancerResult(
            string externalAddress,

            string id,

            ImmutableArray<Outputs.GetLoadbalancerListenerResult> listeners,

            string name,

            ImmutableArray<Outputs.GetLoadbalancerNetworkResult> networks,

            Outputs.GetLoadbalancerOptionsResult options,

            string planId,

            string privateAddress,

            string projectId,

            string? region,

            ImmutableArray<Outputs.GetLoadbalancerTargetPoolResult> targetPools)
        {
            ExternalAddress = externalAddress;
            Id = id;
            Listeners = listeners;
            Name = name;
            Networks = networks;
            Options = options;
            PlanId = planId;
            PrivateAddress = privateAddress;
            ProjectId = projectId;
            Region = region;
            TargetPools = targetPools;
        }
    }
}
