// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetNetworkInterface
    {
        /// <summary>
        /// Network interface datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network_interface" "example" {
        ///   project_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_interface_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetNetworkInterfaceResult> InvokeAsync(GetNetworkInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInterfaceResult>("stackit:index/getNetworkInterface:getNetworkInterface", args ?? new GetNetworkInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// Network interface datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network_interface" "example" {
        ///   project_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_interface_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetNetworkInterfaceResult> Invoke(GetNetworkInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInterfaceResult>("stackit:index/getNetworkInterface:getNetworkInterface", args ?? new GetNetworkInterfaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Network interface datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network_interface" "example" {
        ///   project_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id           = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_interface_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetNetworkInterfaceResult> Invoke(GetNetworkInterfaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInterfaceResult>("stackit:index/getNetworkInterface:getNetworkInterface", args ?? new GetNetworkInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// The network interface ID.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public string NetworkInterfaceId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network interface is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetNetworkInterfaceArgs()
        {
        }
        public static new GetNetworkInterfaceArgs Empty => new GetNetworkInterfaceArgs();
    }

    public sealed class GetNetworkInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The network interface ID.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public Input<string> NetworkInterfaceId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network interface is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetNetworkInterfaceInvokeArgs()
        {
        }
        public static new GetNetworkInterfaceInvokeArgs Empty => new GetNetworkInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkInterfaceResult
    {
        /// <summary>
        /// The list of CIDR (Classless Inter-Domain Routing) notations.
        /// </summary>
        public readonly ImmutableArray<string> AllowedAddresses;
        /// <summary>
        /// The device UUID of the network interface.
        /// </summary>
        public readonly string Device;
        public readonly string Id;
        /// <summary>
        /// The IPv4 address.
        /// </summary>
        public readonly string Ipv4;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a network interface.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The MAC address of network interface.
        /// </summary>
        public readonly string Mac;
        /// <summary>
        /// The name of the network interface.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// The network interface ID.
        /// </summary>
        public readonly string NetworkInterfaceId;
        /// <summary>
        /// STACKIT project ID to which the network interface is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
        /// </summary>
        public readonly bool Security;
        /// <summary>
        /// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkInterfaceResult(
            ImmutableArray<string> allowedAddresses,

            string device,

            string id,

            string ipv4,

            ImmutableDictionary<string, string> labels,

            string mac,

            string name,

            string networkId,

            string networkInterfaceId,

            string projectId,

            bool security,

            ImmutableArray<string> securityGroupIds,

            string type)
        {
            AllowedAddresses = allowedAddresses;
            Device = device;
            Id = id;
            Ipv4 = ipv4;
            Labels = labels;
            Mac = mac;
            Name = name;
            NetworkId = networkId;
            NetworkInterfaceId = networkInterfaceId;
            ProjectId = projectId;
            Security = security;
            SecurityGroupIds = securityGroupIds;
            Type = type;
        }
    }
}
