// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Observability log alert group resource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup")]
    public partial class ObservabilityLogalertgroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Observability instance ID to which the log alert group is associated.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
        /// </summary>
        [Output("interval")]
        public Output<string> Interval { get; private set; } = null!;

        /// <summary>
        /// The name of the log alert group. Is the identifier and must be unique in the group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the log alert group is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Rules for the log alert group
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.ObservabilityLogalertgroupRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a ObservabilityLogalertgroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservabilityLogalertgroup(string name, ObservabilityLogalertgroupArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup", name, args ?? new ObservabilityLogalertgroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObservabilityLogalertgroup(string name, Input<string> id, ObservabilityLogalertgroupState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObservabilityLogalertgroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObservabilityLogalertgroup Get(string name, Input<string> id, ObservabilityLogalertgroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ObservabilityLogalertgroup(name, id, state, options);
        }
    }

    public sealed class ObservabilityLogalertgroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Observability instance ID to which the log alert group is associated.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the log alert group. Is the identifier and must be unique in the group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the log alert group is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.ObservabilityLogalertgroupRuleArgs>? _rules;

        /// <summary>
        /// Rules for the log alert group
        /// </summary>
        public InputList<Inputs.ObservabilityLogalertgroupRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ObservabilityLogalertgroupRuleArgs>());
            set => _rules = value;
        }

        public ObservabilityLogalertgroupArgs()
        {
        }
        public static new ObservabilityLogalertgroupArgs Empty => new ObservabilityLogalertgroupArgs();
    }

    public sealed class ObservabilityLogalertgroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Observability instance ID to which the log alert group is associated.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the log alert group. Is the identifier and must be unique in the group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the log alert group is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("rules")]
        private InputList<Inputs.ObservabilityLogalertgroupRuleGetArgs>? _rules;

        /// <summary>
        /// Rules for the log alert group
        /// </summary>
        public InputList<Inputs.ObservabilityLogalertgroupRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ObservabilityLogalertgroupRuleGetArgs>());
            set => _rules = value;
        }

        public ObservabilityLogalertgroupState()
        {
        }
        public static new ObservabilityLogalertgroupState Empty => new ObservabilityLogalertgroupState();
    }
}
