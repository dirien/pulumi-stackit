// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Security group rule resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/securityGroupRule:SecurityGroupRule")]
    public partial class SecurityGroupRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The rule description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// The ethertype which the rule should match.
        /// </summary>
        [Output("etherType")]
        public Output<string> EtherType { get; private set; } = null!;

        /// <summary>
        /// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
        /// </summary>
        [Output("icmpParameters")]
        public Output<Outputs.SecurityGroupRuleIcmpParameters> IcmpParameters { get; private set; } = null!;

        /// <summary>
        /// The remote IP range which the rule should match.
        /// </summary>
        [Output("ipRange")]
        public Output<string?> IpRange { get; private set; } = null!;

        /// <summary>
        /// The range of ports. This should only be provided if the protocol is not ICMP.
        /// </summary>
        [Output("portRange")]
        public Output<Outputs.SecurityGroupRulePortRange> PortRange { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the security group rule is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The internet protocol which the rule should match.
        /// </summary>
        [Output("protocol")]
        public Output<Outputs.SecurityGroupRuleProtocol> Protocol { get; private set; } = null!;

        /// <summary>
        /// The remote security group which the rule should match.
        /// </summary>
        [Output("remoteSecurityGroupId")]
        public Output<string?> RemoteSecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The security group ID.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The security group rule ID.
        /// </summary>
        [Output("securityGroupRuleId")]
        public Output<string> SecurityGroupRuleId { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroupRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroupRule(string name, SecurityGroupRuleArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/securityGroupRule:SecurityGroupRule", name, args ?? new SecurityGroupRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroupRule(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/securityGroupRule:SecurityGroupRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroupRule Get(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroupRule(name, id, state, options);
        }
    }

    public sealed class SecurityGroupRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The rule description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// The ethertype which the rule should match.
        /// </summary>
        [Input("etherType")]
        public Input<string>? EtherType { get; set; }

        /// <summary>
        /// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
        /// </summary>
        [Input("icmpParameters")]
        public Input<Inputs.SecurityGroupRuleIcmpParametersArgs>? IcmpParameters { get; set; }

        /// <summary>
        /// The remote IP range which the rule should match.
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// The range of ports. This should only be provided if the protocol is not ICMP.
        /// </summary>
        [Input("portRange")]
        public Input<Inputs.SecurityGroupRulePortRangeArgs>? PortRange { get; set; }

        /// <summary>
        /// STACKIT project ID to which the security group rule is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The internet protocol which the rule should match.
        /// </summary>
        [Input("protocol")]
        public Input<Inputs.SecurityGroupRuleProtocolArgs>? Protocol { get; set; }

        /// <summary>
        /// The remote security group which the rule should match.
        /// </summary>
        [Input("remoteSecurityGroupId")]
        public Input<string>? RemoteSecurityGroupId { get; set; }

        /// <summary>
        /// The security group ID.
        /// </summary>
        [Input("securityGroupId", required: true)]
        public Input<string> SecurityGroupId { get; set; } = null!;

        public SecurityGroupRuleArgs()
        {
        }
        public static new SecurityGroupRuleArgs Empty => new SecurityGroupRuleArgs();
    }

    public sealed class SecurityGroupRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The rule description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// The ethertype which the rule should match.
        /// </summary>
        [Input("etherType")]
        public Input<string>? EtherType { get; set; }

        /// <summary>
        /// ICMP Parameters. These parameters should only be provided if the protocol is ICMP.
        /// </summary>
        [Input("icmpParameters")]
        public Input<Inputs.SecurityGroupRuleIcmpParametersGetArgs>? IcmpParameters { get; set; }

        /// <summary>
        /// The remote IP range which the rule should match.
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// The range of ports. This should only be provided if the protocol is not ICMP.
        /// </summary>
        [Input("portRange")]
        public Input<Inputs.SecurityGroupRulePortRangeGetArgs>? PortRange { get; set; }

        /// <summary>
        /// STACKIT project ID to which the security group rule is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The internet protocol which the rule should match.
        /// </summary>
        [Input("protocol")]
        public Input<Inputs.SecurityGroupRuleProtocolGetArgs>? Protocol { get; set; }

        /// <summary>
        /// The remote security group which the rule should match.
        /// </summary>
        [Input("remoteSecurityGroupId")]
        public Input<string>? RemoteSecurityGroupId { get; set; }

        /// <summary>
        /// The security group ID.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The security group rule ID.
        /// </summary>
        [Input("securityGroupRuleId")]
        public Input<string>? SecurityGroupRuleId { get; set; }

        public SecurityGroupRuleState()
        {
        }
        public static new SecurityGroupRuleState Empty => new SecurityGroupRuleState();
    }
}
