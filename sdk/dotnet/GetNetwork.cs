// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetNetwork
    {
        /// <summary>
        /// Network resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("stackit:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Network resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("stackit:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Network resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_network" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   network_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("stackit:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The network ID.
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Can only be used when experimental "network" is set. This is likely going to undergo significant changes or be removed in the future.
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The network ID.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Can only be used when experimental "network" is set. This is likely going to undergo significant changes or be removed in the future.
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        public readonly string Id;
        /// <summary>
        /// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        public readonly string Ipv4Gateway;
        /// <summary>
        /// The IPv4 nameservers of the network.
        /// </summary>
        public readonly ImmutableArray<string> Ipv4Nameservers;
        /// <summary>
        /// The IPv4 prefix of the network (CIDR).
        /// </summary>
        public readonly string Ipv4Prefix;
        /// <summary>
        /// The IPv4 prefix length of the network.
        /// </summary>
        public readonly int Ipv4PrefixLength;
        /// <summary>
        /// The IPv4 prefixes of the network.
        /// </summary>
        public readonly ImmutableArray<string> Ipv4Prefixes;
        /// <summary>
        /// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        public readonly string Ipv6Gateway;
        /// <summary>
        /// The IPv6 nameservers of the network.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6Nameservers;
        /// <summary>
        /// The IPv6 prefix of the network (CIDR).
        /// </summary>
        public readonly string Ipv6Prefix;
        /// <summary>
        /// The IPv6 prefix length of the network.
        /// </summary>
        public readonly int Ipv6PrefixLength;
        /// <summary>
        /// The IPv6 prefixes of the network.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6Prefixes;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The name of the network.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.
        /// </summary>
        public readonly ImmutableArray<string> Nameservers;
        /// <summary>
        /// The network ID.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.
        /// </summary>
        public readonly ImmutableArray<string> Prefixes;
        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The public IP of the network.
        /// </summary>
        public readonly string PublicIp;
        /// <summary>
        /// Can only be used when experimental "network" is set. This is likely going to undergo significant changes or be removed in the future.
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// Shows if the network is routed and therefore accessible from other networks.
        /// </summary>
        public readonly bool Routed;
        /// <summary>
        /// Can only be used when experimental "network" is set. This is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
        /// The ID of the routing table associated with the network.
        /// </summary>
        public readonly string RoutingTableId;

        [OutputConstructor]
        private GetNetworkResult(
            string id,

            string ipv4Gateway,

            ImmutableArray<string> ipv4Nameservers,

            string ipv4Prefix,

            int ipv4PrefixLength,

            ImmutableArray<string> ipv4Prefixes,

            string ipv6Gateway,

            ImmutableArray<string> ipv6Nameservers,

            string ipv6Prefix,

            int ipv6PrefixLength,

            ImmutableArray<string> ipv6Prefixes,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> nameservers,

            string networkId,

            ImmutableArray<string> prefixes,

            string projectId,

            string publicIp,

            string? region,

            bool routed,

            string routingTableId)
        {
            Id = id;
            Ipv4Gateway = ipv4Gateway;
            Ipv4Nameservers = ipv4Nameservers;
            Ipv4Prefix = ipv4Prefix;
            Ipv4PrefixLength = ipv4PrefixLength;
            Ipv4Prefixes = ipv4Prefixes;
            Ipv6Gateway = ipv6Gateway;
            Ipv6Nameservers = ipv6Nameservers;
            Ipv6Prefix = ipv6Prefix;
            Ipv6PrefixLength = ipv6PrefixLength;
            Ipv6Prefixes = ipv6Prefixes;
            Labels = labels;
            Name = name;
            Nameservers = nameservers;
            NetworkId = networkId;
            Prefixes = prefixes;
            ProjectId = projectId;
            PublicIp = publicIp;
            Region = region;
            Routed = routed;
            RoutingTableId = routingTableId;
        }
    }
}
