// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetMachineType
    {
        /// <summary>
        /// Machine type data source.
        /// 
        /// &gt; This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_machine_type" "two_vcpus_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus==2"
        /// }
        /// 
        /// data "stackit_machine_type" "filter_sorted_ascending_false" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter         = "vcpus &gt;= 2 &amp;&amp; ram &gt;= 2048"
        ///   sort_ascending = false
        /// }
        /// 
        /// data "stackit_machine_type" "intel_icelake_generic_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "extraSpecs.cpu==\"intel-icelake-generic\" &amp;&amp; vcpus == 2"
        /// }
        /// 
        /// # returns warning
        /// data "stackit_machine_type" "no_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus == 99"
        /// }
        /// ```
        /// </summary>
        public static Task<GetMachineTypeResult> InvokeAsync(GetMachineTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMachineTypeResult>("stackit:index/getMachineType:getMachineType", args ?? new GetMachineTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Machine type data source.
        /// 
        /// &gt; This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_machine_type" "two_vcpus_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus==2"
        /// }
        /// 
        /// data "stackit_machine_type" "filter_sorted_ascending_false" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter         = "vcpus &gt;= 2 &amp;&amp; ram &gt;= 2048"
        ///   sort_ascending = false
        /// }
        /// 
        /// data "stackit_machine_type" "intel_icelake_generic_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "extraSpecs.cpu==\"intel-icelake-generic\" &amp;&amp; vcpus == 2"
        /// }
        /// 
        /// # returns warning
        /// data "stackit_machine_type" "no_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus == 99"
        /// }
        /// ```
        /// </summary>
        public static Output<GetMachineTypeResult> Invoke(GetMachineTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMachineTypeResult>("stackit:index/getMachineType:getMachineType", args ?? new GetMachineTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Machine type data source.
        /// 
        /// &gt; This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_machine_type" "two_vcpus_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus==2"
        /// }
        /// 
        /// data "stackit_machine_type" "filter_sorted_ascending_false" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter         = "vcpus &gt;= 2 &amp;&amp; ram &gt;= 2048"
        ///   sort_ascending = false
        /// }
        /// 
        /// data "stackit_machine_type" "intel_icelake_generic_filter" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "extraSpecs.cpu==\"intel-icelake-generic\" &amp;&amp; vcpus == 2"
        /// }
        /// 
        /// # returns warning
        /// data "stackit_machine_type" "no_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter     = "vcpus == 99"
        /// }
        /// ```
        /// </summary>
        public static Output<GetMachineTypeResult> Invoke(GetMachineTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMachineTypeResult>("stackit:index/getMachineType:getMachineType", args ?? new GetMachineTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMachineTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expr-lang filter for filtering machine types.
        /// </summary>
        [Input("filter", required: true)]
        public string Filter { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("sortAscending")]
        public bool? SortAscending { get; set; }

        public GetMachineTypeArgs()
        {
        }
        public static new GetMachineTypeArgs Empty => new GetMachineTypeArgs();
    }

    public sealed class GetMachineTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Expr-lang filter for filtering machine types.
        /// </summary>
        [Input("filter", required: true)]
        public Input<string> Filter { get; set; } = null!;

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("sortAscending")]
        public Input<bool>? SortAscending { get; set; }

        public GetMachineTypeInvokeArgs()
        {
        }
        public static new GetMachineTypeInvokeArgs Empty => new GetMachineTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetMachineTypeResult
    {
        public readonly string Description;
        public readonly int Disk;
        public readonly ImmutableDictionary<string, string> ExtraSpecs;
        /// <summary>
        /// Expr-lang filter for filtering machine types.
        /// </summary>
        public readonly string Filter;
        public readonly string Id;
        public readonly string Name;
        public readonly string ProjectId;
        public readonly int Ram;
        public readonly bool? SortAscending;
        public readonly int Vcpus;

        [OutputConstructor]
        private GetMachineTypeResult(
            string description,

            int disk,

            ImmutableDictionary<string, string> extraSpecs,

            string filter,

            string id,

            string name,

            string projectId,

            int ram,

            bool? sortAscending,

            int vcpus)
        {
            Description = description;
            Disk = disk;
            ExtraSpecs = extraSpecs;
            Filter = filter;
            Id = id;
            Name = name;
            ProjectId = projectId;
            Ram = ram;
            SortAscending = sortAscending;
            Vcpus = vcpus;
        }
    }
}
