// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetObservabilityInstance
    {
        /// <summary>
        /// Observability instance data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_observability_instance" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetObservabilityInstanceResult> InvokeAsync(GetObservabilityInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetObservabilityInstanceResult>("stackit:index/getObservabilityInstance:getObservabilityInstance", args ?? new GetObservabilityInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Observability instance data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_observability_instance" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetObservabilityInstanceResult> Invoke(GetObservabilityInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetObservabilityInstanceResult>("stackit:index/getObservabilityInstance:getObservabilityInstance", args ?? new GetObservabilityInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Observability instance data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_observability_instance" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetObservabilityInstanceResult> Invoke(GetObservabilityInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetObservabilityInstanceResult>("stackit:index/getObservabilityInstance:getObservabilityInstance", args ?? new GetObservabilityInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObservabilityInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Observability instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetObservabilityInstanceArgs()
        {
        }
        public static new GetObservabilityInstanceArgs Empty => new GetObservabilityInstanceArgs();
    }

    public sealed class GetObservabilityInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Observability instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetObservabilityInstanceInvokeArgs()
        {
        }
        public static new GetObservabilityInstanceInvokeArgs Empty => new GetObservabilityInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetObservabilityInstanceResult
    {
        /// <summary>
        /// The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.
        /// </summary>
        public readonly ImmutableArray<string> Acls;
        /// <summary>
        /// Alert configuration for the instance.
        /// </summary>
        public readonly Outputs.GetObservabilityInstanceAlertConfigResult AlertConfig;
        /// <summary>
        /// Specifies Alerting URL.
        /// </summary>
        public readonly string AlertingUrl;
        /// <summary>
        /// Specifies Observability instance dashboard URL.
        /// </summary>
        public readonly string DashboardUrl;
        /// <summary>
        /// Specifies an initial Grafana admin password.
        /// </summary>
        public readonly string GrafanaInitialAdminPassword;
        /// <summary>
        /// Specifies an initial Grafana admin username.
        /// </summary>
        public readonly string GrafanaInitialAdminUser;
        /// <summary>
        /// If true, anyone can access Grafana dashboards without logging in.
        /// </summary>
        public readonly bool GrafanaPublicReadAccess;
        /// <summary>
        /// Specifies Grafana URL.
        /// </summary>
        public readonly string GrafanaUrl;
        public readonly string Id;
        /// <summary>
        /// The Observability instance ID.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// Specifies if the instance can be updated.
        /// </summary>
        public readonly bool IsUpdatable;
        public readonly string JaegerTracesUrl;
        public readonly string JaegerUiUrl;
        /// <summary>
        /// Specifies URL for pushing logs.
        /// </summary>
        public readonly string LogsPushUrl;
        /// <summary>
        /// Specifies Logs URL.
        /// </summary>
        public readonly string LogsUrl;
        /// <summary>
        /// Specifies URL for pushing metrics.
        /// </summary>
        public readonly string MetricsPushUrl;
        /// <summary>
        /// Specifies for how many days the raw metrics are kept. Default is set to `90`.
        /// </summary>
        public readonly int MetricsRetentionDays;
        /// <summary>
        /// Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.
        /// </summary>
        public readonly int MetricsRetentionDays1hDownsampling;
        /// <summary>
        /// Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.
        /// </summary>
        public readonly int MetricsRetentionDays5mDownsampling;
        /// <summary>
        /// Specifies metrics URL.
        /// </summary>
        public readonly string MetricsUrl;
        /// <summary>
        /// The name of the Observability instance.
        /// </summary>
        public readonly string Name;
        public readonly string OtlpTracesUrl;
        /// <summary>
        /// Additional parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        /// <summary>
        /// The Observability plan ID.
        /// </summary>
        public readonly string PlanId;
        /// <summary>
        /// Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.
        /// </summary>
        public readonly string PlanName;
        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Specifies Targets URL.
        /// </summary>
        public readonly string TargetsUrl;
        public readonly string ZipkinSpansUrl;

        [OutputConstructor]
        private GetObservabilityInstanceResult(
            ImmutableArray<string> acls,

            Outputs.GetObservabilityInstanceAlertConfigResult alertConfig,

            string alertingUrl,

            string dashboardUrl,

            string grafanaInitialAdminPassword,

            string grafanaInitialAdminUser,

            bool grafanaPublicReadAccess,

            string grafanaUrl,

            string id,

            string instanceId,

            bool isUpdatable,

            string jaegerTracesUrl,

            string jaegerUiUrl,

            string logsPushUrl,

            string logsUrl,

            string metricsPushUrl,

            int metricsRetentionDays,

            int metricsRetentionDays1hDownsampling,

            int metricsRetentionDays5mDownsampling,

            string metricsUrl,

            string name,

            string otlpTracesUrl,

            ImmutableDictionary<string, string> parameters,

            string planId,

            string planName,

            string projectId,

            string targetsUrl,

            string zipkinSpansUrl)
        {
            Acls = acls;
            AlertConfig = alertConfig;
            AlertingUrl = alertingUrl;
            DashboardUrl = dashboardUrl;
            GrafanaInitialAdminPassword = grafanaInitialAdminPassword;
            GrafanaInitialAdminUser = grafanaInitialAdminUser;
            GrafanaPublicReadAccess = grafanaPublicReadAccess;
            GrafanaUrl = grafanaUrl;
            Id = id;
            InstanceId = instanceId;
            IsUpdatable = isUpdatable;
            JaegerTracesUrl = jaegerTracesUrl;
            JaegerUiUrl = jaegerUiUrl;
            LogsPushUrl = logsPushUrl;
            LogsUrl = logsUrl;
            MetricsPushUrl = metricsPushUrl;
            MetricsRetentionDays = metricsRetentionDays;
            MetricsRetentionDays1hDownsampling = metricsRetentionDays1hDownsampling;
            MetricsRetentionDays5mDownsampling = metricsRetentionDays5mDownsampling;
            MetricsUrl = metricsUrl;
            Name = name;
            OtlpTracesUrl = otlpTracesUrl;
            Parameters = parameters;
            PlanId = planId;
            PlanName = planName;
            ProjectId = projectId;
            TargetsUrl = targetsUrl;
            ZipkinSpansUrl = zipkinSpansUrl;
        }
    }
}
