// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Inputs
{

    public sealed class ObservabilityLogalertgroupRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the alert rule. Is the identifier and must be unique in the group.
        /// </summary>
        [Input("alert", required: true)]
        public Input<string> Alert { get; set; } = null!;

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// A map of key:value. Annotations to add or overwrite for each alert
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key:value. Labels to add or overwrite for each alert
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        public ObservabilityLogalertgroupRuleGetArgs()
        {
        }
        public static new ObservabilityLogalertgroupRuleGetArgs Empty => new ObservabilityLogalertgroupRuleGetArgs();
    }
}
