// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Inputs
{

    public sealed class LogmeInstanceParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable monitoring.
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        [Input("fluentdTcp")]
        public Input<int>? FluentdTcp { get; set; }

        [Input("fluentdTls")]
        public Input<int>? FluentdTls { get; set; }

        [Input("fluentdTlsCiphers")]
        public Input<string>? FluentdTlsCiphers { get; set; }

        [Input("fluentdTlsMaxVersion")]
        public Input<string>? FluentdTlsMaxVersion { get; set; }

        [Input("fluentdTlsMinVersion")]
        public Input<string>? FluentdTlsMinVersion { get; set; }

        [Input("fluentdTlsVersion")]
        public Input<string>? FluentdTlsVersion { get; set; }

        [Input("fluentdUdp")]
        public Input<int>? FluentdUdp { get; set; }

        /// <summary>
        /// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
        /// </summary>
        [Input("graphite")]
        public Input<string>? Graphite { get; set; }

        /// <summary>
        /// Combination of an integer and a timerange when an index will be considered "old" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.
        /// </summary>
        [Input("ismDeletionAfter")]
        public Input<string>? IsmDeletionAfter { get; set; }

        [Input("ismJitter")]
        public Input<double>? IsmJitter { get; set; }

        /// <summary>
        /// Jitter of the execution time.
        /// </summary>
        [Input("ismJobInterval")]
        public Input<int>? IsmJobInterval { get; set; }

        /// <summary>
        /// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
        /// </summary>
        [Input("javaHeapspace")]
        public Input<int>? JavaHeapspace { get; set; }

        /// <summary>
        /// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
        /// </summary>
        [Input("javaMaxmetaspace")]
        public Input<int>? JavaMaxmetaspace { get; set; }

        /// <summary>
        /// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
        /// </summary>
        [Input("maxDiskThreshold")]
        public Input<int>? MaxDiskThreshold { get; set; }

        /// <summary>
        /// The frequency in seconds at which metrics are emitted (in seconds).
        /// </summary>
        [Input("metricsFrequency")]
        public Input<int>? MetricsFrequency { get; set; }

        /// <summary>
        /// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
        /// </summary>
        [Input("metricsPrefix")]
        public Input<string>? MetricsPrefix { get; set; }

        /// <summary>
        /// The ID of the STACKIT monitoring instance.
        /// </summary>
        [Input("monitoringInstanceId")]
        public Input<string>? MonitoringInstanceId { get; set; }

        [Input("opensearchTlsCiphers")]
        private InputList<string>? _opensearchTlsCiphers;
        public InputList<string> OpensearchTlsCiphers
        {
            get => _opensearchTlsCiphers ?? (_opensearchTlsCiphers = new InputList<string>());
            set => _opensearchTlsCiphers = value;
        }

        [Input("opensearchTlsProtocols")]
        private InputList<string>? _opensearchTlsProtocols;
        public InputList<string> OpensearchTlsProtocols
        {
            get => _opensearchTlsProtocols ?? (_opensearchTlsProtocols = new InputList<string>());
            set => _opensearchTlsProtocols = value;
        }

        /// <summary>
        /// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
        /// </summary>
        [Input("sgwAcl")]
        public Input<string>? SgwAcl { get; set; }

        [Input("syslogs")]
        private InputList<string>? _syslogs;

        /// <summary>
        /// List of syslog servers to send logs to.
        /// </summary>
        public InputList<string> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<string>());
            set => _syslogs = value;
        }

        public LogmeInstanceParametersArgs()
        {
        }
        public static new LogmeInstanceParametersArgs Empty => new LogmeInstanceParametersArgs();
    }
}
