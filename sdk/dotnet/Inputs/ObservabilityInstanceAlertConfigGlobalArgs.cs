// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Inputs
{

    public sealed class ObservabilityInstanceAlertConfigGlobalArgs : global::Pulumi.ResourceArgs
    {
        [Input("opsgenieApiKey")]
        private Input<string>? _opsgenieApiKey;

        /// <summary>
        /// The API key for OpsGenie.
        /// </summary>
        public Input<string>? OpsgenieApiKey
        {
            get => _opsgenieApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _opsgenieApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The host to send OpsGenie API requests to. Must be a valid URL
        /// </summary>
        [Input("opsgenieApiUrl")]
        public Input<string>? OpsgenieApiUrl { get; set; }

        /// <summary>
        /// The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
        /// </summary>
        [Input("resolveTimeout")]
        public Input<string>? ResolveTimeout { get; set; }

        /// <summary>
        /// SMTP authentication information. Must be a valid email address
        /// </summary>
        [Input("smtpAuthIdentity")]
        public Input<string>? SmtpAuthIdentity { get; set; }

        [Input("smtpAuthPassword")]
        private Input<string>? _smtpAuthPassword;

        /// <summary>
        /// SMTP Auth using LOGIN and PLAIN.
        /// </summary>
        public Input<string>? SmtpAuthPassword
        {
            get => _smtpAuthPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _smtpAuthPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
        /// </summary>
        [Input("smtpAuthUsername")]
        public Input<string>? SmtpAuthUsername { get; set; }

        /// <summary>
        /// The default SMTP From header field. Must be a valid email address
        /// </summary>
        [Input("smtpFrom")]
        public Input<string>? SmtpFrom { get; set; }

        /// <summary>
        /// The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).
        /// </summary>
        [Input("smtpSmartHost")]
        public Input<string>? SmtpSmartHost { get; set; }

        public ObservabilityInstanceAlertConfigGlobalArgs()
        {
        }
        public static new ObservabilityInstanceAlertConfigGlobalArgs Empty => new ObservabilityInstanceAlertConfigGlobalArgs();
    }
}
