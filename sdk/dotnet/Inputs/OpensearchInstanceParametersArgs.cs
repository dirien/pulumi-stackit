// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Inputs
{

    public sealed class OpensearchInstanceParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable monitoring.
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        /// <summary>
        /// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
        /// </summary>
        [Input("graphite")]
        public Input<string>? Graphite { get; set; }

        /// <summary>
        /// The garbage collector to use for OpenSearch.
        /// </summary>
        [Input("javaGarbageCollector")]
        public Input<string>? JavaGarbageCollector { get; set; }

        /// <summary>
        /// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
        /// </summary>
        [Input("javaHeapspace")]
        public Input<int>? JavaHeapspace { get; set; }

        /// <summary>
        /// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
        /// </summary>
        [Input("javaMaxmetaspace")]
        public Input<int>? JavaMaxmetaspace { get; set; }

        /// <summary>
        /// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
        /// </summary>
        [Input("maxDiskThreshold")]
        public Input<int>? MaxDiskThreshold { get; set; }

        /// <summary>
        /// The frequency in seconds at which metrics are emitted (in seconds).
        /// </summary>
        [Input("metricsFrequency")]
        public Input<int>? MetricsFrequency { get; set; }

        /// <summary>
        /// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
        /// </summary>
        [Input("metricsPrefix")]
        public Input<string>? MetricsPrefix { get; set; }

        /// <summary>
        /// The ID of the STACKIT monitoring instance.
        /// </summary>
        [Input("monitoringInstanceId")]
        public Input<string>? MonitoringInstanceId { get; set; }

        [Input("plugins")]
        private InputList<string>? _plugins;

        /// <summary>
        /// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
        /// </summary>
        public InputList<string> Plugins
        {
            get => _plugins ?? (_plugins = new InputList<string>());
            set => _plugins = value;
        }

        /// <summary>
        /// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
        /// </summary>
        [Input("sgwAcl")]
        public Input<string>? SgwAcl { get; set; }

        [Input("syslogs")]
        private InputList<string>? _syslogs;

        /// <summary>
        /// List of syslog servers to send logs to.
        /// </summary>
        public InputList<string> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<string>());
            set => _syslogs = value;
        }

        [Input("tlsCiphers")]
        private InputList<string>? _tlsCiphers;

        /// <summary>
        /// List of TLS ciphers to use.
        /// </summary>
        public InputList<string> TlsCiphers
        {
            get => _tlsCiphers ?? (_tlsCiphers = new InputList<string>());
            set => _tlsCiphers = value;
        }

        [Input("tlsProtocols")]
        private InputList<string>? _tlsProtocols;

        /// <summary>
        /// The TLS protocol to use.
        /// </summary>
        public InputList<string> TlsProtocols
        {
            get => _tlsProtocols ?? (_tlsProtocols = new InputList<string>());
            set => _tlsProtocols = value;
        }

        public OpensearchInstanceParametersArgs()
        {
        }
        public static new OpensearchInstanceParametersArgs Empty => new OpensearchInstanceParametersArgs();
    }
}
