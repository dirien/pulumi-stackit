// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetVolume
    {
        /// <summary>
        /// Volume resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_volume" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   volume_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("stackit:index/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Volume resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_volume" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   volume_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("stackit:index/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Volume resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_volume" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   volume_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("stackit:index/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// STACKIT project ID to which the volume is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The volume ID.
        /// </summary>
        [Input("volumeId", required: true)]
        public string VolumeId { get; set; } = null!;

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// STACKIT project ID to which the volume is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The volume ID.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// The availability zone of the volume.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The description of the volume.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The name of the volume.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)
        /// </summary>
        public readonly string PerformanceClass;
        /// <summary>
        /// STACKIT project ID to which the volume is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The server ID of the server to which the volume is attached to.
        /// </summary>
        public readonly string ServerId;
        /// <summary>
        /// The size of the volume in GB. It can only be updated to a larger value than the current size
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The source of the volume. It can be either a volume, an image, a snapshot or a backup
        /// </summary>
        public readonly Outputs.GetVolumeSourceResult Source;
        /// <summary>
        /// The volume ID.
        /// </summary>
        public readonly string VolumeId;

        [OutputConstructor]
        private GetVolumeResult(
            string availabilityZone,

            string description,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string performanceClass,

            string projectId,

            string serverId,

            int size,

            Outputs.GetVolumeSourceResult source,

            string volumeId)
        {
            AvailabilityZone = availabilityZone;
            Description = description;
            Id = id;
            Labels = labels;
            Name = name;
            PerformanceClass = performanceClass;
            ProjectId = projectId;
            ServerId = serverId;
            Size = size;
            Source = source;
            VolumeId = volumeId;
        }
    }
}
