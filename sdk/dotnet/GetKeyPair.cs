// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetKeyPair
    {
        /// <summary>
        /// Key pair resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_key_pair" "example" {
        ///   name = "example-key-pair-name"
        /// }
        /// ```
        /// </summary>
        public static Task<GetKeyPairResult> InvokeAsync(GetKeyPairArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeyPairResult>("stackit:index/getKeyPair:getKeyPair", args ?? new GetKeyPairArgs(), options.WithDefaults());

        /// <summary>
        /// Key pair resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_key_pair" "example" {
        ///   name = "example-key-pair-name"
        /// }
        /// ```
        /// </summary>
        public static Output<GetKeyPairResult> Invoke(GetKeyPairInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyPairResult>("stackit:index/getKeyPair:getKeyPair", args ?? new GetKeyPairInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Key pair resource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_key_pair" "example" {
        ///   name = "example-key-pair-name"
        /// }
        /// ```
        /// </summary>
        public static Output<GetKeyPairResult> Invoke(GetKeyPairInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyPairResult>("stackit:index/getKeyPair:getKeyPair", args ?? new GetKeyPairInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeyPairArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SSH key pair.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetKeyPairArgs()
        {
        }
        public static new GetKeyPairArgs Empty => new GetKeyPairArgs();
    }

    public sealed class GetKeyPairInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SSH key pair.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetKeyPairInvokeArgs()
        {
        }
        public static new GetKeyPairInvokeArgs Empty => new GetKeyPairInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeyPairResult
    {
        /// <summary>
        /// The fingerprint of the public SSH key.
        /// </summary>
        public readonly string Fingerprint;
        public readonly string Id;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The name of the SSH key pair.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A string representation of the public SSH key. E.g., `ssh-rsa &lt;key_data&gt;` or `ssh-ed25519 &lt;key-data&gt;`.
        /// </summary>
        public readonly string PublicKey;

        [OutputConstructor]
        private GetKeyPairResult(
            string fingerprint,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string publicKey)
        {
            Fingerprint = fingerprint;
            Id = id;
            Labels = labels;
            Name = name;
            PublicKey = publicKey;
        }
    }
}
