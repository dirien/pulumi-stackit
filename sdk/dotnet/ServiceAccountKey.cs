// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Service account key schema.
    /// ## Example Usage
    /// 
    /// ### Automatically rotate service account keys
    /// </summary>
    [StackitResourceType("stackit:index/serviceAccountKey:ServiceAccountKey")]
    public partial class ServiceAccountKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The raw JSON representation of the service account key json, available for direct use.
        /// </summary>
        [Output("json")]
        public Output<string> Json { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the key associated with the service account.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The STACKIT project ID associated with the service account key.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
        /// </summary>
        [Output("publicKey")]
        public Output<string?> PublicKey { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
        /// </summary>
        [Output("rotateWhenChanged")]
        public Output<ImmutableDictionary<string, string>?> RotateWhenChanged { get; private set; } = null!;

        /// <summary>
        /// The email address associated with the service account, used for account identification and communication.
        /// </summary>
        [Output("serviceAccountEmail")]
        public Output<string> ServiceAccountEmail { get; private set; } = null!;

        /// <summary>
        /// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
        /// </summary>
        [Output("ttlDays")]
        public Output<int?> TtlDays { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAccountKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAccountKey(string name, ServiceAccountKeyArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/serviceAccountKey:ServiceAccountKey", name, args ?? new ServiceAccountKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAccountKey(string name, Input<string> id, ServiceAccountKeyState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/serviceAccountKey:ServiceAccountKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
                AdditionalSecretOutputs =
                {
                    "json",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAccountKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAccountKey Get(string name, Input<string> id, ServiceAccountKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAccountKey(name, id, state, options);
        }
    }

    public sealed class ServiceAccountKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The STACKIT project ID associated with the service account key.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// The email address associated with the service account, used for account identification and communication.
        /// </summary>
        [Input("serviceAccountEmail", required: true)]
        public Input<string> ServiceAccountEmail { get; set; } = null!;

        /// <summary>
        /// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
        /// </summary>
        [Input("ttlDays")]
        public Input<int>? TtlDays { get; set; }

        public ServiceAccountKeyArgs()
        {
        }
        public static new ServiceAccountKeyArgs Empty => new ServiceAccountKeyArgs();
    }

    public sealed class ServiceAccountKeyState : global::Pulumi.ResourceArgs
    {
        [Input("json")]
        private Input<string>? _json;

        /// <summary>
        /// The raw JSON representation of the service account key json, available for direct use.
        /// </summary>
        public Input<string>? Json
        {
            get => _json;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _json = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The unique identifier for the key associated with the service account.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The STACKIT project ID associated with the service account key.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// The email address associated with the service account, used for account identification and communication.
        /// </summary>
        [Input("serviceAccountEmail")]
        public Input<string>? ServiceAccountEmail { get; set; }

        /// <summary>
        /// Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted
        /// </summary>
        [Input("ttlDays")]
        public Input<int>? TtlDays { get; set; }

        public ServiceAccountKeyState()
        {
        }
        public static new ServiceAccountKeyState Empty => new ServiceAccountKeyState();
    }
}
