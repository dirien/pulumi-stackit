// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetSecretsmanagerUser
    {
        /// <summary>
        /// Secrets Manager user data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_secretsmanager_user" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   user_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetSecretsmanagerUserResult> InvokeAsync(GetSecretsmanagerUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretsmanagerUserResult>("stackit:index/getSecretsmanagerUser:getSecretsmanagerUser", args ?? new GetSecretsmanagerUserArgs(), options.WithDefaults());

        /// <summary>
        /// Secrets Manager user data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_secretsmanager_user" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   user_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSecretsmanagerUserResult> Invoke(GetSecretsmanagerUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsmanagerUserResult>("stackit:index/getSecretsmanagerUser:getSecretsmanagerUser", args ?? new GetSecretsmanagerUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Secrets Manager user data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_secretsmanager_user" "example" {
        ///   project_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   instance_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   user_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSecretsmanagerUserResult> Invoke(GetSecretsmanagerUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretsmanagerUserResult>("stackit:index/getSecretsmanagerUser:getSecretsmanagerUser", args ?? new GetSecretsmanagerUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretsmanagerUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Secrets Manager instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the instance is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The user's ID.
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetSecretsmanagerUserArgs()
        {
        }
        public static new GetSecretsmanagerUserArgs Empty => new GetSecretsmanagerUserArgs();
    }

    public sealed class GetSecretsmanagerUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Secrets Manager instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the instance is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The user's ID.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetSecretsmanagerUserInvokeArgs()
        {
        }
        public static new GetSecretsmanagerUserInvokeArgs Empty => new GetSecretsmanagerUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretsmanagerUserResult
    {
        /// <summary>
        /// A user chosen description to differentiate between multiple users. Can't be changed after creation.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// ID of the Secrets Manager instance.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// STACKIT Project ID to which the instance is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The user's ID.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// An auto-generated user name.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// If true, the user has writeaccess to the secrets engine.
        /// </summary>
        public readonly bool WriteEnabled;

        [OutputConstructor]
        private GetSecretsmanagerUserResult(
            string description,

            string id,

            string instanceId,

            string projectId,

            string userId,

            string username,

            bool writeEnabled)
        {
            Description = description;
            Id = id;
            InstanceId = instanceId;
            ProjectId = projectId;
            UserId = userId;
            Username = username;
            WriteEnabled = writeEnabled;
        }
    }
}
