// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/loadbalancer:Loadbalancer")]
    public partial class Loadbalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// External Load Balancer IP address where this Load Balancer is exposed.
        /// </summary>
        [Output("externalAddress")]
        public Output<string?> ExternalAddress { get; private set; } = null!;

        /// <summary>
        /// List of all listeners which will accept traffic. Limited to 20.
        /// </summary>
        [Output("listeners")]
        public Output<ImmutableArray<Outputs.LoadbalancerListener>> Listeners { get; private set; } = null!;

        /// <summary>
        /// Load balancer name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of networks that listeners and targets reside in.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.LoadbalancerNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Defines any optional functionality you want to have enabled on your load balancer.
        /// </summary>
        [Output("options")]
        public Output<Outputs.LoadbalancerOptions> Options { get; private set; } = null!;

        /// <summary>
        /// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
        /// </summary>
        [Output("planId")]
        public Output<string> PlanId { get; private set; } = null!;

        /// <summary>
        /// Transient private Load Balancer IP address. It can change any time.
        /// </summary>
        [Output("privateAddress")]
        public Output<string> PrivateAddress { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// List of all target pools which will be used in the Load Balancer. Limited to 20.
        /// </summary>
        [Output("targetPools")]
        public Output<ImmutableArray<Outputs.LoadbalancerTargetPool>> TargetPools { get; private set; } = null!;


        /// <summary>
        /// Create a Loadbalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Loadbalancer(string name, LoadbalancerArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/loadbalancer:Loadbalancer", name, args ?? new LoadbalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Loadbalancer(string name, Input<string> id, LoadbalancerState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/loadbalancer:Loadbalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Loadbalancer Get(string name, Input<string> id, LoadbalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new Loadbalancer(name, id, state, options);
        }
    }

    public sealed class LoadbalancerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// External Load Balancer IP address where this Load Balancer is exposed.
        /// </summary>
        [Input("externalAddress")]
        public Input<string>? ExternalAddress { get; set; }

        [Input("listeners", required: true)]
        private InputList<Inputs.LoadbalancerListenerArgs>? _listeners;

        /// <summary>
        /// List of all listeners which will accept traffic. Limited to 20.
        /// </summary>
        public InputList<Inputs.LoadbalancerListenerArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.LoadbalancerListenerArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// Load balancer name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.LoadbalancerNetworkArgs>? _networks;

        /// <summary>
        /// List of networks that listeners and targets reside in.
        /// </summary>
        public InputList<Inputs.LoadbalancerNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.LoadbalancerNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Defines any optional functionality you want to have enabled on your load balancer.
        /// </summary>
        [Input("options")]
        public Input<Inputs.LoadbalancerOptionsArgs>? Options { get; set; }

        /// <summary>
        /// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
        /// </summary>
        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("targetPools", required: true)]
        private InputList<Inputs.LoadbalancerTargetPoolArgs>? _targetPools;

        /// <summary>
        /// List of all target pools which will be used in the Load Balancer. Limited to 20.
        /// </summary>
        public InputList<Inputs.LoadbalancerTargetPoolArgs> TargetPools
        {
            get => _targetPools ?? (_targetPools = new InputList<Inputs.LoadbalancerTargetPoolArgs>());
            set => _targetPools = value;
        }

        public LoadbalancerArgs()
        {
        }
        public static new LoadbalancerArgs Empty => new LoadbalancerArgs();
    }

    public sealed class LoadbalancerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// External Load Balancer IP address where this Load Balancer is exposed.
        /// </summary>
        [Input("externalAddress")]
        public Input<string>? ExternalAddress { get; set; }

        [Input("listeners")]
        private InputList<Inputs.LoadbalancerListenerGetArgs>? _listeners;

        /// <summary>
        /// List of all listeners which will accept traffic. Limited to 20.
        /// </summary>
        public InputList<Inputs.LoadbalancerListenerGetArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.LoadbalancerListenerGetArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// Load balancer name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.LoadbalancerNetworkGetArgs>? _networks;

        /// <summary>
        /// List of networks that listeners and targets reside in.
        /// </summary>
        public InputList<Inputs.LoadbalancerNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.LoadbalancerNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Defines any optional functionality you want to have enabled on your load balancer.
        /// </summary>
        [Input("options")]
        public Input<Inputs.LoadbalancerOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.
        /// </summary>
        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        /// <summary>
        /// Transient private Load Balancer IP address. It can change any time.
        /// </summary>
        [Input("privateAddress")]
        public Input<string>? PrivateAddress { get; set; }

        /// <summary>
        /// STACKIT project ID to which the Load Balancer is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("targetPools")]
        private InputList<Inputs.LoadbalancerTargetPoolGetArgs>? _targetPools;

        /// <summary>
        /// List of all target pools which will be used in the Load Balancer. Limited to 20.
        /// </summary>
        public InputList<Inputs.LoadbalancerTargetPoolGetArgs> TargetPools
        {
            get => _targetPools ?? (_targetPools = new InputList<Inputs.LoadbalancerTargetPoolGetArgs>());
            set => _targetPools = value;
        }

        public LoadbalancerState()
        {
        }
        public static new LoadbalancerState Empty => new LoadbalancerState();
    }
}
