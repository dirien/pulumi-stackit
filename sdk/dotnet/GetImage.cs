// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetImage
    {
        /// <summary>
        /// Image datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("stackit:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Image datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("stackit:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Image datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("stackit:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The image ID.
        /// </summary>
        [Input("imageId", required: true)]
        public string ImageId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The image ID.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// Representation of an image checksum.
        /// </summary>
        public readonly Outputs.GetImageChecksumResult Checksum;
        /// <summary>
        /// Properties to set hardware and scheduling settings for an image.
        /// </summary>
        public readonly Outputs.GetImageConfigResult Config;
        /// <summary>
        /// The disk format of the image.
        /// </summary>
        public readonly string DiskFormat;
        public readonly string Id;
        /// <summary>
        /// The image ID.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The minimum disk size of the image in GB.
        /// </summary>
        public readonly int MinDiskSize;
        /// <summary>
        /// The minimum RAM of the image in MB.
        /// </summary>
        public readonly int MinRam;
        /// <summary>
        /// The name of the image.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Whether the image is protected.
        /// </summary>
        public readonly bool Protected;
        /// <summary>
        /// The scope of the image.
        /// </summary>
        public readonly string Scope;

        [OutputConstructor]
        private GetImageResult(
            Outputs.GetImageChecksumResult checksum,

            Outputs.GetImageConfigResult config,

            string diskFormat,

            string id,

            string imageId,

            ImmutableDictionary<string, string> labels,

            int minDiskSize,

            int minRam,

            string name,

            string projectId,

            bool @protected,

            string scope)
        {
            Checksum = checksum;
            Config = config;
            DiskFormat = diskFormat;
            Id = id;
            ImageId = imageId;
            Labels = labels;
            MinDiskSize = minDiskSize;
            MinRam = minRam;
            Name = name;
            ProjectId = projectId;
            Protected = @protected;
            Scope = scope;
        }
    }
}
