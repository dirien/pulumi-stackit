// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// AI Model Serving Auth Token Resource schema.
    /// 
    /// ## Example Usage
    /// 
    /// ### Automatically rotate AI model serving token
    /// </summary>
    [StackitResourceType("stackit:index/modelservingToken:ModelservingToken")]
    public partial class ModelservingToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the AI model serving auth token.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the AI model serving auth token.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the AI model serving auth token is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        [Output("rotateWhenChanged")]
        public Output<ImmutableDictionary<string, string>?> RotateWhenChanged { get; private set; } = null!;

        /// <summary>
        /// State of the AI model serving auth token.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Content of the AI model serving auth token.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// The AI model serving auth token ID.
        /// </summary>
        [Output("tokenId")]
        public Output<string> TokenId { get; private set; } = null!;

        /// <summary>
        /// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
        /// </summary>
        [Output("ttlDuration")]
        public Output<string?> TtlDuration { get; private set; } = null!;

        /// <summary>
        /// The time until the AI model serving auth token is valid.
        /// </summary>
        [Output("validUntil")]
        public Output<string> ValidUntil { get; private set; } = null!;


        /// <summary>
        /// Create a ModelservingToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ModelservingToken(string name, ModelservingTokenArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/modelservingToken:ModelservingToken", name, args ?? new ModelservingTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ModelservingToken(string name, Input<string> id, ModelservingTokenState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/modelservingToken:ModelservingToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ModelservingToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ModelservingToken Get(string name, Input<string> id, ModelservingTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ModelservingToken(name, id, state, options);
        }
    }

    public sealed class ModelservingTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the AI model serving auth token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the AI model serving auth token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the AI model serving auth token is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
        /// </summary>
        [Input("ttlDuration")]
        public Input<string>? TtlDuration { get; set; }

        public ModelservingTokenArgs()
        {
        }
        public static new ModelservingTokenArgs Empty => new ModelservingTokenArgs();
    }

    public sealed class ModelservingTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the AI model serving auth token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the AI model serving auth token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the AI model serving auth token is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Region to which the AI model serving auth token is associated. If not defined, the provider region is used
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// State of the AI model serving auth token.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Content of the AI model serving auth token.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The AI model serving auth token ID.
        /// </summary>
        [Input("tokenId")]
        public Input<string>? TokenId { get; set; }

        /// <summary>
        /// The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s
        /// </summary>
        [Input("ttlDuration")]
        public Input<string>? TtlDuration { get; set; }

        /// <summary>
        /// The time until the AI model serving auth token is valid.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        public ModelservingTokenState()
        {
        }
        public static new ModelservingTokenState Empty => new ModelservingTokenState();
    }
}
