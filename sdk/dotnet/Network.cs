// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Network resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Output("ipv4Gateway")]
        public Output<string> Ipv4Gateway { get; private set; } = null!;

        /// <summary>
        /// The IPv4 nameservers of the network.
        /// </summary>
        [Output("ipv4Nameservers")]
        public Output<ImmutableArray<string>> Ipv4Nameservers { get; private set; } = null!;

        /// <summary>
        /// The IPv4 prefix of the network (CIDR).
        /// </summary>
        [Output("ipv4Prefix")]
        public Output<string> Ipv4Prefix { get; private set; } = null!;

        /// <summary>
        /// The IPv4 prefix length of the network.
        /// </summary>
        [Output("ipv4PrefixLength")]
        public Output<int> Ipv4PrefixLength { get; private set; } = null!;

        /// <summary>
        /// The IPv4 prefixes of the network.
        /// </summary>
        [Output("ipv4Prefixes")]
        public Output<ImmutableArray<string>> Ipv4Prefixes { get; private set; } = null!;

        /// <summary>
        /// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Output("ipv6Gateway")]
        public Output<string> Ipv6Gateway { get; private set; } = null!;

        /// <summary>
        /// The IPv6 nameservers of the network.
        /// </summary>
        [Output("ipv6Nameservers")]
        public Output<ImmutableArray<string>> Ipv6Nameservers { get; private set; } = null!;

        /// <summary>
        /// The IPv6 prefix of the network (CIDR).
        /// </summary>
        [Output("ipv6Prefix")]
        public Output<string?> Ipv6Prefix { get; private set; } = null!;

        /// <summary>
        /// The IPv6 prefix length of the network.
        /// </summary>
        [Output("ipv6PrefixLength")]
        public Output<int?> Ipv6PrefixLength { get; private set; } = null!;

        /// <summary>
        /// The IPv6 prefixes of the network.
        /// </summary>
        [Output("ipv6Prefixes")]
        public Output<ImmutableArray<string>> Ipv6Prefixes { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.
        /// </summary>
        [Output("nameservers")]
        public Output<ImmutableArray<string>> Nameservers { get; private set; } = null!;

        /// <summary>
        /// The network ID.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Output("noIpv4Gateway")]
        public Output<bool?> NoIpv4Gateway { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Output("noIpv6Gateway")]
        public Output<bool?> NoIpv6Gateway { get; private set; } = null!;

        /// <summary>
        /// The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.
        /// </summary>
        [Output("prefixes")]
        public Output<ImmutableArray<string>> Prefixes { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The public IP of the network.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the network is routed and therefore accessible from other networks.
        /// </summary>
        [Output("routed")]
        public Output<bool> Routed { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Input("ipv4Gateway")]
        public Input<string>? Ipv4Gateway { get; set; }

        [Input("ipv4Nameservers")]
        private InputList<string>? _ipv4Nameservers;

        /// <summary>
        /// The IPv4 nameservers of the network.
        /// </summary>
        public InputList<string> Ipv4Nameservers
        {
            get => _ipv4Nameservers ?? (_ipv4Nameservers = new InputList<string>());
            set => _ipv4Nameservers = value;
        }

        /// <summary>
        /// The IPv4 prefix of the network (CIDR).
        /// </summary>
        [Input("ipv4Prefix")]
        public Input<string>? Ipv4Prefix { get; set; }

        /// <summary>
        /// The IPv4 prefix length of the network.
        /// </summary>
        [Input("ipv4PrefixLength")]
        public Input<int>? Ipv4PrefixLength { get; set; }

        /// <summary>
        /// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Input("ipv6Gateway")]
        public Input<string>? Ipv6Gateway { get; set; }

        [Input("ipv6Nameservers")]
        private InputList<string>? _ipv6Nameservers;

        /// <summary>
        /// The IPv6 nameservers of the network.
        /// </summary>
        public InputList<string> Ipv6Nameservers
        {
            get => _ipv6Nameservers ?? (_ipv6Nameservers = new InputList<string>());
            set => _ipv6Nameservers = value;
        }

        /// <summary>
        /// The IPv6 prefix of the network (CIDR).
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<string>? Ipv6Prefix { get; set; }

        /// <summary>
        /// The IPv6 prefix length of the network.
        /// </summary>
        [Input("ipv6PrefixLength")]
        public Input<int>? Ipv6PrefixLength { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.
        /// </summary>
        [Obsolete(@"Use `ipv4_nameservers` to configure the nameservers for IPv4.")]
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Input("noIpv4Gateway")]
        public Input<bool>? NoIpv4Gateway { get; set; }

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Input("noIpv6Gateway")]
        public Input<bool>? NoIpv6Gateway { get; set; }

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// If set to `true`, the network is routed and therefore accessible from other networks.
        /// </summary>
        [Input("routed")]
        public Input<bool>? Routed { get; set; }

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Input("ipv4Gateway")]
        public Input<string>? Ipv4Gateway { get; set; }

        [Input("ipv4Nameservers")]
        private InputList<string>? _ipv4Nameservers;

        /// <summary>
        /// The IPv4 nameservers of the network.
        /// </summary>
        public InputList<string> Ipv4Nameservers
        {
            get => _ipv4Nameservers ?? (_ipv4Nameservers = new InputList<string>());
            set => _ipv4Nameservers = value;
        }

        /// <summary>
        /// The IPv4 prefix of the network (CIDR).
        /// </summary>
        [Input("ipv4Prefix")]
        public Input<string>? Ipv4Prefix { get; set; }

        /// <summary>
        /// The IPv4 prefix length of the network.
        /// </summary>
        [Input("ipv4PrefixLength")]
        public Input<int>? Ipv4PrefixLength { get; set; }

        [Input("ipv4Prefixes")]
        private InputList<string>? _ipv4Prefixes;

        /// <summary>
        /// The IPv4 prefixes of the network.
        /// </summary>
        public InputList<string> Ipv4Prefixes
        {
            get => _ipv4Prefixes ?? (_ipv4Prefixes = new InputList<string>());
            set => _ipv4Prefixes = value;
        }

        /// <summary>
        /// The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.
        /// </summary>
        [Input("ipv6Gateway")]
        public Input<string>? Ipv6Gateway { get; set; }

        [Input("ipv6Nameservers")]
        private InputList<string>? _ipv6Nameservers;

        /// <summary>
        /// The IPv6 nameservers of the network.
        /// </summary>
        public InputList<string> Ipv6Nameservers
        {
            get => _ipv6Nameservers ?? (_ipv6Nameservers = new InputList<string>());
            set => _ipv6Nameservers = value;
        }

        /// <summary>
        /// The IPv6 prefix of the network (CIDR).
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<string>? Ipv6Prefix { get; set; }

        /// <summary>
        /// The IPv6 prefix length of the network.
        /// </summary>
        [Input("ipv6PrefixLength")]
        public Input<int>? Ipv6PrefixLength { get; set; }

        [Input("ipv6Prefixes")]
        private InputList<string>? _ipv6Prefixes;

        /// <summary>
        /// The IPv6 prefixes of the network.
        /// </summary>
        public InputList<string> Ipv6Prefixes
        {
            get => _ipv6Prefixes ?? (_ipv6Prefixes = new InputList<string>());
            set => _ipv6Prefixes = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.
        /// </summary>
        [Obsolete(@"Use `ipv4_nameservers` to configure the nameservers for IPv4.")]
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        /// <summary>
        /// The network ID.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Input("noIpv4Gateway")]
        public Input<bool>? NoIpv4Gateway { get; set; }

        /// <summary>
        /// If set to `true`, the network doesn't have a gateway.
        /// </summary>
        [Input("noIpv6Gateway")]
        public Input<bool>? NoIpv6Gateway { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;

        /// <summary>
        /// The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.
        /// </summary>
        [Obsolete(@"Use `ipv4_prefixes` to read the prefixes of the IPv4 networks.")]
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The public IP of the network.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// If set to `true`, the network is routed and therefore accessible from other networks.
        /// </summary>
        [Input("routed")]
        public Input<bool>? Routed { get; set; }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
