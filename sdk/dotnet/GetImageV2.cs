// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetImageV2
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image_v2" "default" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// 
        /// data "stackit_image_v2" "name_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "Ubuntu 22.04"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_latest" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex = "^Ubuntu .*"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_oldest" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex     = "^Ubuntu .*"
        ///   sort_ascending = true
        /// }
        /// 
        /// data "stackit_image_v2" "filter_distro_version" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter = {
        ///     distro  = "debian"
        ///     version = "11"
        ///   }
        /// }
        /// ```
        /// </summary>
        public static Task<GetImageV2Result> InvokeAsync(GetImageV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageV2Result>("stackit:index/getImageV2:getImageV2", args ?? new GetImageV2Args(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image_v2" "default" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// 
        /// data "stackit_image_v2" "name_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "Ubuntu 22.04"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_latest" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex = "^Ubuntu .*"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_oldest" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex     = "^Ubuntu .*"
        ///   sort_ascending = true
        /// }
        /// 
        /// data "stackit_image_v2" "filter_distro_version" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter = {
        ///     distro  = "debian"
        ///     version = "11"
        ///   }
        /// }
        /// ```
        /// </summary>
        public static Output<GetImageV2Result> Invoke(GetImageV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageV2Result>("stackit:index/getImageV2:getImageV2", args ?? new GetImageV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_image_v2" "default" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   image_id   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// 
        /// data "stackit_image_v2" "name_match" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "Ubuntu 22.04"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_latest" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex = "^Ubuntu .*"
        /// }
        /// 
        /// data "stackit_image_v2" "name_regex_oldest" {
        ///   project_id     = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name_regex     = "^Ubuntu .*"
        ///   sort_ascending = true
        /// }
        /// 
        /// data "stackit_image_v2" "filter_distro_version" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   filter = {
        ///     distro  = "debian"
        ///     version = "11"
        ///   }
        /// }
        /// ```
        /// </summary>
        public static Output<GetImageV2Result> Invoke(GetImageV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageV2Result>("stackit:index/getImageV2:getImageV2", args ?? new GetImageV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
        /// </summary>
        [Input("filter")]
        public Inputs.GetImageV2FilterArgs? Filter { get; set; }

        /// <summary>
        /// Image ID to fetch directly
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        /// <summary>
        /// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
        /// </summary>
        [Input("sortAscending")]
        public bool? SortAscending { get; set; }

        public GetImageV2Args()
        {
        }
        public static new GetImageV2Args Empty => new GetImageV2Args();
    }

    public sealed class GetImageV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetImageV2FilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Image ID to fetch directly
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
        /// </summary>
        [Input("sortAscending")]
        public Input<bool>? SortAscending { get; set; }

        public GetImageV2InvokeArgs()
        {
        }
        public static new GetImageV2InvokeArgs Empty => new GetImageV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetImageV2Result
    {
        /// <summary>
        /// Representation of an image checksum.
        /// </summary>
        public readonly Outputs.GetImageV2ChecksumResult Checksum;
        /// <summary>
        /// Properties to set hardware and scheduling settings for an image.
        /// </summary>
        public readonly Outputs.GetImageV2ConfigResult Config;
        /// <summary>
        /// The disk format of the image.
        /// </summary>
        public readonly string DiskFormat;
        /// <summary>
        /// Additional filtering options based on image properties. Can be used independently or in conjunction with `name` or `name_regex`.
        /// </summary>
        public readonly Outputs.GetImageV2FilterResult? Filter;
        public readonly string Id;
        /// <summary>
        /// Image ID to fetch directly
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The minimum disk size of the image in GB.
        /// </summary>
        public readonly int MinDiskSize;
        /// <summary>
        /// The minimum RAM of the image in MB.
        /// </summary>
        public readonly int MinRam;
        /// <summary>
        /// Exact image name to match. Optionally applies a `filter` block to further refine results in case multiple images share the same name. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name_regex`.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Regular expression to match against image names. Optionally applies a `filter` block to narrow down results when multiple image names match the regex. The first match is returned, optionally sorted by name in ascending order. Cannot be used together with `name`.
        /// </summary>
        public readonly string? NameRegex;
        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Whether the image is protected.
        /// </summary>
        public readonly bool Protected;
        /// <summary>
        /// The scope of the image.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// If set to `true`, images are sorted in ascending lexicographical order by image name (such as `Ubuntu 18.04`, `Ubuntu 20.04`, `Ubuntu 22.04`) before selecting the first match. Defaults to `false` (descending such as `Ubuntu 22.04`, `Ubuntu 20.04`, `Ubuntu 18.04`).
        /// </summary>
        public readonly bool? SortAscending;

        [OutputConstructor]
        private GetImageV2Result(
            Outputs.GetImageV2ChecksumResult checksum,

            Outputs.GetImageV2ConfigResult config,

            string diskFormat,

            Outputs.GetImageV2FilterResult? filter,

            string id,

            string? imageId,

            ImmutableDictionary<string, string> labels,

            int minDiskSize,

            int minRam,

            string? name,

            string? nameRegex,

            string projectId,

            bool @protected,

            string scope,

            bool? sortAscending)
        {
            Checksum = checksum;
            Config = config;
            DiskFormat = diskFormat;
            Filter = filter;
            Id = id;
            ImageId = imageId;
            Labels = labels;
            MinDiskSize = minDiskSize;
            MinRam = minRam;
            Name = name;
            NameRegex = nameRegex;
            ProjectId = projectId;
            Protected = @protected;
            Scope = scope;
            SortAscending = sortAscending;
        }
    }
}
