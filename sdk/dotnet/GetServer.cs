// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetServer
    {
        /// <summary>
        /// Server datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_server" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   server_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("stackit:index/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// Server datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_server" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   server_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("stackit:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Server datasource schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_server" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   server_id  = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("stackit:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The server ID.
        /// </summary>
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The server ID.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// The affinity group the server is assigned to.
        /// </summary>
        public readonly string AffinityGroup;
        /// <summary>
        /// The availability zone of the server.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The boot volume for the server
        /// </summary>
        public readonly Outputs.GetServerBootVolumeResult BootVolume;
        /// <summary>
        /// Date-time when the server was created
        /// </summary>
        public readonly string CreatedAt;
        public readonly string Id;
        /// <summary>
        /// The image ID to be used for an ephemeral disk on the server.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// The name of the keypair used during server creation.
        /// </summary>
        public readonly string KeypairName;
        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Date-time when the server was launched
        /// </summary>
        public readonly string LaunchedAt;
        /// <summary>
        /// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// The name of the server.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
        /// </summary>
        public readonly ImmutableArray<string> NetworkInterfaces;
        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The server ID.
        /// </summary>
        public readonly string ServerId;
        /// <summary>
        /// Date-time when the server was updated
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// User data that is passed via cloud-init to the server.
        /// </summary>
        public readonly string UserData;

        [OutputConstructor]
        private GetServerResult(
            string affinityGroup,

            string availabilityZone,

            Outputs.GetServerBootVolumeResult bootVolume,

            string createdAt,

            string id,

            string imageId,

            string keypairName,

            ImmutableDictionary<string, string> labels,

            string launchedAt,

            string machineType,

            string name,

            ImmutableArray<string> networkInterfaces,

            string projectId,

            string serverId,

            string updatedAt,

            string userData)
        {
            AffinityGroup = affinityGroup;
            AvailabilityZone = availabilityZone;
            BootVolume = bootVolume;
            CreatedAt = createdAt;
            Id = id;
            ImageId = imageId;
            KeypairName = keypairName;
            Labels = labels;
            LaunchedAt = launchedAt;
            MachineType = machineType;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            ProjectId = projectId;
            ServerId = serverId;
            UpdatedAt = updatedAt;
            UserData = userData;
        }
    }
}
