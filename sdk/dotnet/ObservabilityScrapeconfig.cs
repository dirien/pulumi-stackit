// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Observability scrape config resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig")]
    public partial class ObservabilityScrapeconfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A basic authentication block.
        /// </summary>
        [Output("basicAuth")]
        public Output<Outputs.ObservabilityScrapeconfigBasicAuth> BasicAuth { get; private set; } = null!;

        /// <summary>
        /// Observability instance ID to which the scraping job is associated.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the job scraping url path. E.g. `/metrics`.
        /// </summary>
        [Output("metricsPath")]
        public Output<string> MetricsPath { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the scraping job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the scraping job is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A SAML2 configuration block.
        /// </summary>
        [Output("saml2")]
        public Output<Outputs.ObservabilityScrapeconfigSaml2> Saml2 { get; private set; } = null!;

        /// <summary>
        /// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
        /// </summary>
        [Output("sampleLimit")]
        public Output<int> SampleLimit { get; private set; } = null!;

        /// <summary>
        /// Specifies the http scheme. Defaults to `https`.
        /// </summary>
        [Output("scheme")]
        public Output<string> Scheme { get; private set; } = null!;

        /// <summary>
        /// Specifies the scrape interval as duration string. Defaults to `5m`.
        /// </summary>
        [Output("scrapeInterval")]
        public Output<string> ScrapeInterval { get; private set; } = null!;

        /// <summary>
        /// Specifies the scrape timeout as duration string. Defaults to `2m`.
        /// </summary>
        [Output("scrapeTimeout")]
        public Output<string> ScrapeTimeout { get; private set; } = null!;

        /// <summary>
        /// The targets list (specified by the static config).
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<Outputs.ObservabilityScrapeconfigTarget>> Targets { get; private set; } = null!;


        /// <summary>
        /// Create a ObservabilityScrapeconfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservabilityScrapeconfig(string name, ObservabilityScrapeconfigArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig", name, args ?? new ObservabilityScrapeconfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObservabilityScrapeconfig(string name, Input<string> id, ObservabilityScrapeconfigState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObservabilityScrapeconfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObservabilityScrapeconfig Get(string name, Input<string> id, ObservabilityScrapeconfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ObservabilityScrapeconfig(name, id, state, options);
        }
    }

    public sealed class ObservabilityScrapeconfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A basic authentication block.
        /// </summary>
        [Input("basicAuth")]
        public Input<Inputs.ObservabilityScrapeconfigBasicAuthArgs>? BasicAuth { get; set; }

        /// <summary>
        /// Observability instance ID to which the scraping job is associated.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies the job scraping url path. E.g. `/metrics`.
        /// </summary>
        [Input("metricsPath", required: true)]
        public Input<string> MetricsPath { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the scraping job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the scraping job is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// A SAML2 configuration block.
        /// </summary>
        [Input("saml2")]
        public Input<Inputs.ObservabilityScrapeconfigSaml2Args>? Saml2 { get; set; }

        /// <summary>
        /// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
        /// </summary>
        [Input("sampleLimit")]
        public Input<int>? SampleLimit { get; set; }

        /// <summary>
        /// Specifies the http scheme. Defaults to `https`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// Specifies the scrape interval as duration string. Defaults to `5m`.
        /// </summary>
        [Input("scrapeInterval")]
        public Input<string>? ScrapeInterval { get; set; }

        /// <summary>
        /// Specifies the scrape timeout as duration string. Defaults to `2m`.
        /// </summary>
        [Input("scrapeTimeout")]
        public Input<string>? ScrapeTimeout { get; set; }

        [Input("targets", required: true)]
        private InputList<Inputs.ObservabilityScrapeconfigTargetArgs>? _targets;

        /// <summary>
        /// The targets list (specified by the static config).
        /// </summary>
        public InputList<Inputs.ObservabilityScrapeconfigTargetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.ObservabilityScrapeconfigTargetArgs>());
            set => _targets = value;
        }

        public ObservabilityScrapeconfigArgs()
        {
        }
        public static new ObservabilityScrapeconfigArgs Empty => new ObservabilityScrapeconfigArgs();
    }

    public sealed class ObservabilityScrapeconfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A basic authentication block.
        /// </summary>
        [Input("basicAuth")]
        public Input<Inputs.ObservabilityScrapeconfigBasicAuthGetArgs>? BasicAuth { get; set; }

        /// <summary>
        /// Observability instance ID to which the scraping job is associated.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies the job scraping url path. E.g. `/metrics`.
        /// </summary>
        [Input("metricsPath")]
        public Input<string>? MetricsPath { get; set; }

        /// <summary>
        /// Specifies the name of the scraping job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the scraping job is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A SAML2 configuration block.
        /// </summary>
        [Input("saml2")]
        public Input<Inputs.ObservabilityScrapeconfigSaml2GetArgs>? Saml2 { get; set; }

        /// <summary>
        /// Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.
        /// </summary>
        [Input("sampleLimit")]
        public Input<int>? SampleLimit { get; set; }

        /// <summary>
        /// Specifies the http scheme. Defaults to `https`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// Specifies the scrape interval as duration string. Defaults to `5m`.
        /// </summary>
        [Input("scrapeInterval")]
        public Input<string>? ScrapeInterval { get; set; }

        /// <summary>
        /// Specifies the scrape timeout as duration string. Defaults to `2m`.
        /// </summary>
        [Input("scrapeTimeout")]
        public Input<string>? ScrapeTimeout { get; set; }

        [Input("targets")]
        private InputList<Inputs.ObservabilityScrapeconfigTargetGetArgs>? _targets;

        /// <summary>
        /// The targets list (specified by the static config).
        /// </summary>
        public InputList<Inputs.ObservabilityScrapeconfigTargetGetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.ObservabilityScrapeconfigTargetGetArgs>());
            set => _targets = value;
        }

        public ObservabilityScrapeconfigState()
        {
        }
        public static new ObservabilityScrapeconfigState Empty => new ObservabilityScrapeconfigState();
    }
}
