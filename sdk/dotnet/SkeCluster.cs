// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// SKE Cluster Resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// &gt; When updating `node_pools` of a `stackit.SkeCluster`, the pulumi preview might appear incorrect as it matches the node pools by index rather than by name. However, the SKE API correctly identifies node pools by name and applies the intended changes. Please review your changes carefully to ensure the correct configuration will be applied.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/skeCluster:SkeCluster")]
    public partial class SkeCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
        /// </summary>
        [Output("egressAddressRanges")]
        public Output<ImmutableArray<string>> EgressAddressRanges { get; private set; } = null!;

        /// <summary>
        /// A single extensions block as defined below.
        /// </summary>
        [Output("extensions")]
        public Output<Outputs.SkeClusterExtensions?> Extensions { get; private set; } = null!;

        /// <summary>
        /// One or more hibernation block as defined below.
        /// </summary>
        [Output("hibernations")]
        public Output<ImmutableArray<Outputs.SkeClusterHibernation>> Hibernations { get; private set; } = null!;

        /// <summary>
        /// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.
        /// </summary>
        [Output("kubernetesVersionMin")]
        public Output<string?> KubernetesVersionMin { get; private set; } = null!;

        /// <summary>
        /// Full Kubernetes version used. For example, if 1.22 was set in `kubernetes_version_min`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
        /// </summary>
        [Output("kubernetesVersionUsed")]
        public Output<string> KubernetesVersionUsed { get; private set; } = null!;

        /// <summary>
        /// A single maintenance block as defined below.
        /// </summary>
        [Output("maintenance")]
        public Output<Outputs.SkeClusterMaintenance> Maintenance { get; private set; } = null!;

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network block as defined below.
        /// </summary>
        [Output("network")]
        public Output<Outputs.SkeClusterNetwork?> Network { get; private set; } = null!;

        /// <summary>
        /// One or more `node_pool` block as defined below.
        /// </summary>
        [Output("nodePools")]
        public Output<ImmutableArray<Outputs.SkeClusterNodePool>> NodePools { get; private set; } = null!;

        /// <summary>
        /// The network ranges (in CIDR notation) used by pods of the cluster.
        /// </summary>
        [Output("podAddressRanges")]
        public Output<ImmutableArray<string>> PodAddressRanges { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a SkeCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SkeCluster(string name, SkeClusterArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/skeCluster:SkeCluster", name, args ?? new SkeClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SkeCluster(string name, Input<string> id, SkeClusterState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/skeCluster:SkeCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SkeCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SkeCluster Get(string name, Input<string> id, SkeClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new SkeCluster(name, id, state, options);
        }
    }

    public sealed class SkeClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A single extensions block as defined below.
        /// </summary>
        [Input("extensions")]
        public Input<Inputs.SkeClusterExtensionsArgs>? Extensions { get; set; }

        [Input("hibernations")]
        private InputList<Inputs.SkeClusterHibernationArgs>? _hibernations;

        /// <summary>
        /// One or more hibernation block as defined below.
        /// </summary>
        public InputList<Inputs.SkeClusterHibernationArgs> Hibernations
        {
            get => _hibernations ?? (_hibernations = new InputList<Inputs.SkeClusterHibernationArgs>());
            set => _hibernations = value;
        }

        /// <summary>
        /// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.
        /// </summary>
        [Input("kubernetesVersionMin")]
        public Input<string>? KubernetesVersionMin { get; set; }

        /// <summary>
        /// A single maintenance block as defined below.
        /// </summary>
        [Input("maintenance")]
        public Input<Inputs.SkeClusterMaintenanceArgs>? Maintenance { get; set; }

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network block as defined below.
        /// </summary>
        [Input("network")]
        public Input<Inputs.SkeClusterNetworkArgs>? Network { get; set; }

        [Input("nodePools", required: true)]
        private InputList<Inputs.SkeClusterNodePoolArgs>? _nodePools;

        /// <summary>
        /// One or more `node_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.SkeClusterNodePoolArgs> NodePools
        {
            get => _nodePools ?? (_nodePools = new InputList<Inputs.SkeClusterNodePoolArgs>());
            set => _nodePools = value;
        }

        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public SkeClusterArgs()
        {
        }
        public static new SkeClusterArgs Empty => new SkeClusterArgs();
    }

    public sealed class SkeClusterState : global::Pulumi.ResourceArgs
    {
        [Input("egressAddressRanges")]
        private InputList<string>? _egressAddressRanges;

        /// <summary>
        /// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
        /// </summary>
        public InputList<string> EgressAddressRanges
        {
            get => _egressAddressRanges ?? (_egressAddressRanges = new InputList<string>());
            set => _egressAddressRanges = value;
        }

        /// <summary>
        /// A single extensions block as defined below.
        /// </summary>
        [Input("extensions")]
        public Input<Inputs.SkeClusterExtensionsGetArgs>? Extensions { get; set; }

        [Input("hibernations")]
        private InputList<Inputs.SkeClusterHibernationGetArgs>? _hibernations;

        /// <summary>
        /// One or more hibernation block as defined below.
        /// </summary>
        public InputList<Inputs.SkeClusterHibernationGetArgs> Hibernations
        {
            get => _hibernations ?? (_hibernations = new InputList<Inputs.SkeClusterHibernationGetArgs>());
            set => _hibernations = value;
        }

        /// <summary>
        /// The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.
        /// </summary>
        [Input("kubernetesVersionMin")]
        public Input<string>? KubernetesVersionMin { get; set; }

        /// <summary>
        /// Full Kubernetes version used. For example, if 1.22 was set in `kubernetes_version_min`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
        /// </summary>
        [Input("kubernetesVersionUsed")]
        public Input<string>? KubernetesVersionUsed { get; set; }

        /// <summary>
        /// A single maintenance block as defined below.
        /// </summary>
        [Input("maintenance")]
        public Input<Inputs.SkeClusterMaintenanceGetArgs>? Maintenance { get; set; }

        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network block as defined below.
        /// </summary>
        [Input("network")]
        public Input<Inputs.SkeClusterNetworkGetArgs>? Network { get; set; }

        [Input("nodePools")]
        private InputList<Inputs.SkeClusterNodePoolGetArgs>? _nodePools;

        /// <summary>
        /// One or more `node_pool` block as defined below.
        /// </summary>
        public InputList<Inputs.SkeClusterNodePoolGetArgs> NodePools
        {
            get => _nodePools ?? (_nodePools = new InputList<Inputs.SkeClusterNodePoolGetArgs>());
            set => _nodePools = value;
        }

        [Input("podAddressRanges")]
        private InputList<string>? _podAddressRanges;

        /// <summary>
        /// The network ranges (in CIDR notation) used by pods of the cluster.
        /// </summary>
        public InputList<string> PodAddressRanges
        {
            get => _podAddressRanges ?? (_podAddressRanges = new InputList<string>());
            set => _podAddressRanges = value;
        }

        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public SkeClusterState()
        {
        }
        public static new SkeClusterState Empty => new SkeClusterState();
    }
}
