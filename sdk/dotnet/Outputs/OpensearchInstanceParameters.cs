// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class OpensearchInstanceParameters
    {
        /// <summary>
        /// Enable monitoring.
        /// </summary>
        public readonly bool? EnableMonitoring;
        /// <summary>
        /// If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).
        /// </summary>
        public readonly string? Graphite;
        /// <summary>
        /// The garbage collector to use for OpenSearch.
        /// </summary>
        public readonly string? JavaGarbageCollector;
        /// <summary>
        /// The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.
        /// </summary>
        public readonly int? JavaHeapspace;
        /// <summary>
        /// The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.
        /// </summary>
        public readonly int? JavaMaxmetaspace;
        /// <summary>
        /// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
        /// </summary>
        public readonly int? MaxDiskThreshold;
        /// <summary>
        /// The frequency in seconds at which metrics are emitted (in seconds).
        /// </summary>
        public readonly int? MetricsFrequency;
        /// <summary>
        /// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.
        /// </summary>
        public readonly string? MetricsPrefix;
        /// <summary>
        /// The ID of the STACKIT monitoring instance.
        /// </summary>
        public readonly string? MonitoringInstanceId;
        /// <summary>
        /// List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.
        /// </summary>
        public readonly ImmutableArray<string> Plugins;
        /// <summary>
        /// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
        /// </summary>
        public readonly string? SgwAcl;
        /// <summary>
        /// List of syslog servers to send logs to.
        /// </summary>
        public readonly ImmutableArray<string> Syslogs;
        /// <summary>
        /// List of TLS ciphers to use.
        /// </summary>
        public readonly ImmutableArray<string> TlsCiphers;
        /// <summary>
        /// The TLS protocol to use.
        /// </summary>
        public readonly string? TlsProtocols;

        [OutputConstructor]
        private OpensearchInstanceParameters(
            bool? enableMonitoring,

            string? graphite,

            string? javaGarbageCollector,

            int? javaHeapspace,

            int? javaMaxmetaspace,

            int? maxDiskThreshold,

            int? metricsFrequency,

            string? metricsPrefix,

            string? monitoringInstanceId,

            ImmutableArray<string> plugins,

            string? sgwAcl,

            ImmutableArray<string> syslogs,

            ImmutableArray<string> tlsCiphers,

            string? tlsProtocols)
        {
            EnableMonitoring = enableMonitoring;
            Graphite = graphite;
            JavaGarbageCollector = javaGarbageCollector;
            JavaHeapspace = javaHeapspace;
            JavaMaxmetaspace = javaMaxmetaspace;
            MaxDiskThreshold = maxDiskThreshold;
            MetricsFrequency = metricsFrequency;
            MetricsPrefix = metricsPrefix;
            MonitoringInstanceId = monitoringInstanceId;
            Plugins = plugins;
            SgwAcl = sgwAcl;
            Syslogs = syslogs;
            TlsCiphers = tlsCiphers;
            TlsProtocols = tlsProtocols;
        }
    }
}
