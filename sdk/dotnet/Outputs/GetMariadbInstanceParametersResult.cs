// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class GetMariadbInstanceParametersResult
    {
        /// <summary>
        /// Enable monitoring.
        /// </summary>
        public readonly bool EnableMonitoring;
        public readonly string Graphite;
        /// <summary>
        /// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
        /// </summary>
        public readonly int MaxDiskThreshold;
        /// <summary>
        /// The frequency in seconds at which metrics are emitted.
        /// </summary>
        public readonly int MetricsFrequency;
        /// <summary>
        /// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
        /// </summary>
        public readonly string MetricsPrefix;
        /// <summary>
        /// The ID of the STACKIT monitoring instance.
        /// </summary>
        public readonly string MonitoringInstanceId;
        /// <summary>
        /// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
        /// </summary>
        public readonly string SgwAcl;
        /// <summary>
        /// List of syslog servers to send logs to.
        /// </summary>
        public readonly ImmutableArray<string> Syslogs;

        [OutputConstructor]
        private GetMariadbInstanceParametersResult(
            bool enableMonitoring,

            string graphite,

            int maxDiskThreshold,

            int metricsFrequency,

            string metricsPrefix,

            string monitoringInstanceId,

            string sgwAcl,

            ImmutableArray<string> syslogs)
        {
            EnableMonitoring = enableMonitoring;
            Graphite = graphite;
            MaxDiskThreshold = maxDiskThreshold;
            MetricsFrequency = metricsFrequency;
            MetricsPrefix = metricsPrefix;
            MonitoringInstanceId = monitoringInstanceId;
            SgwAcl = sgwAcl;
            Syslogs = syslogs;
        }
    }
}
