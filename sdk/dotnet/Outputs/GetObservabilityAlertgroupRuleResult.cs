// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class GetObservabilityAlertgroupRuleResult
    {
        /// <summary>
        /// The name of the alert rule. Is the identifier and must be unique in the group.
        /// </summary>
        public readonly string Alert;
        /// <summary>
        /// A map of key:value. Annotations to add or overwrite for each alert
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
        /// </summary>
        public readonly string Expression;
        /// <summary>
        /// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s
        /// </summary>
        public readonly string For;
        /// <summary>
        /// A map of key:value. Labels to add or overwrite for each alert
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;

        [OutputConstructor]
        private GetObservabilityAlertgroupRuleResult(
            string alert,

            ImmutableDictionary<string, string> annotations,

            string expression,

            string @for,

            ImmutableDictionary<string, string> labels)
        {
            Alert = alert;
            Annotations = annotations;
            Expression = expression;
            For = @for;
            Labels = labels;
        }
    }
}
