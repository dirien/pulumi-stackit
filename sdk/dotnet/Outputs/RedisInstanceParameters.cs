// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class RedisInstanceParameters
    {
        /// <summary>
        /// The number of milliseconds after which the instance is considered down.
        /// </summary>
        public readonly int? DownAfterMilliseconds;
        /// <summary>
        /// Enable monitoring.
        /// </summary>
        public readonly bool? EnableMonitoring;
        /// <summary>
        /// The failover timeout in milliseconds.
        /// </summary>
        public readonly int? FailoverTimeout;
        /// <summary>
        /// Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.
        /// </summary>
        public readonly string? Graphite;
        /// <summary>
        /// The lazy eviction enablement (yes or no).
        /// </summary>
        public readonly string? LazyfreeLazyEviction;
        /// <summary>
        /// The lazy expire enablement (yes or no).
        /// </summary>
        public readonly string? LazyfreeLazyExpire;
        /// <summary>
        /// The Lua time limit.
        /// </summary>
        public readonly int? LuaTimeLimit;
        /// <summary>
        /// The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.
        /// </summary>
        public readonly int? MaxDiskThreshold;
        /// <summary>
        /// The maximum number of clients.
        /// </summary>
        public readonly int? Maxclients;
        /// <summary>
        /// The policy to handle the maximum memory (volatile-lru, noeviction, etc).
        /// </summary>
        public readonly string? MaxmemoryPolicy;
        /// <summary>
        /// The maximum memory samples.
        /// </summary>
        public readonly int? MaxmemorySamples;
        /// <summary>
        /// The frequency in seconds at which metrics are emitted.
        /// </summary>
        public readonly int? MetricsFrequency;
        /// <summary>
        /// The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key
        /// </summary>
        public readonly string? MetricsPrefix;
        /// <summary>
        /// The minimum replicas maximum lag.
        /// </summary>
        public readonly int? MinReplicasMaxLag;
        /// <summary>
        /// The ID of the STACKIT monitoring instance.
        /// </summary>
        public readonly string? MonitoringInstanceId;
        /// <summary>
        /// The notify keyspace events.
        /// </summary>
        public readonly string? NotifyKeyspaceEvents;
        /// <summary>
        /// Comma separated list of IP networks in CIDR notation which are allowed to access this instance.
        /// </summary>
        public readonly string? SgwAcl;
        /// <summary>
        /// The snapshot configuration.
        /// </summary>
        public readonly string? Snapshot;
        /// <summary>
        /// List of syslog servers to send logs to.
        /// </summary>
        public readonly ImmutableArray<string> Syslogs;
        /// <summary>
        /// List of TLS ciphers to use.
        /// </summary>
        public readonly ImmutableArray<string> TlsCiphers;
        /// <summary>
        /// TLS cipher suites to use.
        /// </summary>
        public readonly string? TlsCiphersuites;
        /// <summary>
        /// TLS protocol to use.
        /// </summary>
        public readonly string? TlsProtocols;

        [OutputConstructor]
        private RedisInstanceParameters(
            int? downAfterMilliseconds,

            bool? enableMonitoring,

            int? failoverTimeout,

            string? graphite,

            string? lazyfreeLazyEviction,

            string? lazyfreeLazyExpire,

            int? luaTimeLimit,

            int? maxDiskThreshold,

            int? maxclients,

            string? maxmemoryPolicy,

            int? maxmemorySamples,

            int? metricsFrequency,

            string? metricsPrefix,

            int? minReplicasMaxLag,

            string? monitoringInstanceId,

            string? notifyKeyspaceEvents,

            string? sgwAcl,

            string? snapshot,

            ImmutableArray<string> syslogs,

            ImmutableArray<string> tlsCiphers,

            string? tlsCiphersuites,

            string? tlsProtocols)
        {
            DownAfterMilliseconds = downAfterMilliseconds;
            EnableMonitoring = enableMonitoring;
            FailoverTimeout = failoverTimeout;
            Graphite = graphite;
            LazyfreeLazyEviction = lazyfreeLazyEviction;
            LazyfreeLazyExpire = lazyfreeLazyExpire;
            LuaTimeLimit = luaTimeLimit;
            MaxDiskThreshold = maxDiskThreshold;
            Maxclients = maxclients;
            MaxmemoryPolicy = maxmemoryPolicy;
            MaxmemorySamples = maxmemorySamples;
            MetricsFrequency = metricsFrequency;
            MetricsPrefix = metricsPrefix;
            MinReplicasMaxLag = minReplicasMaxLag;
            MonitoringInstanceId = monitoringInstanceId;
            NotifyKeyspaceEvents = notifyKeyspaceEvents;
            SgwAcl = sgwAcl;
            Snapshot = snapshot;
            Syslogs = syslogs;
            TlsCiphers = tlsCiphers;
            TlsCiphersuites = tlsCiphersuites;
            TlsProtocols = tlsProtocols;
        }
    }
}
