// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class SkeClusterNodePool
    {
        /// <summary>
        /// Allow system components to run on this node pool.
        /// </summary>
        public readonly bool? AllowSystemComponents;
        /// <summary>
        /// Specify a list of availability zones. E.g. `eu01-m`
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// Specifies the container runtime. Defaults to `containerd`
        /// </summary>
        public readonly string? Cri;
        /// <summary>
        /// Labels to add to each node.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// The machine type.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `max_surge` and `max_unavailable` fields cannot both be unset at the same time.
        /// </summary>
        public readonly int? MaxSurge;
        /// <summary>
        /// Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `max_surge` and `max_unavailable` fields cannot both be unset at the same time.
        /// </summary>
        public readonly int? MaxUnavailable;
        /// <summary>
        /// Maximum number of nodes in the pool.
        /// </summary>
        public readonly int Maximum;
        /// <summary>
        /// Minimum number of nodes in the pool.
        /// </summary>
        public readonly int Minimum;
        /// <summary>
        /// Specifies the name of the node pool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name of the OS image. Defaults to `flatcar`.
        /// </summary>
        public readonly string? OsName;
        /// <summary>
        /// This field is deprecated, use `os_version_min` to configure the version and `os_version_used` to get the currently used version instead.
        /// </summary>
        public readonly string? OsVersion;
        /// <summary>
        /// The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `os_version_used` field.
        /// </summary>
        public readonly string? OsVersionMin;
        /// <summary>
        /// Full OS image version used. For example, if 3815.2 was set in `os_version_min`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).
        /// </summary>
        public readonly string? OsVersionUsed;
        /// <summary>
        /// Specifies a taint list as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.SkeClusterNodePoolTaint> Taints;
        /// <summary>
        /// The volume size in GB. Defaults to `20`
        /// </summary>
        public readonly int? VolumeSize;
        /// <summary>
        /// Specifies the volume type. Defaults to `storage_premium_perf1`.
        /// </summary>
        public readonly string? VolumeType;

        [OutputConstructor]
        private SkeClusterNodePool(
            bool? allowSystemComponents,

            ImmutableArray<string> availabilityZones,

            string? cri,

            ImmutableDictionary<string, string>? labels,

            string machineType,

            int? maxSurge,

            int? maxUnavailable,

            int maximum,

            int minimum,

            string name,

            string? osName,

            string? osVersion,

            string? osVersionMin,

            string? osVersionUsed,

            ImmutableArray<Outputs.SkeClusterNodePoolTaint> taints,

            int? volumeSize,

            string? volumeType)
        {
            AllowSystemComponents = allowSystemComponents;
            AvailabilityZones = availabilityZones;
            Cri = cri;
            Labels = labels;
            MachineType = machineType;
            MaxSurge = maxSurge;
            MaxUnavailable = maxUnavailable;
            Maximum = maximum;
            Minimum = minimum;
            Name = name;
            OsName = osName;
            OsVersion = osVersion;
            OsVersionMin = osVersionMin;
            OsVersionUsed = osVersionUsed;
            Taints = taints;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }
}
