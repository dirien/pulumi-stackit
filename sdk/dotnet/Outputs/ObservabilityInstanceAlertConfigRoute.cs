// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit.Outputs
{

    [OutputType]
    public sealed class ObservabilityInstanceAlertConfigRoute
    {
        /// <summary>
        /// The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
        /// </summary>
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)
        /// </summary>
        public readonly string? GroupInterval;
        /// <summary>
        /// How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
        /// </summary>
        public readonly string? GroupWait;
        /// <summary>
        /// A set of equality matchers an alert has to fulfill to match the node.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Match;
        /// <summary>
        /// A set of regex-matchers an alert has to fulfill to match the node.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? MatchRegex;
        /// <summary>
        /// The name of the receiver to route the alerts to.
        /// </summary>
        public readonly string Receiver;
        /// <summary>
        /// How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).
        /// </summary>
        public readonly string? RepeatInterval;
        /// <summary>
        /// List of child routes.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObservabilityInstanceAlertConfigRouteRoute> Routes;

        [OutputConstructor]
        private ObservabilityInstanceAlertConfigRoute(
            ImmutableArray<string> groupBies,

            string? groupInterval,

            string? groupWait,

            ImmutableDictionary<string, string>? match,

            ImmutableDictionary<string, string>? matchRegex,

            string receiver,

            string? repeatInterval,

            ImmutableArray<Outputs.ObservabilityInstanceAlertConfigRouteRoute> routes)
        {
            GroupBies = groupBies;
            GroupInterval = groupInterval;
            GroupWait = groupWait;
            Match = match;
            MatchRegex = matchRegex;
            Receiver = receiver;
            RepeatInterval = repeatInterval;
            Routes = routes;
        }
    }
}
