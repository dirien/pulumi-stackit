// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Network interface resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/networkInterface:NetworkInterface")]
    public partial class NetworkInterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of CIDR (Classless Inter-Domain Routing) notations.
        /// </summary>
        [Output("allowedAddresses")]
        public Output<ImmutableArray<string>> AllowedAddresses { get; private set; } = null!;

        /// <summary>
        /// The device UUID of the network interface.
        /// </summary>
        [Output("device")]
        public Output<string> Device { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address.
        /// </summary>
        [Output("ipv4")]
        public Output<string> Ipv4 { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a network interface.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The MAC address of network interface.
        /// </summary>
        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        /// <summary>
        /// The name of the network interface.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The network interface ID.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
        /// </summary>
        [Output("security")]
        public Output<bool> Security { get; private set; } = null!;

        /// <summary>
        /// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkInterface(string name, NetworkInterfaceArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/networkInterface:NetworkInterface", name, args ?? new NetworkInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkInterface(string name, Input<string> id, NetworkInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/networkInterface:NetworkInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkInterface Get(string name, Input<string> id, NetworkInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkInterface(name, id, state, options);
        }
    }

    public sealed class NetworkInterfaceArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedAddresses")]
        private InputList<string>? _allowedAddresses;

        /// <summary>
        /// The list of CIDR (Classless Inter-Domain Routing) notations.
        /// </summary>
        public InputList<string> AllowedAddresses
        {
            get => _allowedAddresses ?? (_allowedAddresses = new InputList<string>());
            set => _allowedAddresses = value;
        }

        /// <summary>
        /// The IPv4 address.
        /// </summary>
        [Input("ipv4")]
        public Input<string>? Ipv4 { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a network interface.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the network interface.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
        /// </summary>
        [Input("security")]
        public Input<bool>? Security { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        public NetworkInterfaceArgs()
        {
        }
        public static new NetworkInterfaceArgs Empty => new NetworkInterfaceArgs();
    }

    public sealed class NetworkInterfaceState : global::Pulumi.ResourceArgs
    {
        [Input("allowedAddresses")]
        private InputList<string>? _allowedAddresses;

        /// <summary>
        /// The list of CIDR (Classless Inter-Domain Routing) notations.
        /// </summary>
        public InputList<string> AllowedAddresses
        {
            get => _allowedAddresses ?? (_allowedAddresses = new InputList<string>());
            set => _allowedAddresses = value;
        }

        /// <summary>
        /// The device UUID of the network interface.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The IPv4 address.
        /// </summary>
        [Input("ipv4")]
        public Input<string>? Ipv4 { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a network interface.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The MAC address of network interface.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// The name of the network interface.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network ID to which the network interface is associated.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The network interface ID.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// STACKIT project ID to which the network is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The Network Interface Security. If set to false, then no security groups will apply to this network interface.
        /// </summary>
        [Input("security")]
        public Input<bool>? Security { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security group UUIDs. If security is set to false, setting this field will lead to an error.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NetworkInterfaceState()
        {
        }
        public static new NetworkInterfaceState Empty => new NetworkInterfaceState();
    }
}
