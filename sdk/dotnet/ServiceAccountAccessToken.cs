// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Service account access token schema.
    /// ## Example Usage
    /// 
    /// ### Automatically rotate access tokens
    /// </summary>
    [StackitResourceType("stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken")]
    public partial class ServiceAccountAccessToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier for the access token linked to the service account.
        /// </summary>
        [Output("accessTokenId")]
        public Output<string> AccessTokenId { get; private set; } = null!;

        /// <summary>
        /// Indicate whether the token is currently active or inactive
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// Timestamp indicating when the access token was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID associated with the service account token.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        [Output("rotateWhenChanged")]
        public Output<ImmutableDictionary<string, string>?> RotateWhenChanged { get; private set; } = null!;

        /// <summary>
        /// Email address linked to the service account.
        /// </summary>
        [Output("serviceAccountEmail")]
        public Output<string> ServiceAccountEmail { get; private set; } = null!;

        /// <summary>
        /// JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
        /// </summary>
        [Output("ttlDays")]
        public Output<int> TtlDays { get; private set; } = null!;

        /// <summary>
        /// Estimated expiration timestamp of the access token. For precise validity, check the JWT details.
        /// </summary>
        [Output("validUntil")]
        public Output<string> ValidUntil { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAccountAccessToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAccountAccessToken(string name, ServiceAccountAccessTokenArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken", name, args ?? new ServiceAccountAccessTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAccountAccessToken(string name, Input<string> id, ServiceAccountAccessTokenState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAccountAccessToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAccountAccessToken Get(string name, Input<string> id, ServiceAccountAccessTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAccountAccessToken(name, id, state, options);
        }
    }

    public sealed class ServiceAccountAccessTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// STACKIT project ID associated with the service account token.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// Email address linked to the service account.
        /// </summary>
        [Input("serviceAccountEmail", required: true)]
        public Input<string> ServiceAccountEmail { get; set; } = null!;

        /// <summary>
        /// Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
        /// </summary>
        [Input("ttlDays")]
        public Input<int>? TtlDays { get; set; }

        public ServiceAccountAccessTokenArgs()
        {
        }
        public static new ServiceAccountAccessTokenArgs Empty => new ServiceAccountAccessTokenArgs();
    }

    public sealed class ServiceAccountAccessTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier for the access token linked to the service account.
        /// </summary>
        [Input("accessTokenId")]
        public Input<string>? AccessTokenId { get; set; }

        /// <summary>
        /// Indicate whether the token is currently active or inactive
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Timestamp indicating when the access token was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// STACKIT project ID associated with the service account token.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("rotateWhenChanged")]
        private InputMap<string>? _rotateWhenChanged;

        /// <summary>
        /// A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> RotateWhenChanged
        {
            get => _rotateWhenChanged ?? (_rotateWhenChanged = new InputMap<string>());
            set => _rotateWhenChanged = value;
        }

        /// <summary>
        /// Email address linked to the service account.
        /// </summary>
        [Input("serviceAccountEmail")]
        public Input<string>? ServiceAccountEmail { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the token's validity duration in days. If unspecified, defaults to 90 days.
        /// </summary>
        [Input("ttlDays")]
        public Input<int>? TtlDays { get; set; }

        /// <summary>
        /// Estimated expiration timestamp of the access token. For precise validity, check the JWT details.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        public ServiceAccountAccessTokenState()
        {
        }
        public static new ServiceAccountAccessTokenState Empty => new ServiceAccountAccessTokenState();
    }
}
