// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Redis instance resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/redisInstance:RedisInstance")]
    public partial class RedisInstance : global::Pulumi.CustomResource
    {
        [Output("cfGuid")]
        public Output<string> CfGuid { get; private set; } = null!;

        [Output("cfOrganizationGuid")]
        public Output<string> CfOrganizationGuid { get; private set; } = null!;

        [Output("cfSpaceGuid")]
        public Output<string> CfSpaceGuid { get; private set; } = null!;

        [Output("dashboardUrl")]
        public Output<string> DashboardUrl { get; private set; } = null!;

        [Output("imageUrl")]
        public Output<string> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// ID of the Redis instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Instance name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parameters")]
        public Output<Outputs.RedisInstanceParameters> Parameters { get; private set; } = null!;

        /// <summary>
        /// The selected plan ID.
        /// </summary>
        [Output("planId")]
        public Output<string> PlanId { get; private set; } = null!;

        /// <summary>
        /// The selected plan name.
        /// </summary>
        [Output("planName")]
        public Output<string> PlanName { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The service version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a RedisInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RedisInstance(string name, RedisInstanceArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/redisInstance:RedisInstance", name, args ?? new RedisInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RedisInstance(string name, Input<string> id, RedisInstanceState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/redisInstance:RedisInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RedisInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RedisInstance Get(string name, Input<string> id, RedisInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new RedisInstance(name, id, state, options);
        }
    }

    public sealed class RedisInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        public Input<Inputs.RedisInstanceParametersArgs>? Parameters { get; set; }

        /// <summary>
        /// The selected plan name.
        /// </summary>
        [Input("planName", required: true)]
        public Input<string> PlanName { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The service version.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public RedisInstanceArgs()
        {
        }
        public static new RedisInstanceArgs Empty => new RedisInstanceArgs();
    }

    public sealed class RedisInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("cfGuid")]
        public Input<string>? CfGuid { get; set; }

        [Input("cfOrganizationGuid")]
        public Input<string>? CfOrganizationGuid { get; set; }

        [Input("cfSpaceGuid")]
        public Input<string>? CfSpaceGuid { get; set; }

        [Input("dashboardUrl")]
        public Input<string>? DashboardUrl { get; set; }

        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// ID of the Redis instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Instance name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        public Input<Inputs.RedisInstanceParametersGetArgs>? Parameters { get; set; }

        /// <summary>
        /// The selected plan ID.
        /// </summary>
        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        /// <summary>
        /// The selected plan name.
        /// </summary>
        [Input("planName")]
        public Input<string>? PlanName { get; set; }

        /// <summary>
        /// STACKIT project ID to which the instance is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The service version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public RedisInstanceState()
        {
        }
        public static new RedisInstanceState Empty => new RedisInstanceState();
    }
}
