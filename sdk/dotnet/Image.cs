// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Image resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Representation of an image checksum.
        /// </summary>
        [Output("checksum")]
        public Output<Outputs.ImageChecksum> Checksum { get; private set; } = null!;

        /// <summary>
        /// Properties to set hardware and scheduling settings for an image.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ImageConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The disk format of the image.
        /// </summary>
        [Output("diskFormat")]
        public Output<string> DiskFormat { get; private set; } = null!;

        /// <summary>
        /// The image ID.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The filepath of the raw image file to be uploaded.
        /// </summary>
        [Output("localFilePath")]
        public Output<string> LocalFilePath { get; private set; } = null!;

        /// <summary>
        /// The minimum disk size of the image in GB.
        /// </summary>
        [Output("minDiskSize")]
        public Output<int> MinDiskSize { get; private set; } = null!;

        /// <summary>
        /// The minimum RAM of the image in MB.
        /// </summary>
        [Output("minRam")]
        public Output<int> MinRam { get; private set; } = null!;

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the image is protected.
        /// </summary>
        [Output("protected")]
        public Output<bool> Protected { get; private set; } = null!;

        /// <summary>
        /// The scope of the image.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties to set hardware and scheduling settings for an image.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ImageConfigArgs>? Config { get; set; }

        /// <summary>
        /// The disk format of the image.
        /// </summary>
        [Input("diskFormat", required: true)]
        public Input<string> DiskFormat { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The filepath of the raw image file to be uploaded.
        /// </summary>
        [Input("localFilePath", required: true)]
        public Input<string> LocalFilePath { get; set; } = null!;

        /// <summary>
        /// The minimum disk size of the image in GB.
        /// </summary>
        [Input("minDiskSize")]
        public Input<int>? MinDiskSize { get; set; }

        /// <summary>
        /// The minimum RAM of the image in MB.
        /// </summary>
        [Input("minRam")]
        public Input<int>? MinRam { get; set; }

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Representation of an image checksum.
        /// </summary>
        [Input("checksum")]
        public Input<Inputs.ImageChecksumGetArgs>? Checksum { get; set; }

        /// <summary>
        /// Properties to set hardware and scheduling settings for an image.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ImageConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The disk format of the image.
        /// </summary>
        [Input("diskFormat")]
        public Input<string>? DiskFormat { get; set; }

        /// <summary>
        /// The image ID.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The filepath of the raw image file to be uploaded.
        /// </summary>
        [Input("localFilePath")]
        public Input<string>? LocalFilePath { get; set; }

        /// <summary>
        /// The minimum disk size of the image in GB.
        /// </summary>
        [Input("minDiskSize")]
        public Input<int>? MinDiskSize { get; set; }

        /// <summary>
        /// The minimum RAM of the image in MB.
        /// </summary>
        [Input("minRam")]
        public Input<int>? MinRam { get; set; }

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT project ID to which the image is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Whether the image is protected.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// The scope of the image.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
