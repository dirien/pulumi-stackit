// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Affinity Group schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/affinityGroup:AffinityGroup")]
    public partial class AffinityGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The affinity group ID.
        /// </summary>
        [Output("affinityGroupId")]
        public Output<string> AffinityGroupId { get; private set; } = null!;

        /// <summary>
        /// The servers that are part of the affinity group.
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<string>> Members { get; private set; } = null!;

        /// <summary>
        /// The name of the affinity group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The policy of the affinity group.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a AffinityGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AffinityGroup(string name, AffinityGroupArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/affinityGroup:AffinityGroup", name, args ?? new AffinityGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AffinityGroup(string name, Input<string> id, AffinityGroupState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/affinityGroup:AffinityGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AffinityGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AffinityGroup Get(string name, Input<string> id, AffinityGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AffinityGroup(name, id, state, options);
        }
    }

    public sealed class AffinityGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the affinity group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The policy of the affinity group.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public AffinityGroupArgs()
        {
        }
        public static new AffinityGroupArgs Empty => new AffinityGroupArgs();
    }

    public sealed class AffinityGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The affinity group ID.
        /// </summary>
        [Input("affinityGroupId")]
        public Input<string>? AffinityGroupId { get; set; }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// The servers that are part of the affinity group.
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// The name of the affinity group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The policy of the affinity group.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public AffinityGroupState()
        {
        }
        public static new AffinityGroupState Empty => new AffinityGroupState();
    }
}
