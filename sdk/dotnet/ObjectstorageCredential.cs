// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// ObjectStorage credential resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/objectstorageCredential:ObjectstorageCredential")]
    public partial class ObjectstorageCredential : global::Pulumi.CustomResource
    {
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The credential ID.
        /// </summary>
        [Output("credentialId")]
        public Output<string> CredentialId { get; private set; } = null!;

        /// <summary>
        /// The credential group ID.
        /// </summary>
        [Output("credentialsGroupId")]
        public Output<string> CredentialsGroupId { get; private set; } = null!;

        /// <summary>
        /// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
        /// </summary>
        [Output("expirationTimestamp")]
        public Output<string> ExpirationTimestamp { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the credential group is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("secretAccessKey")]
        public Output<string> SecretAccessKey { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectstorageCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectstorageCredential(string name, ObjectstorageCredentialArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/objectstorageCredential:ObjectstorageCredential", name, args ?? new ObjectstorageCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectstorageCredential(string name, Input<string> id, ObjectstorageCredentialState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/objectstorageCredential:ObjectstorageCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
                AdditionalSecretOutputs =
                {
                    "secretAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectstorageCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectstorageCredential Get(string name, Input<string> id, ObjectstorageCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectstorageCredential(name, id, state, options);
        }
    }

    public sealed class ObjectstorageCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The credential group ID.
        /// </summary>
        [Input("credentialsGroupId", required: true)]
        public Input<string> CredentialsGroupId { get; set; } = null!;

        /// <summary>
        /// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
        /// </summary>
        [Input("expirationTimestamp")]
        public Input<string>? ExpirationTimestamp { get; set; }

        /// <summary>
        /// STACKIT Project ID to which the credential group is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public ObjectstorageCredentialArgs()
        {
        }
        public static new ObjectstorageCredentialArgs Empty => new ObjectstorageCredentialArgs();
    }

    public sealed class ObjectstorageCredentialState : global::Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The credential ID.
        /// </summary>
        [Input("credentialId")]
        public Input<string>? CredentialId { get; set; }

        /// <summary>
        /// The credential group ID.
        /// </summary>
        [Input("credentialsGroupId")]
        public Input<string>? CredentialsGroupId { get; set; }

        /// <summary>
        /// Expiration timestamp, in RFC339 format without fractional seconds. Example: "2025-01-01T00:00:00Z". If not set, the credential never expires.
        /// </summary>
        [Input("expirationTimestamp")]
        public Input<string>? ExpirationTimestamp { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// STACKIT Project ID to which the credential group is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ObjectstorageCredentialState()
        {
        }
        public static new ObjectstorageCredentialState Empty => new ObjectstorageCredentialState();
    }
}
