// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/resourcemanagerProject:ResourcemanagerProject")]
    public partial class ResourcemanagerProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Project container ID. Globally unique, user-friendly identifier.
        /// </summary>
        [Output("containerId")]
        public Output<string> ContainerId { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex
        /// [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}. To create a
        /// project within a STACKIT Network Area, setting the label `networkArea=&lt;networkAreaID&gt;` is required. This can not be
        /// changed after project creation.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Project name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will
        /// have no effect.
        /// </summary>
        [Output("ownerEmail")]
        public Output<string> OwnerEmail { get; private set; } = null!;

        /// <summary>
        /// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
        /// </summary>
        [Output("parentContainerId")]
        public Output<string> ParentContainerId { get; private set; } = null!;

        /// <summary>
        /// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a ResourcemanagerProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourcemanagerProject(string name, ResourcemanagerProjectArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/resourcemanagerProject:ResourcemanagerProject", name, args ?? new ResourcemanagerProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourcemanagerProject(string name, Input<string> id, ResourcemanagerProjectState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/resourcemanagerProject:ResourcemanagerProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourcemanagerProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourcemanagerProject Get(string name, Input<string> id, ResourcemanagerProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourcemanagerProject(name, id, state, options);
        }
    }

    public sealed class ResourcemanagerProjectArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex
        /// [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}. To create a
        /// project within a STACKIT Network Area, setting the label `networkArea=&lt;networkAreaID&gt;` is required. This can not be
        /// changed after project creation.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Project name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will
        /// have no effect.
        /// </summary>
        [Input("ownerEmail", required: true)]
        public Input<string> OwnerEmail { get; set; } = null!;

        /// <summary>
        /// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
        /// </summary>
        [Input("parentContainerId", required: true)]
        public Input<string> ParentContainerId { get; set; } = null!;

        public ResourcemanagerProjectArgs()
        {
        }
        public static new ResourcemanagerProjectArgs Empty => new ResourcemanagerProjectArgs();
    }

    public sealed class ResourcemanagerProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project container ID. Globally unique, user-friendly identifier.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex
        /// [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}. To create a
        /// project within a STACKIT Network Area, setting the label `networkArea=&lt;networkAreaID&gt;` is required. This can not be
        /// changed after project creation.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Project name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will
        /// have no effect.
        /// </summary>
        [Input("ownerEmail")]
        public Input<string>? OwnerEmail { get; set; }

        /// <summary>
        /// Parent resource identifier. Both container ID (user-friendly) and UUID are supported
        /// </summary>
        [Input("parentContainerId")]
        public Input<string>? ParentContainerId { get; set; }

        /// <summary>
        /// Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public ResourcemanagerProjectState()
        {
        }
        public static new ResourcemanagerProjectState Empty => new ResourcemanagerProjectState();
    }
}
