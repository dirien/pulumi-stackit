// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetSkeCluster
    {
        /// <summary>
        /// SKE Cluster data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_ske_cluster" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-name"
        /// }
        /// ```
        /// </summary>
        public static Task<GetSkeClusterResult> InvokeAsync(GetSkeClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSkeClusterResult>("stackit:index/getSkeCluster:getSkeCluster", args ?? new GetSkeClusterArgs(), options.WithDefaults());

        /// <summary>
        /// SKE Cluster data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_ske_cluster" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-name"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSkeClusterResult> Invoke(GetSkeClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSkeClusterResult>("stackit:index/getSkeCluster:getSkeCluster", args ?? new GetSkeClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// SKE Cluster data source schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_ske_cluster" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   name       = "example-name"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSkeClusterResult> Invoke(GetSkeClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSkeClusterResult>("stackit:index/getSkeCluster:getSkeCluster", args ?? new GetSkeClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSkeClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetSkeClusterArgs()
        {
        }
        public static new GetSkeClusterArgs Empty => new GetSkeClusterArgs();
    }

    public sealed class GetSkeClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetSkeClusterInvokeArgs()
        {
        }
        public static new GetSkeClusterInvokeArgs Empty => new GetSkeClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetSkeClusterResult
    {
        /// <summary>
        /// DEPRECATED as of Kubernetes 1.25+
        /// Flag to specify if privileged mode for containers is enabled or not.
        /// This should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).
        /// </summary>
        public readonly bool AllowPrivilegedContainers;
        /// <summary>
        /// The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.
        /// </summary>
        public readonly ImmutableArray<string> EgressAddressRanges;
        /// <summary>
        /// A single extensions block as defined below
        /// </summary>
        public readonly Outputs.GetSkeClusterExtensionsResult Extensions;
        /// <summary>
        /// One or more hibernation block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSkeClusterHibernationResult> Hibernations;
        public readonly string Id;
        /// <summary>
        /// Kubernetes version. This field is deprecated, use `kubernetes_version_used` instead
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// The minimum Kubernetes version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the `kubernetes_version_used` field.
        /// </summary>
        public readonly string KubernetesVersionMin;
        /// <summary>
        /// Full Kubernetes version used. For example, if `1.22` was selected, this value may result to `1.22.15`
        /// </summary>
        public readonly string KubernetesVersionUsed;
        /// <summary>
        /// A single maintenance block as defined below
        /// </summary>
        public readonly Outputs.GetSkeClusterMaintenanceResult Maintenance;
        /// <summary>
        /// The cluster name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network block as defined below.
        /// </summary>
        public readonly Outputs.GetSkeClusterNetworkResult Network;
        /// <summary>
        /// One or more `node_pool` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSkeClusterNodePoolResult> NodePools;
        /// <summary>
        /// STACKIT project ID to which the cluster is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        public readonly string? Region;

        [OutputConstructor]
        private GetSkeClusterResult(
            bool allowPrivilegedContainers,

            ImmutableArray<string> egressAddressRanges,

            Outputs.GetSkeClusterExtensionsResult extensions,

            ImmutableArray<Outputs.GetSkeClusterHibernationResult> hibernations,

            string id,

            string kubernetesVersion,

            string kubernetesVersionMin,

            string kubernetesVersionUsed,

            Outputs.GetSkeClusterMaintenanceResult maintenance,

            string name,

            Outputs.GetSkeClusterNetworkResult network,

            ImmutableArray<Outputs.GetSkeClusterNodePoolResult> nodePools,

            string projectId,

            string? region)
        {
            AllowPrivilegedContainers = allowPrivilegedContainers;
            EgressAddressRanges = egressAddressRanges;
            Extensions = extensions;
            Hibernations = hibernations;
            Id = id;
            KubernetesVersion = kubernetesVersion;
            KubernetesVersionMin = kubernetesVersionMin;
            KubernetesVersionUsed = kubernetesVersionUsed;
            Maintenance = maintenance;
            Name = name;
            Network = network;
            NodePools = nodePools;
            ProjectId = projectId;
            Region = region;
        }
    }
}
