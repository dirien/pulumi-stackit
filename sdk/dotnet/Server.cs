// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Server resource schema. Must have a region specified in the provider configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ### With key pair
    /// 
    /// ### Boot from volume
    /// 
    /// ### Boot from existing volume
    /// 
    /// ### Network setup
    /// 
    /// ### Server with attached volume
    /// 
    /// ### Server with user data (cloud-init)
    /// 
    /// ### Additional Examples
    /// </summary>
    [StackitResourceType("stackit:index/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The affinity group the server is assigned to.
        /// </summary>
        [Output("affinityGroup")]
        public Output<string?> AffinityGroup { get; private set; } = null!;

        /// <summary>
        /// The availability zone of the server.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The boot volume for the server
        /// </summary>
        [Output("bootVolume")]
        public Output<Outputs.ServerBootVolume?> BootVolume { get; private set; } = null!;

        /// <summary>
        /// Date-time when the server was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
        /// </summary>
        [Output("desiredStatus")]
        public Output<string?> DesiredStatus { get; private set; } = null!;

        /// <summary>
        /// The image ID to be used for an ephemeral disk on the server.
        /// </summary>
        [Output("imageId")]
        public Output<string?> ImageId { get; private set; } = null!;

        /// <summary>
        /// The name of the keypair used during server creation.
        /// </summary>
        [Output("keypairName")]
        public Output<string?> KeypairName { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Date-time when the server was launched
        /// </summary>
        [Output("launchedAt")]
        public Output<string> LaunchedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<string>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The server ID.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// Date-time when the server was updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// User data that is passed via cloud-init to the server.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The affinity group the server is assigned to.
        /// </summary>
        [Input("affinityGroup")]
        public Input<string>? AffinityGroup { get; set; }

        /// <summary>
        /// The availability zone of the server.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The boot volume for the server
        /// </summary>
        [Input("bootVolume")]
        public Input<Inputs.ServerBootVolumeArgs>? BootVolume { get; set; }

        /// <summary>
        /// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
        /// </summary>
        [Input("desiredStatus")]
        public Input<string>? DesiredStatus { get; set; }

        /// <summary>
        /// The image ID to be used for an ephemeral disk on the server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The name of the keypair used during server creation.
        /// </summary>
        [Input("keypairName")]
        public Input<string>? KeypairName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<string>? _networkInterfaces;

        /// <summary>
        /// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
        /// </summary>
        public InputList<string> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<string>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// User data that is passed via cloud-init to the server.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The affinity group the server is assigned to.
        /// </summary>
        [Input("affinityGroup")]
        public Input<string>? AffinityGroup { get; set; }

        /// <summary>
        /// The availability zone of the server.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The boot volume for the server
        /// </summary>
        [Input("bootVolume")]
        public Input<Inputs.ServerBootVolumeGetArgs>? BootVolume { get; set; }

        /// <summary>
        /// Date-time when the server was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.
        /// </summary>
        [Input("desiredStatus")]
        public Input<string>? DesiredStatus { get; set; }

        /// <summary>
        /// The image ID to be used for an ephemeral disk on the server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The name of the keypair used during server creation.
        /// </summary>
        [Input("keypairName")]
        public Input<string>? KeypairName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Date-time when the server was launched
        /// </summary>
        [Input("launchedAt")]
        public Input<string>? LaunchedAt { get; set; }

        /// <summary>
        /// Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<string>? _networkInterfaces;

        /// <summary>
        /// The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.
        /// </summary>
        public InputList<string> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<string>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// STACKIT project ID to which the server is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The server ID.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        /// <summary>
        /// Date-time when the server was updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// User data that is passed via cloud-init to the server.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
