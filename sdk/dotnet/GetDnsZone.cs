// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetDnsZone
    {
        /// <summary>
        /// DNS Zone resource schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_dns_zone" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   zone_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetDnsZoneResult> InvokeAsync(GetDnsZoneArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsZoneResult>("stackit:index/getDnsZone:getDnsZone", args ?? new GetDnsZoneArgs(), options.WithDefaults());

        /// <summary>
        /// DNS Zone resource schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_dns_zone" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   zone_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetDnsZoneResult> Invoke(GetDnsZoneInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneResult>("stackit:index/getDnsZone:getDnsZone", args ?? new GetDnsZoneInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// DNS Zone resource schema.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_dns_zone" "example" {
        ///   project_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   zone_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetDnsZoneResult> Invoke(GetDnsZoneInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneResult>("stackit:index/getDnsZone:getDnsZone", args ?? new GetDnsZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsZoneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        [Input("dnsName")]
        public string? DnsName { get; set; }

        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The zone ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetDnsZoneArgs()
        {
        }
        public static new GetDnsZoneArgs Empty => new GetDnsZoneArgs();
    }

    public sealed class GetDnsZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The zone ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetDnsZoneInvokeArgs()
        {
        }
        public static new GetDnsZoneInvokeArgs Empty => new GetDnsZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsZoneResult
    {
        /// <summary>
        /// The access control list.
        /// </summary>
        public readonly string Acl;
        public readonly bool Active;
        /// <summary>
        /// A contact e-mail for the zone.
        /// </summary>
        public readonly string ContactEmail;
        /// <summary>
        /// Default time to live.
        /// </summary>
        public readonly int DefaultTtl;
        /// <summary>
        /// Description of the zone.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The zone name. E.g. `example.com`
        /// </summary>
        public readonly string? DnsName;
        /// <summary>
        /// Expire time.
        /// </summary>
        public readonly int ExpireTime;
        public readonly string Id;
        /// <summary>
        /// Specifies, if the zone is a reverse zone or not.
        /// </summary>
        public readonly bool IsReverseZone;
        /// <summary>
        /// The user given name of the zone.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Negative caching.
        /// </summary>
        public readonly int NegativeCache;
        /// <summary>
        /// Primary name server for secondary zone.
        /// </summary>
        public readonly ImmutableArray<string> Primaries;
        /// <summary>
        /// Primary name server. FQDN.
        /// </summary>
        public readonly string PrimaryNameServer;
        /// <summary>
        /// STACKIT project ID to which the dns zone is associated.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Record count how many records are in the zone.
        /// </summary>
        public readonly int RecordCount;
        /// <summary>
        /// Refresh time.
        /// </summary>
        public readonly int RefreshTime;
        /// <summary>
        /// Retry time.
        /// </summary>
        public readonly int RetryTime;
        /// <summary>
        /// Serial number.
        /// </summary>
        public readonly int SerialNumber;
        /// <summary>
        /// Zone state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Zone type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Visibility of the zone.
        /// </summary>
        public readonly string Visibility;
        /// <summary>
        /// The zone ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetDnsZoneResult(
            string acl,

            bool active,

            string contactEmail,

            int defaultTtl,

            string description,

            string? dnsName,

            int expireTime,

            string id,

            bool isReverseZone,

            string name,

            int negativeCache,

            ImmutableArray<string> primaries,

            string primaryNameServer,

            string projectId,

            int recordCount,

            int refreshTime,

            int retryTime,

            int serialNumber,

            string state,

            string type,

            string visibility,

            string? zoneId)
        {
            Acl = acl;
            Active = active;
            ContactEmail = contactEmail;
            DefaultTtl = defaultTtl;
            Description = description;
            DnsName = dnsName;
            ExpireTime = expireTime;
            Id = id;
            IsReverseZone = isReverseZone;
            Name = name;
            NegativeCache = negativeCache;
            Primaries = primaries;
            PrimaryNameServer = primaryNameServer;
            ProjectId = projectId;
            RecordCount = recordCount;
            RefreshTime = refreshTime;
            RetryTime = retryTime;
            SerialNumber = serialNumber;
            State = state;
            Type = type;
            Visibility = visibility;
            ZoneId = zoneId;
        }
    }
}
