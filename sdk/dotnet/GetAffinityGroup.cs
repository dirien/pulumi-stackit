// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    public static class GetAffinityGroup
    {
        /// <summary>
        /// Affinity Group schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_affinity_group" "example" {
        ///   project_id        = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   affinity_group_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Task<GetAffinityGroupResult> InvokeAsync(GetAffinityGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAffinityGroupResult>("stackit:index/getAffinityGroup:getAffinityGroup", args ?? new GetAffinityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Affinity Group schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_affinity_group" "example" {
        ///   project_id        = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   affinity_group_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetAffinityGroupResult> Invoke(GetAffinityGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAffinityGroupResult>("stackit:index/getAffinityGroup:getAffinityGroup", args ?? new GetAffinityGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Affinity Group schema. Must have a `region` specified in the provider configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```terraform
        /// data "stackit_affinity_group" "example" {
        ///   project_id        = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        ///   affinity_group_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// }
        /// ```
        /// </summary>
        public static Output<GetAffinityGroupResult> Invoke(GetAffinityGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAffinityGroupResult>("stackit:index/getAffinityGroup:getAffinityGroup", args ?? new GetAffinityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAffinityGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The affinity group ID.
        /// </summary>
        [Input("affinityGroupId", required: true)]
        public string AffinityGroupId { get; set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetAffinityGroupArgs()
        {
        }
        public static new GetAffinityGroupArgs Empty => new GetAffinityGroupArgs();
    }

    public sealed class GetAffinityGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The affinity group ID.
        /// </summary>
        [Input("affinityGroupId", required: true)]
        public Input<string> AffinityGroupId { get; set; } = null!;

        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetAffinityGroupInvokeArgs()
        {
        }
        public static new GetAffinityGroupInvokeArgs Empty => new GetAffinityGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetAffinityGroupResult
    {
        /// <summary>
        /// The affinity group ID.
        /// </summary>
        public readonly string AffinityGroupId;
        public readonly string Id;
        /// <summary>
        /// Affinity Group schema. Must have a `region` specified in the provider configuration.
        /// </summary>
        public readonly ImmutableArray<string> Members;
        /// <summary>
        /// The name of the affinity group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The policy of the affinity group.
        /// </summary>
        public readonly string Policy;
        /// <summary>
        /// STACKIT Project ID to which the affinity group is associated.
        /// </summary>
        public readonly string ProjectId;

        [OutputConstructor]
        private GetAffinityGroupResult(
            string affinityGroupId,

            string id,

            ImmutableArray<string> members,

            string name,

            string policy,

            string projectId)
        {
            AffinityGroupId = affinityGroupId;
            Id = id;
            Members = members;
            Name = name;
            Policy = policy;
            ProjectId = projectId;
        }
    }
}
