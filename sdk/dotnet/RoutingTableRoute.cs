// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Stackit
{
    /// <summary>
    /// Routing table route resource schema. Must have a `region` specified in the provider configuration.
    /// 
    /// &gt; This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.
    /// 
    /// ## Example Usage
    /// </summary>
    [StackitResourceType("stackit:index/routingTableRoute:RoutingTableRoute")]
    public partial class RoutingTableRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date-time when the route was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Destination of the route.
        /// </summary>
        [Output("destination")]
        public Output<Outputs.RoutingTableRouteDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The network area ID to which the routing table is associated.
        /// </summary>
        [Output("networkAreaId")]
        public Output<string> NetworkAreaId { get; private set; } = null!;

        /// <summary>
        /// Next hop destination.
        /// </summary>
        [Output("nextHop")]
        public Output<Outputs.RoutingTableRouteNextHop> NextHop { get; private set; } = null!;

        /// <summary>
        /// STACKIT organization ID to which the routing table is associated.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The ID of the route.
        /// </summary>
        [Output("routeId")]
        public Output<string> RouteId { get; private set; } = null!;

        /// <summary>
        /// The routing tables ID.
        /// </summary>
        [Output("routingTableId")]
        public Output<string> RoutingTableId { get; private set; } = null!;

        /// <summary>
        /// Date-time when the route was updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a RoutingTableRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoutingTableRoute(string name, RoutingTableRouteArgs args, CustomResourceOptions? options = null)
            : base("stackit:index/routingTableRoute:RoutingTableRoute", name, args ?? new RoutingTableRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoutingTableRoute(string name, Input<string> id, RoutingTableRouteState? state = null, CustomResourceOptions? options = null)
            : base("stackit:index/routingTableRoute:RoutingTableRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-stackit",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoutingTableRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoutingTableRoute Get(string name, Input<string> id, RoutingTableRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new RoutingTableRoute(name, id, state, options);
        }
    }

    public sealed class RoutingTableRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination of the route.
        /// </summary>
        [Input("destination", required: true)]
        public Input<Inputs.RoutingTableRouteDestinationArgs> Destination { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network area ID to which the routing table is associated.
        /// </summary>
        [Input("networkAreaId", required: true)]
        public Input<string> NetworkAreaId { get; set; } = null!;

        /// <summary>
        /// Next hop destination.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<Inputs.RoutingTableRouteNextHopArgs> NextHop { get; set; } = null!;

        /// <summary>
        /// STACKIT organization ID to which the routing table is associated.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The routing tables ID.
        /// </summary>
        [Input("routingTableId", required: true)]
        public Input<string> RoutingTableId { get; set; } = null!;

        public RoutingTableRouteArgs()
        {
        }
        public static new RoutingTableRouteArgs Empty => new RoutingTableRouteArgs();
    }

    public sealed class RoutingTableRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date-time when the route was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Destination of the route.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.RoutingTableRouteDestinationGetArgs>? Destination { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are key-value string pairs which can be attached to a resource container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The network area ID to which the routing table is associated.
        /// </summary>
        [Input("networkAreaId")]
        public Input<string>? NetworkAreaId { get; set; }

        /// <summary>
        /// Next hop destination.
        /// </summary>
        [Input("nextHop")]
        public Input<Inputs.RoutingTableRouteNextHopGetArgs>? NextHop { get; set; }

        /// <summary>
        /// STACKIT organization ID to which the routing table is associated.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The resource region. If not defined, the provider region is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the route.
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        /// <summary>
        /// The routing tables ID.
        /// </summary>
        [Input("routingTableId")]
        public Input<string>? RoutingTableId { get; set; }

        /// <summary>
        /// Date-time when the route was updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public RoutingTableRouteState()
        {
        }
        public static new RoutingTableRouteState Empty => new RoutingTableRouteState();
    }
}
