{
    "name": "stackit",
    "displayName": "stackit",
    "description": "A Pulumi package for creating and managing stackit resources.",
    "keywords": [
        "pulumi",
        "stackit",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`stackit` Terraform Provider](https://github.com/stackitcloud/terraform-provider-stackit).",
    "repository": "https://github.com/dirien/pulumi-stackit",
    "pluginDownloadURL": "github://api.github.com/dirien/pulumi-stackit",
    "publisher": "dirien",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "ediri"
        },
        "go": {
            "importBasePath": "github.com/dirien/pulumi-stackit/sdk/go/stackit",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@ediri/pulumi-stackit",
            "packageDescription": "A Pulumi package for creating and managing stackit resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/stackitcloud/terraform-provider-stackit)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-stackit` repo](https://github.com/dirien/pulumi-stackit/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-stackit` repo](https://github.com/stackitcloud/terraform-provider-stackit/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "ediri_stackit",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/stackitcloud/terraform-provider-stackit)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-stackit` repo](https://github.com/dirien/pulumi-stackit/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-stackit` repo](https://github.com/stackitcloud/terraform-provider-stackit/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "authorizationCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Membership service"
            },
            "cdnCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the CDN service"
            },
            "credentialsPath": {
                "type": "string",
                "description": "Path of JSON from where the credentials are read. Takes precedence over the env var `STACKIT_CREDENTIALS_PATH`. Default value is `~/.stackit/credentials.json`."
            },
            "defaultRegion": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global"
            },
            "dnsCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the DNS service"
            },
            "enableBetaResources": {
                "type": "boolean",
                "description": "Enable beta resources. Default is false."
            },
            "experiments": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Enables experiments. These are unstable features without official support. More information can be found in the README. Available Experiments: iam, routing-tables, network"
            },
            "gitCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Git service"
            },
            "iaasCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the IaaS service"
            },
            "loadbalancerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Load Balancer service"
            },
            "logmeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the LogMe service"
            },
            "mariadbCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MariaDB service"
            },
            "modelservingCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the AI Model Serving service"
            },
            "mongodbflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MongoDB Flex service"
            },
            "objectstorageCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Object Storage service"
            },
            "observabilityCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Observability service"
            },
            "opensearchCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the OpenSearch service"
            },
            "postgresflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the PostgresFlex service"
            },
            "privateKey": {
                "type": "string",
                "description": "Private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path for the private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "rabbitmqCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the RabbitMQ service"
            },
            "redisCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Redis service"
            },
            "region": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global",
                "deprecationMessage": "This attribute is deprecated. Use 'default_region' instead"
            },
            "resourcemanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Resource Manager service"
            },
            "secretsmanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Secrets Manager service"
            },
            "serverBackupCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Backup service"
            },
            "serverUpdateCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Update service"
            },
            "serviceAccountCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Account service"
            },
            "serviceAccountEmail": {
                "type": "string",
                "description": "Service account email. It can also be set using the environment variable STACKIT_SERVICE_ACCOUNT_EMAIL. It is required if you want to use the resource manager project resource.",
                "deprecationMessage": "The `service_account_email` field has been deprecated because it is not required. Will be removed after June 12th 2025."
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountKeyPath": {
                "type": "string",
                "description": "Path for the service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountToken": {
                "type": "string",
                "description": "Token used for authentication. If set, the token flow will be used to authenticate all operations.",
                "deprecationMessage": "Authentication via Service Account Token is deprecated and will be removed on December 17, 2025. Please use `service_account_key` or `service_account_key_path` instead. For a smooth transition, refer to our migration guide: https://docs.stackit.cloud/stackit/en/deprecation-plan-for-service-account-access-tokens-and-migration-guide-373293307.html"
            },
            "serviceEnablementCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Enablement API"
            },
            "skeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Kubernetes Engine (SKE) service"
            },
            "sqlserverflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the SQL Server Flex service"
            },
            "tokenCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the token API, which is used to request access tokens when using the key flow"
            }
        }
    },
    "types": {
        "stackit:index/CdnDistributionConfig:CdnDistributionConfig": {
            "properties": {
                "backend": {
                    "$ref": "#/types/stackit:index/CdnDistributionConfigBackend:CdnDistributionConfigBackend",
                    "description": "The configured backend for the distribution\n"
                },
                "blockedCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The configured countries where distribution of content is blocked\n"
                },
                "optimizer": {
                    "$ref": "#/types/stackit:index/CdnDistributionConfigOptimizer:CdnDistributionConfigOptimizer",
                    "description": "Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The configured regions where content will be hosted\n"
                }
            },
            "type": "object",
            "required": [
                "backend",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backend",
                        "optimizer",
                        "regions"
                    ]
                }
            }
        },
        "stackit:index/CdnDistributionConfigBackend:CdnDistributionConfigBackend": {
            "properties": {
                "originRequestHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The configured origin request headers for the backend\n"
                },
                "originUrl": {
                    "type": "string",
                    "description": "The configured backend type for the distribution\n"
                },
                "type": {
                    "type": "string",
                    "description": "The configured backend type. Supported values are: `http`.\n"
                }
            },
            "type": "object",
            "required": [
                "originUrl",
                "type"
            ]
        },
        "stackit:index/CdnDistributionConfigOptimizer:CdnDistributionConfigOptimizer": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "stackit:index/CdnDistributionDomain:CdnDistributionDomain": {
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain errors\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the domain. Each distribution has one domain of type \"managed\", and domains of type \"custom\" may be additionally created by the user\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "errors",
                        "name",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "stackit:index/ImageChecksum:ImageChecksum": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm for the checksum of the image data.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "Hexdigest of the checksum of the image data.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "algorithm",
                        "digest"
                    ]
                }
            }
        },
        "stackit:index/ImageConfig:ImageConfig": {
            "properties": {
                "bootMenu": {
                    "type": "boolean",
                    "description": "Enables the BIOS bootmenu.\n"
                },
                "cdromBus": {
                    "type": "string",
                    "description": "Sets CDROM bus controller type.\n"
                },
                "diskBus": {
                    "type": "string",
                    "description": "Sets Disk bus controller type.\n"
                },
                "nicModel": {
                    "type": "string",
                    "description": "Sets virtual network interface model.\n"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "Enables operating system specific optimizations.\n"
                },
                "operatingSystemDistro": {
                    "type": "string",
                    "description": "Operating system distribution.\n"
                },
                "operatingSystemVersion": {
                    "type": "string",
                    "description": "Version of the operating system.\n"
                },
                "rescueBus": {
                    "type": "string",
                    "description": "Sets the device bus when the image is used as a rescue image.\n"
                },
                "rescueDevice": {
                    "type": "string",
                    "description": "Sets the device when the image is used as a rescue image.\n"
                },
                "secureBoot": {
                    "type": "boolean",
                    "description": "Enables Secure Boot.\n"
                },
                "uefi": {
                    "type": "boolean",
                    "description": "Enables UEFI boot.\n"
                },
                "videoModel": {
                    "type": "string",
                    "description": "Sets Graphic device model.\n"
                },
                "virtioScsi": {
                    "type": "boolean",
                    "description": "Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootMenu",
                        "cdromBus",
                        "diskBus",
                        "nicModel",
                        "operatingSystem",
                        "operatingSystemDistro",
                        "operatingSystemVersion",
                        "rescueBus",
                        "rescueDevice",
                        "secureBoot",
                        "uefi",
                        "videoModel",
                        "virtioScsi"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerListener:LoadbalancerListener": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number where we listen for traffic.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol is the highest network protocol we understand to load balance. Supported values are: `PROTOCOL_UNSPECIFIED`, `PROTOCOL_TCP`, `PROTOCOL_UDP`, `PROTOCOL_TCP_PROXY`, `PROTOCOL_TLS_PASSTHROUGH`.\n"
                },
                "serverNameIndicators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerListenerServerNameIndicator:LoadbalancerListenerServerNameIndicator"
                    },
                    "description": "A list of domain names to match in order to pass TLS traffic to the target pool in the current listener\n"
                },
                "targetPool": {
                    "type": "string",
                    "description": "Reference target pool by target pool name.\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "protocol",
                "targetPool"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "port",
                        "protocol",
                        "targetPool"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerListenerServerNameIndicator:LoadbalancerListenerServerNameIndicator": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A domain name to match in order to pass TLS traffic to the target pool in the current listener\n"
                }
            },
            "type": "object"
        },
        "stackit:index/LoadbalancerNetwork:LoadbalancerNetwork": {
            "properties": {
                "networkId": {
                    "type": "string",
                    "description": "Openstack network ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role defines how the load balancer is using the network. Supported values are: `ROLE_UNSPECIFIED`, `ROLE_LISTENERS_AND_TARGETS`, `ROLE_LISTENERS`, `ROLE_TARGETS`.\n"
                }
            },
            "type": "object",
            "required": [
                "networkId",
                "role"
            ]
        },
        "stackit:index/LoadbalancerOptions:LoadbalancerOptions": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Load Balancer is accessible only from an IP address in this range.\n"
                },
                "observability": {
                    "$ref": "#/types/stackit:index/LoadbalancerOptionsObservability:LoadbalancerOptionsObservability",
                    "description": "We offer Load Balancer metrics observability via ARGUS or external solutions. Not changeable after creation.\n"
                },
                "privateNetworkOnly": {
                    "type": "boolean",
                    "description": "If true, Load Balancer is accessible only via a private network IP address.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acls",
                        "observability",
                        "privateNetworkOnly"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerOptionsObservability:LoadbalancerOptionsObservability": {
            "properties": {
                "logs": {
                    "$ref": "#/types/stackit:index/LoadbalancerOptionsObservabilityLogs:LoadbalancerOptionsObservabilityLogs",
                    "description": "Observability logs configuration. Not changeable after creation.\n"
                },
                "metrics": {
                    "$ref": "#/types/stackit:index/LoadbalancerOptionsObservabilityMetrics:LoadbalancerOptionsObservabilityMetrics",
                    "description": "Observability metrics configuration. Not changeable after creation.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "logs",
                        "metrics"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerOptionsObservabilityLogs:LoadbalancerOptionsObservabilityLogs": {
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Credentials reference for logs. Not changeable after creation.\n"
                },
                "pushUrl": {
                    "type": "string",
                    "description": "Credentials reference for logs. Not changeable after creation.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentialsRef",
                        "pushUrl"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerOptionsObservabilityMetrics:LoadbalancerOptionsObservabilityMetrics": {
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Credentials reference for metrics. Not changeable after creation.\n"
                },
                "pushUrl": {
                    "type": "string",
                    "description": "Credentials reference for metrics. Not changeable after creation.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentialsRef",
                        "pushUrl"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerTargetPool:LoadbalancerTargetPool": {
            "properties": {
                "activeHealthCheck": {
                    "$ref": "#/types/stackit:index/LoadbalancerTargetPoolActiveHealthCheck:LoadbalancerTargetPoolActiveHealthCheck"
                },
                "name": {
                    "type": "string",
                    "description": "Target pool name.\n"
                },
                "sessionPersistence": {
                    "$ref": "#/types/stackit:index/LoadbalancerTargetPoolSessionPersistence:LoadbalancerTargetPoolSessionPersistence",
                    "description": "Here you can setup various session persistence options, so far only \"`use_source_ip_address`\" is supported.\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "Identical port number where each target listens for traffic.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerTargetPoolTarget:LoadbalancerTargetPoolTarget"
                    },
                    "description": "List of all targets which will be used in the pool. Limited to 1000.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "targetPort",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "activeHealthCheck",
                        "name",
                        "targetPort",
                        "targets"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerTargetPoolActiveHealthCheck:LoadbalancerTargetPoolActiveHealthCheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Healthy threshold of the health checking.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Interval duration of health checking in seconds.\n"
                },
                "intervalJitter": {
                    "type": "string",
                    "description": "Interval duration threshold of the health checking in seconds.\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Active health checking timeout duration in seconds.\n"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Unhealthy threshold of the health checking.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "healthyThreshold",
                        "interval",
                        "intervalJitter",
                        "timeout",
                        "unhealthyThreshold"
                    ]
                }
            }
        },
        "stackit:index/LoadbalancerTargetPoolSessionPersistence:LoadbalancerTargetPoolSessionPersistence": {
            "properties": {
                "useSourceIpAddress": {
                    "type": "boolean",
                    "description": "If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.\n"
                }
            },
            "type": "object"
        },
        "stackit:index/LoadbalancerTargetPoolTarget:LoadbalancerTargetPoolTarget": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Target display name\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Target IP\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "ip"
            ]
        },
        "stackit:index/LogmeInstanceParameters:LogmeInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "fluentdTcp": {
                    "type": "integer"
                },
                "fluentdTls": {
                    "type": "integer"
                },
                "fluentdTlsCiphers": {
                    "type": "string"
                },
                "fluentdTlsMaxVersion": {
                    "type": "string"
                },
                "fluentdTlsMinVersion": {
                    "type": "string"
                },
                "fluentdTlsVersion": {
                    "type": "string"
                },
                "fluentdUdp": {
                    "type": "integer"
                },
                "graphite": {
                    "type": "string",
                    "description": "If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).\n"
                },
                "ismDeletionAfter": {
                    "type": "string",
                    "description": "Combination of an integer and a timerange when an index will be considered \"old\" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.\n"
                },
                "ismJitter": {
                    "type": "number"
                },
                "ismJobInterval": {
                    "type": "integer",
                    "description": "Jitter of the execution time.\n"
                },
                "javaHeapspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.\n"
                },
                "javaMaxmetaspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted (in seconds).\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "opensearchTlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "opensearchTlsProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableMonitoring",
                        "fluentdTcp",
                        "fluentdTls",
                        "fluentdTlsCiphers",
                        "fluentdTlsMaxVersion",
                        "fluentdTlsMinVersion",
                        "fluentdTlsVersion",
                        "fluentdUdp",
                        "graphite",
                        "ismDeletionAfter",
                        "ismJitter",
                        "ismJobInterval",
                        "javaHeapspace",
                        "javaMaxmetaspace",
                        "maxDiskThreshold",
                        "metricsFrequency",
                        "metricsPrefix",
                        "monitoringInstanceId",
                        "opensearchTlsCiphers",
                        "opensearchTlsProtocols",
                        "sgwAcl",
                        "syslogs"
                    ]
                }
            }
        },
        "stackit:index/MariadbInstanceParameters:MariadbInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance. Monitoring instances with the plan \"Observability-Monitoring-Starter\" are not supported.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableMonitoring",
                        "graphite",
                        "maxDiskThreshold",
                        "metricsFrequency",
                        "metricsPrefix",
                        "monitoringInstanceId",
                        "sgwAcl",
                        "syslogs"
                    ]
                }
            }
        },
        "stackit:index/MongodbflexInstanceFlavor:MongodbflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpu",
                        "description",
                        "id",
                        "ram"
                    ]
                }
            }
        },
        "stackit:index/MongodbflexInstanceOptions:MongodbflexInstanceOptions": {
            "properties": {
                "dailySnapshotRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that daily backups will be retained.\n"
                },
                "monthlySnapshotRetentionMonths": {
                    "type": "integer",
                    "description": "The number of months that monthly backups will be retained.\n"
                },
                "pointInTimeWindowHours": {
                    "type": "integer",
                    "description": "The number of hours back in time the point-in-time recovery feature will be able to recover.\n"
                },
                "snapshotRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that continuous backups (controlled via the `backup_schedule`) will be retained.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the MongoDB Flex instance. Supported values are: `Replica`, `Sharded`, `Single`.\n"
                },
                "weeklySnapshotRetentionWeeks": {
                    "type": "integer",
                    "description": "The number of weeks that weekly backups will be retained.\n"
                }
            },
            "type": "object",
            "required": [
                "pointInTimeWindowHours",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dailySnapshotRetentionDays",
                        "monthlySnapshotRetentionMonths",
                        "pointInTimeWindowHours",
                        "snapshotRetentionDays",
                        "type",
                        "weeklySnapshotRetentionWeeks"
                    ]
                }
            }
        },
        "stackit:index/MongodbflexInstanceStorage:MongodbflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "class",
                "size"
            ]
        },
        "stackit:index/NetworkAreaNetworkRange:NetworkAreaNetworkRange": {
            "properties": {
                "networkRangeId": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string",
                    "description": "Classless Inter-Domain Routing (CIDR).\n"
                }
            },
            "type": "object",
            "required": [
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networkRangeId",
                        "prefix"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityAlertgroupRule:ObservabilityAlertgroupRule": {
            "properties": {
                "alert": {
                    "type": "string",
                    "description": "The name of the alert rule. Is the identifier and must be unique in the group.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Annotations to add or overwrite for each alert\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.\n"
                },
                "for": {
                    "type": "string",
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Labels to add or overwrite for each alert\n"
                }
            },
            "type": "object",
            "required": [
                "alert",
                "expression"
            ]
        },
        "stackit:index/ObservabilityInstanceAlertConfig:ObservabilityInstanceAlertConfig": {
            "properties": {
                "global": {
                    "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigGlobal:ObservabilityInstanceAlertConfigGlobal",
                    "description": "Global configuration for the alerts.\n"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigReceiver:ObservabilityInstanceAlertConfigReceiver"
                    },
                    "description": "List of alert receivers.\n"
                },
                "route": {
                    "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigRoute:ObservabilityInstanceAlertConfigRoute",
                    "description": "Route configuration for the alerts.\n"
                }
            },
            "type": "object",
            "required": [
                "receivers",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "global",
                        "receivers",
                        "route"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityInstanceAlertConfigGlobal:ObservabilityInstanceAlertConfigGlobal": {
            "properties": {
                "opsgenieApiKey": {
                    "type": "string",
                    "description": "The API key for OpsGenie.\n",
                    "secret": true
                },
                "opsgenieApiUrl": {
                    "type": "string",
                    "description": "The host to send OpsGenie API requests to. Must be a valid URL\n"
                },
                "resolveTimeout": {
                    "type": "string",
                    "description": "The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.\n"
                },
                "smtpAuthIdentity": {
                    "type": "string",
                    "description": "SMTP authentication information. Must be a valid email address\n"
                },
                "smtpAuthPassword": {
                    "type": "string",
                    "description": "SMTP Auth using LOGIN and PLAIN.\n",
                    "secret": true
                },
                "smtpAuthUsername": {
                    "type": "string",
                    "description": "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.\n"
                },
                "smtpFrom": {
                    "type": "string",
                    "description": "The default SMTP From header field. Must be a valid email address\n"
                },
                "smtpSmartHost": {
                    "type": "string",
                    "description": "The default SMTP smarthost used for sending emails, including port number in format `host:port` (eg. `smtp.example.com:587`). Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "resolveTimeout",
                        "smtpFrom"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityInstanceAlertConfigReceiver:ObservabilityInstanceAlertConfigReceiver": {
            "properties": {
                "emailConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigReceiverEmailConfig:ObservabilityInstanceAlertConfigReceiverEmailConfig"
                    },
                    "description": "List of email configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the receiver.\n"
                },
                "opsgenieConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigReceiverOpsgenieConfig:ObservabilityInstanceAlertConfigReceiverOpsgenieConfig"
                    },
                    "description": "List of OpsGenie configurations.\n"
                },
                "webhooksConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigReceiverWebhooksConfig:ObservabilityInstanceAlertConfigReceiverWebhooksConfig"
                    },
                    "description": "List of Webhooks configurations.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "stackit:index/ObservabilityInstanceAlertConfigReceiverEmailConfig:ObservabilityInstanceAlertConfigReceiverEmailConfig": {
            "properties": {
                "authIdentity": {
                    "type": "string",
                    "description": "SMTP authentication information. Must be a valid email address\n"
                },
                "authPassword": {
                    "type": "string",
                    "description": "SMTP authentication password.\n",
                    "secret": true
                },
                "authUsername": {
                    "type": "string",
                    "description": "SMTP authentication username.\n"
                },
                "from": {
                    "type": "string",
                    "description": "The sender email address. Must be a valid email address\n"
                },
                "smartHost": {
                    "type": "string",
                    "description": "The SMTP host through which emails are sent.\n"
                },
                "to": {
                    "type": "string",
                    "description": "The email address to send notifications to. Must be a valid email address\n"
                }
            },
            "type": "object"
        },
        "stackit:index/ObservabilityInstanceAlertConfigReceiverOpsgenieConfig:ObservabilityInstanceAlertConfigReceiverOpsgenieConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key for OpsGenie.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The host to send OpsGenie API requests to. Must be a valid URL\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority of the alert. Possible values are: `P1`, `P2`, `P3`, `P4`, `P5`.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Comma separated list of tags attached to the notifications.\n"
                }
            },
            "type": "object"
        },
        "stackit:index/ObservabilityInstanceAlertConfigReceiverWebhooksConfig:ObservabilityInstanceAlertConfigReceiverWebhooksConfig": {
            "properties": {
                "googleChat": {
                    "type": "boolean",
                    "description": "Google Chat webhooks require special handling, set this to true if the webhook is for Google Chat.\n"
                },
                "msTeams": {
                    "type": "boolean",
                    "description": "Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The endpoint to send HTTP POST requests to. Must be a valid URL\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "googleChat",
                        "msTeams"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityInstanceAlertConfigRoute:ObservabilityInstanceAlertConfigRoute": {
            "properties": {
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n"
                },
                "match": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of equality matchers an alert has to fulfill to match the node.\n"
                },
                "matchRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of regex-matchers an alert has to fulfill to match the node.\n"
                },
                "receiver": {
                    "type": "string",
                    "description": "The name of the receiver to route the alerts to.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfigRouteRoute:ObservabilityInstanceAlertConfigRouteRoute"
                    },
                    "description": "List of child routes.\n"
                }
            },
            "type": "object",
            "required": [
                "receiver"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "groupInterval",
                        "groupWait",
                        "receiver",
                        "repeatInterval"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityInstanceAlertConfigRouteRoute:ObservabilityInstanceAlertConfigRouteRoute": {
            "properties": {
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n"
                },
                "match": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of equality matchers an alert has to fulfill to match the node.\n"
                },
                "matchRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of regex-matchers an alert has to fulfill to match the node.\n"
                },
                "receiver": {
                    "type": "string",
                    "description": "The name of the receiver to route the alerts to.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n"
                }
            },
            "type": "object",
            "required": [
                "receiver"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "groupInterval",
                        "groupWait",
                        "receiver",
                        "repeatInterval"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityLogalertgroupRule:ObservabilityLogalertgroupRule": {
            "properties": {
                "alert": {
                    "type": "string",
                    "description": "The name of the alert rule. Is the identifier and must be unique in the group.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Annotations to add or overwrite for each alert\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.\n"
                },
                "for": {
                    "type": "string",
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Labels to add or overwrite for each alert\n"
                }
            },
            "type": "object",
            "required": [
                "alert",
                "expression"
            ]
        },
        "stackit:index/ObservabilityScrapeconfigBasicAuth:ObservabilityScrapeconfigBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Specifies basic auth password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Specifies basic auth username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "stackit:index/ObservabilityScrapeconfigSaml2:ObservabilityScrapeconfigSaml2": {
            "properties": {
                "enableUrlParameters": {
                    "type": "boolean",
                    "description": "Specifies if URL parameters are enabled. Defaults to `true`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableUrlParameters"
                    ]
                }
            }
        },
        "stackit:index/ObservabilityScrapeconfigTarget:ObservabilityScrapeconfigTarget": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies labels.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies target URLs.\n"
                }
            },
            "type": "object",
            "required": [
                "urls"
            ]
        },
        "stackit:index/OpensearchInstanceParameters:OpensearchInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).\n"
                },
                "javaGarbageCollector": {
                    "type": "string",
                    "description": "The garbage collector to use for OpenSearch.\n"
                },
                "javaHeapspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.\n"
                },
                "javaMaxmetaspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted (in seconds).\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The TLS protocol to use.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableMonitoring",
                        "graphite",
                        "javaGarbageCollector",
                        "javaHeapspace",
                        "javaMaxmetaspace",
                        "maxDiskThreshold",
                        "metricsFrequency",
                        "metricsPrefix",
                        "monitoringInstanceId",
                        "plugins",
                        "sgwAcl",
                        "syslogs",
                        "tlsCiphers",
                        "tlsProtocols"
                    ]
                }
            }
        },
        "stackit:index/PostgresflexInstanceFlavor:PostgresflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpu",
                        "description",
                        "id",
                        "ram"
                    ]
                }
            }
        },
        "stackit:index/PostgresflexInstanceStorage:PostgresflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "class",
                "size"
            ]
        },
        "stackit:index/RabbitmqInstanceParameters:RabbitmqInstanceParameters": {
            "properties": {
                "consumerTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds for the consumer.\n"
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of plugins to install. Must be a supported plugin name.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles to assign to the instance.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsProtocols": {
                    "type": "string",
                    "description": "TLS protocol to use.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consumerTimeout",
                        "enableMonitoring",
                        "graphite",
                        "maxDiskThreshold",
                        "metricsFrequency",
                        "metricsPrefix",
                        "monitoringInstanceId",
                        "plugins",
                        "roles",
                        "sgwAcl",
                        "syslogs",
                        "tlsCiphers",
                        "tlsProtocols"
                    ]
                }
            }
        },
        "stackit:index/RedisInstanceParameters:RedisInstanceParameters": {
            "properties": {
                "downAfterMilliseconds": {
                    "type": "integer",
                    "description": "The number of milliseconds after which the instance is considered down.\n"
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "failoverTimeout": {
                    "type": "integer",
                    "description": "The failover timeout in milliseconds.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.\n"
                },
                "lazyfreeLazyEviction": {
                    "type": "string",
                    "description": "The lazy eviction enablement (yes or no).\n"
                },
                "lazyfreeLazyExpire": {
                    "type": "string",
                    "description": "The lazy expire enablement (yes or no).\n"
                },
                "luaTimeLimit": {
                    "type": "integer",
                    "description": "The Lua time limit.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "maxclients": {
                    "type": "integer",
                    "description": "The maximum number of clients.\n"
                },
                "maxmemoryPolicy": {
                    "type": "string",
                    "description": "The policy to handle the maximum memory (volatile-lru, noeviction, etc).\n"
                },
                "maxmemorySamples": {
                    "type": "integer",
                    "description": "The maximum memory samples.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "minReplicasMaxLag": {
                    "type": "integer",
                    "description": "The minimum replicas maximum lag.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "notifyKeyspaceEvents": {
                    "type": "string",
                    "description": "The notify keyspace events.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "snapshot": {
                    "type": "string",
                    "description": "The snapshot configuration.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsCiphersuites": {
                    "type": "string",
                    "description": "TLS cipher suites to use.\n"
                },
                "tlsProtocols": {
                    "type": "string",
                    "description": "TLS protocol to use.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "downAfterMilliseconds",
                        "enableMonitoring",
                        "failoverTimeout",
                        "graphite",
                        "lazyfreeLazyEviction",
                        "lazyfreeLazyExpire",
                        "luaTimeLimit",
                        "maxDiskThreshold",
                        "maxclients",
                        "maxmemoryPolicy",
                        "maxmemorySamples",
                        "metricsFrequency",
                        "metricsPrefix",
                        "minReplicasMaxLag",
                        "monitoringInstanceId",
                        "notifyKeyspaceEvents",
                        "sgwAcl",
                        "snapshot",
                        "syslogs",
                        "tlsCiphers",
                        "tlsCiphersuites",
                        "tlsProtocols"
                    ]
                }
            }
        },
        "stackit:index/RoutingTableRouteDestination:RoutingTableRouteDestination": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.\n"
                },
                "value": {
                    "type": "string",
                    "description": "An CIDR string.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "stackit:index/RoutingTableRouteNextHop:RoutingTableRouteNextHop": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..\n"
                },
                "value": {
                    "type": "string",
                    "description": "Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "stackit:index/SecurityGroupRuleIcmpParameters:SecurityGroupRuleIcmpParameters": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "ICMP code. Can be set if the protocol is ICMP.\n"
                },
                "type": {
                    "type": "integer",
                    "description": "ICMP type. Can be set if the protocol is ICMP.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ]
        },
        "stackit:index/SecurityGroupRulePortRange:SecurityGroupRulePortRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum port number. Should be greater or equal to the minimum.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum port number. Should be less or equal to the maximum.\n"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "stackit:index/SecurityGroupRuleProtocol:SecurityGroupRuleProtocol": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The protocol name which the rule should match. Either `name` or `number` must be provided. Possible values are: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The protocol number which the rule should match. Either `name` or `number` must be provided.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "number"
                    ]
                }
            }
        },
        "stackit:index/ServerBackupScheduleBackupProperties:ServerBackupScheduleBackupProperties": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "volumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "retentionPeriod"
            ]
        },
        "stackit:index/ServerBootVolume:ServerBootVolume": {
            "properties": {
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Delete the volume during the termination of the server. Only allowed when `source_type` is `image`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the boot volume\n"
                },
                "performanceClass": {
                    "type": "string",
                    "description": "The performance class of the server.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the boot volume in GB. Must be provided when `source_type` is `image`.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The ID of the source, either image ID or volume ID\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "The type of the source. Supported values are: `volume`, `image`.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceId",
                "sourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deleteOnTermination",
                        "id",
                        "sourceId",
                        "sourceType"
                    ]
                }
            }
        },
        "stackit:index/SkeClusterExtensions:SkeClusterExtensions": {
            "properties": {
                "acl": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensionsAcl:SkeClusterExtensionsAcl",
                    "description": "Cluster access control configuration.\n"
                },
                "argus": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensionsArgus:SkeClusterExtensionsArgus",
                    "description": "A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.\n",
                    "deprecationMessage": "Use observability instead."
                },
                "dns": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensionsDns:SkeClusterExtensionsDns",
                    "description": "DNS extension configuration\n"
                },
                "observability": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensionsObservability:SkeClusterExtensionsObservability",
                    "description": "A single observability block as defined below.\n"
                }
            },
            "type": "object"
        },
        "stackit:index/SkeClusterExtensionsAcl:SkeClusterExtensionsAcl": {
            "properties": {
                "allowedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of CIDRs to whitelist.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is ACL enabled?\n"
                }
            },
            "type": "object",
            "required": [
                "allowedCidrs",
                "enabled"
            ]
        },
        "stackit:index/SkeClusterExtensionsArgus:SkeClusterExtensionsArgus": {
            "properties": {
                "argusInstanceId": {
                    "type": "string",
                    "description": "Argus instance ID to choose which Argus instance is used. Required when enabled is set to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable Argus extensions.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "stackit:index/SkeClusterExtensionsDns:SkeClusterExtensionsDns": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable DNS extensions\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "zones"
                    ]
                }
            }
        },
        "stackit:index/SkeClusterExtensionsObservability:SkeClusterExtensionsObservability": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable Observability extensions.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "stackit:index/SkeClusterHibernation:SkeClusterHibernation": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "End time of hibernation in crontab syntax. E.g. `0 8 * * *` for waking up the cluster at 8am.\n"
                },
                "start": {
                    "type": "string",
                    "description": "Start time of cluster hibernation in crontab syntax. E.g. `0 18 * * *` for starting everyday at 6pm.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone name corresponding to a file in the IANA Time Zone database. i.e. `Europe/Berlin`.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "end",
                        "start",
                        "timezone"
                    ]
                }
            }
        },
        "stackit:index/SkeClusterMaintenance:SkeClusterMaintenance": {
            "properties": {
                "enableKubernetesVersionUpdates": {
                    "type": "boolean",
                    "description": "Flag to enable/disable auto-updates of the Kubernetes version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                },
                "enableMachineImageVersionUpdates": {
                    "type": "boolean",
                    "description": "Flag to enable/disable auto-updates of the OS image version. Defaults to `true`. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                },
                "end": {
                    "type": "string",
                    "description": "Time for maintenance window end. E.g. `01:23:45Z`, `05:00:00+02:00`.\n"
                },
                "start": {
                    "type": "string",
                    "description": "Time for maintenance window start. E.g. `01:23:45Z`, `05:00:00+02:00`.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableKubernetesVersionUpdates",
                        "enableMachineImageVersionUpdates",
                        "end",
                        "start"
                    ]
                }
            }
        },
        "stackit:index/SkeClusterNetwork:SkeClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.\n"
                }
            },
            "type": "object"
        },
        "stackit:index/SkeClusterNodePool:SkeClusterNodePool": {
            "properties": {
                "allowSystemComponents": {
                    "type": "boolean",
                    "description": "Allow system components to run on this node pool.\n"
                },
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of availability zones. E.g. `eu01-m`\n"
                },
                "cri": {
                    "type": "string",
                    "description": "Specifies the container runtime. Defaults to `containerd`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to add to each node.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The machine type.\n"
                },
                "maxSurge": {
                    "type": "integer",
                    "description": "Maximum number of additional VMs that are created during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `max_surge` and `max_unavailable` fields cannot both be unset at the same time.\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Maximum number of VMs that that can be unavailable during an update. If set (larger than 0), then it must be at least the amount of zones configured for the nodepool. The `max_surge` and `max_unavailable` fields cannot both be unset at the same time.\n"
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum number of nodes in the pool.\n"
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum number of nodes in the pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the node pool.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The name of the OS image. Defaults to `flatcar`.\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "This field is deprecated, use `os_version_min` to configure the version and `os_version_used` to get the currently used version instead.\n",
                    "deprecationMessage": "Use `os_version_min` to configure the version and `os_version_used` to get the currently used version instead. Setting a specific OS image version will cause errors during minor OS upgrades due to forced updates."
                },
                "osVersionMin": {
                    "type": "string",
                    "description": "The minimum OS image version. This field will be used to set the minimum OS image version on creation/update of the cluster. If unset, the latest supported OS image version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `os_version_used` field.\n"
                },
                "osVersionUsed": {
                    "type": "string",
                    "description": "Full OS image version used. For example, if 3815.2 was set in `os_version_min`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/SkeClusterNodePoolTaint:SkeClusterNodePoolTaint"
                    },
                    "description": "Specifies a taint list as defined below.\n"
                },
                "volumeSize": {
                    "type": "integer",
                    "description": "The volume size in GB. Defaults to `20`\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Specifies the volume type. Defaults to `storage_premium_perf1`.\n"
                }
            },
            "type": "object",
            "required": [
                "availabilityZones",
                "machineType",
                "maximum",
                "minimum",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowSystemComponents",
                        "availabilityZones",
                        "cri",
                        "labels",
                        "machineType",
                        "maxSurge",
                        "maxUnavailable",
                        "maximum",
                        "minimum",
                        "name",
                        "osName",
                        "osVersionUsed",
                        "volumeSize",
                        "volumeType"
                    ]
                }
            }
        },
        "stackit:index/SkeClusterNodePoolTaint:SkeClusterNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The taint effect. E.g `PreferNoSchedule`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Taint key to be applied to a node.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Taint value corresponding to the taint key.\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "effect",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "stackit:index/SqlserverflexInstanceFlavor:SqlserverflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpu",
                        "description",
                        "id",
                        "ram"
                    ]
                }
            }
        },
        "stackit:index/SqlserverflexInstanceOptions:SqlserverflexInstanceOptions": {
            "properties": {
                "edition": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "edition",
                        "retentionDays"
                    ]
                }
            }
        },
        "stackit:index/SqlserverflexInstanceStorage:SqlserverflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "class",
                        "size"
                    ]
                }
            }
        },
        "stackit:index/VolumeSource:VolumeSource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the source, e.g. image ID\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "stackit:index/getCdnDistributionConfig:getCdnDistributionConfig": {
            "properties": {
                "backend": {
                    "$ref": "#/types/stackit:index/getCdnDistributionConfigBackend:getCdnDistributionConfigBackend",
                    "description": "The configured backend for the distribution\n"
                },
                "blockedCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The configured countries where distribution of content is blocked\n"
                },
                "optimizer": {
                    "$ref": "#/types/stackit:index/getCdnDistributionConfigOptimizer:getCdnDistributionConfigOptimizer",
                    "description": "Configuration for the Image Optimizer. This is a paid feature that automatically optimizes images to reduce their file size for faster delivery, leading to improved website performance and a better user experience.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The configured regions where content will be hosted\n"
                }
            },
            "type": "object",
            "required": [
                "backend",
                "optimizer",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getCdnDistributionConfigBackend:getCdnDistributionConfigBackend": {
            "properties": {
                "originRequestHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The configured origin request headers for the backend\n"
                },
                "originUrl": {
                    "type": "string",
                    "description": "The configured backend type for the distribution\n"
                },
                "type": {
                    "type": "string",
                    "description": "The configured backend type. Supported values are: `http`.\n"
                }
            },
            "type": "object",
            "required": [
                "originRequestHeaders",
                "originUrl",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getCdnDistributionConfigOptimizer:getCdnDistributionConfigOptimizer": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getCdnDistributionDomain:getCdnDistributionDomain": {
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain errors\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the domain\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the domain. Each distribution has one domain of type \"managed\", and domains of type \"custom\" may be additionally created by the user\n"
                }
            },
            "type": "object",
            "required": [
                "errors",
                "name",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getImageChecksum:getImageChecksum": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm for the checksum of the image data.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "Hexdigest of the checksum of the image data.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "digest"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getImageConfig:getImageConfig": {
            "properties": {
                "bootMenu": {
                    "type": "boolean",
                    "description": "Enables the BIOS bootmenu.\n"
                },
                "cdromBus": {
                    "type": "string",
                    "description": "Sets CDROM bus controller type.\n"
                },
                "diskBus": {
                    "type": "string",
                    "description": "Sets Disk bus controller type.\n"
                },
                "nicModel": {
                    "type": "string",
                    "description": "Sets virtual network interface model.\n"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "Enables operating system specific optimizations.\n"
                },
                "operatingSystemDistro": {
                    "type": "string",
                    "description": "Operating system distribution.\n"
                },
                "operatingSystemVersion": {
                    "type": "string",
                    "description": "Version of the operating system.\n"
                },
                "rescueBus": {
                    "type": "string",
                    "description": "Sets the device bus when the image is used as a rescue image.\n"
                },
                "rescueDevice": {
                    "type": "string",
                    "description": "Sets the device when the image is used as a rescue image.\n"
                },
                "secureBoot": {
                    "type": "boolean",
                    "description": "Enables Secure Boot.\n"
                },
                "uefi": {
                    "type": "boolean",
                    "description": "Enables UEFI boot.\n"
                },
                "videoModel": {
                    "type": "string",
                    "description": "Sets Graphic device model.\n"
                },
                "virtioScsi": {
                    "type": "boolean",
                    "description": "Enables the use of VirtIO SCSI to provide block device access. By default instances use VirtIO Block.\n"
                }
            },
            "type": "object",
            "required": [
                "bootMenu",
                "cdromBus",
                "diskBus",
                "nicModel",
                "operatingSystem",
                "operatingSystemDistro",
                "operatingSystemVersion",
                "rescueBus",
                "rescueDevice",
                "secureBoot",
                "uefi",
                "videoModel",
                "virtioScsi"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerListener:getLoadbalancerListener": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number where we listen for traffic.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol is the highest network protocol we understand to load balance.\n"
                },
                "serverNameIndicators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getLoadbalancerListenerServerNameIndicator:getLoadbalancerListenerServerNameIndicator"
                    },
                    "description": "A list of domain names to match in order to pass TLS traffic to the target pool in the current listener\n"
                },
                "targetPool": {
                    "type": "string",
                    "description": "Reference target pool by target pool name.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "port",
                "protocol",
                "targetPool"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerListenerServerNameIndicator:getLoadbalancerListenerServerNameIndicator": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A domain name to match in order to pass TLS traffic to the target pool in the current listener\n"
                }
            },
            "type": "object"
        },
        "stackit:index/getLoadbalancerNetwork:getLoadbalancerNetwork": {
            "properties": {
                "networkId": {
                    "type": "string",
                    "description": "Openstack network ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role defines how the load balancer is using the network.\n"
                }
            },
            "type": "object",
            "required": [
                "networkId",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerOptions:getLoadbalancerOptions": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Load Balancer is accessible only from an IP address in this range.\n"
                },
                "observability": {
                    "$ref": "#/types/stackit:index/getLoadbalancerOptionsObservability:getLoadbalancerOptionsObservability",
                    "description": "We offer Load Balancer metrics observability via ARGUS or external solutions.\n"
                },
                "privateNetworkOnly": {
                    "type": "boolean",
                    "description": "If true, Load Balancer is accessible only via a private network IP address.\n"
                }
            },
            "type": "object",
            "required": [
                "acls",
                "observability",
                "privateNetworkOnly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerOptionsObservability:getLoadbalancerOptionsObservability": {
            "properties": {
                "logs": {
                    "$ref": "#/types/stackit:index/getLoadbalancerOptionsObservabilityLogs:getLoadbalancerOptionsObservabilityLogs",
                    "description": "Observability logs configuration.\n"
                },
                "metrics": {
                    "$ref": "#/types/stackit:index/getLoadbalancerOptionsObservabilityMetrics:getLoadbalancerOptionsObservabilityMetrics",
                    "description": "Observability metrics configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "logs",
                "metrics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerOptionsObservabilityLogs:getLoadbalancerOptionsObservabilityLogs": {
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Credentials reference for logs.\n"
                },
                "pushUrl": {
                    "type": "string",
                    "description": "Credentials reference for logs.\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsRef",
                "pushUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerOptionsObservabilityMetrics:getLoadbalancerOptionsObservabilityMetrics": {
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Credentials reference for metrics.\n"
                },
                "pushUrl": {
                    "type": "string",
                    "description": "Credentials reference for metrics.\n"
                }
            },
            "type": "object",
            "required": [
                "credentialsRef",
                "pushUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerTargetPool:getLoadbalancerTargetPool": {
            "properties": {
                "activeHealthCheck": {
                    "$ref": "#/types/stackit:index/getLoadbalancerTargetPoolActiveHealthCheck:getLoadbalancerTargetPoolActiveHealthCheck"
                },
                "name": {
                    "type": "string",
                    "description": "Target pool name.\n"
                },
                "sessionPersistence": {
                    "$ref": "#/types/stackit:index/getLoadbalancerTargetPoolSessionPersistence:getLoadbalancerTargetPoolSessionPersistence",
                    "description": "Here you can setup various session persistence options, so far only \"`use_source_ip_address`\" is supported.\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "Identical port number where each target listens for traffic.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getLoadbalancerTargetPoolTarget:getLoadbalancerTargetPoolTarget"
                    },
                    "description": "List of all targets which will be used in the pool. Limited to 1000.\n"
                }
            },
            "type": "object",
            "required": [
                "activeHealthCheck",
                "name",
                "targetPort",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerTargetPoolActiveHealthCheck:getLoadbalancerTargetPoolActiveHealthCheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Healthy threshold of the health checking.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Interval duration of health checking in seconds.\n"
                },
                "intervalJitter": {
                    "type": "string",
                    "description": "Interval duration threshold of the health checking in seconds.\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Active health checking timeout duration in seconds.\n"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Unhealthy threshold of the health checking.\n"
                }
            },
            "type": "object",
            "required": [
                "healthyThreshold",
                "interval",
                "intervalJitter",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLoadbalancerTargetPoolSessionPersistence:getLoadbalancerTargetPoolSessionPersistence": {
            "properties": {
                "useSourceIpAddress": {
                    "type": "boolean",
                    "description": "If true then all connections from one source IP address are redirected to the same target. This setting changes the load balancing algorithm to Maglev.\n"
                }
            },
            "type": "object"
        },
        "stackit:index/getLoadbalancerTargetPoolTarget:getLoadbalancerTargetPoolTarget": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Target display name\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Target IP\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getLogmeInstanceParameters:getLogmeInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "fluentdTcp": {
                    "type": "integer"
                },
                "fluentdTls": {
                    "type": "integer"
                },
                "fluentdTlsCiphers": {
                    "type": "string"
                },
                "fluentdTlsMaxVersion": {
                    "type": "string"
                },
                "fluentdTlsMinVersion": {
                    "type": "string"
                },
                "fluentdTlsVersion": {
                    "type": "string"
                },
                "fluentdUdp": {
                    "type": "integer"
                },
                "graphite": {
                    "type": "string",
                    "description": "If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).\n"
                },
                "ismDeletionAfter": {
                    "type": "string",
                    "description": "Combination of an integer and a timerange when an index will be considered \"old\" and can be deleted. Possible values for the timerange are `s`, `m`, `h` and `d`.\n"
                },
                "ismJitter": {
                    "type": "number"
                },
                "ismJobInterval": {
                    "type": "integer",
                    "description": "Jitter of the execution time.\n"
                },
                "javaHeapspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.\n"
                },
                "javaMaxmetaspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted (in seconds).\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "opensearchTlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "opensearchTlsProtocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                }
            },
            "type": "object",
            "required": [
                "enableMonitoring",
                "fluentdTcp",
                "fluentdTls",
                "fluentdTlsCiphers",
                "fluentdTlsMaxVersion",
                "fluentdTlsMinVersion",
                "fluentdTlsVersion",
                "fluentdUdp",
                "graphite",
                "ismDeletionAfter",
                "ismJitter",
                "ismJobInterval",
                "javaHeapspace",
                "javaMaxmetaspace",
                "maxDiskThreshold",
                "metricsFrequency",
                "metricsPrefix",
                "monitoringInstanceId",
                "opensearchTlsCiphers",
                "opensearchTlsProtocols",
                "sgwAcl",
                "syslogs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getMariadbInstanceParameters:getMariadbInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                }
            },
            "type": "object",
            "required": [
                "enableMonitoring",
                "graphite",
                "maxDiskThreshold",
                "metricsFrequency",
                "metricsPrefix",
                "monitoringInstanceId",
                "sgwAcl",
                "syslogs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getMongodbflexInstanceFlavor:getMongodbflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "id",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getMongodbflexInstanceOptions:getMongodbflexInstanceOptions": {
            "properties": {
                "dailySnapshotRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that daily backups will be retained.\n"
                },
                "monthlySnapshotRetentionMonths": {
                    "type": "integer",
                    "description": "The number of months that monthly backups will be retained.\n"
                },
                "pointInTimeWindowHours": {
                    "type": "integer",
                    "description": "The number of hours back in time the point-in-time recovery feature will be able to recover.\n"
                },
                "snapshotRetentionDays": {
                    "type": "integer",
                    "description": "The number of days that continuous backups (controlled via the `backup_schedule`) will be retained.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the MongoDB Flex instance.\n"
                },
                "weeklySnapshotRetentionWeeks": {
                    "type": "integer",
                    "description": "The number of weeks that weekly backups will be retained.\n"
                }
            },
            "type": "object",
            "required": [
                "dailySnapshotRetentionDays",
                "monthlySnapshotRetentionMonths",
                "pointInTimeWindowHours",
                "snapshotRetentionDays",
                "type",
                "weeklySnapshotRetentionWeeks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getMongodbflexInstanceStorage:getMongodbflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "class",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getNetworkAreaNetworkRange:getNetworkAreaNetworkRange": {
            "properties": {
                "networkRangeId": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkRangeId",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityAlertgroupRule:getObservabilityAlertgroupRule": {
            "properties": {
                "alert": {
                    "type": "string",
                    "description": "The name of the alert rule. Is the identifier and must be unique in the group.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Annotations to add or overwrite for each alert\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.\n"
                },
                "for": {
                    "type": "string",
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Labels to add or overwrite for each alert\n"
                }
            },
            "type": "object",
            "required": [
                "alert",
                "annotations",
                "expression",
                "for",
                "labels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfig:getObservabilityInstanceAlertConfig": {
            "properties": {
                "global": {
                    "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigGlobal:getObservabilityInstanceAlertConfigGlobal",
                    "description": "Global configuration for the alerts.\n"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigReceiver:getObservabilityInstanceAlertConfigReceiver"
                    },
                    "description": "List of alert receivers.\n"
                },
                "route": {
                    "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigRoute:getObservabilityInstanceAlertConfigRoute",
                    "description": "The route for the alert.\n"
                }
            },
            "type": "object",
            "required": [
                "global",
                "receivers",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigGlobal:getObservabilityInstanceAlertConfigGlobal": {
            "properties": {
                "opsgenieApiKey": {
                    "type": "string",
                    "description": "The API key for OpsGenie.\n",
                    "secret": true
                },
                "opsgenieApiUrl": {
                    "type": "string",
                    "description": "The host to send OpsGenie API requests to. Must be a valid URL\n"
                },
                "resolveTimeout": {
                    "type": "string",
                    "description": "The default value used by alertmanager if the alert does not include EndsAt. After this time passes, it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.\n"
                },
                "smtpAuthIdentity": {
                    "type": "string",
                    "description": "SMTP authentication information. Must be a valid email address\n"
                },
                "smtpAuthPassword": {
                    "type": "string",
                    "description": "SMTP Auth using LOGIN and PLAIN.\n",
                    "secret": true
                },
                "smtpAuthUsername": {
                    "type": "string",
                    "description": "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.\n"
                },
                "smtpFrom": {
                    "type": "string",
                    "description": "The default SMTP From header field. Must be a valid email address\n"
                },
                "smtpSmartHost": {
                    "type": "string",
                    "description": "The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS).\n"
                }
            },
            "type": "object",
            "required": [
                "opsgenieApiKey",
                "opsgenieApiUrl",
                "resolveTimeout",
                "smtpAuthIdentity",
                "smtpAuthPassword",
                "smtpAuthUsername",
                "smtpFrom",
                "smtpSmartHost"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigReceiver:getObservabilityInstanceAlertConfigReceiver": {
            "properties": {
                "emailConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigReceiverEmailConfig:getObservabilityInstanceAlertConfigReceiverEmailConfig"
                    },
                    "description": "List of email configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the receiver.\n"
                },
                "opsgenieConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigReceiverOpsgenieConfig:getObservabilityInstanceAlertConfigReceiverOpsgenieConfig"
                    },
                    "description": "List of OpsGenie configurations.\n"
                },
                "webhooksConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigReceiverWebhooksConfig:getObservabilityInstanceAlertConfigReceiverWebhooksConfig"
                    },
                    "description": "List of Webhooks configurations.\n"
                }
            },
            "type": "object",
            "required": [
                "emailConfigs",
                "name",
                "opsgenieConfigs",
                "webhooksConfigs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigReceiverEmailConfig:getObservabilityInstanceAlertConfigReceiverEmailConfig": {
            "properties": {
                "authIdentity": {
                    "type": "string",
                    "description": "SMTP authentication information. Must be a valid email address\n"
                },
                "authPassword": {
                    "type": "string",
                    "description": "SMTP authentication password.\n",
                    "secret": true
                },
                "authUsername": {
                    "type": "string",
                    "description": "SMTP authentication username.\n"
                },
                "from": {
                    "type": "string",
                    "description": "The sender email address. Must be a valid email address\n"
                },
                "smartHost": {
                    "type": "string",
                    "description": "The SMTP host through which emails are sent.\n"
                },
                "to": {
                    "type": "string",
                    "description": "The email address to send notifications to. Must be a valid email address\n"
                }
            },
            "type": "object",
            "required": [
                "authIdentity",
                "authPassword",
                "authUsername",
                "from",
                "smartHost",
                "to"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigReceiverOpsgenieConfig:getObservabilityInstanceAlertConfigReceiverOpsgenieConfig": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API key for OpsGenie.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The host to send OpsGenie API requests to. Must be a valid URL\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority of the alert. Possible values are: `P1`, `P2`, `P3`, `P4`, `P5`.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Comma separated list of tags attached to the notifications.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "apiUrl",
                "priority",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigReceiverWebhooksConfig:getObservabilityInstanceAlertConfigReceiverWebhooksConfig": {
            "properties": {
                "googleChat": {
                    "type": "boolean",
                    "description": "Google Chat webhooks require special handling, set this to true if the webhook is for Google Chat.\n"
                },
                "msTeams": {
                    "type": "boolean",
                    "description": "Microsoft Teams webhooks require special handling, set this to true if the webhook is for Microsoft Teams.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The endpoint to send HTTP POST requests to. Must be a valid URL\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "googleChat",
                "msTeams",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigRoute:getObservabilityInstanceAlertConfigRoute": {
            "properties": {
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.) .\n"
                },
                "match": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of equality matchers an alert has to fulfill to match the node.\n"
                },
                "matchRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of regex-matchers an alert has to fulfill to match the node.\n"
                },
                "receiver": {
                    "type": "string",
                    "description": "The name of the receiver to route the alerts to.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfigRouteRoute:getObservabilityInstanceAlertConfigRouteRoute"
                    },
                    "description": "List of child routes.\n"
                }
            },
            "type": "object",
            "required": [
                "groupBies",
                "groupInterval",
                "groupWait",
                "match",
                "matchRegex",
                "receiver",
                "repeatInterval",
                "routes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityInstanceAlertConfigRouteRoute:getObservabilityInstanceAlertConfigRouteRoute": {
            "properties": {
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n"
                },
                "match": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of equality matchers an alert has to fulfill to match the node.\n"
                },
                "matchRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of regex-matchers an alert has to fulfill to match the node.\n"
                },
                "receiver": {
                    "type": "string",
                    "description": "The name of the receiver to route the alerts to.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n"
                }
            },
            "type": "object",
            "required": [
                "groupBies",
                "groupInterval",
                "groupWait",
                "match",
                "matchRegex",
                "receiver",
                "repeatInterval"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityLogalertgroupRule:getObservabilityLogalertgroupRule": {
            "properties": {
                "alert": {
                    "type": "string",
                    "description": "The name of the alert rule. Is the identifier and must be unique in the group.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Annotations to add or overwrite for each alert\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The LogQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.\n"
                },
                "for": {
                    "type": "string",
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. Default is 0s\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of key:value. Labels to add or overwrite for each alert\n"
                }
            },
            "type": "object",
            "required": [
                "alert",
                "annotations",
                "expression",
                "for",
                "labels"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityScrapeconfigBasicAuth:getObservabilityScrapeconfigBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Specifies basic auth password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Specifies basic auth username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityScrapeconfigSaml2:getObservabilityScrapeconfigSaml2": {
            "properties": {
                "enableUrlParameters": {
                    "type": "boolean",
                    "description": "Specifies if URL parameters are enabled\n"
                }
            },
            "type": "object",
            "required": [
                "enableUrlParameters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getObservabilityScrapeconfigTarget:getObservabilityScrapeconfigTarget": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies labels.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies target URLs.\n"
                }
            },
            "type": "object",
            "required": [
                "labels",
                "urls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getOpensearchInstanceParameters:getOpensearchInstanceParameters": {
            "properties": {
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "If set, monitoring with Graphite will be enabled. Expects the host and port where the Graphite metrics should be sent to (host:port).\n"
                },
                "javaGarbageCollector": {
                    "type": "string",
                    "description": "The garbage collector to use for OpenSearch.\n"
                },
                "javaHeapspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) allocated as heap by the JVM for OpenSearch.\n"
                },
                "javaMaxmetaspace": {
                    "type": "integer",
                    "description": "The amount of memory (in MB) used by the JVM to store metadata for OpenSearch.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted (in seconds).\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of plugins to install. Must be a supported plugin name. The plugins `repository-s3` and `repository-azure` are enabled by default and cannot be disabled.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsProtocols": {
                    "type": "string",
                    "description": "The TLS protocol to use.\n"
                }
            },
            "type": "object",
            "required": [
                "enableMonitoring",
                "graphite",
                "javaGarbageCollector",
                "javaHeapspace",
                "javaMaxmetaspace",
                "maxDiskThreshold",
                "metricsFrequency",
                "metricsPrefix",
                "monitoringInstanceId",
                "plugins",
                "sgwAcl",
                "syslogs",
                "tlsCiphers",
                "tlsProtocols"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getPostgresflexInstanceFlavor:getPostgresflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "id",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getPostgresflexInstanceStorage:getPostgresflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "class",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getPublicIpRangesPublicIpRange:getPublicIpRangesPublicIpRange": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Classless Inter-Domain Routing (CIDR)\n"
                }
            },
            "type": "object",
            "required": [
                "cidr"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRabbitmqInstanceParameters:getRabbitmqInstanceParameters": {
            "properties": {
                "consumerTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds for the consumer.\n"
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of plugins to install. Must be a supported plugin name.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles to assign to the instance.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsProtocols": {
                    "type": "string",
                    "description": "TLS protocol to use.\n"
                }
            },
            "type": "object",
            "required": [
                "consumerTimeout",
                "enableMonitoring",
                "graphite",
                "maxDiskThreshold",
                "metricsFrequency",
                "metricsPrefix",
                "monitoringInstanceId",
                "plugins",
                "roles",
                "sgwAcl",
                "syslogs",
                "tlsCiphers",
                "tlsProtocols"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRedisInstanceParameters:getRedisInstanceParameters": {
            "properties": {
                "downAfterMilliseconds": {
                    "type": "integer",
                    "description": "The number of milliseconds after which the instance is considered down.\n"
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring.\n"
                },
                "failoverTimeout": {
                    "type": "integer",
                    "description": "The failover timeout in milliseconds.\n"
                },
                "graphite": {
                    "type": "string",
                    "description": "Graphite server URL (host and port). If set, monitoring with Graphite will be enabled.\n"
                },
                "lazyfreeLazyEviction": {
                    "type": "string",
                    "description": "The lazy eviction enablement (yes or no).\n"
                },
                "lazyfreeLazyExpire": {
                    "type": "string",
                    "description": "The lazy expire enablement (yes or no).\n"
                },
                "luaTimeLimit": {
                    "type": "integer",
                    "description": "The Lua time limit.\n"
                },
                "maxDiskThreshold": {
                    "type": "integer",
                    "description": "The maximum disk threshold in MB. If the disk usage exceeds this threshold, the instance will be stopped.\n"
                },
                "maxclients": {
                    "type": "integer",
                    "description": "The maximum number of clients.\n"
                },
                "maxmemoryPolicy": {
                    "type": "string",
                    "description": "The policy to handle the maximum memory (volatile-lru, noeviction, etc).\n"
                },
                "maxmemorySamples": {
                    "type": "integer",
                    "description": "The maximum memory samples.\n"
                },
                "metricsFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds at which metrics are emitted.\n"
                },
                "metricsPrefix": {
                    "type": "string",
                    "description": "The prefix for the metrics. Could be useful when using Graphite monitoring to prefix the metrics with a certain value, like an API key\n"
                },
                "minReplicasMaxLag": {
                    "type": "integer",
                    "description": "The minimum replicas maximum lag.\n"
                },
                "monitoringInstanceId": {
                    "type": "string",
                    "description": "The ID of the STACKIT monitoring instance.\n"
                },
                "notifyKeyspaceEvents": {
                    "type": "string",
                    "description": "The notify keyspace events.\n"
                },
                "sgwAcl": {
                    "type": "string",
                    "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.\n"
                },
                "snapshot": {
                    "type": "string",
                    "description": "The snapshot configuration.\n"
                },
                "syslogs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of syslog servers to send logs to.\n"
                },
                "tlsCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS ciphers to use.\n"
                },
                "tlsCiphersuites": {
                    "type": "string",
                    "description": "TLS cipher suites to use.\n"
                },
                "tlsProtocols": {
                    "type": "string",
                    "description": "TLS protocol to use.\n"
                }
            },
            "type": "object",
            "required": [
                "downAfterMilliseconds",
                "enableMonitoring",
                "failoverTimeout",
                "graphite",
                "lazyfreeLazyEviction",
                "lazyfreeLazyExpire",
                "luaTimeLimit",
                "maxDiskThreshold",
                "maxclients",
                "maxmemoryPolicy",
                "maxmemorySamples",
                "metricsFrequency",
                "metricsPrefix",
                "minReplicasMaxLag",
                "monitoringInstanceId",
                "notifyKeyspaceEvents",
                "sgwAcl",
                "snapshot",
                "syslogs",
                "tlsCiphers",
                "tlsCiphersuites",
                "tlsProtocols"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTableRouteDestination:getRoutingTableRouteDestination": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.\n"
                },
                "value": {
                    "type": "string",
                    "description": "An CIDR string.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTableRouteNextHop:getRoutingTableRouteNextHop": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..\n"
                },
                "value": {
                    "type": "string",
                    "description": "Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTableRoutesRoute:getRoutingTableRoutesRoute": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when the route was created\n"
                },
                "destination": {
                    "$ref": "#/types/stackit:index/getRoutingTableRoutesRouteDestination:getRoutingTableRoutesRouteDestination",
                    "description": "Destination of the route.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "nextHop": {
                    "$ref": "#/types/stackit:index/getRoutingTableRoutesRouteNextHop:getRoutingTableRoutesRouteNextHop",
                    "description": "Next hop destination.\n"
                },
                "routeId": {
                    "type": "string",
                    "description": "Route ID.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date-time when the route was updated\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "destination",
                "labels",
                "nextHop",
                "routeId",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTableRoutesRouteDestination:getRoutingTableRoutesRouteDestination": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "CIDRV type. Possible values are: `cidrv4`, `cidrv6`. Only `cidrv4` is supported during experimental stage.\n"
                },
                "value": {
                    "type": "string",
                    "description": "An CIDR string.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTableRoutesRouteNextHop:getRoutingTableRoutesRouteNextHop": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Possible values are: `blackhole`, `internet`, `ipv4`, `ipv6`. Only `cidrv4` is supported during experimental stage..\n"
                },
                "value": {
                    "type": "string",
                    "description": "Either IPv4 or IPv6 (not set for blackhole and internet). Only IPv4 supported during experimental stage.\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getRoutingTablesItem:getRoutingTablesItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when the routing table was created\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "When true this is the default routing table for this network area. It can't be deleted and is used if the user does not specify it otherwise.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the routing table.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the routing table.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "The routing tables ID.\n"
                },
                "systemRoutes": {
                    "type": "boolean",
                    "description": "This controls whether the routes for project-to-project communication are created automatically or not.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date-time when the routing table was updated\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "default",
                "description",
                "labels",
                "name",
                "routingTableId",
                "systemRoutes",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSecurityGroupRuleIcmpParameters:getSecurityGroupRuleIcmpParameters": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "ICMP code. Can be set if the protocol is ICMP.\n"
                },
                "type": {
                    "type": "integer",
                    "description": "ICMP type. Can be set if the protocol is ICMP.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSecurityGroupRulePortRange:getSecurityGroupRulePortRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum port number. Should be greater or equal to the minimum.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum port number. Should be less or equal to the minimum.\n"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSecurityGroupRuleProtocol:getSecurityGroupRuleProtocol": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The protocol name which the rule should match.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The protocol number which the rule should match.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "number"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getServerBackupScheduleBackupProperties:getServerBackupScheduleBackupProperties": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "volumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "retentionPeriod",
                "volumeIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getServerBackupSchedulesItem:getServerBackupSchedulesItem": {
            "properties": {
                "backupProperties": {
                    "$ref": "#/types/stackit:index/getServerBackupSchedulesItemBackupProperties:getServerBackupSchedulesItemBackupProperties",
                    "description": "Backup schedule details for the backups.\n"
                },
                "backupScheduleId": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is the backup schedule enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The backup schedule name.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Backup schedule described in `rrule` (recurrence rule) format.\n"
                }
            },
            "type": "object",
            "required": [
                "backupProperties",
                "backupScheduleId",
                "enabled",
                "name",
                "rrule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getServerBackupSchedulesItemBackupProperties:getServerBackupSchedulesItemBackupProperties": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "retentionPeriod": {
                    "type": "integer"
                },
                "volumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "retentionPeriod",
                "volumeIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getServerBootVolume:getServerBootVolume": {
            "properties": {
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Delete the volume during the termination of the server.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the boot volume\n"
                }
            },
            "type": "object",
            "required": [
                "deleteOnTermination",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getServerUpdateSchedulesItem:getServerUpdateSchedulesItem": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is the update schedule enabled or disabled.\n"
                },
                "maintenanceWindow": {
                    "type": "integer",
                    "description": "Maintenance window [1..24].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The update schedule name.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Update schedule described in `rrule` (recurrence rule) format.\n"
                },
                "updateScheduleId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "maintenanceWindow",
                "name",
                "rrule",
                "updateScheduleId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterExtensions:getSkeClusterExtensions": {
            "properties": {
                "acl": {
                    "$ref": "#/types/stackit:index/getSkeClusterExtensionsAcl:getSkeClusterExtensionsAcl",
                    "description": "Cluster access control configuration\n"
                },
                "argus": {
                    "$ref": "#/types/stackit:index/getSkeClusterExtensionsArgus:getSkeClusterExtensionsArgus",
                    "description": "A single argus block as defined below. This field is deprecated and will be removed 06 January 2026.\n",
                    "deprecationMessage": "Use observability instead."
                },
                "dns": {
                    "$ref": "#/types/stackit:index/getSkeClusterExtensionsDns:getSkeClusterExtensionsDns",
                    "description": "DNS extension configuration\n"
                },
                "observability": {
                    "$ref": "#/types/stackit:index/getSkeClusterExtensionsObservability:getSkeClusterExtensionsObservability",
                    "description": "A single observability block as defined below.\n"
                }
            },
            "type": "object",
            "required": [
                "acl",
                "argus",
                "dns",
                "observability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterExtensionsAcl:getSkeClusterExtensionsAcl": {
            "properties": {
                "allowedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of CIDRs to whitelist\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is ACL enabled?\n"
                }
            },
            "type": "object",
            "required": [
                "allowedCidrs",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterExtensionsArgus:getSkeClusterExtensionsArgus": {
            "properties": {
                "argusInstanceId": {
                    "type": "string",
                    "description": "Instance ID of argus\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable argus extensions.\n"
                }
            },
            "type": "object",
            "required": [
                "argusInstanceId",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterExtensionsDns:getSkeClusterExtensionsDns": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable DNS extensions\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of domain filters for externalDNS (e.g., `foo.runs.onstackit.cloud`)\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterExtensionsObservability:getSkeClusterExtensionsObservability": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable Observability extensions.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to choose which Observability instance is used. Required when enabled is set to `true`.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "instanceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterHibernation:getSkeClusterHibernation": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "End time of hibernation, in crontab syntax.\n"
                },
                "start": {
                    "type": "string",
                    "description": "Start time of cluster hibernation in crontab syntax.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone name corresponding to a file in the IANA Time Zone database.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterMaintenance:getSkeClusterMaintenance": {
            "properties": {
                "enableKubernetesVersionUpdates": {
                    "type": "boolean",
                    "description": "Flag to enable/disable auto-updates of the Kubernetes version.\n"
                },
                "enableMachineImageVersionUpdates": {
                    "type": "boolean",
                    "description": "Flag to enable/disable auto-updates of the OS image version.\n"
                },
                "end": {
                    "type": "string",
                    "description": "Date time for maintenance window end.\n"
                },
                "start": {
                    "type": "string",
                    "description": "Date time for maintenance window start.\n"
                }
            },
            "type": "object",
            "required": [
                "enableKubernetesVersionUpdates",
                "enableMachineImageVersionUpdates",
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterNetwork:getSkeClusterNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the STACKIT Network Area (SNA) network into which the cluster will be deployed.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterNodePool:getSkeClusterNodePool": {
            "properties": {
                "allowSystemComponents": {
                    "type": "boolean",
                    "description": "Allow system components to run on this node pool.\n"
                },
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of availability zones.\n"
                },
                "cri": {
                    "type": "string",
                    "description": "Specifies the container runtime.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to add to each node.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The machine type.\n"
                },
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes upgraded simultaneously.\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes unavailable during upgraded.\n"
                },
                "maximum": {
                    "type": "integer",
                    "description": "Maximum number of nodes in the pool.\n"
                },
                "minimum": {
                    "type": "integer",
                    "description": "Minimum number of nodes in the pool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the node pool.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The name of the OS image.\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The OS image version.\n"
                },
                "osVersionMin": {
                    "type": "string",
                    "description": "The minimum OS image version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current OS image version being used for the node pool, use the read-only `os_version_used` field.\n"
                },
                "osVersionUsed": {
                    "type": "string",
                    "description": "Full OS image version used. For example, if 3815.2 was set in `os_version_min`, this value may result to 3815.2.2. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/getSkeClusterNodePoolTaint:getSkeClusterNodePoolTaint"
                    },
                    "description": "Specifies a taint list as defined below.\n"
                },
                "volumeSize": {
                    "type": "integer",
                    "description": "The volume size in GB.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Specifies the volume type.\n"
                }
            },
            "type": "object",
            "required": [
                "allowSystemComponents",
                "availabilityZones",
                "cri",
                "labels",
                "machineType",
                "maxSurge",
                "maxUnavailable",
                "maximum",
                "minimum",
                "name",
                "osName",
                "osVersion",
                "osVersionMin",
                "osVersionUsed",
                "taints",
                "volumeSize",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSkeClusterNodePoolTaint:getSkeClusterNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The taint effect.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Taint key to be applied to a node.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Taint value corresponding to the taint key.\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSqlserverflexInstanceFlavor:getSqlserverflexInstanceFlavor": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ram": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "id",
                "ram"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSqlserverflexInstanceOptions:getSqlserverflexInstanceOptions": {
            "properties": {
                "edition": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "edition",
                "retentionDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getSqlserverflexInstanceStorage:getSqlserverflexInstanceStorage": {
            "properties": {
                "class": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "class",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "stackit:index/getVolumeSource:getVolumeSource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the source, e.g. image ID\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the source. Supported values are: `volume`, `image`, `snapshot`, `backup`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the stackit package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authorizationCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Membership service"
            },
            "cdnCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the CDN service"
            },
            "credentialsPath": {
                "type": "string",
                "description": "Path of JSON from where the credentials are read. Takes precedence over the env var `STACKIT_CREDENTIALS_PATH`. Default value is `~/.stackit/credentials.json`."
            },
            "defaultRegion": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global"
            },
            "dnsCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the DNS service"
            },
            "enableBetaResources": {
                "type": "boolean",
                "description": "Enable beta resources. Default is false."
            },
            "experiments": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Enables experiments. These are unstable features without official support. More information can be found in the README. Available Experiments: iam, routing-tables, network"
            },
            "gitCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Git service"
            },
            "iaasCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the IaaS service"
            },
            "loadbalancerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Load Balancer service"
            },
            "logmeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the LogMe service"
            },
            "mariadbCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MariaDB service"
            },
            "modelservingCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the AI Model Serving service"
            },
            "mongodbflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MongoDB Flex service"
            },
            "objectstorageCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Object Storage service"
            },
            "observabilityCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Observability service"
            },
            "opensearchCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the OpenSearch service"
            },
            "postgresflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the PostgresFlex service"
            },
            "privateKey": {
                "type": "string",
                "description": "Private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path for the private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "rabbitmqCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the RabbitMQ service"
            },
            "redisCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Redis service"
            },
            "region": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global",
                "deprecationMessage": "This attribute is deprecated. Use 'default_region' instead"
            },
            "resourcemanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Resource Manager service"
            },
            "secretsmanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Secrets Manager service"
            },
            "serverBackupCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Backup service"
            },
            "serverUpdateCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Update service"
            },
            "serviceAccountCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Account service"
            },
            "serviceAccountEmail": {
                "type": "string",
                "description": "Service account email. It can also be set using the environment variable STACKIT_SERVICE_ACCOUNT_EMAIL. It is required if you want to use the resource manager project resource.",
                "deprecationMessage": "The `service_account_email` field has been deprecated because it is not required. Will be removed after June 12th 2025."
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountKeyPath": {
                "type": "string",
                "description": "Path for the service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountToken": {
                "type": "string",
                "description": "Token used for authentication. If set, the token flow will be used to authenticate all operations.",
                "deprecationMessage": "Authentication via Service Account Token is deprecated and will be removed on December 17, 2025. Please use `service_account_key` or `service_account_key_path` instead. For a smooth transition, refer to our migration guide: https://docs.stackit.cloud/stackit/en/deprecation-plan-for-service-account-access-tokens-and-migration-guide-373293307.html"
            },
            "serviceEnablementCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Enablement API"
            },
            "skeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Kubernetes Engine (SKE) service"
            },
            "sqlserverflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the SQL Server Flex service"
            },
            "tokenCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the token API, which is used to request access tokens when using the key flow"
            }
        },
        "inputProperties": {
            "authorizationCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Membership service"
            },
            "cdnCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the CDN service"
            },
            "credentialsPath": {
                "type": "string",
                "description": "Path of JSON from where the credentials are read. Takes precedence over the env var `STACKIT_CREDENTIALS_PATH`. Default value is `~/.stackit/credentials.json`."
            },
            "defaultRegion": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global"
            },
            "dnsCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the DNS service"
            },
            "enableBetaResources": {
                "type": "boolean",
                "description": "Enable beta resources. Default is false."
            },
            "experiments": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Enables experiments. These are unstable features without official support. More information can be found in the README. Available Experiments: iam, routing-tables, network"
            },
            "gitCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Git service"
            },
            "iaasCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the IaaS service"
            },
            "loadbalancerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Load Balancer service"
            },
            "logmeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the LogMe service"
            },
            "mariadbCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MariaDB service"
            },
            "modelservingCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the AI Model Serving service"
            },
            "mongodbflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the MongoDB Flex service"
            },
            "objectstorageCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Object Storage service"
            },
            "observabilityCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Observability service"
            },
            "opensearchCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the OpenSearch service"
            },
            "postgresflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the PostgresFlex service"
            },
            "privateKey": {
                "type": "string",
                "description": "Private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "privateKeyPath": {
                "type": "string",
                "description": "Path for the private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is included in the service account key."
            },
            "rabbitmqCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the RabbitMQ service"
            },
            "redisCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Redis service"
            },
            "region": {
                "type": "string",
                "description": "Region will be used as the default location for regional services. Not all services require a region, some are global",
                "deprecationMessage": "This attribute is deprecated. Use 'default_region' instead"
            },
            "resourcemanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Resource Manager service"
            },
            "secretsmanagerCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Secrets Manager service"
            },
            "serverBackupCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Backup service"
            },
            "serverUpdateCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Server Update service"
            },
            "serviceAccountCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Account service"
            },
            "serviceAccountEmail": {
                "type": "string",
                "description": "Service account email. It can also be set using the environment variable STACKIT_SERVICE_ACCOUNT_EMAIL. It is required if you want to use the resource manager project resource.",
                "deprecationMessage": "The `service_account_email` field has been deprecated because it is not required. Will be removed after June 12th 2025."
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountKeyPath": {
                "type": "string",
                "description": "Path for the service account key used for authentication. If set, the key flow will be used to authenticate all operations."
            },
            "serviceAccountToken": {
                "type": "string",
                "description": "Token used for authentication. If set, the token flow will be used to authenticate all operations.",
                "deprecationMessage": "Authentication via Service Account Token is deprecated and will be removed on December 17, 2025. Please use `service_account_key` or `service_account_key_path` instead. For a smooth transition, refer to our migration guide: https://docs.stackit.cloud/stackit/en/deprecation-plan-for-service-account-access-tokens-and-migration-guide-373293307.html"
            },
            "serviceEnablementCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Service Enablement API"
            },
            "skeCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the Kubernetes Engine (SKE) service"
            },
            "sqlserverflexCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the SQL Server Flex service"
            },
            "tokenCustomEndpoint": {
                "type": "string",
                "description": "Custom endpoint for the token API, which is used to request access tokens when using the key flow"
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:stackit/terraformConfig"
        }
    },
    "resources": {
        "stackit:index/affinityGroup:AffinityGroup": {
            "description": "Affinity Group schema. Must have a `region` specified in the provider configuration.\n\n\n\n## Example Usage\n\n```terraform\nresource \"stackit_affinity_group\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-affinity-group-name\"\n  policy     = \"hard-anti-affinity\"\n}\n\n# Only use the import statement, if you want to import an existing affinity group\nimport {\n  to = stackit_affinity_group.import-example\n  id = \"${var.project_id},${var.affinity_group_id}\"\n}\n```\n",
            "properties": {
                "affinityGroupId": {
                    "type": "string",
                    "description": "The affinity group ID.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The servers that are part of the affinity group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the affinity group.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of the affinity group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the affinity group is associated.\n"
                }
            },
            "required": [
                "affinityGroupId",
                "members",
                "name",
                "policy",
                "projectId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the affinity group.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of the affinity group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the affinity group is associated.\n"
                }
            },
            "requiredInputs": [
                "policy",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AffinityGroup resources.\n",
                "properties": {
                    "affinityGroupId": {
                        "type": "string",
                        "description": "The affinity group ID.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The servers that are part of the affinity group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the affinity group.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The policy of the affinity group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the affinity group is associated.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/authorizationOrganizationRoleAssignment:AuthorizationOrganizationRoleAssignment": {
            "description": "organization Role Assignment resource schema.\n\n\u003e This resource is part of the iam experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\nresource \"stackit_authorization_organization_role_assignment\" \"example\" {\n  resource_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  role        = \"owner\"\n  subject     = \"john.doe@stackit.cloud\"\n}\n\n# Only use the import statement, if you want to import an existing organization role assignment\nimport {\n  to = stackit_authorization_organization_role_assignment.import-example\n  id = \"${var.organization_id},${var.org_role_assignment_role},${var.org_role_assignment_subject}\"\n}\n```\n",
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "organization Resource to assign the role to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role to be assigned\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                }
            },
            "required": [
                "resourceId",
                "role",
                "subject"
            ],
            "inputProperties": {
                "resourceId": {
                    "type": "string",
                    "description": "organization Resource to assign the role to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role to be assigned\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                }
            },
            "requiredInputs": [
                "resourceId",
                "role",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthorizationOrganizationRoleAssignment resources.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "organization Resource to assign the role to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role to be assigned\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/authorizationProjectRoleAssignment:AuthorizationProjectRoleAssignment": {
            "description": "project Role Assignment resource schema.\n\n\u003e This resource is part of the iam experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\nresource \"stackit_authorization_project_role_assignment\" \"example\" {\n  resource_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  role        = \"owner\"\n  subject     = \"john.doe@stackit.cloud\"\n}\n\n# Only use the import statement, if you want to import an existing project role assignment\nimport {\n  to = stackit_authorization_project_role_assignment.import-example\n  id = \"${var.project_id},${var.project_role_assignment_role},${var.project_role_assignment_subject}\"\n}\n```\n",
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "project Resource to assign the role to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role to be assigned\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                }
            },
            "required": [
                "resourceId",
                "role",
                "subject"
            ],
            "inputProperties": {
                "resourceId": {
                    "type": "string",
                    "description": "project Resource to assign the role to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role to be assigned\n"
                },
                "subject": {
                    "type": "string",
                    "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                }
            },
            "requiredInputs": [
                "resourceId",
                "role",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthorizationProjectRoleAssignment resources.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "project Resource to assign the role to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role to be assigned\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Identifier of user, service account or client. Usually email address or name in case of clients\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/cdnCustomDomain:CdnCustomDomain": {
            "description": "CDN distribution data source schema.\n\n\u003e This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\nresource \"stackit_cdn_custom_domain\" \"example\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  distribution_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"https://xxx.xxx\"\n}\n\n# Only use the import statement, if you want to import an existing cdn custom domain\nimport {\n  to = stackit_cdn_custom_domain.import-example\n  id = \"${var.project_id},${var.distribution_id},${var.custom_domain_name}\"\n}\n```\n",
            "properties": {
                "distributionId": {
                    "type": "string",
                    "description": "CDN distribution ID\n"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of distribution errors\n"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the distribution\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the distribution\n"
                }
            },
            "required": [
                "distributionId",
                "errors",
                "name",
                "projectId",
                "status"
            ],
            "inputProperties": {
                "distributionId": {
                    "type": "string",
                    "description": "CDN distribution ID\n"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the distribution\n"
                }
            },
            "requiredInputs": [
                "distributionId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CdnCustomDomain resources.\n",
                "properties": {
                    "distributionId": {
                        "type": "string",
                        "description": "CDN distribution ID\n"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of distribution errors\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the distribution\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/cdnDistribution:CdnDistribution": {
            "description": "CDN distribution data source schema.\n\n\u003e This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\nresource \"stackit_cdn_distribution\" \"example_distribution\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  config = {\n    backend = {\n      type       = \"http\"\n      origin_url = \"https://mybackend.onstackit.cloud\"\n    }\n    regions           = [\"EU\", \"US\", \"ASIA\", \"AF\", \"SA\"]\n    blocked_countries = [\"DE\", \"AT\", \"CH\"]\n\n    optimizer = {\n      enabled = true\n    }\n  }\n}\n\n# Only use the import statement, if you want to import an existing cdn distribution\nimport {\n  to = stackit_cdn_distribution.import-example\n  id = \"${var.project_id},${var.distribution_id}\"\n}\n```\n",
            "properties": {
                "config": {
                    "$ref": "#/types/stackit:index/CdnDistributionConfig:CdnDistributionConfig",
                    "description": "The distribution configuration\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Time when the distribution was created\n"
                },
                "distributionId": {
                    "type": "string",
                    "description": "CDN distribution ID\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/CdnDistributionDomain:CdnDistributionDomain"
                    },
                    "description": "List of configured domains for the distribution\n"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of distribution errors\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the distribution\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the distribution\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Time when the distribution was last updated\n"
                }
            },
            "required": [
                "config",
                "createdAt",
                "distributionId",
                "domains",
                "errors",
                "projectId",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/stackit:index/CdnDistributionConfig:CdnDistributionConfig",
                    "description": "The distribution configuration\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the distribution\n"
                }
            },
            "requiredInputs": [
                "config",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CdnDistribution resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/stackit:index/CdnDistributionConfig:CdnDistributionConfig",
                        "description": "The distribution configuration\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time when the distribution was created\n"
                    },
                    "distributionId": {
                        "type": "string",
                        "description": "CDN distribution ID\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/CdnDistributionDomain:CdnDistributionDomain"
                        },
                        "description": "List of configured domains for the distribution\n"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of distribution errors\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the distribution\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Time when the distribution was last updated\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/dnsRecordSet:DnsRecordSet": {
            "description": "DNS Record Set Resource schema.\n\n## Example Usage\n\n```terraform\nresource \"stackit_dns_record_set\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  zone_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-record-set\"\n  type       = \"A\"\n  comment    = \"Example comment\"\n  records    = [\"1.2.3.4\"]\n}\n\n# Only use the import statement, if you want to import an existing dns record set\nimport {\n  to = stackit_dns_record_set.import-example\n  id = \"${var.project_id},${var.zone_id},${var.record_set_id}\"\n}\n```\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Specifies if the record set is active or not. Defaults to `true`\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment.\n"
                },
                "error": {
                    "type": "string",
                    "description": "Error shows error in case create/update/delete failed.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name (FQDN) of the record set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the dns record set is associated.\n"
                },
                "recordSetId": {
                    "type": "string",
                    "description": "The rr set id.\n"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Records.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Record set state.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time to live. E.g. 3600\n"
                },
                "type": {
                    "type": "string",
                    "description": "The record set type. E.g. `A` or `CNAME`\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to which is dns record set is associated.\n"
                }
            },
            "required": [
                "active",
                "comment",
                "error",
                "fqdn",
                "name",
                "projectId",
                "recordSetId",
                "records",
                "state",
                "ttl",
                "type",
                "zoneId"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Specifies if the record set is active or not. Defaults to `true`\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the dns record set is associated.\n"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Records.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time to live. E.g. 3600\n"
                },
                "type": {
                    "type": "string",
                    "description": "The record set type. E.g. `A` or `CNAME`\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to which is dns record set is associated.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "records",
                "type",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecordSet resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specifies if the record set is active or not. Defaults to `true`\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment.\n"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error shows error in case create/update/delete failed.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Fully qualified domain name (FQDN) of the record set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns record set is associated.\n"
                    },
                    "recordSetId": {
                        "type": "string",
                        "description": "The rr set id.\n"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Records.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Record set state.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time to live. E.g. 3600\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The record set type. E.g. `A` or `CNAME`\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID to which is dns record set is associated.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/dnsZone:DnsZone": {
            "description": "DNS Zone resource schema.\n\n## Example Usage\n\n```terraform\nresource \"stackit_dns_zone\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name          = \"Example zone\"\n  dns_name      = \"example-zone.com\"\n  contact_email = \"aa@bb.ccc\"\n  type          = \"primary\"\n  acl           = \"192.168.0.0/24\"\n  description   = \"Example description\"\n  default_ttl   = 1230\n}\n\n# Only use the import statement, if you want to import an existing dns zone\nimport {\n  to = stackit_dns_zone.import-example\n  id = \"${var.project_id},${var.zone_id}\"\n}\n```\n",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The access control list. E.g. `0.0.0.0/0,::/0`\n"
                },
                "active": {
                    "type": "boolean"
                },
                "contactEmail": {
                    "type": "string",
                    "description": "A contact e-mail for the zone.\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "Default time to live. E.g. 3600.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the zone.\n"
                },
                "dnsName": {
                    "type": "string",
                    "description": "The zone name. E.g. `example.com`\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time. E.g. 1209600.\n"
                },
                "isReverseZone": {
                    "type": "boolean",
                    "description": "Specifies, if the zone is a reverse zone or not. Defaults to `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user given name of the zone.\n"
                },
                "negativeCache": {
                    "type": "integer",
                    "description": "Negative caching. E.g. 60\n"
                },
                "primaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Primary name server for secondary zone. E.g. [\"1.2.3.4\"]\n"
                },
                "primaryNameServer": {
                    "type": "string",
                    "description": "Primary name server. FQDN.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the dns zone is associated.\n"
                },
                "recordCount": {
                    "type": "integer",
                    "description": "Record count how many records are in the zone.\n"
                },
                "refreshTime": {
                    "type": "integer",
                    "description": "Refresh time. E.g. 3600\n"
                },
                "retryTime": {
                    "type": "integer",
                    "description": "Retry time. E.g. 600\n"
                },
                "serialNumber": {
                    "type": "integer",
                    "description": "Serial number. E.g. `2022111400`.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Zone state. E.g. `CREATE_SUCCEEDED`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the zone. E.g. `public`.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID.\n"
                }
            },
            "required": [
                "acl",
                "active",
                "contactEmail",
                "defaultTtl",
                "description",
                "dnsName",
                "expireTime",
                "isReverseZone",
                "name",
                "negativeCache",
                "primaries",
                "primaryNameServer",
                "projectId",
                "recordCount",
                "refreshTime",
                "retryTime",
                "serialNumber",
                "state",
                "type",
                "visibility",
                "zoneId"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "The access control list. E.g. `0.0.0.0/0,::/0`\n"
                },
                "active": {
                    "type": "boolean"
                },
                "contactEmail": {
                    "type": "string",
                    "description": "A contact e-mail for the zone.\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "Default time to live. E.g. 3600.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the zone.\n"
                },
                "dnsName": {
                    "type": "string",
                    "description": "The zone name. E.g. `example.com`\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time. E.g. 1209600.\n"
                },
                "isReverseZone": {
                    "type": "boolean",
                    "description": "Specifies, if the zone is a reverse zone or not. Defaults to `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user given name of the zone.\n"
                },
                "negativeCache": {
                    "type": "integer",
                    "description": "Negative caching. E.g. 60\n"
                },
                "primaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Primary name server for secondary zone. E.g. [\"1.2.3.4\"]\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the dns zone is associated.\n"
                },
                "refreshTime": {
                    "type": "integer",
                    "description": "Refresh time. E.g. 3600\n"
                },
                "retryTime": {
                    "type": "integer",
                    "description": "Retry time. E.g. 600\n"
                },
                "type": {
                    "type": "string",
                    "description": "Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.\n"
                }
            },
            "requiredInputs": [
                "dnsName",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsZone resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "The access control list. E.g. `0.0.0.0/0,::/0`\n"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "A contact e-mail for the zone.\n"
                    },
                    "defaultTtl": {
                        "type": "integer",
                        "description": "Default time to live. E.g. 3600.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the zone.\n"
                    },
                    "dnsName": {
                        "type": "string",
                        "description": "The zone name. E.g. `example.com`\n"
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "Expire time. E.g. 1209600.\n"
                    },
                    "isReverseZone": {
                        "type": "boolean",
                        "description": "Specifies, if the zone is a reverse zone or not. Defaults to `false`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user given name of the zone.\n"
                    },
                    "negativeCache": {
                        "type": "integer",
                        "description": "Negative caching. E.g. 60\n"
                    },
                    "primaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Primary name server for secondary zone. E.g. [\"1.2.3.4\"]\n"
                    },
                    "primaryNameServer": {
                        "type": "string",
                        "description": "Primary name server. FQDN.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns zone is associated.\n"
                    },
                    "recordCount": {
                        "type": "integer",
                        "description": "Record count how many records are in the zone.\n"
                    },
                    "refreshTime": {
                        "type": "integer",
                        "description": "Refresh time. E.g. 3600\n"
                    },
                    "retryTime": {
                        "type": "integer",
                        "description": "Retry time. E.g. 600\n"
                    },
                    "serialNumber": {
                        "type": "integer",
                        "description": "Serial number. E.g. `2022111400`.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Zone state. E.g. `CREATE_SUCCEEDED`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Zone type. Defaults to `primary`. Supported values are: `primary`, `secondary`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of the zone. E.g. `public`.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/git:Git": {
            "description": "Git Instance resource schema.\n\n\u003e This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources. This resource currently does not support updates. Changing the ACLs, flavor, or name will trigger resource recreation. Update functionality will be added soon. In the meantime, please proceed with caution. To update these attributes, please open a support ticket.\n\n## Example Usage\n\n```terraform\nresource \"stackit_git\" \"git\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"git-example-instance\"\n}\n\nresource \"stackit_git\" \"git\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"git-example-instance\"\n  acl = [\n    \"0.0.0.0/0\"\n  ]\n  flavor = \"git-100\"\n}\n\n# Only use the import statement, if you want to import an existing git resource\nimport {\n  to = stackit_git.import-example\n  id = \"${var.project_id},${var.git_instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricted ACL for instance access.\n"
                },
                "consumedDisk": {
                    "type": "string",
                    "description": "How many bytes of disk space is consumed.\n"
                },
                "consumedObjectStorage": {
                    "type": "string",
                    "description": "How many bytes of Object Storage is consumed.\n"
                },
                "created": {
                    "type": "string",
                    "description": "Instance creation timestamp in RFC3339 format.\n"
                },
                "flavor": {
                    "type": "string",
                    "description": "Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID linked to the git instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name linked to the git instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the git instance is associated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Url linked to the git instance.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version linked to the git instance.\n"
                }
            },
            "required": [
                "acls",
                "consumedDisk",
                "consumedObjectStorage",
                "created",
                "flavor",
                "instanceId",
                "name",
                "projectId",
                "url",
                "version"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricted ACL for instance access.\n"
                },
                "flavor": {
                    "type": "string",
                    "description": "Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name linked to the git instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the git instance is associated.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Restricted ACL for instance access.\n"
                    },
                    "consumedDisk": {
                        "type": "string",
                        "description": "How many bytes of disk space is consumed.\n"
                    },
                    "consumedObjectStorage": {
                        "type": "string",
                        "description": "How many bytes of Object Storage is consumed.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Instance creation timestamp in RFC3339 format.\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID linked to the git instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name linked to the git instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the git instance is associated.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url linked to the git instance.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version linked to the git instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/image:Image": {
            "description": "Image resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_image\" \"example_image\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"example-image\"\n  disk_format     = \"qcow2\"\n  local_file_path = \"./path/to/image.qcow2\"\n  min_disk_size   = 10\n  min_ram         = 5\n}\n\n# Only use the import statement, if you want to import an existing image\n# Must set a configuration value for the local_file_path attribute as the provider has marked it as required.\n# Since this attribute is not fetched in general from the API call, after adding it this would replace your image resource after an pulumi up.\n# In order to prevent this you need to add:\n#lifecycle {\n#    ignore_changes = [ local_file_path ]\n#  }\nimport {\n  to = stackit_image.import-example\n  id = \"${var.project_id},${var.image_id}\"\n}\n```\n",
            "properties": {
                "checksum": {
                    "$ref": "#/types/stackit:index/ImageChecksum:ImageChecksum",
                    "description": "Representation of an image checksum.\n"
                },
                "config": {
                    "$ref": "#/types/stackit:index/ImageConfig:ImageConfig",
                    "description": "Properties to set hardware and scheduling settings for an image.\n"
                },
                "diskFormat": {
                    "type": "string",
                    "description": "The disk format of the image.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "localFilePath": {
                    "type": "string",
                    "description": "The filepath of the raw image file to be uploaded.\n"
                },
                "minDiskSize": {
                    "type": "integer",
                    "description": "The minimum disk size of the image in GB.\n"
                },
                "minRam": {
                    "type": "integer",
                    "description": "The minimum RAM of the image in MB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the image is associated.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "Whether the image is protected.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the image.\n"
                }
            },
            "required": [
                "checksum",
                "config",
                "diskFormat",
                "imageId",
                "localFilePath",
                "minDiskSize",
                "minRam",
                "name",
                "projectId",
                "protected",
                "scope"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/stackit:index/ImageConfig:ImageConfig",
                    "description": "Properties to set hardware and scheduling settings for an image.\n"
                },
                "diskFormat": {
                    "type": "string",
                    "description": "The disk format of the image.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "localFilePath": {
                    "type": "string",
                    "description": "The filepath of the raw image file to be uploaded.\n"
                },
                "minDiskSize": {
                    "type": "integer",
                    "description": "The minimum disk size of the image in GB.\n"
                },
                "minRam": {
                    "type": "integer",
                    "description": "The minimum RAM of the image in MB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the image is associated.\n"
                }
            },
            "requiredInputs": [
                "diskFormat",
                "localFilePath",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "checksum": {
                        "$ref": "#/types/stackit:index/ImageChecksum:ImageChecksum",
                        "description": "Representation of an image checksum.\n"
                    },
                    "config": {
                        "$ref": "#/types/stackit:index/ImageConfig:ImageConfig",
                        "description": "Properties to set hardware and scheduling settings for an image.\n"
                    },
                    "diskFormat": {
                        "type": "string",
                        "description": "The disk format of the image.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "localFilePath": {
                        "type": "string",
                        "description": "The filepath of the raw image file to be uploaded.\n"
                    },
                    "minDiskSize": {
                        "type": "integer",
                        "description": "The minimum disk size of the image in GB.\n"
                    },
                    "minRam": {
                        "type": "integer",
                        "description": "The minimum RAM of the image in MB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the image is associated.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "Whether the image is protected.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the image.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/keyPair:KeyPair": {
            "description": "Key pair resource schema. Must have a `region` specified in the provider configuration. Allows uploading an SSH public key to be used for server authentication.\n\n\n\n## Example Usage\n\n```terraform\n# Create a key pair\nresource \"stackit_key_pair\" \"keypair\" {\n  name       = \"example-key-pair\"\n  public_key = chomp(file(\"path/to/id_rsa.pub\"))\n}\n\n# Only use the import statement, if you want to import an existing key pair\nimport {\n  to = stackit_key_pair.import-example\n  id = var.keypair_name\n}\n```\n",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the public SSH key.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key pair.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A string representation of the public SSH key. E.g., `ssh-rsa \u003ckey_data\u003e` or `ssh-ed25519 \u003ckey-data\u003e`.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key pair.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A string representation of the public SSH key. E.g., `ssh-rsa \u003ckey_data\u003e` or `ssh-ed25519 \u003ckey-data\u003e`.\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyPair resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the public SSH key.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key pair.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "A string representation of the public SSH key. E.g., `ssh-rsa \u003ckey_data\u003e` or `ssh-ed25519 \u003ckey-data\u003e`.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/loadbalancer:Loadbalancer": {
            "description": "## Example Usage\n\n```terraform\n# Create a network\nresource \"stackit_network\" \"example_network\" {\n  project_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name             = \"example-network\"\n  ipv4_nameservers = [\"8.8.8.8\"]\n  ipv4_prefix      = \"192.168.0.0/25\"\n  labels = {\n    \"key\" = \"value\"\n  }\n  routed = true\n}\n\n# Create a network interface\nresource \"stackit_network_interface\" \"nic\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_id = stackit_network.example_network.network_id\n}\n\n# Create a public IP for the load balancer\nresource \"stackit_public_ip\" \"public-ip\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  lifecycle {\n    ignore_changes = [network_interface_id]\n  }\n}\n\n# Create a key pair for accessing the server instance\nresource \"stackit_key_pair\" \"keypair\" {\n  name       = \"example-key-pair\"\n  public_key = chomp(file(\"path/to/id_rsa.pub\"))\n}\n\n# Create a server instance\nresource \"stackit_server\" \"boot-from-image\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-server\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"59838a89-51b1-4892-b57f-b3caf598ee2f\" // Ubuntu 24.04\n  }\n  availability_zone = \"xxxx-x\"\n  machine_type      = \"g2i.1\"\n  keypair_name      = stackit_key_pair.keypair.name\n  network_interfaces = [\n    stackit_network_interface.nic.network_interface_id\n  ]\n}\n\n# Create a load balancer\nresource \"stackit_loadbalancer\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-load-balancer\"\n  plan_id    = \"p10\"\n  target_pools = [\n    {\n      name        = \"example-target-pool\"\n      target_port = 80\n      targets = [\n        {\n          display_name = stackit_server.boot-from-image.name\n          ip           = stackit_network_interface.nic.ipv4\n        }\n      ]\n      active_health_check = {\n        healthy_threshold   = 10\n        interval            = \"3s\"\n        interval_jitter     = \"3s\"\n        timeout             = \"3s\"\n        unhealthy_threshold = 10\n      }\n    }\n  ]\n  listeners = [\n    {\n      display_name = \"example-listener\"\n      port         = 80\n      protocol     = \"PROTOCOL_TCP\"\n      target_pool  = \"example-target-pool\"\n    }\n  ]\n  networks = [\n    {\n      network_id = stackit_network.example_network.network_id\n      role       = \"ROLE_LISTENERS_AND_TARGETS\"\n    }\n  ]\n  external_address = stackit_public_ip.public-ip.ip\n  options = {\n    private_network_only = false\n  }\n}\n\n# Only use the import statement, if you want to import an existing loadbalancer\nimport {\n  to = stackit_loadbalancer.import-example\n  id = \"${var.project_id},${var.region},${var.loadbalancer_name}\"\n}\n```\n",
            "properties": {
                "externalAddress": {
                    "type": "string",
                    "description": "External Load Balancer IP address where this Load Balancer is exposed.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerListener:LoadbalancerListener"
                    },
                    "description": "List of all listeners which will accept traffic. Limited to 20.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Load balancer name.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerNetwork:LoadbalancerNetwork"
                    },
                    "description": "List of networks that listeners and targets reside in.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/LoadbalancerOptions:LoadbalancerOptions",
                    "description": "Defines any optional functionality you want to have enabled on your load balancer.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.\n"
                },
                "privateAddress": {
                    "type": "string",
                    "description": "Transient private Load Balancer IP address. It can change any time.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the Load Balancer is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "targetPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerTargetPool:LoadbalancerTargetPool"
                    },
                    "description": "List of all target pools which will be used in the Load Balancer. Limited to 20.\n"
                }
            },
            "required": [
                "listeners",
                "name",
                "networks",
                "options",
                "planId",
                "privateAddress",
                "projectId",
                "region",
                "targetPools"
            ],
            "inputProperties": {
                "externalAddress": {
                    "type": "string",
                    "description": "External Load Balancer IP address where this Load Balancer is exposed.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerListener:LoadbalancerListener"
                    },
                    "description": "List of all listeners which will accept traffic. Limited to 20.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Load balancer name.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerNetwork:LoadbalancerNetwork"
                    },
                    "description": "List of networks that listeners and targets reside in.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/LoadbalancerOptions:LoadbalancerOptions",
                    "description": "Defines any optional functionality you want to have enabled on your load balancer.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the Load Balancer is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "targetPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/LoadbalancerTargetPool:LoadbalancerTargetPool"
                    },
                    "description": "List of all target pools which will be used in the Load Balancer. Limited to 20.\n"
                }
            },
            "requiredInputs": [
                "listeners",
                "networks",
                "projectId",
                "targetPools"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Loadbalancer resources.\n",
                "properties": {
                    "externalAddress": {
                        "type": "string",
                        "description": "External Load Balancer IP address where this Load Balancer is exposed.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/LoadbalancerListener:LoadbalancerListener"
                        },
                        "description": "List of all listeners which will accept traffic. Limited to 20.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Load balancer name.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/LoadbalancerNetwork:LoadbalancerNetwork"
                        },
                        "description": "List of networks that listeners and targets reside in.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/LoadbalancerOptions:LoadbalancerOptions",
                        "description": "Defines any optional functionality you want to have enabled on your load balancer.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.\n"
                    },
                    "privateAddress": {
                        "type": "string",
                        "description": "Transient private Load Balancer IP address. It can change any time.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the Load Balancer is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "targetPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/LoadbalancerTargetPool:LoadbalancerTargetPool"
                        },
                        "description": "List of all target pools which will be used in the Load Balancer. Limited to 20.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/loadbalancerObservabilityCredential:LoadbalancerObservabilityCredential": {
            "description": "Load balancer observability credential resource schema. Must have a `region` specified in the provider configuration. These contain the username and password for the observability service (e.g. Argus) where the load balancer logs/metrics will be pushed into\n\n## Example Usage\n\n```terraform\nresource \"stackit_loadbalancer_observability_credential\" \"example\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  display_name = \"example-credentials\"\n  username     = \"example-user\"\n  password     = \"example-password\"\n}\n\n# Only use the import statement, if you want to import an existing loadbalancer observability credential\nimport {\n  to = stackit_loadbalancer_observability_credential.import-example\n  id = \"${var.project_id},${var.region},${var.credentials_ref}\"\n}\n```\n",
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "The credentials reference is used by the Load Balancer to define which credentials it will use.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Observability credential name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the load balancer observability credential is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                }
            },
            "required": [
                "credentialsRef",
                "displayName",
                "password",
                "projectId",
                "region",
                "username"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Observability credential name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the load balancer observability credential is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "password",
                "projectId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerObservabilityCredential resources.\n",
                "properties": {
                    "credentialsRef": {
                        "type": "string",
                        "description": "The credentials reference is used by the Load Balancer to define which credentials it will use.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Observability credential name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The username for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the load balancer observability credential is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The password for the observability service (e.g. Argus) where the logs/metrics will be pushed into.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/logmeCredential:LogmeCredential": {
            "description": "LogMe credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_logme_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing logme credential\nimport {\n  to = stackit_logme_credential.import-example\n  id = \"${var.project_id},${var.logme_instance_id},${var.logme_credentials_id}\"\n}\n```\n",
            "properties": {
                "credentialId": {
                    "type": "string",
                    "description": "The credential's ID.\n"
                },
                "host": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the LogMe instance.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "credentialId",
                "host",
                "instanceId",
                "password",
                "port",
                "projectId",
                "uri",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the LogMe instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogmeCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/logmeInstance:LogmeInstance": {
            "description": "LogMe instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_logme_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  version    = \"2\"\n  plan_name  = \"stackit-logme2-1.2.50-replica\"\n  parameters = {\n    sgw_acl = \"193.148.160.0/19,45.129.40.0/21,45.135.244.0/22\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing logme instance\nimport {\n  to = stackit_logme_instance.import-example\n  id = \"${var.project_id},${var.logme_instance_id}\"\n}\n```\n",
            "properties": {
                "cfGuid": {
                    "type": "string"
                },
                "cfOrganizationGuid": {
                    "type": "string"
                },
                "cfSpaceGuid": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the LogMe instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/LogmeInstanceParameters:LogmeInstanceParameters"
                },
                "planId": {
                    "type": "string",
                    "description": "The selected plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "required": [
                "cfGuid",
                "cfOrganizationGuid",
                "cfSpaceGuid",
                "dashboardUrl",
                "imageUrl",
                "instanceId",
                "name",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/LogmeInstanceParameters:LogmeInstanceParameters"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogmeInstance resources.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/LogmeInstanceParameters:LogmeInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/mariadbCredential:MariadbCredential": {
            "description": "MariaDB credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_mariadb_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing mariadb credential\nimport {\n  to = stackit_mariadb_credential.import-example\n  id = \"${var.project_id},${var.mariadb_instance_id},${var.mariadb_credential_id}\"\n}\n```\n",
            "properties": {
                "credentialId": {
                    "type": "string",
                    "description": "The credential's ID.\n"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MariaDB instance.\n"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "credentialId",
                "host",
                "hosts",
                "instanceId",
                "name",
                "password",
                "port",
                "projectId",
                "uri",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MariaDB instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MariadbCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/mariadbInstance:MariadbInstance": {
            "description": "MariaDB instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_mariadb_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  version    = \"10.11\"\n  plan_name  = \"stackit-mariadb-1.2.10-replica\"\n  parameters = {\n    sgw_acl = \"193.148.160.0/19,45.129.40.0/21,45.135.244.0/22\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing mariadb instance\nimport {\n  to = stackit_mariadb_instance.import-example\n  id = \"${var.project_id},${var.mariadb_instance_id}\"\n}\n```\n",
            "properties": {
                "cfGuid": {
                    "type": "string"
                },
                "cfOrganizationGuid": {
                    "type": "string"
                },
                "cfSpaceGuid": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MariaDB instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/MariadbInstanceParameters:MariadbInstanceParameters"
                },
                "planId": {
                    "type": "string",
                    "description": "The selected plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "required": [
                "cfGuid",
                "cfOrganizationGuid",
                "cfSpaceGuid",
                "dashboardUrl",
                "imageUrl",
                "instanceId",
                "name",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/MariadbInstanceParameters:MariadbInstanceParameters"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MariadbInstance resources.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/MariadbInstanceParameters:MariadbInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/modelservingToken:ModelservingToken": {
            "description": "AI Model Serving Auth Token Resource schema.\n\n## Example Usage\n\n### Automatically rotate AI model serving token\n```terraform\nresource \"time_rotating\" \"rotate\" {\n    rotation_days = 80\n}\n\nresource \"stackit_modelserving_token\" \"example\" {\n    project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n    name       = \"Example token\"\n    \n    rotate_when_changed = {\n        rotation = time_rotating.rotate.id\n    }\n\n}\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AI model serving auth token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the AI model serving auth token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the AI model serving auth token is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region to which the AI model serving auth token is associated. If not defined, the provider region is used\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the AI model serving auth token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Content of the AI model serving auth token.\n",
                    "secret": true
                },
                "tokenId": {
                    "type": "string",
                    "description": "The AI model serving auth token ID.\n"
                },
                "ttlDuration": {
                    "type": "string",
                    "description": "The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "The time until the AI model serving auth token is valid.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "region",
                "state",
                "token",
                "tokenId",
                "validUntil"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AI model serving auth token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the AI model serving auth token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the AI model serving auth token is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region to which the AI model serving auth token is associated. If not defined, the provider region is used\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "ttlDuration": {
                    "type": "string",
                    "description": "The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ModelservingToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the AI model serving auth token.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the AI model serving auth token.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the AI model serving auth token is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region to which the AI model serving auth token is associated. If not defined, the provider region is used\n"
                    },
                    "rotateWhenChanged": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the AI model serving auth token.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Content of the AI model serving auth token.\n",
                        "secret": true
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "The AI model serving auth token ID.\n"
                    },
                    "ttlDuration": {
                        "type": "string",
                        "description": "The TTL duration of the AI model serving auth token. E.g. 5h30m40s,5h,5h30m,30m,30s\n"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "The time until the AI model serving auth token is valid.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/mongodbflexInstance:MongodbflexInstance": {
            "description": "MongoDB Flex instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_mongodbflex_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  acl        = [\"XXX.XXX.XXX.X/XX\", \"XX.XXX.XX.X/XX\"]\n  flavor = {\n    cpu = 1\n    ram = 4\n  }\n  replicas = 1\n  storage = {\n    class = \"class\"\n    size  = 10\n  }\n  version = \"7.0\"\n  options = {\n    type                       = \"Single\"\n    snapshot_retention_days    = 3\n    point_in_time_window_hours = 30\n  }\n  backup_schedule = \"0 0 * * *\"\n}\n\n# Only use the import statement, if you want to import an existing mongodbflex instance\nimport {\n  to = stackit_mongodbflex_instance.import-example\n  id = \"${var.project_id},${var.region},${var.instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the MongoDB Flex instance.\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\").\n"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceFlavor:MongodbflexInstanceFlavor"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MongoDB Flex instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceOptions:MongodbflexInstanceOptions"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "replicas": {
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceStorage:MongodbflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "acls",
                "backupSchedule",
                "flavor",
                "instanceId",
                "name",
                "options",
                "projectId",
                "region",
                "replicas",
                "storage",
                "version"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the MongoDB Flex instance.\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\").\n"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceFlavor:MongodbflexInstanceFlavor"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceOptions:MongodbflexInstanceOptions"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "replicas": {
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/MongodbflexInstanceStorage:MongodbflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "acls",
                "backupSchedule",
                "flavor",
                "options",
                "projectId",
                "replicas",
                "storage",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MongodbflexInstance resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the MongoDB Flex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string",
                        "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\").\n"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/MongodbflexInstanceFlavor:MongodbflexInstanceFlavor"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/MongodbflexInstanceOptions:MongodbflexInstanceOptions"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/MongodbflexInstanceStorage:MongodbflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/mongodbflexUser:MongodbflexUser": {
            "description": "MongoDB Flex user resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_mongodbflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  username    = \"username\"\n  roles       = [\"role\"]\n  database    = \"database\"\n}\n\n# Only use the import statement, if you want to import an existing mongodbflex user\nimport {\n  to = stackit_mongodbflex_user.import-example\n  id = \"${var.project_id},${var.region},${var.instance_id},${user_id}\"\n}\n```\n",
            "properties": {
                "database": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MongoDB Flex instance.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]\n"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "database",
                "host",
                "instanceId",
                "password",
                "port",
                "projectId",
                "region",
                "roles",
                "uri",
                "userId",
                "username"
            ],
            "inputProperties": {
                "database": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the MongoDB Flex instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "database",
                "instanceId",
                "projectId",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MongodbflexUser resources.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Database access levels for the user. Some of the possible values are: [`read`, `readWrite`, `readWriteAnyDatabase`]\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/network:Network": {
            "description": "Network resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_network\" \"example_with_name\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-with-name\"\n}\n\nresource \"stackit_network\" \"example_routed_network\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-routed-network\"\n  labels = {\n    \"key\" = \"value\"\n  }\n  routed = true\n}\n\nresource \"stackit_network\" \"example_non_routed_network\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name               = \"example-non-routed-network\"\n  ipv4_nameservers   = [\"1.2.3.4\", \"5.6.7.8\"]\n  ipv4_prefix_length = 24\n  ipv4_gateway       = \"10.1.2.3\"\n  ipv4_prefix        = \"10.1.2.0/24\"\n  labels = {\n    \"key\" = \"value\"\n  }\n  routed = false\n}\n\n# Only use the import statement, if you want to import an existing network\n# Note: There will be a conflict which needs to be resolved manually.\n# These attributes cannot be configured together: [ipv4_prefix,ipv4_prefix_length,ipv4_gateway]\nimport {\n  to = stackit_network.import-example\n  id = \"${var.project_id},${var.network_id}\"\n}\n```\n",
            "properties": {
                "ipv4Gateway": {
                    "type": "string",
                    "description": "The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                },
                "ipv4Nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 nameservers of the network.\n"
                },
                "ipv4Prefix": {
                    "type": "string",
                    "description": "The IPv4 prefix of the network (CIDR).\n"
                },
                "ipv4PrefixLength": {
                    "type": "integer",
                    "description": "The IPv4 prefix length of the network.\n"
                },
                "ipv4Prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 prefixes of the network.\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                },
                "ipv6Nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv6 nameservers of the network.\n"
                },
                "ipv6Prefix": {
                    "type": "string",
                    "description": "The IPv6 prefix of the network (CIDR).\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The IPv6 prefix length of the network.\n"
                },
                "ipv6Prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv6 prefixes of the network.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network.\n"
                },
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.\n",
                    "deprecationMessage": "Use `ipv4_nameservers` to configure the nameservers for IPv4."
                },
                "networkId": {
                    "type": "string",
                    "description": "The network ID.\n"
                },
                "noIpv4Gateway": {
                    "type": "boolean",
                    "description": "If set to `true`, the network doesn't have a gateway.\n"
                },
                "noIpv6Gateway": {
                    "type": "boolean",
                    "description": "If set to `true`, the network doesn't have a gateway.\n"
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.\n",
                    "deprecationMessage": "Use `ipv4_prefixes` to read the prefixes of the IPv4 networks."
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network is associated.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP of the network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Can only be used when experimental \"network\" is set.\nThe resource region. If not defined, the provider region is used.\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "If set to `true`, the network is routed and therefore accessible from other networks.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "Can only be used when experimental \"network\" is set.\nThe ID of the routing table associated with the network.\n"
                }
            },
            "required": [
                "ipv4Gateway",
                "ipv4Nameservers",
                "ipv4Prefix",
                "ipv4PrefixLength",
                "ipv4Prefixes",
                "ipv6Gateway",
                "ipv6Nameservers",
                "ipv6Prefixes",
                "name",
                "nameservers",
                "networkId",
                "prefixes",
                "projectId",
                "publicIp",
                "region",
                "routed",
                "routingTableId"
            ],
            "inputProperties": {
                "ipv4Gateway": {
                    "type": "string",
                    "description": "The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                },
                "ipv4Nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 nameservers of the network.\n"
                },
                "ipv4Prefix": {
                    "type": "string",
                    "description": "The IPv4 prefix of the network (CIDR).\n"
                },
                "ipv4PrefixLength": {
                    "type": "integer",
                    "description": "The IPv4 prefix length of the network.\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                },
                "ipv6Nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv6 nameservers of the network.\n"
                },
                "ipv6Prefix": {
                    "type": "string",
                    "description": "The IPv6 prefix of the network (CIDR).\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The IPv6 prefix length of the network.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network.\n"
                },
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.\n",
                    "deprecationMessage": "Use `ipv4_nameservers` to configure the nameservers for IPv4."
                },
                "noIpv4Gateway": {
                    "type": "boolean",
                    "description": "If set to `true`, the network doesn't have a gateway.\n"
                },
                "noIpv6Gateway": {
                    "type": "boolean",
                    "description": "If set to `true`, the network doesn't have a gateway.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Can only be used when experimental \"network\" is set.\nThe resource region. If not defined, the provider region is used.\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "If set to `true`, the network is routed and therefore accessible from other networks.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "Can only be used when experimental \"network\" is set.\nThe ID of the routing table associated with the network.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "ipv4Gateway": {
                        "type": "string",
                        "description": "The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                    },
                    "ipv4Nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv4 nameservers of the network.\n"
                    },
                    "ipv4Prefix": {
                        "type": "string",
                        "description": "The IPv4 prefix of the network (CIDR).\n"
                    },
                    "ipv4PrefixLength": {
                        "type": "integer",
                        "description": "The IPv4 prefix length of the network.\n"
                    },
                    "ipv4Prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv4 prefixes of the network.\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                    },
                    "ipv6Nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv6 nameservers of the network.\n"
                    },
                    "ipv6Prefix": {
                        "type": "string",
                        "description": "The IPv6 prefix of the network (CIDR).\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The IPv6 prefix length of the network.\n"
                    },
                    "ipv6Prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv6 prefixes of the network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network.\n"
                    },
                    "nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.\n",
                        "deprecationMessage": "Use `ipv4_nameservers` to configure the nameservers for IPv4."
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network ID.\n"
                    },
                    "noIpv4Gateway": {
                        "type": "boolean",
                        "description": "If set to `true`, the network doesn't have a gateway.\n"
                    },
                    "noIpv6Gateway": {
                        "type": "boolean",
                        "description": "If set to `true`, the network doesn't have a gateway.\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.\n",
                        "deprecationMessage": "Use `ipv4_prefixes` to read the prefixes of the IPv4 networks."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network is associated.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP of the network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Can only be used when experimental \"network\" is set.\nThe resource region. If not defined, the provider region is used.\n"
                    },
                    "routed": {
                        "type": "boolean",
                        "description": "If set to `true`, the network is routed and therefore accessible from other networks.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "Can only be used when experimental \"network\" is set.\nThe ID of the routing table associated with the network.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/networkArea:NetworkArea": {
            "description": "Network area resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_network_area\" \"example\" {\n  organization_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"example-network-area\"\n  network_ranges = [\n    {\n      prefix = \"192.168.0.0/24\"\n    }\n  ]\n  transfer_network = \"192.168.1.0/24\"\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing network area\nimport {\n  to = stackit_network_area.import-example\n  id = \"${var.organization_id},${var.network_area_id}\"\n}\n```\n",
            "properties": {
                "defaultNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS Servers/Nameservers.\n"
                },
                "defaultPrefixLength": {
                    "type": "integer",
                    "description": "The default prefix length for networks in the network area.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "maxPrefixLength": {
                    "type": "integer",
                    "description": "The maximal prefix length for networks in the network area.\n"
                },
                "minPrefixLength": {
                    "type": "integer",
                    "description": "The minimal prefix length for networks in the network area.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network area.\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID.\n"
                },
                "networkRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/NetworkAreaNetworkRange:NetworkAreaNetworkRange"
                    },
                    "description": "List of Network ranges.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the network area is associated.\n"
                },
                "projectCount": {
                    "type": "integer",
                    "description": "The amount of projects currently referencing this area.\n"
                },
                "transferNetwork": {
                    "type": "string",
                    "description": "Classless Inter-Domain Routing (CIDR).\n"
                }
            },
            "required": [
                "defaultPrefixLength",
                "maxPrefixLength",
                "minPrefixLength",
                "name",
                "networkAreaId",
                "networkRanges",
                "organizationId",
                "projectCount",
                "transferNetwork"
            ],
            "inputProperties": {
                "defaultNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS Servers/Nameservers.\n"
                },
                "defaultPrefixLength": {
                    "type": "integer",
                    "description": "The default prefix length for networks in the network area.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "maxPrefixLength": {
                    "type": "integer",
                    "description": "The maximal prefix length for networks in the network area.\n"
                },
                "minPrefixLength": {
                    "type": "integer",
                    "description": "The minimal prefix length for networks in the network area.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network area.\n"
                },
                "networkRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/NetworkAreaNetworkRange:NetworkAreaNetworkRange"
                    },
                    "description": "List of Network ranges.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the network area is associated.\n"
                },
                "transferNetwork": {
                    "type": "string",
                    "description": "Classless Inter-Domain Routing (CIDR).\n"
                }
            },
            "requiredInputs": [
                "networkRanges",
                "organizationId",
                "transferNetwork"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkArea resources.\n",
                "properties": {
                    "defaultNameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS Servers/Nameservers.\n"
                    },
                    "defaultPrefixLength": {
                        "type": "integer",
                        "description": "The default prefix length for networks in the network area.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "maxPrefixLength": {
                        "type": "integer",
                        "description": "The maximal prefix length for networks in the network area.\n"
                    },
                    "minPrefixLength": {
                        "type": "integer",
                        "description": "The minimal prefix length for networks in the network area.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network area.\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID.\n"
                    },
                    "networkRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/NetworkAreaNetworkRange:NetworkAreaNetworkRange"
                        },
                        "description": "List of Network ranges.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    },
                    "projectCount": {
                        "type": "integer",
                        "description": "The amount of projects currently referencing this area.\n"
                    },
                    "transferNetwork": {
                        "type": "string",
                        "description": "Classless Inter-Domain Routing (CIDR).\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/networkAreaRoute:NetworkAreaRoute": {
            "description": "Network area route resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_network_area_route\" \"example\" {\n  organization_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  prefix          = \"192.168.0.0/24\"\n  next_hop        = \"192.168.0.0\"\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing network area route\nimport {\n  to = stackit_network_area_route.import-example\n  id = \"${var.organization_id},${var.network_area_id},${var.network_area_route_id}\"\n}\n```\n",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the network area route is associated.\n"
                },
                "networkAreaRouteId": {
                    "type": "string",
                    "description": "The network area route ID.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the network area is associated.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The network, that is reachable though the Next Hop. Should use CIDR notation.\n"
                }
            },
            "required": [
                "networkAreaId",
                "networkAreaRouteId",
                "nextHop",
                "organizationId",
                "prefix"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the network area route is associated.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the network area is associated.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The network, that is reachable though the Next Hop. Should use CIDR notation.\n"
                }
            },
            "requiredInputs": [
                "networkAreaId",
                "nextHop",
                "organizationId",
                "prefix"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkAreaRoute resources.\n",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the network area route is associated.\n"
                    },
                    "networkAreaRouteId": {
                        "type": "string",
                        "description": "The network area route ID.\n"
                    },
                    "nextHop": {
                        "type": "string",
                        "description": "The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The network, that is reachable though the Next Hop. Should use CIDR notation.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/networkInterface:NetworkInterface": {
            "description": "Network interface resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_network_interface\" \"example\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  allowed_addresses  = [\"192.168.0.0/24\"]\n  security_group_ids = [\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"]\n}\n\n# Only use the import statement, if you want to import an existing network interface\nimport {\n  to = stackit_network_interface.import-example\n  id = \"${var.project_id},${var.network_id},${var.network_interface_id}\"\n}\n```\n",
            "properties": {
                "allowedAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of CIDR (Classless Inter-Domain Routing) notations.\n"
                },
                "device": {
                    "type": "string",
                    "description": "The device UUID of the network interface.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 address.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a network interface.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC address of network interface.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network interface.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network ID to which the network interface is associated.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The network interface ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network is associated.\n"
                },
                "security": {
                    "type": "boolean",
                    "description": "The Network Interface Security. If set to false, then no security groups will apply to this network interface.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of security group UUIDs. If security is set to false, setting this field will lead to an error.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.\n"
                }
            },
            "required": [
                "allowedAddresses",
                "device",
                "ipv4",
                "mac",
                "name",
                "networkId",
                "networkInterfaceId",
                "projectId",
                "security",
                "securityGroupIds",
                "type"
            ],
            "inputProperties": {
                "allowedAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of CIDR (Classless Inter-Domain Routing) notations.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 address.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a network interface.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network interface.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network ID to which the network interface is associated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network is associated.\n"
                },
                "security": {
                    "type": "boolean",
                    "description": "The Network Interface Security. If set to false, then no security groups will apply to this network interface.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of security group UUIDs. If security is set to false, setting this field will lead to an error.\n"
                }
            },
            "requiredInputs": [
                "networkId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkInterface resources.\n",
                "properties": {
                    "allowedAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of CIDR (Classless Inter-Domain Routing) notations.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "The device UUID of the network interface.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "The IPv4 address.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a network interface.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address of network interface.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network interface.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network ID to which the network interface is associated.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The network interface ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network is associated.\n"
                    },
                    "security": {
                        "type": "boolean",
                        "description": "The Network Interface Security. If set to false, then no security groups will apply to this network interface.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of security group UUIDs. If security is set to false, setting this field will lead to an error.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/objectstorageBucket:ObjectstorageBucket": {
            "description": "ObjectStorage bucket resource schema. Must have a `region` specified in the provider configuration. If you are creating `credentialsgroup` and `bucket` resources simultaneously, please include the `depends_on` field so that they are created sequentially. This prevents errors from concurrent calls to the service enablement that is done in the background.\n\n## Example Usage\n\n```terraform\nresource \"stackit_objectstorage_bucket\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-bucket\"\n}\n\n# Only use the import statement, if you want to import an existing objectstorage bucket\nimport {\n  to = stackit_objectstorage_bucket.import-example\n  id = \"${var.project_id},${var.region},${var.bucket_name}\"\n}\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The bucket name. It must be DNS conform.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the bucket is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "urlPathStyle": {
                    "type": "string"
                },
                "urlVirtualHostedStyle": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "projectId",
                "region",
                "urlPathStyle",
                "urlVirtualHostedStyle"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The bucket name. It must be DNS conform.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the bucket is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectstorageBucket resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The bucket name. It must be DNS conform.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the bucket is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "urlPathStyle": {
                        "type": "string"
                    },
                    "urlVirtualHostedStyle": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/objectstorageCredential:ObjectstorageCredential": {
            "description": "ObjectStorage credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_objectstorage_credential\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credentials_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  expiration_timestamp = \"2027-01-02T03:04:05Z\"\n}\n\n# Only use the import statement, if you want to import an existing objectstorage credential\nimport {\n  to = stackit_objectstorage_credential.import-example\n  id = \"${var.project_id},${var.region},${var.bucket_credentials_group_id},${var.bucket_credential_id}\"\n}\n```\n",
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "credentialId": {
                    "type": "string",
                    "description": "The credential ID.\n"
                },
                "credentialsGroupId": {
                    "type": "string",
                    "description": "The credential group ID.\n"
                },
                "expirationTimestamp": {
                    "type": "string",
                    "description": "Expiration timestamp, in RFC339 format without fractional seconds. Example: \"2025-01-01T00:00:00Z\". If not set, the credential never expires.\n"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the credential group is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "credentialId",
                "credentialsGroupId",
                "expirationTimestamp",
                "name",
                "projectId",
                "region",
                "secretAccessKey"
            ],
            "inputProperties": {
                "credentialsGroupId": {
                    "type": "string",
                    "description": "The credential group ID.\n"
                },
                "expirationTimestamp": {
                    "type": "string",
                    "description": "Expiration timestamp, in RFC339 format without fractional seconds. Example: \"2025-01-01T00:00:00Z\". If not set, the credential never expires.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the credential group is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "credentialsGroupId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectstorageCredential resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "credentialId": {
                        "type": "string",
                        "description": "The credential ID.\n"
                    },
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credential group ID.\n"
                    },
                    "expirationTimestamp": {
                        "type": "string",
                        "description": "Expiration timestamp, in RFC339 format without fractional seconds. Example: \"2025-01-01T00:00:00Z\". If not set, the credential never expires.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the credential group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/objectstorageCredentialsGroup:ObjectstorageCredentialsGroup": {
            "description": "ObjectStorage credentials group resource schema. Must have a `region` specified in the provider configuration. If you are creating `credentialsgroup` and `bucket` resources simultaneously, please include the `depends_on` field so that they are created sequentially. This prevents errors from concurrent calls to the service enablement that is done in the background.\n\n## Example Usage\n\n```terraform\nresource \"stackit_objectstorage_credentials_group\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-credentials-group\"\n}\n\n# Only use the import statement, if you want to import an existing objectstorage credential group\nimport {\n  to = stackit_objectstorage_credentials_group.import-example\n  id = \"${var.project_id},${var.region},${var.bucket_credentials_group_id}\"\n}\n```\n",
            "properties": {
                "credentialsGroupId": {
                    "type": "string",
                    "description": "The credentials group ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The credentials group's display name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID to which the credentials group is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "urn": {
                    "type": "string",
                    "description": "Credentials group uniform resource name (URN)\n"
                }
            },
            "required": [
                "credentialsGroupId",
                "name",
                "projectId",
                "region",
                "urn"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The credentials group's display name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID to which the credentials group is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectstorageCredentialsGroup resources.\n",
                "properties": {
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credentials group ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The credentials group's display name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID to which the credentials group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "urn": {
                        "type": "string",
                        "description": "Credentials group uniform resource name (URN)\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/observabilityAlertgroup:ObservabilityAlertgroup": {
            "description": "Observability alert group resource schema. Used to create alerts based on metrics (Thanos). Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_observability_alertgroup\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"example-alert-group\"\n  interval    = \"60s\"\n  rules = [\n    {\n      alert      = \"example-alert-name\"\n      expression = \"kube_node_status_condition{condition=\\\"Ready\\\", status=\\\"false\\\"} \u003e 0\"\n      for        = \"60s\"\n      labels = {\n        severity = \"critical\"\n      },\n      annotations = {\n        summary : \"example summary\"\n        description : \"example description\"\n      }\n    },\n    {\n      alert      = \"example-alert-name-2\"\n      expression = \"kube_node_status_condition{condition=\\\"Ready\\\", status=\\\"false\\\"} \u003e 0\"\n      for        = \"1m\"\n      labels = {\n        severity = \"critical\"\n      },\n      annotations = {\n        summary : \"example summary\"\n        description : \"example description\"\n      }\n    },\n  ]\n}\n\n# Only use the import statement, if you want to import an existing observability alertgroup\nimport {\n  to = stackit_observability_alertgroup.import-example\n  id = \"${var.project_id},${var.observability_instance_id},${var.observability_alertgroup_name}\"\n}\n```\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the alert group is associated.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert group. Is the identifier and must be unique in the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the alert group is associated.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityAlertgroupRule:ObservabilityAlertgroupRule"
                    },
                    "description": "Rules for the alert group\n"
                }
            },
            "required": [
                "instanceId",
                "interval",
                "name",
                "projectId",
                "rules"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the alert group is associated.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert group. Is the identifier and must be unique in the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the alert group is associated.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityAlertgroupRule:ObservabilityAlertgroupRule"
                    },
                    "description": "Rules for the alert group\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObservabilityAlertgroup resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the alert group is associated.\n"
                    },
                    "interval": {
                        "type": "string",
                        "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the alert group is associated.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/ObservabilityAlertgroupRule:ObservabilityAlertgroupRule"
                        },
                        "description": "Rules for the alert group\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/observabilityCredential:ObservabilityCredential": {
            "description": "Observability credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_observability_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Observability Instance ID the credential belongs to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Credential password\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the credential is associated.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Credential username\n"
                }
            },
            "required": [
                "instanceId",
                "password",
                "projectId",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Observability Instance ID the credential belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the credential is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObservabilityCredential resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The Observability Instance ID the credential belongs to.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Credential password\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the credential is associated.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Credential username\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/observabilityInstance:ObservabilityInstance": {
            "description": "Observability instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_observability_instance\" \"example\" {\n  project_id                             = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name                                   = \"example-instance\"\n  plan_name                              = \"Observability-Monitoring-Medium-EU01\"\n  acl                                    = [\"1.1.1.1/32\", \"2.2.2.2/32\"]\n  metrics_retention_days                 = 90\n  metrics_retention_days_5m_downsampling = 90\n  metrics_retention_days_1h_downsampling = 90\n}\n\n# Only use the import statement, if you want to import an existing observability instance\nimport {\n  to = stackit_observability_instance.import-example\n  id = \"${var.project_id},${var.observability_instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.\n"
                },
                "alertConfig": {
                    "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfig:ObservabilityInstanceAlertConfig",
                    "description": "Alert configuration for the instance.\n"
                },
                "alertingUrl": {
                    "type": "string",
                    "description": "Specifies Alerting URL.\n"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "Specifies Observability instance dashboard URL.\n"
                },
                "grafanaInitialAdminPassword": {
                    "type": "string",
                    "description": "Specifies an initial Grafana admin password.\n",
                    "secret": true
                },
                "grafanaInitialAdminUser": {
                    "type": "string",
                    "description": "Specifies an initial Grafana admin username.\n"
                },
                "grafanaPublicReadAccess": {
                    "type": "boolean",
                    "description": "If true, anyone can access Grafana dashboards without logging in.\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "Specifies Grafana URL.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Observability instance ID.\n"
                },
                "isUpdatable": {
                    "type": "boolean",
                    "description": "Specifies if the instance can be updated.\n"
                },
                "jaegerTracesUrl": {
                    "type": "string"
                },
                "jaegerUiUrl": {
                    "type": "string"
                },
                "logsPushUrl": {
                    "type": "string",
                    "description": "Specifies URL for pushing logs.\n"
                },
                "logsUrl": {
                    "type": "string",
                    "description": "Specifies Logs URL.\n"
                },
                "metricsPushUrl": {
                    "type": "string",
                    "description": "Specifies URL for pushing metrics.\n"
                },
                "metricsRetentionDays": {
                    "type": "integer",
                    "description": "Specifies for how many days the raw metrics are kept. Default is set to `90`.\n"
                },
                "metricsRetentionDays1hDownsampling": {
                    "type": "integer",
                    "description": "Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.\n"
                },
                "metricsRetentionDays5mDownsampling": {
                    "type": "integer",
                    "description": "Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.\n"
                },
                "metricsUrl": {
                    "type": "string",
                    "description": "Specifies metrics URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Observability instance.\n"
                },
                "otlpTracesUrl": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional parameters.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "The Observability plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "targetsUrl": {
                    "type": "string",
                    "description": "Specifies Targets URL.\n"
                },
                "zipkinSpansUrl": {
                    "type": "string"
                }
            },
            "required": [
                "alertingUrl",
                "dashboardUrl",
                "grafanaInitialAdminPassword",
                "grafanaInitialAdminUser",
                "grafanaPublicReadAccess",
                "grafanaUrl",
                "instanceId",
                "isUpdatable",
                "jaegerTracesUrl",
                "jaegerUiUrl",
                "logsPushUrl",
                "logsUrl",
                "metricsPushUrl",
                "metricsRetentionDays",
                "metricsRetentionDays1hDownsampling",
                "metricsRetentionDays5mDownsampling",
                "metricsUrl",
                "name",
                "otlpTracesUrl",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "targetsUrl",
                "zipkinSpansUrl"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.\n"
                },
                "alertConfig": {
                    "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfig:ObservabilityInstanceAlertConfig",
                    "description": "Alert configuration for the instance.\n"
                },
                "metricsRetentionDays": {
                    "type": "integer",
                    "description": "Specifies for how many days the raw metrics are kept. Default is set to `90`.\n"
                },
                "metricsRetentionDays1hDownsampling": {
                    "type": "integer",
                    "description": "Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.\n"
                },
                "metricsRetentionDays5mDownsampling": {
                    "type": "integer",
                    "description": "Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Observability instance.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional parameters.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObservabilityInstance resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.\n"
                    },
                    "alertConfig": {
                        "$ref": "#/types/stackit:index/ObservabilityInstanceAlertConfig:ObservabilityInstanceAlertConfig",
                        "description": "Alert configuration for the instance.\n"
                    },
                    "alertingUrl": {
                        "type": "string",
                        "description": "Specifies Alerting URL.\n"
                    },
                    "dashboardUrl": {
                        "type": "string",
                        "description": "Specifies Observability instance dashboard URL.\n"
                    },
                    "grafanaInitialAdminPassword": {
                        "type": "string",
                        "description": "Specifies an initial Grafana admin password.\n",
                        "secret": true
                    },
                    "grafanaInitialAdminUser": {
                        "type": "string",
                        "description": "Specifies an initial Grafana admin username.\n"
                    },
                    "grafanaPublicReadAccess": {
                        "type": "boolean",
                        "description": "If true, anyone can access Grafana dashboards without logging in.\n"
                    },
                    "grafanaUrl": {
                        "type": "string",
                        "description": "Specifies Grafana URL.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Observability instance ID.\n"
                    },
                    "isUpdatable": {
                        "type": "boolean",
                        "description": "Specifies if the instance can be updated.\n"
                    },
                    "jaegerTracesUrl": {
                        "type": "string"
                    },
                    "jaegerUiUrl": {
                        "type": "string"
                    },
                    "logsPushUrl": {
                        "type": "string",
                        "description": "Specifies URL for pushing logs.\n"
                    },
                    "logsUrl": {
                        "type": "string",
                        "description": "Specifies Logs URL.\n"
                    },
                    "metricsPushUrl": {
                        "type": "string",
                        "description": "Specifies URL for pushing metrics.\n"
                    },
                    "metricsRetentionDays": {
                        "type": "integer",
                        "description": "Specifies for how many days the raw metrics are kept. Default is set to `90`.\n"
                    },
                    "metricsRetentionDays1hDownsampling": {
                        "type": "integer",
                        "description": "Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.\n"
                    },
                    "metricsRetentionDays5mDownsampling": {
                        "type": "integer",
                        "description": "Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.\n"
                    },
                    "metricsUrl": {
                        "type": "string",
                        "description": "Specifies metrics URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Observability instance.\n"
                    },
                    "otlpTracesUrl": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Additional parameters.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The Observability plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "targetsUrl": {
                        "type": "string",
                        "description": "Specifies Targets URL.\n"
                    },
                    "zipkinSpansUrl": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/observabilityLogalertgroup:ObservabilityLogalertgroup": {
            "description": "Observability log alert group resource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_observability_logalertgroup\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"example-log-alert-group\"\n  interval    = \"60m\"\n  rules = [\n    {\n      alert      = \"example-log-alert-name\"\n      expression = \"sum(rate({namespace=\\\"example\\\", pod=\\\"logger\\\"} |= \\\"Simulated error message\\\" [1m])) \u003e 0\"\n      for        = \"60s\"\n      labels = {\n        severity = \"critical\"\n      },\n      annotations = {\n        summary : \"example summary\"\n        description : \"example description\"\n      }\n    },\n    {\n      alert      = \"example-log-alert-name-2\"\n      expression = \"sum(rate({namespace=\\\"example\\\", pod=\\\"logger\\\"} |= \\\"Another error message\\\" [1m])) \u003e 0\"\n      for        = \"60s\"\n      labels = {\n        severity = \"critical\"\n      },\n      annotations = {\n        summary : \"example summary\"\n        description : \"example description\"\n      }\n    },\n  ]\n}\n\n# Only use the import statement, if you want to import an existing observability logalertgroup\nimport {\n  to = stackit_observability_logalertgroup.import-example\n  id = \"${var.project_id},${var.observability_instance_id},${var.observability_logalertgroup_name}\"\n}\n```\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the log alert group is associated.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the log alert group. Is the identifier and must be unique in the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the log alert group is associated.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityLogalertgroupRule:ObservabilityLogalertgroupRule"
                    },
                    "description": "Rules for the log alert group\n"
                }
            },
            "required": [
                "instanceId",
                "interval",
                "name",
                "projectId",
                "rules"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the log alert group is associated.\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the log alert group. Is the identifier and must be unique in the group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the log alert group is associated.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityLogalertgroupRule:ObservabilityLogalertgroupRule"
                    },
                    "description": "Rules for the log alert group\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObservabilityLogalertgroup resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the log alert group is associated.\n"
                    },
                    "interval": {
                        "type": "string",
                        "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the log alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the log alert group is associated.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/ObservabilityLogalertgroupRule:ObservabilityLogalertgroupRule"
                        },
                        "description": "Rules for the log alert group\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/observabilityScrapeconfig:ObservabilityScrapeconfig": {
            "description": "Observability scrape config resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_observability_scrapeconfig\" \"example\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name         = \"example-job\"\n  metrics_path = \"/my-metrics\"\n  saml2 = {\n    enable_url_parameters = true\n  }\n  targets = [\n    {\n      urls = [\"url1\", \"urls2\"]\n      labels = {\n        \"url1\" = \"dev\"\n      }\n    }\n  ]\n}\n\n# Only use the import statement, if you want to import an existing observability scrapeconfig\nimport {\n  to = stackit_observability_scrapeconfig.import-example\n  id = \"${var.project_id},${var.observability_instance_id},${var.observability_scrapeconfig_name}\"\n}\n```\n",
            "properties": {
                "basicAuth": {
                    "$ref": "#/types/stackit:index/ObservabilityScrapeconfigBasicAuth:ObservabilityScrapeconfigBasicAuth",
                    "description": "A basic authentication block.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the scraping job is associated.\n"
                },
                "metricsPath": {
                    "type": "string",
                    "description": "Specifies the job scraping url path. E.g. `/metrics`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the scraping job.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the scraping job is associated.\n"
                },
                "saml2": {
                    "$ref": "#/types/stackit:index/ObservabilityScrapeconfigSaml2:ObservabilityScrapeconfigSaml2",
                    "description": "A SAML2 configuration block.\n"
                },
                "sampleLimit": {
                    "type": "integer",
                    "description": "Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Specifies the http scheme. Defaults to `https`.\n"
                },
                "scrapeInterval": {
                    "type": "string",
                    "description": "Specifies the scrape interval as duration string. Defaults to `5m`.\n"
                },
                "scrapeTimeout": {
                    "type": "string",
                    "description": "Specifies the scrape timeout as duration string. Defaults to `2m`.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityScrapeconfigTarget:ObservabilityScrapeconfigTarget"
                    },
                    "description": "The targets list (specified by the static config).\n"
                }
            },
            "required": [
                "basicAuth",
                "instanceId",
                "metricsPath",
                "name",
                "projectId",
                "saml2",
                "sampleLimit",
                "scheme",
                "scrapeInterval",
                "scrapeTimeout",
                "targets"
            ],
            "inputProperties": {
                "basicAuth": {
                    "$ref": "#/types/stackit:index/ObservabilityScrapeconfigBasicAuth:ObservabilityScrapeconfigBasicAuth",
                    "description": "A basic authentication block.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Observability instance ID to which the scraping job is associated.\n"
                },
                "metricsPath": {
                    "type": "string",
                    "description": "Specifies the job scraping url path. E.g. `/metrics`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the scraping job.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the scraping job is associated.\n"
                },
                "saml2": {
                    "$ref": "#/types/stackit:index/ObservabilityScrapeconfigSaml2:ObservabilityScrapeconfigSaml2",
                    "description": "A SAML2 configuration block.\n"
                },
                "sampleLimit": {
                    "type": "integer",
                    "description": "Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Specifies the http scheme. Defaults to `https`.\n"
                },
                "scrapeInterval": {
                    "type": "string",
                    "description": "Specifies the scrape interval as duration string. Defaults to `5m`.\n"
                },
                "scrapeTimeout": {
                    "type": "string",
                    "description": "Specifies the scrape timeout as duration string. Defaults to `2m`.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/ObservabilityScrapeconfigTarget:ObservabilityScrapeconfigTarget"
                    },
                    "description": "The targets list (specified by the static config).\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "metricsPath",
                "projectId",
                "targets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObservabilityScrapeconfig resources.\n",
                "properties": {
                    "basicAuth": {
                        "$ref": "#/types/stackit:index/ObservabilityScrapeconfigBasicAuth:ObservabilityScrapeconfigBasicAuth",
                        "description": "A basic authentication block.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the scraping job is associated.\n"
                    },
                    "metricsPath": {
                        "type": "string",
                        "description": "Specifies the job scraping url path. E.g. `/metrics`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the scraping job.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the scraping job is associated.\n"
                    },
                    "saml2": {
                        "$ref": "#/types/stackit:index/ObservabilityScrapeconfigSaml2:ObservabilityScrapeconfigSaml2",
                        "description": "A SAML2 configuration block.\n"
                    },
                    "sampleLimit": {
                        "type": "integer",
                        "description": "Specifies the scrape sample limit. Upper limit depends on the service plan. Defaults to `5000`.\n"
                    },
                    "scheme": {
                        "type": "string",
                        "description": "Specifies the http scheme. Defaults to `https`.\n"
                    },
                    "scrapeInterval": {
                        "type": "string",
                        "description": "Specifies the scrape interval as duration string. Defaults to `5m`.\n"
                    },
                    "scrapeTimeout": {
                        "type": "string",
                        "description": "Specifies the scrape timeout as duration string. Defaults to `2m`.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/ObservabilityScrapeconfigTarget:ObservabilityScrapeconfigTarget"
                        },
                        "description": "The targets list (specified by the static config).\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/opensearchCredential:OpensearchCredential": {
            "description": "OpenSearch credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_opensearch_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing opensearch credential\nimport {\n  to = stackit_opensearch_credential.import-example\n  id = \"${var.project_id},${var.instance_id},${var.credential_id}\"\n}\n```\n",
            "properties": {
                "credentialId": {
                    "type": "string",
                    "description": "The credential's ID.\n"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the OpenSearch instance.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "scheme": {
                    "type": "string"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "credentialId",
                "host",
                "hosts",
                "instanceId",
                "password",
                "port",
                "projectId",
                "scheme",
                "uri",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the OpenSearch instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OpensearchCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/opensearchInstance:OpensearchInstance": {
            "description": "OpenSearch instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_opensearch_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  version    = \"2\"\n  plan_name  = \"stackit-opensearch-1.2.10-replica\"\n  parameters = {\n    sgw_acl = \"193.148.160.0/19,45.129.40.0/21,45.135.244.0/22\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing opensearch instance\nimport {\n  to = stackit_opensearch_instance.import-example\n  id = \"${var.project_id},${var.instance_id}\"\n}\n```\n",
            "properties": {
                "cfGuid": {
                    "type": "string"
                },
                "cfOrganizationGuid": {
                    "type": "string"
                },
                "cfSpaceGuid": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the OpenSearch instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/OpensearchInstanceParameters:OpensearchInstanceParameters"
                },
                "planId": {
                    "type": "string",
                    "description": "The selected plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "required": [
                "cfGuid",
                "cfOrganizationGuid",
                "cfSpaceGuid",
                "dashboardUrl",
                "imageUrl",
                "instanceId",
                "name",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/OpensearchInstanceParameters:OpensearchInstanceParameters"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OpensearchInstance resources.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/OpensearchInstanceParameters:OpensearchInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/postgresflexDatabase:PostgresflexDatabase": {
            "description": "Postgres Flex database resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_postgresflex_database\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"mydb\"\n  owner       = \"myusername\"\n}\n\n# Only use the import statement, if you want to import an existing postgresflex database\nimport {\n  to = stackit_postgresflex_database.import-example\n  id = \"${var.project_id},${var.region},${var.postgres_instance_id},${var.postgres_database_id}\"\n}\n```\n",
            "properties": {
                "databaseId": {
                    "type": "string",
                    "description": "Database ID.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Postgres Flex instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Username of the database owner.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "required": [
                "databaseId",
                "instanceId",
                "name",
                "owner",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Postgres Flex instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Username of the database owner.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "owner",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostgresflexDatabase resources.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "Database ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Postgres Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database name.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Username of the database owner.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/postgresflexInstance:PostgresflexInstance": {
            "description": "Postgres Flex instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_postgresflex_instance\" \"example\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"example-instance\"\n  acl             = [\"XXX.XXX.XXX.X/XX\", \"XX.XXX.XX.X/XX\"]\n  backup_schedule = \"00 00 * * *\"\n  flavor = {\n    cpu = 2\n    ram = 4\n  }\n  replicas = 3\n  storage = {\n    class = \"class\"\n    size  = 5\n  }\n  version = 14\n}\n\n# Only use the import statement, if you want to import an existing postgresflex instance\nimport {\n  to = stackit_postgresflex_instance.import-example\n  id = \"${var.project_id},${var.region},${var.postgres_instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the PostgresFlex instance.\n"
                },
                "backupSchedule": {
                    "type": "string"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/PostgresflexInstanceFlavor:PostgresflexInstanceFlavor"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the PostgresFlex instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "replicas": {
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/PostgresflexInstanceStorage:PostgresflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "acls",
                "backupSchedule",
                "flavor",
                "instanceId",
                "name",
                "projectId",
                "region",
                "replicas",
                "storage",
                "version"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the PostgresFlex instance.\n"
                },
                "backupSchedule": {
                    "type": "string"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/PostgresflexInstanceFlavor:PostgresflexInstanceFlavor"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "replicas": {
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/PostgresflexInstanceStorage:PostgresflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "acls",
                "backupSchedule",
                "flavor",
                "projectId",
                "replicas",
                "storage",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostgresflexInstance resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the PostgresFlex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/PostgresflexInstanceFlavor:PostgresflexInstanceFlavor"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/PostgresflexInstanceStorage:PostgresflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/postgresflexUser:PostgresflexUser": {
            "description": "Postgres Flex user resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_postgresflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  username    = \"username\"\n  roles       = [\"role\"]\n}\n\n# Only use the import statement, if you want to import an existing postgresflex user\nimport {\n  to = stackit_postgresflex_user.import-example\n  id = \"${var.project_id},${var.region},${var.postgres_instance_id},${var.user_id}\"\n}\n```\n",
            "properties": {
                "host": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the PostgresFlex instance.\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. Supported values are: `login`, `createdb`.\n"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "host",
                "instanceId",
                "password",
                "port",
                "projectId",
                "region",
                "roles",
                "uri",
                "userId",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the PostgresFlex instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. Supported values are: `login`, `createdb`.\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId",
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostgresflexUser resources.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Database access levels for the user. Supported values are: `login`, `createdb`.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/publicIp:PublicIp": {
            "description": "Public IP resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_public_ip\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_interface_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing public ip\nimport {\n  to = stackit_public_ip.import-example\n  id = \"${var.project_id},${var.public_ip_id}\"\n}\n```\n",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkInterfaceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the public IP is associated.\n"
                },
                "publicIpId": {
                    "type": "string",
                    "description": "The public IP ID.\n"
                }
            },
            "required": [
                "ip",
                "networkInterfaceId",
                "projectId",
                "publicIpId"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkInterfaceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the public IP is associated.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PublicIp resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkInterfaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the public IP is associated.\n"
                    },
                    "publicIpId": {
                        "type": "string",
                        "description": "The public IP ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/publicIpAssociate:PublicIpAssociate": {
            "description": "Associates an existing public IP to a network interface. This is useful for situations where you have a pre-allocated public IP or unable to use the `stackit.PublicIp` resource to create a new public IP. Must have a `region` specified in the provider configuration.\n\n!\u003e The `stackit.PublicIpAssociate` resource should not be used together with the `stackit.PublicIp` resource for the same public IP or for the same network interface. \nUsing both resources together for the same public IP or network interface WILL lead to conflicts, as they both have control of the public IP and network interface association.\n\n## Example Usage\n\n```terraform\nresource \"stackit_public_ip_associate\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  public_ip_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_interface_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing public ip associate\nimport {\n  to = stackit_public_ip_associate.import-example\n  id = \"${var.project_id},${var.public_ip_id},${var.network_interface_id}\"\n}\n```\n",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of the network interface (or virtual IP) to which the public IP should be attached to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the public IP is associated.\n"
                },
                "publicIpId": {
                    "type": "string",
                    "description": "The public IP ID.\n"
                }
            },
            "required": [
                "ip",
                "networkInterfaceId",
                "projectId",
                "publicIpId"
            ],
            "inputProperties": {
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of the network interface (or virtual IP) to which the public IP should be attached to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the public IP is associated.\n"
                },
                "publicIpId": {
                    "type": "string",
                    "description": "The public IP ID.\n"
                }
            },
            "requiredInputs": [
                "networkInterfaceId",
                "projectId",
                "publicIpId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PublicIpAssociate resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The ID of the network interface (or virtual IP) to which the public IP should be attached to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the public IP is associated.\n"
                    },
                    "publicIpId": {
                        "type": "string",
                        "description": "The public IP ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/rabbitmqCredential:RabbitmqCredential": {
            "description": "RabbitMQ credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_rabbitmq_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing rabbitmq credential\nimport {\n  to = stackit_rabbitmq_credential.import-example\n  id = \"${var.project_id},${var.rabbitmq_instance_id},${var.rabbitmq_credential_id}\"\n}\n```\n",
            "properties": {
                "credentialId": {
                    "type": "string",
                    "description": "The credential's ID.\n"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "httpApiUri": {
                    "type": "string"
                },
                "httpApiUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the RabbitMQ instance.\n"
                },
                "management": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "uri": {
                    "type": "string",
                    "secret": true
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "credentialId",
                "host",
                "hosts",
                "httpApiUri",
                "httpApiUris",
                "instanceId",
                "management",
                "password",
                "port",
                "projectId",
                "uri",
                "uris",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the RabbitMQ instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RabbitmqCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "httpApiUri": {
                        "type": "string"
                    },
                    "httpApiUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "management": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "uris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/rabbitmqInstance:RabbitmqInstance": {
            "description": "RabbitMQ instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_rabbitmq_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  version    = \"3.13\"\n  plan_name  = \"stackit-rabbitmq-1.2.10-replica\"\n  parameters = {\n    sgw_acl           = \"193.148.160.0/19,45.129.40.0/21,45.135.244.0/22\"\n    consumer_timeout  = 18000000\n    enable_monitoring = false\n    plugins           = [\"rabbitmq_consistent_hash_exchange\", \"rabbitmq_federation\", \"rabbitmq_tracing\"]\n  }\n}\n\n# Only use the import statement, if you want to import an existing rabbitmq instance\nimport {\n  to = stackit_rabbitmq_instance.import-example\n  id = \"${var.project_id},${var.rabbitmq_instance_id}\"\n}\n```\n",
            "properties": {
                "cfGuid": {
                    "type": "string"
                },
                "cfOrganizationGuid": {
                    "type": "string"
                },
                "cfSpaceGuid": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the RabbitMQ instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/RabbitmqInstanceParameters:RabbitmqInstanceParameters"
                },
                "planId": {
                    "type": "string",
                    "description": "The selected plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "required": [
                "cfGuid",
                "cfOrganizationGuid",
                "cfSpaceGuid",
                "dashboardUrl",
                "imageUrl",
                "instanceId",
                "name",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/RabbitmqInstanceParameters:RabbitmqInstanceParameters"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RabbitmqInstance resources.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/RabbitmqInstanceParameters:RabbitmqInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/redisCredential:RedisCredential": {
            "description": "Redis credential resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_redis_credential\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing redis credential\nimport {\n  to = stackit_redis_credential.import-example\n  id = \"${var.project_id},${var.redis_instance_id},${var.redis_credential_id}\"\n}\n```\n",
            "properties": {
                "credentialId": {
                    "type": "string",
                    "description": "The credential's ID.\n"
                },
                "host": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Redis instance.\n"
                },
                "loadBalancedHost": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "Connection URI.\n",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "credentialId",
                "host",
                "hosts",
                "instanceId",
                "loadBalancedHost",
                "password",
                "port",
                "projectId",
                "uri",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Redis instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "loadBalancedHost": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Connection URI.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/redisInstance:RedisInstance": {
            "description": "Redis instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_redis_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  version    = \"7\"\n  plan_name  = \"stackit-redis-1.2.10-replica\"\n  parameters = {\n    sgw_acl                 = \"193.148.160.0/19,45.129.40.0/21,45.135.244.0/22\"\n    enable_monitoring       = false\n    down_after_milliseconds = 30000\n    syslog                  = [\"logs4.your-syslog-endpoint.com:54321\"]\n  }\n}\n\n# Only use the import statement, if you want to import an existing redis instance\nimport {\n  to = stackit_redis_instance.import-example\n  id = \"${var.project_id},${var.redis_instance_id}\"\n}\n```\n",
            "properties": {
                "cfGuid": {
                    "type": "string"
                },
                "cfOrganizationGuid": {
                    "type": "string"
                },
                "cfSpaceGuid": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Redis instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/RedisInstanceParameters:RedisInstanceParameters"
                },
                "planId": {
                    "type": "string",
                    "description": "The selected plan ID.\n"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "required": [
                "cfGuid",
                "cfOrganizationGuid",
                "cfSpaceGuid",
                "dashboardUrl",
                "imageUrl",
                "instanceId",
                "name",
                "parameters",
                "planId",
                "planName",
                "projectId",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "parameters": {
                    "$ref": "#/types/stackit:index/RedisInstanceParameters:RedisInstanceParameters"
                },
                "planName": {
                    "type": "string",
                    "description": "The selected plan name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The service version.\n"
                }
            },
            "requiredInputs": [
                "planName",
                "projectId",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisInstance resources.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/RedisInstanceParameters:RedisInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/resourcemanagerProject:ResourcemanagerProject": {
            "description": "## Example Usage\n\n```terraform\nresource \"stackit_resourcemanager_project\" \"example\" {\n  parent_container_id = \"example-parent-container-abc123\"\n  name                = \"example-container\"\n  labels = {\n    \"Label 1\" = \"foo\"\n    // \"networkArea\" = stackit_network_area.foo.network_area_id\n  }\n  owner_email = \"john.doe@stackit.cloud\"\n}\n\n# Only use the import statement, if you want to import an existing resourcemanager project\n# Note: There will be a conflict which needs to be resolved manually.\n# Must set a configuration value for the owner_email attribute as the provider has marked it as required.\nimport {\n  to = stackit_resourcemanager_project.import-example\n  id = var.container_id\n}\n```\n",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "Project container ID. Globally unique, user-friendly identifier."
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}.  \nTo create a project within a STACKIT Network Area, setting the label `networkArea=\u003cnetworkAreaID\u003e` is required. This can not be changed after project creation."
                },
                "name": {
                    "type": "string",
                    "description": "Project name."
                },
                "ownerEmail": {
                    "type": "string",
                    "description": "Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect."
                },
                "parentContainerId": {
                    "type": "string",
                    "description": "Parent resource identifier. Both container ID (user-friendly) and UUID are supported"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project."
                }
            },
            "required": [
                "containerId",
                "name",
                "ownerEmail",
                "parentContainerId",
                "projectId"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}.  \nTo create a project within a STACKIT Network Area, setting the label `networkArea=\u003cnetworkAreaID\u003e` is required. This can not be changed after project creation."
                },
                "name": {
                    "type": "string",
                    "description": "Project name."
                },
                "ownerEmail": {
                    "type": "string",
                    "description": "Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect."
                },
                "parentContainerId": {
                    "type": "string",
                    "description": "Parent resource identifier. Both container ID (user-friendly) and UUID are supported"
                }
            },
            "requiredInputs": [
                "ownerEmail",
                "parentContainerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerProject resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "Project container ID. Globally unique, user-friendly identifier."
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9_-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}.  \nTo create a project within a STACKIT Network Area, setting the label `networkArea=\u003cnetworkAreaID\u003e` is required. This can not be changed after project creation."
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name."
                    },
                    "ownerEmail": {
                        "type": "string",
                        "description": "Email address of the owner of the project. This value is only considered during creation. Changing it afterwards will have no effect."
                    },
                    "parentContainerId": {
                        "type": "string",
                        "description": "Parent resource identifier. Both container ID (user-friendly) and UUID are supported"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project."
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/routingTable:RoutingTable": {
            "description": "Routing table resource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\nresource \"stackit_routing_table\" \"example\" {\n  organization_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"example\"\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing routing table\nimport {\n  to = stackit_routing_table.import-example\n  id = \"${var.organization_id},${var.region},${var.network_area_id},${var.routing_table_id}\"\n}\n```\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when the routing table was created\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the routing table.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the routing table.\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the routing table is associated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the routing table is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "The routing tables ID.\n"
                },
                "systemRoutes": {
                    "type": "boolean",
                    "description": "This controls whether the routes for project-to-project communication are created automatically or not.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date-time when the routing table was updated\n"
                }
            },
            "required": [
                "createdAt",
                "description",
                "name",
                "networkAreaId",
                "organizationId",
                "region",
                "routingTableId",
                "systemRoutes",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the routing table.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the routing table.\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the routing table is associated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the routing table is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "systemRoutes": {
                    "type": "boolean",
                    "description": "This controls whether the routes for project-to-project communication are created automatically or not.\n"
                }
            },
            "requiredInputs": [
                "networkAreaId",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoutingTable resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the routing table was created\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the routing table.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the routing table.\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    },
                    "systemRoutes": {
                        "type": "boolean",
                        "description": "This controls whether the routes for project-to-project communication are created automatically or not.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the routing table was updated\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/routingTableRoute:RoutingTableRoute": {
            "description": "Routing table route resource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This resource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\nresource \"stackit_routing_table_route\" \"example\" {\n  organization_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  routing_table_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  destination = {\n    type  = \"cidrv4\"\n    value = \"192.168.178.0/24\"\n  }\n  next_hop = {\n    type  = \"ipv4\"\n    value = \"192.168.178.1\"\n  }\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing routing table route\nimport {\n  to = stackit_routing_table_route.import-example\n  id = \"${var.organization_id},${var.region},${var.network_area_id},${var.routing_table_id},${var.routing_table_route_id}\"\n}\n```\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when the route was created.\n"
                },
                "destination": {
                    "$ref": "#/types/stackit:index/RoutingTableRouteDestination:RoutingTableRouteDestination",
                    "description": "Destination of the route.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the routing table is associated.\n"
                },
                "nextHop": {
                    "$ref": "#/types/stackit:index/RoutingTableRouteNextHop:RoutingTableRouteNextHop",
                    "description": "Next hop destination.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the routing table is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "routeId": {
                    "type": "string",
                    "description": "The ID of the route.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "The routing tables ID.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date-time when the route was updated.\n"
                }
            },
            "required": [
                "createdAt",
                "destination",
                "networkAreaId",
                "nextHop",
                "organizationId",
                "region",
                "routeId",
                "routingTableId",
                "updatedAt"
            ],
            "inputProperties": {
                "destination": {
                    "$ref": "#/types/stackit:index/RoutingTableRouteDestination:RoutingTableRouteDestination",
                    "description": "Destination of the route.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "networkAreaId": {
                    "type": "string",
                    "description": "The network area ID to which the routing table is associated.\n"
                },
                "nextHop": {
                    "$ref": "#/types/stackit:index/RoutingTableRouteNextHop:RoutingTableRouteNextHop",
                    "description": "Next hop destination.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "STACKIT organization ID to which the routing table is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "routingTableId": {
                    "type": "string",
                    "description": "The routing tables ID.\n"
                }
            },
            "requiredInputs": [
                "destination",
                "networkAreaId",
                "nextHop",
                "organizationId",
                "routingTableId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoutingTableRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the route was created.\n"
                    },
                    "destination": {
                        "$ref": "#/types/stackit:index/RoutingTableRouteDestination:RoutingTableRouteDestination",
                        "description": "Destination of the route.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "nextHop": {
                        "$ref": "#/types/stackit:index/RoutingTableRouteNextHop:RoutingTableRouteNextHop",
                        "description": "Next hop destination.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routeId": {
                        "type": "string",
                        "description": "The ID of the route.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the route was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/secretsmanagerInstance:SecretsmanagerInstance": {
            "description": "Secrets Manager instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_secretsmanager_instance\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-instance\"\n  acls       = [\"XXX.XXX.XXX.X/XX\", \"XX.XXX.XX.X/XX\"]\n}\n\n# Only use the import statement, if you want to import an existing secretsmanager instance\nimport {\n  to = stackit_secretsmanager_instance.import-example\n  id = \"${var.project_id},${var.secret_instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Secrets Manager instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretsmanagerInstance resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/secretsmanagerUser:SecretsmanagerUser": {
            "description": "Secrets Manager user resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_secretsmanager_user\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  description   = \"Example user\"\n  write_enabled = false\n}\n\n# Only use the import statement, if you want to import an existing secretsmanager user\nimport {\n  to = stackit_secretsmanager_user.import-example\n  id = \"${var.project_id},${var.secret_instance_id},${var.secret_user_id}\"\n}\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A user chosen description to differentiate between multiple users. Can't be changed after creation.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Secrets Manager instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "An auto-generated password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user's ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "An auto-generated user name.\n"
                },
                "writeEnabled": {
                    "type": "boolean",
                    "description": "If true, the user has writeaccess to the secrets engine.\n"
                }
            },
            "required": [
                "description",
                "instanceId",
                "password",
                "projectId",
                "userId",
                "username",
                "writeEnabled"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A user chosen description to differentiate between multiple users. Can't be changed after creation.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Secrets Manager instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the instance is associated.\n"
                },
                "writeEnabled": {
                    "type": "boolean",
                    "description": "If true, the user has writeaccess to the secrets engine.\n"
                }
            },
            "requiredInputs": [
                "description",
                "instanceId",
                "projectId",
                "writeEnabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretsmanagerUser resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A user chosen description to differentiate between multiple users. Can't be changed after creation.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "An auto-generated password.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user's ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An auto-generated user name.\n"
                    },
                    "writeEnabled": {
                        "type": "boolean",
                        "description": "If true, the user has writeaccess to the secrets engine.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/securityGroup:SecurityGroup": {
            "description": "Security group resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_security_group\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"my_security_group\"\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing security group\nimport {\n  to = stackit_security_group.import-example\n  id = \"${var.project_id},${var.security_group_id}\"\n}\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the security group is associated.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group ID.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.\n"
                }
            },
            "required": [
                "description",
                "name",
                "projectId",
                "securityGroupId",
                "stateful"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the security group is associated.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group is associated.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/securityGroupRule:SecurityGroupRule": {
            "description": "Security group rule resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_security_group_rule\" \"example\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  security_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  direction         = \"ingress\"\n  icmp_parameters = {\n    code = 0\n    type = 8\n  }\n  protocol = {\n    name = \"icmp\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing security group rule\n# Note: There will be a conflict which needs to be resolved manually.\n# Attribute \"protocol.number\" cannot be specified when \"protocol.name\" is specified.\nimport {\n  to = stackit_security_group_rule.import-example\n  id = \"${var.project_id},${var.security_group_id},${var.security_group_rule_id}\"\n}\n```\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The rule description.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.\n"
                },
                "etherType": {
                    "type": "string",
                    "description": "The ethertype which the rule should match.\n"
                },
                "icmpParameters": {
                    "$ref": "#/types/stackit:index/SecurityGroupRuleIcmpParameters:SecurityGroupRuleIcmpParameters",
                    "description": "ICMP Parameters. These parameters should only be provided if the protocol is ICMP.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The remote IP range which the rule should match.\n"
                },
                "portRange": {
                    "$ref": "#/types/stackit:index/SecurityGroupRulePortRange:SecurityGroupRulePortRange",
                    "description": "The range of ports. This should only be provided if the protocol is not ICMP.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the security group rule is associated.\n"
                },
                "protocol": {
                    "$ref": "#/types/stackit:index/SecurityGroupRuleProtocol:SecurityGroupRuleProtocol",
                    "description": "The internet protocol which the rule should match.\n"
                },
                "remoteSecurityGroupId": {
                    "type": "string",
                    "description": "The remote security group which the rule should match.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group ID.\n"
                },
                "securityGroupRuleId": {
                    "type": "string",
                    "description": "The security group rule ID.\n"
                }
            },
            "required": [
                "direction",
                "etherType",
                "icmpParameters",
                "portRange",
                "projectId",
                "protocol",
                "securityGroupId",
                "securityGroupRuleId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The rule description.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.\n"
                },
                "etherType": {
                    "type": "string",
                    "description": "The ethertype which the rule should match.\n"
                },
                "icmpParameters": {
                    "$ref": "#/types/stackit:index/SecurityGroupRuleIcmpParameters:SecurityGroupRuleIcmpParameters",
                    "description": "ICMP Parameters. These parameters should only be provided if the protocol is ICMP.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The remote IP range which the rule should match.\n"
                },
                "portRange": {
                    "$ref": "#/types/stackit:index/SecurityGroupRulePortRange:SecurityGroupRulePortRange",
                    "description": "The range of ports. This should only be provided if the protocol is not ICMP.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the security group rule is associated.\n"
                },
                "protocol": {
                    "$ref": "#/types/stackit:index/SecurityGroupRuleProtocol:SecurityGroupRuleProtocol",
                    "description": "The internet protocol which the rule should match.\n"
                },
                "remoteSecurityGroupId": {
                    "type": "string",
                    "description": "The remote security group which the rule should match.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The security group ID.\n"
                }
            },
            "requiredInputs": [
                "direction",
                "projectId",
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The rule description.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.\n"
                    },
                    "etherType": {
                        "type": "string",
                        "description": "The ethertype which the rule should match.\n"
                    },
                    "icmpParameters": {
                        "$ref": "#/types/stackit:index/SecurityGroupRuleIcmpParameters:SecurityGroupRuleIcmpParameters",
                        "description": "ICMP Parameters. These parameters should only be provided if the protocol is ICMP.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "The remote IP range which the rule should match.\n"
                    },
                    "portRange": {
                        "$ref": "#/types/stackit:index/SecurityGroupRulePortRange:SecurityGroupRulePortRange",
                        "description": "The range of ports. This should only be provided if the protocol is not ICMP.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group rule is associated.\n"
                    },
                    "protocol": {
                        "$ref": "#/types/stackit:index/SecurityGroupRuleProtocol:SecurityGroupRuleProtocol",
                        "description": "The internet protocol which the rule should match.\n"
                    },
                    "remoteSecurityGroupId": {
                        "type": "string",
                        "description": "The remote security group which the rule should match.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    },
                    "securityGroupRuleId": {
                        "type": "string",
                        "description": "The security group rule ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/server:Server": {
            "description": "Server resource schema. Must have a region specified in the provider configuration.\n\n## Example Usage\n\n### With key pair\n```terraform\nresource \"stackit_key_pair\" \"keypair\" {\n  name       = \"example-key-pair\"\n  public_key = chomp(file(\"path/to/id_rsa.pub\"))\n}\n\nresource \"stackit_server\" \"user-data-from-file\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  name         = \"example-server\"\n  machine_type = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n  user_data    = file(\"${path.module}/cloud-init.yaml\")\n}\n\n```\n\n### Boot from volume\n```terraform\nresource \"stackit_server\" \"boot-from-volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-server\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  availability_zone = \"eu01-1\"\n  machine_type      = \"g2i.1\"\n  keypair_name      = \"example-keypair\"\n}\n\n```\n\n### Boot from existing volume\n```terraform\nresource \"stackit_volume\" \"example-volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  size       = 12\n  source = {\n    type = \"image\"\n    id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  name              = \"example-volume\"\n  availability_zone = \"eu01-1\"\n}\n\nresource \"stackit_server\" \"boot-from-volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-server\"\n  boot_volume = {\n    source_type = \"volume\"\n    source_id   = stackit_volume.example-volume.volume_id\n  }\n  availability_zone = \"eu01-1\"\n  machine_type      = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n}\n\n```\n\n### Network setup\n```terraform\nresource \"stackit_network\" \"network\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name               = \"example-network\"\n  nameservers        = [\"192.0.2.0\", \"198.51.100.0\", \"203.0.113.0\"]\n  ipv4_prefix_length = 24\n}\n\nresource \"stackit_security_group\" \"sec-group\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-security-group\"\n  stateful   = true\n}\n\nresource \"stackit_security_group_rule\" \"rule\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  security_group_id = stackit_security_group.sec-group.security_group_id\n  direction         = \"ingress\"\n  ether_type         = \"IPv4\"\n}\n\nresource \"stackit_network_interface\" \"nic\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_id         = stackit_network.network.network_id\n  security_group_ids = [stackit_security_group.sec-group.security_group_id]\n}\n\nresource \"stackit_server\" \"server-with-network\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name         = \"example-server\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  machine_type = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n  network_interfaces = [\n    stackit_network_interface.nic.network_interface_id\n  ]\t\n}\n\nresource \"stackit_public_ip\" \"public-ip\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_interface_id = stackit_network_interface.nic.network_interface_id\n}\n\n```\n\n### Server with attached volume\n```terraform\nresource \"stackit_volume\" \"example-volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  size       = 12\n  performance_class = \"storage_premium_perf6\"\n  name              = \"example-volume\"\n  availability_zone = \"eu01-1\"\n}\n\nresource \"stackit_server\" \"server-with-volume\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name              = \"example-server\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  availability_zone = \"eu01-1\"\n  machine_type      = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n}\n\nresource \"stackit_server_volume_attach\" \"attach_volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = stackit_server.server-with-volume.server_id\n  volume_id  = stackit_volume.example-volume.volume_id\n}\n\n```\n\n### Server with user data (cloud-init)\n```terraform\nresource \"stackit_server\" \"user-data\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  name         = \"example-server\"\n  machine_type = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n  user_data    = \"#!/bin/bash\\n/bin/su\"\n}\n\nresource \"stackit_server\" \"user-data-from-file\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  }\n  name         = \"example-server\"\n  machine_type = \"g2i.1\"\n  keypair_name = stackit_key_pair.keypair.name\n  user_data    = file(\"${path.module}/cloud-init.yaml\")\n}\n\n```\n\n\n### Additional Examples\n\n```terraform\nresource \"stackit_server\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-server\"\n  boot_volume = {\n    size        = 64\n    source_type = \"image\"\n    source_id   = \"59838a89-51b1-4892-b57f-b3caf598ee2f\" // Ubuntu 24.04\n  }\n  availability_zone = \"xxxx-x\"\n  machine_type      = \"g2i.1\"\n  network_interfaces = [\n    stackit_network_interface.example.network_interface_id\n  ]\n}\n\n# Only use the import statement, if you want to import an existing server\n# Note: There will be a conflict which needs to be resolved manually.\n# Must set a configuration value for the boot_volume.source_type and boot_volume.source_id attribute as the provider has marked it as required.\n# Since those attributes are not fetched in general from the API call, after adding them this would replace your server resource after an pulumi up.\n# In order to prevent this you need to add:\n# lifecycle {\n#   ignore_changes = [ boot_volume ]\n# }\nimport {\n  to = stackit_server.import-example\n  id = \"${var.project_id},${var.server_id}\"\n}\n```\n",
            "properties": {
                "affinityGroup": {
                    "type": "string",
                    "description": "The affinity group the server is assigned to.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the server.\n"
                },
                "bootVolume": {
                    "$ref": "#/types/stackit:index/ServerBootVolume:ServerBootVolume",
                    "description": "The boot volume for the server\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date-time when the server was created\n"
                },
                "desiredStatus": {
                    "type": "string",
                    "description": "The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID to be used for an ephemeral disk on the server.\n"
                },
                "keypairName": {
                    "type": "string",
                    "description": "The name of the keypair used during server creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "launchedAt": {
                    "type": "string",
                    "description": "Date-time when the server was launched\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the server is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date-time when the server was updated\n"
                },
                "userData": {
                    "type": "string",
                    "description": "User data that is passed via cloud-init to the server.\n"
                }
            },
            "required": [
                "availabilityZone",
                "createdAt",
                "launchedAt",
                "machineType",
                "name",
                "projectId",
                "serverId",
                "updatedAt"
            ],
            "inputProperties": {
                "affinityGroup": {
                    "type": "string",
                    "description": "The affinity group the server is assigned to.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the server.\n"
                },
                "bootVolume": {
                    "$ref": "#/types/stackit:index/ServerBootVolume:ServerBootVolume",
                    "description": "The boot volume for the server\n"
                },
                "desiredStatus": {
                    "type": "string",
                    "description": "The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID to be used for an ephemeral disk on the server.\n"
                },
                "keypairName": {
                    "type": "string",
                    "description": "The name of the keypair used during server creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the server is associated.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "User data that is passed via cloud-init to the server.\n"
                }
            },
            "requiredInputs": [
                "machineType",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "affinityGroup": {
                        "type": "string",
                        "description": "The affinity group the server is assigned to.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "The availability zone of the server.\n"
                    },
                    "bootVolume": {
                        "$ref": "#/types/stackit:index/ServerBootVolume:ServerBootVolume",
                        "description": "The boot volume for the server\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the server was created\n"
                    },
                    "desiredStatus": {
                        "type": "string",
                        "description": "The desired status of the server resource. Supported values are: `active`, `inactive`, `deallocated`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image ID to be used for an ephemeral disk on the server.\n"
                    },
                    "keypairName": {
                        "type": "string",
                        "description": "The name of the keypair used during server creation.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "launchedAt": {
                        "type": "string",
                        "description": "Date-time when the server was launched\n"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the server is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the server was updated\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "User data that is passed via cloud-init to the server.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serverBackupSchedule:ServerBackupSchedule": {
            "description": "Server backup schedule resource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\nresource \"stackit_server_backup_schedule\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example_backup_schedule_name\"\n  rrule      = \"DTSTART;TZID=Europe/Sofia:20200803T023000 RRULE:FREQ=DAILY;INTERVAL=1\"\n  enabled    = true\n  backup_properties = {\n    name             = \"example_backup_name\"\n    retention_period = 14\n    volume_ids       = null\n  }\n}\n\n# Only use the import statement, if you want to import an existing server backup schedule\nimport {\n  to = stackit_server_backup_schedule.import-example\n  id = \"${var.project_id},${var.region},${var.server_id},${var.server_backup_schedule_id}\"\n}\n```\n",
            "properties": {
                "backupProperties": {
                    "$ref": "#/types/stackit:index/ServerBackupScheduleBackupProperties:ServerBackupScheduleBackupProperties",
                    "description": "Backup schedule details for the backups.\n"
                },
                "backupScheduleId": {
                    "type": "integer",
                    "description": "Backup schedule ID.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is the backup schedule enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the server is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Backup schedule described in `rrule` (recurrence rule) format.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "Server ID for the backup schedule.\n"
                }
            },
            "required": [
                "backupProperties",
                "backupScheduleId",
                "enabled",
                "name",
                "projectId",
                "region",
                "rrule",
                "serverId"
            ],
            "inputProperties": {
                "backupProperties": {
                    "$ref": "#/types/stackit:index/ServerBackupScheduleBackupProperties:ServerBackupScheduleBackupProperties",
                    "description": "Backup schedule details for the backups.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is the backup schedule enabled or disabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the server is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Backup schedule described in `rrule` (recurrence rule) format.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "Server ID for the backup schedule.\n"
                }
            },
            "requiredInputs": [
                "backupProperties",
                "enabled",
                "projectId",
                "rrule",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerBackupSchedule resources.\n",
                "properties": {
                    "backupProperties": {
                        "$ref": "#/types/stackit:index/ServerBackupScheduleBackupProperties:ServerBackupScheduleBackupProperties",
                        "description": "Backup schedule details for the backups.\n"
                    },
                    "backupScheduleId": {
                        "type": "integer",
                        "description": "Backup schedule ID.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the backup schedule enabled or disabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "Backup schedule described in `rrule` (recurrence rule) format.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the backup schedule.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serverNetworkInterfaceAttach:ServerNetworkInterfaceAttach": {
            "description": "Network interface attachment resource schema. Attaches a network interface to a server. Must have a `region` specified in the provider configuration. The attachment only takes full effect after server reboot.\n\n## Example Usage\n\n```terraform\nresource \"stackit_server_network_interface_attach\" \"attached_network_interface\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id            = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_interface_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing server network interface attachment\nimport {\n  to = stackit_server_network_interface_attach.import-example\n  id = \"${var.project_id},${var.server_id},${var.network_interface_id}\"\n}\n```\n",
            "properties": {
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The network interface ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network interface attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                }
            },
            "required": [
                "networkInterfaceId",
                "projectId",
                "serverId"
            ],
            "inputProperties": {
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The network interface ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the network interface attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                }
            },
            "requiredInputs": [
                "networkInterfaceId",
                "projectId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerNetworkInterfaceAttach resources.\n",
                "properties": {
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The network interface ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network interface attachment is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serverServiceAccountAttach:ServerServiceAccountAttach": {
            "description": "Service account attachment resource schema. Attaches a service account to a server. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_server_service_account_attach\" \"attached_service_account\" {\n  project_id            = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id             = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  service_account_email = \"service-account@stackit.cloud\"\n}\n\n# Only use the import statement, if you want to import an existing server service account attachment\nimport {\n  to = stackit_server_service_account_attach.import-example\n  id = \"${var.project_id},${var.server_id},${var.service_account_email}\"\n}\n```\n",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the service account attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The service account email.\n"
                }
            },
            "required": [
                "projectId",
                "serverId",
                "serviceAccountEmail"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the service account attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The service account email.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serverId",
                "serviceAccountEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerServiceAccountAttach resources.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the service account attachment is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "The service account email.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serverUpdateSchedule:ServerUpdateSchedule": {
            "description": "Server update schedule resource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This resource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\nresource \"stackit_server_update_schedule\" \"example\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id          = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name               = \"example_update_schedule_name\"\n  rrule              = \"DTSTART;TZID=Europe/Sofia:20200803T023000 RRULE:FREQ=DAILY;INTERVAL=1\"\n  enabled            = true\n  maintenance_window = 1\n}\n\n# Only use the import statement, if you want to import an existing server update schedule\nimport {\n  to = stackit_server_update_schedule.import-example\n  id = \"${var.project_id},${var.region},${var.server_id},${var.server_update_schedule_id}\"\n}\n```\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is the update schedule enabled or disabled.\n"
                },
                "maintenanceWindow": {
                    "type": "integer",
                    "description": "Maintenance window [1..24].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the server is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Update schedule described in `rrule` (recurrence rule) format.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "Server ID for the update schedule.\n"
                },
                "updateScheduleId": {
                    "type": "integer",
                    "description": "Update schedule ID.\n"
                }
            },
            "required": [
                "enabled",
                "maintenanceWindow",
                "name",
                "projectId",
                "region",
                "rrule",
                "serverId",
                "updateScheduleId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is the update schedule enabled or disabled.\n"
                },
                "maintenanceWindow": {
                    "type": "integer",
                    "description": "Maintenance window [1..24].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT Project ID to which the server is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "rrule": {
                    "type": "string",
                    "description": "Update schedule described in `rrule` (recurrence rule) format.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "Server ID for the update schedule.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "maintenanceWindow",
                "projectId",
                "rrule",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerUpdateSchedule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the update schedule enabled or disabled.\n"
                    },
                    "maintenanceWindow": {
                        "type": "integer",
                        "description": "Maintenance window [1..24].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "Update schedule described in `rrule` (recurrence rule) format.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the update schedule.\n"
                    },
                    "updateScheduleId": {
                        "type": "integer",
                        "description": "Update schedule ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serverVolumeAttach:ServerVolumeAttach": {
            "description": "Volume attachment resource schema. Attaches a volume to a server. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_server_volume_attach\" \"attached_volume\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  volume_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n\n# Only use the import statement, if you want to import an existing server volume attachment\nimport {\n  to = stackit_server_volume_attach.import-example\n  id = \"${var.project_id},${var.server_id},${var.volume_id}\"\n}\n```\n",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the volume attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID.\n"
                }
            },
            "required": [
                "projectId",
                "serverId",
                "volumeId"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the volume attachment is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serverId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerVolumeAttach resources.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the volume attachment is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serviceAccount:ServiceAccount": {
            "description": "Service account resource schema.\n\n## Example Usage\n\n```terraform\nresource \"stackit_service_account\" \"sa\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"sa01\"\n}\n\n# Only use the import statement, if you want to import an existing service account\nimport {\n  to = stackit_service_account.import-example\n  id = \"${var.project_id},${var.service_account_email}\"\n}\n```\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email of the service account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the service account is associated.\n"
                }
            },
            "required": [
                "email",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the service account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the service account is associated.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email of the service account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the service account is associated.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serviceAccountAccessToken:ServiceAccountAccessToken": {
            "description": "Service account access token schema.\n\n!\u003e This resource is scheduled for deprecation and will be removed on December 17, 2025. To ensure a smooth transition, please refer to our migration guide at https://docs.stackit.cloud/stackit/en/deprecation-plan-for-service-account-access-tokens-and-migration-guide-373293307.html for detailed instructions and recommendations.\n\n## Example Usage\n\n### Automatically rotate access tokens\n```terraform\nresource \"stackit_service_account\" \"sa\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"sa01\"\n}\n\nresource \"time_rotating\" \"rotate\" {\n  rotation_days = 80\n}\n\nresource \"stackit_service_account_access_token\" \"sa_token\" {\n  project_id            = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  service_account_email = stackit_service_account.sa.email\n  ttl_days              = 180\n\n  rotate_when_changed = {\n    rotation = time_rotating.rotate.id\n  }\n}\n\n```\n",
            "properties": {
                "accessTokenId": {
                    "type": "string",
                    "description": "Identifier for the access token linked to the service account.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicate whether the token is currently active or inactive\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp indicating when the access token was created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the service account token.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email address linked to the service account.\n"
                },
                "token": {
                    "type": "string",
                    "description": "JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.\n",
                    "secret": true
                },
                "ttlDays": {
                    "type": "integer",
                    "description": "Specifies the token's validity duration in days. If unspecified, defaults to 90 days.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "Estimated expiration timestamp of the access token. For precise validity, check the JWT details.\n"
                }
            },
            "required": [
                "accessTokenId",
                "active",
                "createdAt",
                "projectId",
                "serviceAccountEmail",
                "token",
                "ttlDays",
                "validUntil"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID associated with the service account token.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email address linked to the service account.\n"
                },
                "ttlDays": {
                    "type": "integer",
                    "description": "Specifies the token's validity duration in days. If unspecified, defaults to 90 days.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceAccountEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountAccessToken resources.\n",
                "properties": {
                    "accessTokenId": {
                        "type": "string",
                        "description": "Identifier for the access token linked to the service account.\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Indicate whether the token is currently active or inactive\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp indicating when the access token was created.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the service account token.\n"
                    },
                    "rotateWhenChanged": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary key/value pairs that will force recreation of the token when they change, enabling token rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email address linked to the service account.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "JWT access token for API authentication. Prefixed by 'Bearer' and should be stored securely as it is irretrievable once lost.\n",
                        "secret": true
                    },
                    "ttlDays": {
                        "type": "integer",
                        "description": "Specifies the token's validity duration in days. If unspecified, defaults to 90 days.\n"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Estimated expiration timestamp of the access token. For precise validity, check the JWT details.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/serviceAccountKey:ServiceAccountKey": {
            "description": "Service account key schema.\n## Example Usage\n\n### Automatically rotate service account keys\n```terraform\nresource \"stackit_service_account\" \"sa\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"sa01\"\n}\n\nresource \"time_rotating\" \"rotate\" {\n  rotation_days = 80\n}\n\nresource \"stackit_service_account_key\" \"sa_key\" {\n  project_id            = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  service_account_email = stackit_service_account.sa.email\n  ttl_days              = 90\n\n  rotate_when_changed = {\n    rotation = time_rotating.rotate.id\n  }\t\n}\n\n```\n",
            "properties": {
                "json": {
                    "type": "string",
                    "description": "The raw JSON representation of the service account key json, available for direct use.\n",
                    "secret": true
                },
                "keyId": {
                    "type": "string",
                    "description": "The unique identifier for the key associated with the service account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The STACKIT project ID associated with the service account key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The email address associated with the service account, used for account identification and communication.\n"
                },
                "ttlDays": {
                    "type": "integer",
                    "description": "Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted\n"
                }
            },
            "required": [
                "json",
                "keyId",
                "projectId",
                "serviceAccountEmail"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The STACKIT project ID associated with the service account key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "The email address associated with the service account, used for account identification and communication.\n"
                },
                "ttlDays": {
                    "type": "integer",
                    "description": "Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceAccountEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountKey resources.\n",
                "properties": {
                    "json": {
                        "type": "string",
                        "description": "The raw JSON representation of the service account key json, available for direct use.\n",
                        "secret": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The unique identifier for the key associated with the service account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The STACKIT project ID associated with the service account key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "Specifies the public*key (RSA2048 key-pair). If not provided, a certificate from STACKIT will be used to generate a private*key.\n"
                    },
                    "rotateWhenChanged": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary key/value pairs designed to force key recreation when they change, facilitating key rotation based on external factors such as a changing timestamp. Modifying this map triggers the creation of a new resource.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "The email address associated with the service account, used for account identification and communication.\n"
                    },
                    "ttlDays": {
                        "type": "integer",
                        "description": "Specifies the key's validity duration in days. If left unspecified, the key is considered valid until it is deleted\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/skeCluster:SkeCluster": {
            "description": "SKE Cluster Resource schema. Must have a `region` specified in the provider configuration.\n\n\u003e When updating `node_pools` of a `stackit.SkeCluster`, the pulumi preview might appear incorrect as it matches the node pools by index rather than by name. However, the SKE API correctly identifies node pools by name and applies the intended changes. Please review your changes carefully to ensure the correct configuration will be applied.\n\n## Example Usage\n\n```terraform\nresource \"stackit_ske_cluster\" \"example\" {\n  project_id             = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name                   = \"example\"\n  kubernetes_version_min = \"x.x\"\n  node_pools = [\n    {\n      name               = \"np-example\"\n      machine_type       = \"x.x\"\n      os_version         = \"x.x.x\"\n      minimum            = \"2\"\n      maximum            = \"3\"\n      availability_zones = [\"eu01-3\"]\n    }\n  ]\n  maintenance = {\n    enable_kubernetes_version_updates    = true\n    enable_machine_image_version_updates = true\n    start                                = \"01:00:00Z\"\n    end                                  = \"02:00:00Z\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing ske cluster\nimport {\n  to = stackit_ske_cluster.import-example\n  id = \"${var.project_id},${var.region},${var.ske_name}\"\n}\n```\n",
            "properties": {
                "egressAddressRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.\n"
                },
                "extensions": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensions:SkeClusterExtensions",
                    "description": "A single extensions block as defined below.\n"
                },
                "hibernations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/SkeClusterHibernation:SkeClusterHibernation"
                    },
                    "description": "One or more hibernation block as defined below.\n"
                },
                "kubernetesVersionMin": {
                    "type": "string",
                    "description": "The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.\n"
                },
                "kubernetesVersionUsed": {
                    "type": "string",
                    "description": "Full Kubernetes version used. For example, if 1.22 was set in `kubernetes_version_min`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                },
                "maintenance": {
                    "$ref": "#/types/stackit:index/SkeClusterMaintenance:SkeClusterMaintenance",
                    "description": "A single maintenance block as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster name.\n"
                },
                "network": {
                    "$ref": "#/types/stackit:index/SkeClusterNetwork:SkeClusterNetwork",
                    "description": "Network block as defined below.\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/SkeClusterNodePool:SkeClusterNodePool"
                    },
                    "description": "One or more `node_pool` block as defined below.\n"
                },
                "podAddressRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The network ranges (in CIDR notation) used by pods of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the cluster is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "required": [
                "egressAddressRanges",
                "kubernetesVersionUsed",
                "maintenance",
                "name",
                "nodePools",
                "podAddressRanges",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "extensions": {
                    "$ref": "#/types/stackit:index/SkeClusterExtensions:SkeClusterExtensions",
                    "description": "A single extensions block as defined below.\n"
                },
                "hibernations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/SkeClusterHibernation:SkeClusterHibernation"
                    },
                    "description": "One or more hibernation block as defined below.\n"
                },
                "kubernetesVersionMin": {
                    "type": "string",
                    "description": "The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.\n"
                },
                "maintenance": {
                    "$ref": "#/types/stackit:index/SkeClusterMaintenance:SkeClusterMaintenance",
                    "description": "A single maintenance block as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster name.\n"
                },
                "network": {
                    "$ref": "#/types/stackit:index/SkeClusterNetwork:SkeClusterNetwork",
                    "description": "Network block as defined below.\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/stackit:index/SkeClusterNodePool:SkeClusterNodePool"
                    },
                    "description": "One or more `node_pool` block as defined below.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the cluster is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "nodePools",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SkeCluster resources.\n",
                "properties": {
                    "egressAddressRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.\n"
                    },
                    "extensions": {
                        "$ref": "#/types/stackit:index/SkeClusterExtensions:SkeClusterExtensions",
                        "description": "A single extensions block as defined below.\n"
                    },
                    "hibernations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/SkeClusterHibernation:SkeClusterHibernation"
                        },
                        "description": "One or more hibernation block as defined below.\n"
                    },
                    "kubernetesVersionMin": {
                        "type": "string",
                        "description": "The minimum Kubernetes version. This field will be used to set the minimum kubernetes version on creation/update of the cluster. If unset, the latest supported Kubernetes version will be used. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the read-only `kubernetes_version_used` field.\n"
                    },
                    "kubernetesVersionUsed": {
                        "type": "string",
                        "description": "Full Kubernetes version used. For example, if 1.22 was set in `kubernetes_version_min`, this value may result to 1.22.15. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html).\n"
                    },
                    "maintenance": {
                        "$ref": "#/types/stackit:index/SkeClusterMaintenance:SkeClusterMaintenance",
                        "description": "A single maintenance block as defined below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name.\n"
                    },
                    "network": {
                        "$ref": "#/types/stackit:index/SkeClusterNetwork:SkeClusterNetwork",
                        "description": "Network block as defined below.\n"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/SkeClusterNodePool:SkeClusterNodePool"
                        },
                        "description": "One or more `node_pool` block as defined below.\n"
                    },
                    "podAddressRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The network ranges (in CIDR notation) used by pods of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the cluster is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/skeKubeconfig:SkeKubeconfig": {
            "description": "SKE kubeconfig resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_ske_kubeconfig\" \"example\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  cluster_name = \"example-cluster\"\n  refresh      = true\n}\n```\n",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "Name of the SKE cluster.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Date-time when the kubeconfig was created\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Expiration time of the kubeconfig, in seconds. Defaults to `3600`\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Timestamp when the kubeconfig expires\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "Raw short-lived admin kubeconfig.\n",
                    "secret": true
                },
                "kubeConfigId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the cluster is associated.\n"
                },
                "refresh": {
                    "type": "boolean",
                    "description": "If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "required": [
                "clusterName",
                "creationTime",
                "expiration",
                "expiresAt",
                "kubeConfig",
                "kubeConfigId",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "Name of the SKE cluster.\n"
                },
                "expiration": {
                    "type": "integer",
                    "description": "Expiration time of the kubeconfig, in seconds. Defaults to `3600`\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the cluster is associated.\n"
                },
                "refresh": {
                    "type": "boolean",
                    "description": "If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                }
            },
            "requiredInputs": [
                "clusterName",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SkeKubeconfig resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "Name of the SKE cluster.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Date-time when the kubeconfig was created\n"
                    },
                    "expiration": {
                        "type": "integer",
                        "description": "Expiration time of the kubeconfig, in seconds. Defaults to `3600`\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Timestamp when the kubeconfig expires\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "Raw short-lived admin kubeconfig.\n",
                        "secret": true
                    },
                    "kubeConfigId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the cluster is associated.\n"
                    },
                    "refresh": {
                        "type": "boolean",
                        "description": "If set to true, the provider will check if the kubeconfig has expired and will generated a new valid one in-place\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/sqlserverflexInstance:SqlserverflexInstance": {
            "description": "SQLServer Flex instance resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_sqlserverflex_instance\" \"example\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"example-instance\"\n  acl             = [\"XXX.XXX.XXX.X/XX\", \"XX.XXX.XX.X/XX\"]\n  backup_schedule = \"00 00 * * *\"\n  flavor = {\n    cpu = 4\n    ram = 16\n  }\n  storage = {\n    class = \"class\"\n    size  = 5\n  }\n  version = 2022\n}\n\n# Only use the import statement, if you want to import an existing sqlserverflex instance\nimport {\n  to = stackit_sqlserverflex_instance.import-example\n  id = \"${var.project_id},${var.region},${var.sql_instance_id}\"\n}\n```\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the SQLServer Flex instance.\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\")\n"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceFlavor:SqlserverflexInstanceFlavor"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the SQLServer Flex instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceOptions:SqlserverflexInstanceOptions"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "replicas": {
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceStorage:SqlserverflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "acls",
                "backupSchedule",
                "flavor",
                "instanceId",
                "name",
                "options",
                "projectId",
                "region",
                "replicas",
                "storage",
                "version"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Access Control List (ACL) for the SQLServer Flex instance.\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\")\n"
                },
                "flavor": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceFlavor:SqlserverflexInstanceFlavor"
                },
                "name": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "options": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceOptions:SqlserverflexInstanceOptions"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The resource region. If not defined, the provider region is used.\n"
                },
                "storage": {
                    "$ref": "#/types/stackit:index/SqlserverflexInstanceStorage:SqlserverflexInstanceStorage"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "flavor",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SqlserverflexInstance resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the SQLServer Flex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string",
                        "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\")\n"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/SqlserverflexInstanceFlavor:SqlserverflexInstanceFlavor"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/SqlserverflexInstanceOptions:SqlserverflexInstanceOptions"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/SqlserverflexInstanceStorage:SqlserverflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/sqlserverflexUser:SqlserverflexUser": {
            "description": "SQLServer Flex user resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_sqlserverflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  username    = \"username\"\n  roles       = [\"role\"]\n}\n\n# Only use the import statement, if you want to import an existing sqlserverflex user\nimport {\n  to = stackit_sqlserverflex_user.import-example\n  id = \"${var.project_id},${var.region},${var.sql_instance_id},${var.sql_user_id}\"\n}\n```\n",
            "properties": {
                "host": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the SQLServer Flex instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user account.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the SQLServer Flex instance.\n"
                }
            },
            "required": [
                "host",
                "instanceId",
                "password",
                "port",
                "projectId",
                "region",
                "roles",
                "userId",
                "username"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "ID of the SQLServer Flex instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the instance is associated.\n"
                },
                "region": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the SQLServer Flex instance.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "projectId",
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SqlserverflexUser resources.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user account.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Database access levels for the user. The values for the default roles are: `##STACKIT_DatabaseManager##`, `##STACKIT_LoginManager##`, `##STACKIT_ProcessManager##`, `##STACKIT_ServerManager##`, `##STACKIT_SQLAgentManager##`, `##STACKIT_SQLAgentUser##`\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the SQLServer Flex instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "stackit:index/volume:Volume": {
            "description": "Volume resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\nresource \"stackit_volume\" \"example\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name              = \"my_volume\"\n  availability_zone = \"eu01-1\"\n  size              = 64\n  labels = {\n    \"key\" = \"value\"\n  }\n}\n\n# Only use the import statement, if you want to import an existing volume\nimport {\n  to = stackit_volume.import-example\n  id = \"${var.project_id},${var.volume_id}\"\n}\n```\n",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the volume.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the volume.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume.\n"
                },
                "performanceClass": {
                    "type": "string",
                    "description": "The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the volume is associated.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server ID of the server to which the volume is attached to.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided\n"
                },
                "source": {
                    "$ref": "#/types/stackit:index/VolumeSource:VolumeSource",
                    "description": "The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID.\n"
                }
            },
            "required": [
                "availabilityZone",
                "description",
                "name",
                "performanceClass",
                "projectId",
                "serverId",
                "size",
                "volumeId"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The availability zone of the volume.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the volume.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume.\n"
                },
                "performanceClass": {
                    "type": "string",
                    "description": "The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "STACKIT project ID to which the volume is associated.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided\n"
                },
                "source": {
                    "$ref": "#/types/stackit:index/VolumeSource:VolumeSource",
                    "description": "The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "The availability zone of the volume.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the volume.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume.\n"
                    },
                    "performanceClass": {
                        "type": "string",
                        "description": "The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the volume is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID of the server to which the volume is attached to.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the volume in GB. It can only be updated to a larger value than the current size. Either `size` or `source` must be provided\n"
                    },
                    "source": {
                        "$ref": "#/types/stackit:index/VolumeSource:VolumeSource",
                        "description": "The source of the volume. It can be either a volume, an image, a snapshot or a backup. Either `size` or `source` must be provided\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume ID.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:stackit/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/provider"
                    }
                },
                "type": "pulumi:providers:stackit/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "stackit:index/getAffinityGroup:getAffinityGroup": {
            "description": "Affinity Group schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_affinity_group\" \"example\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  affinity_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAffinityGroup.\n",
                "properties": {
                    "affinityGroupId": {
                        "type": "string",
                        "description": "The affinity group ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the affinity group is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "affinityGroupId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAffinityGroup.\n",
                "properties": {
                    "affinityGroupId": {
                        "type": "string",
                        "description": "The affinity group ID.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Affinity Group schema. Must have a `region` specified in the provider configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the affinity group.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The policy of the affinity group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the affinity group is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "affinityGroupId",
                    "id",
                    "members",
                    "name",
                    "policy",
                    "projectId"
                ]
            }
        },
        "stackit:index/getCdnCustomDomain:getCdnCustomDomain": {
            "description": "CDN distribution data source schema.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_cdn_custom_domain\" \"example\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  distribution_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name            = \"https://xxx.xxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCdnCustomDomain.\n",
                "properties": {
                    "distributionId": {
                        "type": "string",
                        "description": "CDN distribution ID\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    }
                },
                "type": "object",
                "required": [
                    "distributionId",
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCdnCustomDomain.\n",
                "properties": {
                    "distributionId": {
                        "type": "string",
                        "description": "CDN distribution ID\n"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of distribution errors\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the distribution\n"
                    }
                },
                "type": "object",
                "required": [
                    "distributionId",
                    "errors",
                    "id",
                    "name",
                    "projectId",
                    "status"
                ]
            }
        },
        "stackit:index/getCdnDistribution:getCdnDistribution": {
            "description": "CDN distribution data source schema.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_cdn_distribution\" \"example\" {\n  project_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  distribution_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCdnDistribution.\n",
                "properties": {
                    "distributionId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    }
                },
                "type": "object",
                "required": [
                    "distributionId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCdnDistribution.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/stackit:index/getCdnDistributionConfig:getCdnDistributionConfig",
                        "description": "The distribution configuration\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time when the distribution was created\n"
                    },
                    "distributionId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getCdnDistributionDomain:getCdnDistributionDomain"
                        },
                        "description": "List of configured domains for the distribution\n"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of distribution errors\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID associated with the distribution\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the distribution\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Time when the distribution was last updated\n"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "createdAt",
                    "distributionId",
                    "domains",
                    "errors",
                    "id",
                    "projectId",
                    "status",
                    "updatedAt"
                ]
            }
        },
        "stackit:index/getDnsRecordSet:getDnsRecordSet": {
            "description": "DNS Record Set Resource schema.\n\n## Example Usage\n\n```terraform\ndata \"stackit_dns_record_set\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  zone_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  record_set_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsRecordSet.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns record set is associated.\n"
                    },
                    "recordSetId": {
                        "type": "string",
                        "description": "The rr set id.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID to which is dns record set is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "recordSetId",
                    "zoneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsRecordSet.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specifies if the record set is active or not.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment.\n"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error shows error in case create/update/delete failed.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Fully qualified domain name (FQDN) of the record set.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the record which should be a valid domain according to rfc1035 Section 2.3.4. E.g. `example.com`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns record set is associated.\n"
                    },
                    "recordSetId": {
                        "type": "string",
                        "description": "The rr set id.\n"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Records.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Record set state.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time to live. E.g. 3600\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The record set type. E.g. `A` or `CNAME`\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID to which is dns record set is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "active",
                    "comment",
                    "error",
                    "fqdn",
                    "id",
                    "name",
                    "projectId",
                    "recordSetId",
                    "records",
                    "state",
                    "ttl",
                    "type",
                    "zoneId"
                ]
            }
        },
        "stackit:index/getDnsZone:getDnsZone": {
            "description": "DNS Zone resource schema.\n\n## Example Usage\n\n```terraform\ndata \"stackit_dns_zone\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  zone_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsZone.\n",
                "properties": {
                    "dnsName": {
                        "type": "string",
                        "description": "The zone name. E.g. `example.com`\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns zone is associated.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsZone.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "The access control list.\n"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "A contact e-mail for the zone.\n"
                    },
                    "defaultTtl": {
                        "type": "integer",
                        "description": "Default time to live.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the zone.\n"
                    },
                    "dnsName": {
                        "type": "string",
                        "description": "The zone name. E.g. `example.com`\n"
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "Expire time.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isReverseZone": {
                        "type": "boolean",
                        "description": "Specifies, if the zone is a reverse zone or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user given name of the zone.\n"
                    },
                    "negativeCache": {
                        "type": "integer",
                        "description": "Negative caching.\n"
                    },
                    "primaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Primary name server for secondary zone.\n"
                    },
                    "primaryNameServer": {
                        "type": "string",
                        "description": "Primary name server. FQDN.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the dns zone is associated.\n"
                    },
                    "recordCount": {
                        "type": "integer",
                        "description": "Record count how many records are in the zone.\n"
                    },
                    "refreshTime": {
                        "type": "integer",
                        "description": "Refresh time.\n"
                    },
                    "retryTime": {
                        "type": "integer",
                        "description": "Retry time.\n"
                    },
                    "serialNumber": {
                        "type": "integer",
                        "description": "Serial number.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Zone state.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Zone type.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of the zone.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acl",
                    "active",
                    "contactEmail",
                    "defaultTtl",
                    "description",
                    "expireTime",
                    "id",
                    "isReverseZone",
                    "name",
                    "negativeCache",
                    "primaries",
                    "primaryNameServer",
                    "projectId",
                    "recordCount",
                    "refreshTime",
                    "retryTime",
                    "serialNumber",
                    "state",
                    "type",
                    "visibility"
                ]
            }
        },
        "stackit:index/getGit:getGit": {
            "description": "Git Instance datasource schema.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_git\" \"git\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGit.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID linked to the git instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the git instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGit.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Restricted ACL for instance access.\n"
                    },
                    "consumedDisk": {
                        "type": "string",
                        "description": "How many bytes of disk space is consumed.\n"
                    },
                    "consumedObjectStorage": {
                        "type": "string",
                        "description": "How many bytes of Object Storage is consumed.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Instance creation timestamp in RFC3339 format.\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Instance flavor. If not provided, defaults to git-100. For a list of available flavors, refer to our API documentation: `https://docs.api.stackit.cloud/documentation/git/version/v1beta`\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID linked to the git instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name linked to the git instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the git instance is associated.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url linked to the git instance.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version linked to the git instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "consumedDisk",
                    "consumedObjectStorage",
                    "created",
                    "flavor",
                    "id",
                    "instanceId",
                    "name",
                    "projectId",
                    "url",
                    "version"
                ]
            }
        },
        "stackit:index/getIaasProject:getIaasProject": {
            "description": "Project details. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_iaas_project\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIaasProject.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIaasProject.\n",
                "properties": {
                    "areaId": {
                        "type": "string",
                        "description": "The area ID to which the project belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the project was created.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "internetAccess": {
                        "type": "boolean",
                        "description": "Specifies if the project has internet_access\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Specifies the state of the project.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the project was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "areaId",
                    "createdAt",
                    "id",
                    "internetAccess",
                    "projectId",
                    "state",
                    "updatedAt"
                ]
            }
        },
        "stackit:index/getImage:getImage": {
            "description": "Image datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_image\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  image_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the image is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "imageId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "checksum": {
                        "$ref": "#/types/stackit:index/getImageChecksum:getImageChecksum",
                        "description": "Representation of an image checksum.\n"
                    },
                    "config": {
                        "$ref": "#/types/stackit:index/getImageConfig:getImageConfig",
                        "description": "Properties to set hardware and scheduling settings for an image.\n"
                    },
                    "diskFormat": {
                        "type": "string",
                        "description": "The disk format of the image.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "minDiskSize": {
                        "type": "integer",
                        "description": "The minimum disk size of the image in GB.\n"
                    },
                    "minRam": {
                        "type": "integer",
                        "description": "The minimum RAM of the image in MB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the image is associated.\n"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "Whether the image is protected.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "checksum",
                    "config",
                    "diskFormat",
                    "id",
                    "imageId",
                    "labels",
                    "minDiskSize",
                    "minRam",
                    "name",
                    "projectId",
                    "protected",
                    "scope"
                ]
            }
        },
        "stackit:index/getKeyPair:getKeyPair": {
            "description": "Key pair resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_key_pair\" \"example\" {\n  name = \"example-key-pair-name\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKeyPair.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key pair.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKeyPair.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the public SSH key.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key pair.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "A string representation of the public SSH key. E.g., `ssh-rsa \u003ckey_data\u003e` or `ssh-ed25519 \u003ckey-data\u003e`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint",
                    "id",
                    "labels",
                    "name",
                    "publicKey"
                ]
            }
        },
        "stackit:index/getLoadbalancer:getLoadbalancer": {
            "description": "Load Balancer data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_loadbalancer\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-load-balancer\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Load balancer name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the Load Balancer is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancer.\n",
                "properties": {
                    "externalAddress": {
                        "type": "string",
                        "description": "External Load Balancer IP address where this Load Balancer is exposed.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getLoadbalancerListener:getLoadbalancerListener"
                        },
                        "description": "List of all listeners which will accept traffic. Limited to 20.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Load balancer name.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getLoadbalancerNetwork:getLoadbalancerNetwork"
                        },
                        "description": "List of networks that listeners and targets reside in.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/getLoadbalancerOptions:getLoadbalancerOptions",
                        "description": "Defines any optional functionality you want to have enabled on your load balancer.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The service plan ID. If not defined, the default service plan is `p10`. Possible values are: `p10`, `p50`, `p250`, `p750`.\n"
                    },
                    "privateAddress": {
                        "type": "string",
                        "description": "Transient private Load Balancer IP address. It can change any time.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the Load Balancer is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "targetPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getLoadbalancerTargetPool:getLoadbalancerTargetPool"
                        },
                        "description": "List of all target pools which will be used in the Load Balancer. Limited to 20.\n"
                    }
                },
                "type": "object",
                "required": [
                    "externalAddress",
                    "id",
                    "listeners",
                    "name",
                    "networks",
                    "options",
                    "planId",
                    "privateAddress",
                    "projectId",
                    "targetPools"
                ]
            }
        },
        "stackit:index/getLogmeCredential:getLogmeCredential": {
            "description": "LogMe credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_logme_credential\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLogmeCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLogmeCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "host",
                    "id",
                    "instanceId",
                    "password",
                    "port",
                    "projectId",
                    "uri",
                    "username"
                ]
            }
        },
        "stackit:index/getLogmeInstance:getLogmeInstance": {
            "description": "LogMe instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_logme_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLogmeInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLogmeInstance.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the LogMe instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/getLogmeInstanceParameters:getLogmeInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cfGuid",
                    "cfOrganizationGuid",
                    "cfSpaceGuid",
                    "dashboardUrl",
                    "id",
                    "imageUrl",
                    "instanceId",
                    "name",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "version"
                ]
            }
        },
        "stackit:index/getMachineType:getMachineType": {
            "description": "Machine type data source.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_machine_type\" \"two_vcpus_filter\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  filter     = \"vcpus==2\"\n}\n\ndata \"stackit_machine_type\" \"filter_sorted_ascending_false\" {\n  project_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  filter         = \"vcpus \u003e= 2 \u0026\u0026 ram \u003e= 2048\"\n  sort_ascending = false\n}\n\ndata \"stackit_machine_type\" \"intel_icelake_generic_filter\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  filter     = \"extraSpecs.cpu==\\\"intel-icelake-generic\\\" \u0026\u0026 vcpus == 2\"\n}\n\n# returns warning\ndata \"stackit_machine_type\" \"no_match\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  filter     = \"vcpus == 99\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMachineType.\n",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "Expr-lang filter for filtering machine types.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "sortAscending": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "filter",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMachineType.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "disk": {
                        "type": "integer"
                    },
                    "extraSpecs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filter": {
                        "type": "string",
                        "description": "Expr-lang filter for filtering machine types.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "ram": {
                        "type": "integer"
                    },
                    "sortAscending": {
                        "type": "boolean"
                    },
                    "vcpus": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "disk",
                    "extraSpecs",
                    "filter",
                    "id",
                    "name",
                    "projectId",
                    "ram",
                    "vcpus"
                ]
            }
        },
        "stackit:index/getMariadbCredential:getMariadbCredential": {
            "description": "MariaDB credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_mariadb_credential\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMariadbCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMariadbCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "host",
                    "hosts",
                    "id",
                    "instanceId",
                    "name",
                    "password",
                    "port",
                    "projectId",
                    "uri",
                    "username"
                ]
            }
        },
        "stackit:index/getMariadbInstance:getMariadbInstance": {
            "description": "MariaDB instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_mariadb_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMariadbInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMariadbInstance.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MariaDB instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/getMariadbInstanceParameters:getMariadbInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cfGuid",
                    "cfOrganizationGuid",
                    "cfSpaceGuid",
                    "dashboardUrl",
                    "id",
                    "imageUrl",
                    "instanceId",
                    "name",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "version"
                ]
            }
        },
        "stackit:index/getMongodbflexInstance:getMongodbflexInstance": {
            "description": "MongoDB Flex instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_mongodbflex_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMongodbflexInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMongodbflexInstance.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the MongoDB Flex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string",
                        "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\").\n"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/getMongodbflexInstanceFlavor:getMongodbflexInstanceFlavor"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/getMongodbflexInstanceOptions:getMongodbflexInstanceOptions",
                        "description": "Custom parameters for the MongoDB Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/getMongodbflexInstanceStorage:getMongodbflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "backupSchedule",
                    "flavor",
                    "id",
                    "instanceId",
                    "name",
                    "options",
                    "projectId",
                    "region",
                    "replicas",
                    "storage",
                    "version"
                ]
            }
        },
        "stackit:index/getMongodbflexUser:getMongodbflexUser": {
            "description": "MongoDB Flex user data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_mongodbflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  user_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMongodbflexUser.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMongodbflexUser.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the MongoDB Flex instance.\n"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "host",
                    "id",
                    "instanceId",
                    "port",
                    "projectId",
                    "region",
                    "roles",
                    "userId",
                    "username"
                ]
            }
        },
        "stackit:index/getNetwork:getNetwork": {
            "description": "Network resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_network\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "networkId": {
                        "type": "string",
                        "description": "The network ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Can only be used when experimental \"network\" is set. This is likely going to undergo significant changes or be removed in the future.\nThe resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "ipv4Gateway": {
                        "type": "string",
                        "description": "The IPv4 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                    },
                    "ipv4Nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv4 nameservers of the network.\n"
                    },
                    "ipv4Prefix": {
                        "type": "string",
                        "description": "The IPv4 prefix of the network (CIDR).\n",
                        "deprecationMessage": "The API supports reading multiple prefixes. So using the attribute 'ipv4_prefixes` should be preferred. This attribute will be populated with the first element from the list"
                    },
                    "ipv4PrefixLength": {
                        "type": "integer",
                        "description": "The IPv4 prefix length of the network.\n"
                    },
                    "ipv4Prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv4 prefixes of the network.\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The IPv6 gateway of a network. If not specified, the first IP of the network will be assigned as the gateway.\n"
                    },
                    "ipv6Nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv6 nameservers of the network.\n"
                    },
                    "ipv6Prefix": {
                        "type": "string",
                        "description": "The IPv6 prefix of the network (CIDR).\n",
                        "deprecationMessage": "The API supports reading multiple prefixes. So using the attribute 'ipv6_prefixes` should be preferred. This attribute will be populated with the first element from the list"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The IPv6 prefix length of the network.\n"
                    },
                    "ipv6Prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IPv6 prefixes of the network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network.\n"
                    },
                    "nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The nameservers of the network. This field is deprecated and will be removed soon, use `ipv4_nameservers` to configure the nameservers for IPv4.\n",
                        "deprecationMessage": "Use `ipv4_nameservers` to configure the nameservers for IPv4."
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network ID.\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The prefixes of the network. This field is deprecated and will be removed soon, use `ipv4_prefixes` to read the prefixes of the IPv4 networks.\n",
                        "deprecationMessage": "Use `ipv4_prefixes` to read the prefixes of the IPv4 networks."
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network is associated.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP of the network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Can only be used when experimental \"network\" is set. This is likely going to undergo significant changes or be removed in the future.\nThe resource region. If not defined, the provider region is used.\n"
                    },
                    "routed": {
                        "type": "boolean",
                        "description": "Shows if the network is routed and therefore accessible from other networks.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "Can only be used when experimental \"network\" is set. This is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\nThe ID of the routing table associated with the network.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ipv4Gateway",
                    "ipv4Nameservers",
                    "ipv4Prefix",
                    "ipv4PrefixLength",
                    "ipv4Prefixes",
                    "ipv6Gateway",
                    "ipv6Nameservers",
                    "ipv6Prefix",
                    "ipv6PrefixLength",
                    "ipv6Prefixes",
                    "labels",
                    "name",
                    "nameservers",
                    "networkId",
                    "prefixes",
                    "projectId",
                    "publicIp",
                    "routed",
                    "routingTableId"
                ]
            }
        },
        "stackit:index/getNetworkArea:getNetworkArea": {
            "description": "Network area datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_network_area\" \"example\" {\n  organization_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkArea.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkArea.\n",
                "properties": {
                    "defaultNameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS Servers/Nameservers.\n"
                    },
                    "defaultPrefixLength": {
                        "type": "integer",
                        "description": "The default prefix length for networks in the network area.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "maxPrefixLength": {
                        "type": "integer",
                        "description": "The maximal prefix length for networks in the network area.\n"
                    },
                    "minPrefixLength": {
                        "type": "integer",
                        "description": "The minimal prefix length for networks in the network area.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network area.\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID.\n"
                    },
                    "networkRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getNetworkAreaNetworkRange:getNetworkAreaNetworkRange"
                        },
                        "description": "List of Network ranges.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    },
                    "projectCount": {
                        "type": "integer",
                        "description": "The amount of projects currently referencing this area.\n"
                    },
                    "transferNetwork": {
                        "type": "string",
                        "description": "Classless Inter-Domain Routing (CIDR).\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultNameservers",
                    "defaultPrefixLength",
                    "id",
                    "labels",
                    "maxPrefixLength",
                    "minPrefixLength",
                    "name",
                    "networkAreaId",
                    "networkRanges",
                    "organizationId",
                    "projectCount",
                    "transferNetwork"
                ]
            }
        },
        "stackit:index/getNetworkAreaRoute:getNetworkAreaRoute": {
            "description": "Network area route data resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_network_area_route\" \"example\" {\n  organization_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id       = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_route_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkAreaRoute.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the network area route is associated.\n"
                    },
                    "networkAreaRouteId": {
                        "type": "string",
                        "description": "The network area route ID.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "networkAreaRouteId",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkAreaRoute.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the network area route is associated.\n"
                    },
                    "networkAreaRouteId": {
                        "type": "string",
                        "description": "The network area route ID.\n"
                    },
                    "nextHop": {
                        "type": "string",
                        "description": "The IP address of the routing system, that will route the prefix configured. Should be a valid IPv4 address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the network area is associated.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The network, that is reachable though the Next Hop. Should use CIDR notation.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "labels",
                    "networkAreaId",
                    "networkAreaRouteId",
                    "nextHop",
                    "organizationId",
                    "prefix"
                ]
            }
        },
        "stackit:index/getNetworkInterface:getNetworkInterface": {
            "description": "Network interface datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_network_interface\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_interface_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkInterface.\n",
                "properties": {
                    "networkId": {
                        "type": "string",
                        "description": "The network ID to which the network interface is associated.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The network interface ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network interface is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkId",
                    "networkInterfaceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkInterface.\n",
                "properties": {
                    "allowedAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of CIDR (Classless Inter-Domain Routing) notations.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "The device UUID of the network interface.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "The IPv4 address.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a network interface.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address of network interface.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network interface.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network ID to which the network interface is associated.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The network interface ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the network interface is associated.\n"
                    },
                    "security": {
                        "type": "boolean",
                        "description": "The Network Interface Security. If set to false, then no security groups will apply to this network interface.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of security group UUIDs. If security is set to false, setting this field will lead to an error.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of network interface. Some of the possible values are: Supported values are: `server`, `metadata`, `gateway`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedAddresses",
                    "device",
                    "id",
                    "ipv4",
                    "labels",
                    "mac",
                    "name",
                    "networkId",
                    "networkInterfaceId",
                    "projectId",
                    "security",
                    "securityGroupIds",
                    "type"
                ]
            }
        },
        "stackit:index/getObjectstorageBucket:getObjectstorageBucket": {
            "description": "ObjectStorage bucket data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_objectstorage_bucket\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-name\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectstorageBucket.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The bucket name. It must be DNS conform.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the bucket is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectstorageBucket.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The bucket name. It must be DNS conform.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the bucket is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "urlPathStyle": {
                        "type": "string"
                    },
                    "urlVirtualHostedStyle": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "projectId",
                    "urlPathStyle",
                    "urlVirtualHostedStyle"
                ]
            }
        },
        "stackit:index/getObjectstorageCredential:getObjectstorageCredential": {
            "description": "ObjectStorage credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_objectstorage_credential\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credentials_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectstorageCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential ID.\n"
                    },
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credential group ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the credential group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "credentialsGroupId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectstorageCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential ID.\n"
                    },
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credential group ID.\n"
                    },
                    "expirationTimestamp": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the credential group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "credentialsGroupId",
                    "expirationTimestamp",
                    "id",
                    "name",
                    "projectId"
                ]
            }
        },
        "stackit:index/getObjectstorageCredentialsGroup:getObjectstorageCredentialsGroup": {
            "description": "ObjectStorage credentials group data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_objectstorage_credentials_group\" \"example\" {\n  project_id           = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credentials_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectstorageCredentialsGroup.\n",
                "properties": {
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credentials group ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Object Storage Project ID to which the credentials group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialsGroupId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectstorageCredentialsGroup.\n",
                "properties": {
                    "credentialsGroupId": {
                        "type": "string",
                        "description": "The credentials group ID.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The credentials group's display name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Object Storage Project ID to which the credentials group is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "urn": {
                        "type": "string",
                        "description": "Credentials group uniform resource name (URN)\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialsGroupId",
                    "id",
                    "name",
                    "projectId",
                    "urn"
                ]
            }
        },
        "stackit:index/getObservabilityAlertgroup:getObservabilityAlertgroup": {
            "description": "Observability alert group datasource schema. Used to create alerts based on metrics (Thanos). Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_observability_alertgroup\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"example-alert-group\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObservabilityAlertgroup.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the alert group is associated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the alert group is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObservabilityAlertgroup.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the alert group is associated.\n"
                    },
                    "interval": {
                        "type": "string",
                        "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the alert group is associated.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getObservabilityAlertgroupRule:getObservabilityAlertgroupRule"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "instanceId",
                    "interval",
                    "name",
                    "projectId",
                    "rules"
                ]
            }
        },
        "stackit:index/getObservabilityInstance:getObservabilityInstance": {
            "description": "Observability instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_observability_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObservabilityInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The Observability instance ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObservabilityInstance.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for this instance. Each entry is an IP address range that is permitted to access, in CIDR notation.\n"
                    },
                    "alertConfig": {
                        "$ref": "#/types/stackit:index/getObservabilityInstanceAlertConfig:getObservabilityInstanceAlertConfig",
                        "description": "Alert configuration for the instance.\n"
                    },
                    "alertingUrl": {
                        "type": "string",
                        "description": "Specifies Alerting URL.\n"
                    },
                    "dashboardUrl": {
                        "type": "string",
                        "description": "Specifies Observability instance dashboard URL.\n"
                    },
                    "grafanaInitialAdminPassword": {
                        "type": "string",
                        "description": "Specifies an initial Grafana admin password.\n",
                        "secret": true
                    },
                    "grafanaInitialAdminUser": {
                        "type": "string",
                        "description": "Specifies an initial Grafana admin username.\n"
                    },
                    "grafanaPublicReadAccess": {
                        "type": "boolean",
                        "description": "If true, anyone can access Grafana dashboards without logging in.\n"
                    },
                    "grafanaUrl": {
                        "type": "string",
                        "description": "Specifies Grafana URL.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Observability instance ID.\n"
                    },
                    "isUpdatable": {
                        "type": "boolean",
                        "description": "Specifies if the instance can be updated.\n"
                    },
                    "jaegerTracesUrl": {
                        "type": "string"
                    },
                    "jaegerUiUrl": {
                        "type": "string"
                    },
                    "logsPushUrl": {
                        "type": "string",
                        "description": "Specifies URL for pushing logs.\n"
                    },
                    "logsUrl": {
                        "type": "string",
                        "description": "Specifies Logs URL.\n"
                    },
                    "metricsPushUrl": {
                        "type": "string",
                        "description": "Specifies URL for pushing metrics.\n"
                    },
                    "metricsRetentionDays": {
                        "type": "integer",
                        "description": "Specifies for how many days the raw metrics are kept. Default is set to `90`.\n"
                    },
                    "metricsRetentionDays1hDownsampling": {
                        "type": "integer",
                        "description": "Specifies for how many days the 1h downsampled metrics are kept. must be less than the value of the 5m downsampling retention. Default is set to `90`.\n"
                    },
                    "metricsRetentionDays5mDownsampling": {
                        "type": "integer",
                        "description": "Specifies for how many days the 5m downsampled metrics are kept. must be less than the value of the general retention. Default is set to `90`.\n"
                    },
                    "metricsUrl": {
                        "type": "string",
                        "description": "Specifies metrics URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Observability instance.\n"
                    },
                    "otlpTracesUrl": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Additional parameters.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The Observability plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "Specifies the Observability plan. E.g. `Observability-Monitoring-Medium-EU01`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "targetsUrl": {
                        "type": "string",
                        "description": "Specifies Targets URL.\n"
                    },
                    "zipkinSpansUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "alertConfig",
                    "alertingUrl",
                    "dashboardUrl",
                    "grafanaInitialAdminPassword",
                    "grafanaInitialAdminUser",
                    "grafanaPublicReadAccess",
                    "grafanaUrl",
                    "id",
                    "instanceId",
                    "isUpdatable",
                    "jaegerTracesUrl",
                    "jaegerUiUrl",
                    "logsPushUrl",
                    "logsUrl",
                    "metricsPushUrl",
                    "metricsRetentionDays",
                    "metricsRetentionDays1hDownsampling",
                    "metricsRetentionDays5mDownsampling",
                    "metricsUrl",
                    "name",
                    "otlpTracesUrl",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "targetsUrl",
                    "zipkinSpansUrl"
                ]
            }
        },
        "stackit:index/getObservabilityLogalertgroup:getObservabilityLogalertgroup": {
            "description": "Observability log alert group datasource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_observability_logalertgroup\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"example-log-alert-group\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObservabilityLogalertgroup.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the log alert group is associated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the log alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the log alert group is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObservabilityLogalertgroup.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the log alert group is associated.\n"
                    },
                    "interval": {
                        "type": "string",
                        "description": "Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the log alert group. Is the identifier and must be unique in the group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the log alert group is associated.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getObservabilityLogalertgroupRule:getObservabilityLogalertgroupRule"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "instanceId",
                    "interval",
                    "name",
                    "projectId",
                    "rules"
                ]
            }
        },
        "stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig": {
            "description": "Observability scrape config data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_observability_scrapeconfig\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name        = \"example\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObservabilityScrapeconfig.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the scraping job is associated.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the scraping job\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the scraping job is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObservabilityScrapeconfig.\n",
                "properties": {
                    "basicAuth": {
                        "$ref": "#/types/stackit:index/getObservabilityScrapeconfigBasicAuth:getObservabilityScrapeconfigBasicAuth",
                        "description": "A basic authentication block.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Observability instance ID to which the scraping job is associated.\n"
                    },
                    "metricsPath": {
                        "type": "string",
                        "description": "Specifies the job scraping url path.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the scraping job\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the scraping job is associated.\n"
                    },
                    "saml2": {
                        "$ref": "#/types/stackit:index/getObservabilityScrapeconfigSaml2:getObservabilityScrapeconfigSaml2",
                        "description": "A SAML2 configuration block.\n"
                    },
                    "sampleLimit": {
                        "type": "integer",
                        "description": "Specifies the scrape sample limit.\n"
                    },
                    "scheme": {
                        "type": "string",
                        "description": "Specifies the http scheme.\n"
                    },
                    "scrapeInterval": {
                        "type": "string",
                        "description": "Specifies the scrape interval as duration string.\n"
                    },
                    "scrapeTimeout": {
                        "type": "string",
                        "description": "Specifies the scrape timeout as duration string.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getObservabilityScrapeconfigTarget:getObservabilityScrapeconfigTarget"
                        },
                        "description": "The targets list (specified by the static config).\n"
                    }
                },
                "type": "object",
                "required": [
                    "basicAuth",
                    "id",
                    "instanceId",
                    "metricsPath",
                    "name",
                    "projectId",
                    "saml2",
                    "sampleLimit",
                    "scheme",
                    "scrapeInterval",
                    "scrapeTimeout",
                    "targets"
                ]
            }
        },
        "stackit:index/getOpensearchCredential:getOpensearchCredential": {
            "description": "OpenSearch credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_opensearch_credential\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOpensearchCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOpensearchCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "host",
                    "hosts",
                    "id",
                    "instanceId",
                    "password",
                    "port",
                    "projectId",
                    "scheme",
                    "uri",
                    "username"
                ]
            }
        },
        "stackit:index/getOpensearchInstance:getOpensearchInstance": {
            "description": "OpenSearch instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_opensearch_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOpensearchInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOpensearchInstance.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the OpenSearch instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/getOpensearchInstanceParameters:getOpensearchInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cfGuid",
                    "cfOrganizationGuid",
                    "cfSpaceGuid",
                    "dashboardUrl",
                    "id",
                    "imageUrl",
                    "instanceId",
                    "name",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "version"
                ]
            }
        },
        "stackit:index/getPostgresflexDatabase:getPostgresflexDatabase": {
            "description": "Postgres Flex database resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_postgresflex_database\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  database_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPostgresflexDatabase.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "Database ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Postgres Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPostgresflexDatabase.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "Database ID.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Postgres Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database name.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Username of the database owner.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "id",
                    "instanceId",
                    "name",
                    "owner",
                    "projectId"
                ]
            }
        },
        "stackit:index/getPostgresflexInstance:getPostgresflexInstance": {
            "description": "Postgres Flex instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_postgresflex_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPostgresflexInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPostgresflexInstance.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the PostgresFlex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/getPostgresflexInstanceFlavor:getPostgresflexInstanceFlavor"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/getPostgresflexInstanceStorage:getPostgresflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "backupSchedule",
                    "flavor",
                    "id",
                    "instanceId",
                    "name",
                    "projectId",
                    "replicas",
                    "storage",
                    "version"
                ]
            }
        },
        "stackit:index/getPostgresflexUser:getPostgresflexUser": {
            "description": "Postgres Flex user data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_postgresflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  user_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPostgresflexUser.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPostgresflexUser.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the PostgresFlex instance.\n"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "id",
                    "instanceId",
                    "port",
                    "projectId",
                    "roles",
                    "userId",
                    "username"
                ]
            }
        },
        "stackit:index/getPublicIp:getPublicIp": {
            "description": "Public IP resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_public_ip\" \"example\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  public_ip_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPublicIp.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the public IP is associated.\n"
                    },
                    "publicIpId": {
                        "type": "string",
                        "description": "The public IP ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "publicIpId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPublicIp.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "Associates the public IP with a network interface or a virtual IP (ID).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the public IP is associated.\n"
                    },
                    "publicIpId": {
                        "type": "string",
                        "description": "The public IP ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ip",
                    "labels",
                    "networkInterfaceId",
                    "projectId",
                    "publicIpId"
                ]
            }
        },
        "stackit:index/getPublicIpRanges:getPublicIpRanges": {
            "description": "A list of all public IP ranges that STACKIT uses.\n\n## Example Usage\n\n```terraform\ndata \"stackit_public_ip_ranges\" \"example\" {}\n```\n",
            "outputs": {
                "description": "A collection of values returned by getPublicIpRanges.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "publicIpRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getPublicIpRangesPublicIpRange:getPublicIpRangesPublicIpRange"
                        },
                        "description": "A list of all public IP ranges.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "publicIpRanges"
                ]
            }
        },
        "stackit:index/getRabbitmqCredential:getRabbitmqCredential": {
            "description": "RabbitMQ credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_rabbitmq_credential\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRabbitmqCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRabbitmqCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "httpApiUri": {
                        "type": "string"
                    },
                    "httpApiUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "management": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "secret": true
                    },
                    "uris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "host",
                    "hosts",
                    "httpApiUri",
                    "httpApiUris",
                    "id",
                    "instanceId",
                    "management",
                    "password",
                    "port",
                    "projectId",
                    "uri",
                    "uris",
                    "username"
                ]
            }
        },
        "stackit:index/getRabbitmqInstance:getRabbitmqInstance": {
            "description": "RabbitMQ instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_rabbitmq_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRabbitmqInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRabbitmqInstance.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the RabbitMQ instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/getRabbitmqInstanceParameters:getRabbitmqInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cfGuid",
                    "cfOrganizationGuid",
                    "cfSpaceGuid",
                    "dashboardUrl",
                    "id",
                    "imageUrl",
                    "instanceId",
                    "name",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "version"
                ]
            }
        },
        "stackit:index/getRedisCredential:getRedisCredential": {
            "description": "Redis credential data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_redis_credential\" \"example\" {\n  project_id    = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  credential_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRedisCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRedisCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "string",
                        "description": "The credential's ID.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "loadBalancedHost": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "Connection URI.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "host",
                    "hosts",
                    "id",
                    "instanceId",
                    "loadBalancedHost",
                    "password",
                    "port",
                    "projectId",
                    "uri",
                    "username"
                ]
            }
        },
        "stackit:index/getRedisInstance:getRedisInstance": {
            "description": "Redis instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_redis_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRedisInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRedisInstance.\n",
                "properties": {
                    "cfGuid": {
                        "type": "string"
                    },
                    "cfOrganizationGuid": {
                        "type": "string"
                    },
                    "cfSpaceGuid": {
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Redis instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/stackit:index/getRedisInstanceParameters:getRedisInstanceParameters"
                    },
                    "planId": {
                        "type": "string",
                        "description": "The selected plan ID.\n"
                    },
                    "planName": {
                        "type": "string",
                        "description": "The selected plan name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cfGuid",
                    "cfOrganizationGuid",
                    "cfSpaceGuid",
                    "dashboardUrl",
                    "id",
                    "imageUrl",
                    "instanceId",
                    "name",
                    "parameters",
                    "planId",
                    "planName",
                    "projectId",
                    "version"
                ]
            }
        },
        "stackit:index/getResourcemanagerProject:getResourcemanagerProject": {
            "description": "Resource Manager project data source schema. To identify the project, you need to provider either project_id or container_id. If you provide both, project_id will be used.\n\n## Example Usage\n\n```terraform\ndata \"stackit_resourcemanager_project\" \"example\" {\n  project_id   = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  container_id = \"example-container-abc123\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourcemanagerProject.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "Project container ID. Globally unique, user-friendly identifier.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourcemanagerProject.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "Project container ID. Globally unique, user-friendly identifier.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container. A label key must match the regex [A-ZÄÜÖa-zäüöß0-9*-]{1,64}. A label value must match the regex ^$|[A-ZÄÜÖa-zäüöß0-9*-]{1,64}\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name.\n"
                    },
                    "parentContainerId": {
                        "type": "string",
                        "description": "Parent resource identifier. Both container ID (user-friendly) and UUID are supported\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project UUID identifier. This is the ID that can be used in most of the other resources to identify the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "labels",
                    "name",
                    "parentContainerId"
                ]
            }
        },
        "stackit:index/getRoutingTable:getRoutingTable": {
            "description": "Routing table datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\ndata \"stackit_routing_table\" \"example\" {\n  organization_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  routing_table_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoutingTable.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "organizationId",
                    "routingTableId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoutingTable.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the routing table was created\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "When true this is the default routing table for this network area. It can't be deleted and is used if the user does not specify it otherwise.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the routing table.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the routing table.\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    },
                    "systemRoutes": {
                        "type": "boolean",
                        "description": "This controls whether the routes for project-to-project communication are created automatically or not.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the routing table was updated\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "default",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "networkAreaId",
                    "organizationId",
                    "routingTableId",
                    "systemRoutes",
                    "updatedAt"
                ]
            }
        },
        "stackit:index/getRoutingTableRoute:getRoutingTableRoute": {
            "description": "Routing table route datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\ndata \"stackit_routing_table_route\" \"example\" {\n  organization_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  routing_table_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  route_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoutingTableRoute.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routeId": {
                        "type": "string",
                        "description": "Route ID.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "organizationId",
                    "routeId",
                    "routingTableId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoutingTableRoute.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the route was created\n"
                    },
                    "destination": {
                        "$ref": "#/types/stackit:index/getRoutingTableRouteDestination:getRoutingTableRouteDestination",
                        "description": "Destination of the route.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "nextHop": {
                        "$ref": "#/types/stackit:index/getRoutingTableRouteNextHop:getRoutingTableRouteNextHop",
                        "description": "Next hop destination.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "routeId": {
                        "type": "string",
                        "description": "Route ID.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the route was updated\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "destination",
                    "id",
                    "labels",
                    "networkAreaId",
                    "nextHop",
                    "organizationId",
                    "routeId",
                    "routingTableId",
                    "updatedAt"
                ]
            }
        },
        "stackit:index/getRoutingTableRoutes:getRoutingTableRoutes": {
            "description": "Routing table routes datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\ndata \"stackit_routing_table_routes\" \"example\" {\n  organization_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  routing_table_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoutingTableRoutes.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The datasource region. If not defined, the provider region is used.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "organizationId",
                    "routingTableId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoutingTableRoutes.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The datasource region. If not defined, the provider region is used.\n"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getRoutingTableRoutesRoute:getRoutingTableRoutesRoute"
                        },
                        "description": "List of routes.\n"
                    },
                    "routingTableId": {
                        "type": "string",
                        "description": "The routing tables ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "networkAreaId",
                    "organizationId",
                    "routes",
                    "routingTableId"
                ]
            }
        },
        "stackit:index/getRoutingTables:getRoutingTables": {
            "description": "Routing table datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is part of the routing-tables experiment and is likely going to undergo significant changes or be removed in the future. Use it at your own discretion.\n\n## Example Usage\n\n```terraform\ndata \"stackit_routing_tables\" \"example\" {\n  organization_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  network_area_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoutingTables.\n",
                "properties": {
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAreaId",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoutingTables.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getRoutingTablesItem:getRoutingTablesItem"
                        },
                        "description": "List of routing tables.\n"
                    },
                    "networkAreaId": {
                        "type": "string",
                        "description": "The network area ID to which the routing table is associated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "STACKIT organization ID to which the routing table is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "items",
                    "networkAreaId",
                    "organizationId"
                ]
            }
        },
        "stackit:index/getSecretsmanagerInstance:getSecretsmanagerInstance": {
            "description": "Secrets Manager instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_secretsmanager_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretsmanagerInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretsmanagerInstance.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for this instance. Each entry is an IP or IP range that is permitted to access, in CIDR notation\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "id",
                    "instanceId",
                    "name",
                    "projectId"
                ]
            }
        },
        "stackit:index/getSecretsmanagerUser:getSecretsmanagerUser": {
            "description": "Secrets Manager user data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_secretsmanager_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  user_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretsmanagerUser.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretsmanagerUser.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A user chosen description to differentiate between multiple users. Can't be changed after creation.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Secrets Manager instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the instance is associated.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user's ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An auto-generated user name.\n"
                    },
                    "writeEnabled": {
                        "type": "boolean",
                        "description": "If true, the user has writeaccess to the secrets engine.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "instanceId",
                    "projectId",
                    "userId",
                    "username",
                    "writeEnabled"
                ]
            }
        },
        "stackit:index/getSecurityGroup:getSecurityGroup": {
            "description": "Security group datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_security_group\" \"example\" {\n  project_id        = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  security_group_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group is associated.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "securityGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group is associated.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "Configures if a security group is stateful or stateless. There can only be one type of security groups per network interface/server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "labels",
                    "name",
                    "projectId",
                    "securityGroupId",
                    "stateful"
                ]
            }
        },
        "stackit:index/getSecurityGroupRule:getSecurityGroupRule": {
            "description": "Security group datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_security_group_rule\" \"example\" {\n  project_id             = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  security_group_id      = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  security_group_rule_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroupRule.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group rule is associated.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    },
                    "securityGroupRuleId": {
                        "type": "string",
                        "description": "The security group rule ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "securityGroupId",
                    "securityGroupRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroupRule.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction of the traffic which the rule should match. Some of the possible values are: Supported values are: `ingress`, `egress`.\n"
                    },
                    "etherType": {
                        "type": "string",
                        "description": "The ethertype which the rule should match.\n"
                    },
                    "icmpParameters": {
                        "$ref": "#/types/stackit:index/getSecurityGroupRuleIcmpParameters:getSecurityGroupRuleIcmpParameters",
                        "description": "ICMP Parameters.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "The remote IP range which the rule should match.\n"
                    },
                    "portRange": {
                        "$ref": "#/types/stackit:index/getSecurityGroupRulePortRange:getSecurityGroupRulePortRange",
                        "description": "The range of ports.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the security group rule is associated.\n"
                    },
                    "protocol": {
                        "$ref": "#/types/stackit:index/getSecurityGroupRuleProtocol:getSecurityGroupRuleProtocol",
                        "description": "The internet protocol which the rule should match.\n"
                    },
                    "remoteSecurityGroupId": {
                        "type": "string",
                        "description": "The remote security group which the rule should match.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group ID.\n"
                    },
                    "securityGroupRuleId": {
                        "type": "string",
                        "description": "The security group rule ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "direction",
                    "etherType",
                    "icmpParameters",
                    "id",
                    "ipRange",
                    "portRange",
                    "projectId",
                    "protocol",
                    "remoteSecurityGroupId",
                    "securityGroupId",
                    "securityGroupRuleId"
                ]
            }
        },
        "stackit:index/getServer:getServer": {
            "description": "Server datasource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_server\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the server is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "affinityGroup": {
                        "type": "string",
                        "description": "The affinity group the server is assigned to.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "The availability zone of the server.\n"
                    },
                    "bootVolume": {
                        "$ref": "#/types/stackit:index/getServerBootVolume:getServerBootVolume",
                        "description": "The boot volume for the server\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date-time when the server was created\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image ID to be used for an ephemeral disk on the server.\n"
                    },
                    "keypairName": {
                        "type": "string",
                        "description": "The name of the keypair used during server creation.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "launchedAt": {
                        "type": "string",
                        "description": "Date-time when the server was launched\n"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "Name of the type of the machine for the server. Possible values are documented in [Virtual machine flavors](https://docs.stackit.cloud/stackit/en/virtual-machine-flavors-75137231.html)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of network interfaces which should be attached to the server. Updating it will recreate the server.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the server is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date-time when the server was updated\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "User data that is passed via cloud-init to the server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "affinityGroup",
                    "availabilityZone",
                    "bootVolume",
                    "createdAt",
                    "id",
                    "imageId",
                    "keypairName",
                    "labels",
                    "launchedAt",
                    "machineType",
                    "name",
                    "networkInterfaces",
                    "projectId",
                    "serverId",
                    "updatedAt",
                    "userData"
                ]
            }
        },
        "stackit:index/getServerBackupSchedule:getServerBackupSchedule": {
            "description": "Server backup schedule datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_server_backup_schedule\" \"example\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id          = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  backup_schedule_id = xxxxx\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerBackupSchedule.\n",
                "properties": {
                    "backupScheduleId": {
                        "type": "integer",
                        "description": "Backup schedule ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the backup schedule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backupScheduleId",
                    "projectId",
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerBackupSchedule.\n",
                "properties": {
                    "backupProperties": {
                        "$ref": "#/types/stackit:index/getServerBackupScheduleBackupProperties:getServerBackupScheduleBackupProperties",
                        "description": "Backup schedule details for the backups.\n"
                    },
                    "backupScheduleId": {
                        "type": "integer",
                        "description": "Backup schedule ID.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the backup schedule enabled or disabled.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "Backup schedule described in `rrule` (recurrence rule) format.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the backup schedule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backupProperties",
                    "backupScheduleId",
                    "enabled",
                    "id",
                    "name",
                    "projectId",
                    "rrule",
                    "serverId"
                ]
            }
        },
        "stackit:index/getServerBackupSchedules:getServerBackupSchedules": {
            "description": "Server backup schedules datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_server_backup_schedules\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerBackupSchedules.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID (UUID) to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID (UUID) to which the backup schedule is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerBackupSchedules.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getServerBackupSchedulesItem:getServerBackupSchedulesItem"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID (UUID) to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID (UUID) to which the backup schedule is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "items",
                    "projectId",
                    "serverId"
                ]
            }
        },
        "stackit:index/getServerUpdateSchedule:getServerUpdateSchedule": {
            "description": "Server update schedule datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_server_update_schedule\" \"example\" {\n  project_id         = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id          = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  update_schedule_id = xxxxx\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerUpdateSchedule.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the update schedule.\n"
                    },
                    "updateScheduleId": {
                        "type": "integer",
                        "description": "Update schedule ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "serverId",
                    "updateScheduleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerUpdateSchedule.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the update schedule enabled or disabled.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "maintenanceWindow": {
                        "type": "integer",
                        "description": "Maintenance window [1..24].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "rrule": {
                        "type": "string",
                        "description": "Update schedule described in `rrule` (recurrence rule) format.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID for the update schedule.\n"
                    },
                    "updateScheduleId": {
                        "type": "integer",
                        "description": "Update schedule ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "id",
                    "maintenanceWindow",
                    "name",
                    "projectId",
                    "rrule",
                    "serverId",
                    "updateScheduleId"
                ]
            }
        },
        "stackit:index/getServerUpdateSchedules:getServerUpdateSchedules": {
            "description": "Server update schedules datasource schema. Must have a `region` specified in the provider configuration.\n\n\u003e This datasource is in beta and may be subject to breaking changes in the future. Use with caution. See our guide for how to opt-in to use beta resources.\n\n## Example Usage\n\n```terraform\ndata \"stackit_server_update_schedules\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  server_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerUpdateSchedules.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID (UUID) to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID (UUID) to which the update schedule is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerUpdateSchedules.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getServerUpdateSchedulesItem:getServerUpdateSchedulesItem"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT Project ID (UUID) to which the server is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "Server ID (UUID) to which the update schedule is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "items",
                    "projectId",
                    "serverId"
                ]
            }
        },
        "stackit:index/getServiceAccount:getServiceAccount": {
            "description": "Service account data source schema.\n\n## Example Usage\n\n```terraform\ndata \"stackit_service_account\" \"sa\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  email      = \"sa01-8565oq1@sa.stackit.cloud\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email of the service account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the service account is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email of the service account.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the service account is associated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id",
                    "name",
                    "projectId"
                ]
            }
        },
        "stackit:index/getSkeCluster:getSkeCluster": {
            "description": "SKE Cluster data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_ske_cluster\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  name       = \"example-name\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSkeCluster.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The cluster name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the cluster is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSkeCluster.\n",
                "properties": {
                    "egressAddressRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The outgoing network ranges (in CIDR notation) of traffic originating from workload on the cluster.\n"
                    },
                    "extensions": {
                        "$ref": "#/types/stackit:index/getSkeClusterExtensions:getSkeClusterExtensions",
                        "description": "A single extensions block as defined below\n"
                    },
                    "hibernations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getSkeClusterHibernation:getSkeClusterHibernation"
                        },
                        "description": "One or more hibernation block as defined below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kubernetesVersionMin": {
                        "type": "string",
                        "description": "The minimum Kubernetes version, this field is always nil. SKE automatically updates the cluster Kubernetes version if you have set `maintenance.enable_kubernetes_version_updates` to true or if there is a mandatory update, as described in [Updates for Kubernetes versions and Operating System versions in SKE](https://docs.stackit.cloud/stackit/en/version-updates-in-ske-10125631.html). To get the current kubernetes version being used for your cluster, use the `kubernetes_version_used` field.\n"
                    },
                    "kubernetesVersionUsed": {
                        "type": "string",
                        "description": "Full Kubernetes version used. For example, if `1.22` was selected, this value may result to `1.22.15`\n"
                    },
                    "maintenance": {
                        "$ref": "#/types/stackit:index/getSkeClusterMaintenance:getSkeClusterMaintenance",
                        "description": "A single maintenance block as defined below\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name.\n"
                    },
                    "network": {
                        "$ref": "#/types/stackit:index/getSkeClusterNetwork:getSkeClusterNetwork",
                        "description": "Network block as defined below.\n"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/stackit:index/getSkeClusterNodePool:getSkeClusterNodePool"
                        },
                        "description": "One or more `node_pool` block as defined below.\n"
                    },
                    "podAddressRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The network ranges (in CIDR notation) used by pods of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the cluster is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "egressAddressRanges",
                    "extensions",
                    "hibernations",
                    "id",
                    "kubernetesVersionMin",
                    "kubernetesVersionUsed",
                    "maintenance",
                    "name",
                    "network",
                    "nodePools",
                    "podAddressRanges",
                    "projectId"
                ]
            }
        },
        "stackit:index/getSqlserverflexInstance:getSqlserverflexInstance": {
            "description": "SQLServer Flex instance data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_sqlserverflex_instance\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSqlserverflexInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSqlserverflexInstance.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Access Control List (ACL) for the SQLServer Flex instance.\n"
                    },
                    "backupSchedule": {
                        "type": "string",
                        "description": "The backup schedule. Should follow the cron scheduling system format (e.g. \"0 0 * * *\").\n"
                    },
                    "flavor": {
                        "$ref": "#/types/stackit:index/getSqlserverflexInstanceFlavor:getSqlserverflexInstanceFlavor"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "options": {
                        "$ref": "#/types/stackit:index/getSqlserverflexInstanceOptions:getSqlserverflexInstanceOptions",
                        "description": "Custom parameters for the SQLServer Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "replicas": {
                        "type": "integer"
                    },
                    "storage": {
                        "$ref": "#/types/stackit:index/getSqlserverflexInstanceStorage:getSqlserverflexInstanceStorage"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "backupSchedule",
                    "flavor",
                    "id",
                    "instanceId",
                    "name",
                    "options",
                    "projectId",
                    "replicas",
                    "storage",
                    "version"
                ]
            }
        },
        "stackit:index/getSqlserverflexUser:getSqlserverflexUser": {
            "description": "SQLServer Flex user data source schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_sqlserverflex_user\" \"example\" {\n  project_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  instance_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  user_id     = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSqlserverflexUser.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "projectId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSqlserverflexUser.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the SQLServer Flex instance.\n"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the instance is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The resource region. If not defined, the provider region is used.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Database access levels for the user.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the SQLServer Flex instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "id",
                    "instanceId",
                    "port",
                    "projectId",
                    "roles",
                    "userId",
                    "username"
                ]
            }
        },
        "stackit:index/getVolume:getVolume": {
            "description": "Volume resource schema. Must have a `region` specified in the provider configuration.\n\n## Example Usage\n\n```terraform\ndata \"stackit_volume\" \"example\" {\n  project_id = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n  volume_id  = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the volume is associated.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "volumeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "The availability zone of the volume.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the volume.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels are key-value string pairs which can be attached to a resource container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume.\n"
                    },
                    "performanceClass": {
                        "type": "string",
                        "description": "The performance class of the volume. Possible values are documented in [Service plans BlockStorage](https://docs.stackit.cloud/stackit/en/service-plans-blockstorage-75137974.html#ServiceplansBlockStorage-CurrentlyavailableServicePlans%28performanceclasses%29)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "STACKIT project ID to which the volume is associated.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server ID of the server to which the volume is attached to.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the volume in GB. It can only be updated to a larger value than the current size\n"
                    },
                    "source": {
                        "$ref": "#/types/stackit:index/getVolumeSource:getVolumeSource",
                        "description": "The source of the volume. It can be either a volume, an image, a snapshot or a backup\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "availabilityZone",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "performanceClass",
                    "projectId",
                    "serverId",
                    "size",
                    "source",
                    "volumeId"
                ]
            }
        }
    }
}